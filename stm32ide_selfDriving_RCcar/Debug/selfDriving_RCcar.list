
selfDriving_RCcar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aff8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800b198  0800b198  0000c198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2c4  0800b2c4  0000d070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2c4  0800b2c4  0000c2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2cc  0800b2cc  0000d070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2cc  0800b2cc  0000c2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b2d0  0800b2d0  0000c2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800b2d4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005064  20000070  0800b344  0000d070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050d4  0800b344  0000d0d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b973  00000000  00000000  0000d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004085  00000000  00000000  00028a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0002ca98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001175  00000000  00000000  0002e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abeb  00000000  00000000  0002f2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b945  00000000  00000000  00049e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b798  00000000  00000000  000657dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100f75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066d8  00000000  00000000  00100fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00107690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b180 	.word	0x0800b180

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800b180 	.word	0x0800b180

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b96a 	b.w	8000ef8 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	460c      	mov	r4, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14e      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c48:	4694      	mov	ip, r2
 8000c4a:	458c      	cmp	ip, r1
 8000c4c:	4686      	mov	lr, r0
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	d962      	bls.n	8000d1a <__udivmoddi4+0xde>
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	4319      	orrs	r1, r3
 8000c66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f f68c 	uxth.w	r6, ip
 8000c72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb04 f106 	mul.w	r1, r4, r6
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c92:	f080 8112 	bcs.w	8000eba <__udivmoddi4+0x27e>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 810f 	bls.w	8000eba <__udivmoddi4+0x27e>
 8000c9c:	3c02      	subs	r4, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a59      	subs	r1, r3, r1
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000caa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb00 f606 	mul.w	r6, r0, r6
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x94>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc2:	f080 80fc 	bcs.w	8000ebe <__udivmoddi4+0x282>
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	f240 80f9 	bls.w	8000ebe <__udivmoddi4+0x282>
 8000ccc:	4463      	add	r3, ip
 8000cce:	3802      	subs	r0, #2
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa6>
 8000cda:	40d3      	lsrs	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xba>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb4>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d146      	bne.n	8000d8c <__udivmoddi4+0x150>
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xcc>
 8000d02:	4290      	cmp	r0, r2
 8000d04:	f0c0 80f0 	bcc.w	8000ee8 <__udivmoddi4+0x2ac>
 8000d08:	1a86      	subs	r6, r0, r2
 8000d0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d0e6      	beq.n	8000ce2 <__udivmoddi4+0xa6>
 8000d14:	e9c5 6300 	strd	r6, r3, [r5]
 8000d18:	e7e3      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 8090 	bne.w	8000e40 <__udivmoddi4+0x204>
 8000d20:	eba1 040c 	sub.w	r4, r1, ip
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa1f f78c 	uxth.w	r7, ip
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb07 f006 	mul.w	r0, r7, r6
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x11c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x11a>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f200 80cd 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d56:	4626      	mov	r6, r4
 8000d58:	1a1c      	subs	r4, r3, r0
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d62:	fb08 4410 	mls	r4, r8, r0, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb00 f707 	mul.w	r7, r0, r7
 8000d6e:	429f      	cmp	r7, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x148>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x146>
 8000d7c:	429f      	cmp	r7, r3
 8000d7e:	f200 80b0 	bhi.w	8000ee2 <__udivmoddi4+0x2a6>
 8000d82:	4620      	mov	r0, r4
 8000d84:	1bdb      	subs	r3, r3, r7
 8000d86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0x9c>
 8000d8c:	f1c1 0620 	rsb	r6, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 f706 	lsr.w	r7, r2, r6
 8000d96:	431f      	orrs	r7, r3
 8000d98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000da0:	ea43 030c 	orr.w	r3, r3, ip
 8000da4:	40f4      	lsrs	r4, r6
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	0c38      	lsrs	r0, r7, #16
 8000dac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db0:	fbb4 fef0 	udiv	lr, r4, r0
 8000db4:	fa1f fc87 	uxth.w	ip, r7
 8000db8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc4:	45a1      	cmp	r9, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	d90a      	bls.n	8000de2 <__udivmoddi4+0x1a6>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dd2:	f080 8084 	bcs.w	8000ede <__udivmoddi4+0x2a2>
 8000dd6:	45a1      	cmp	r9, r4
 8000dd8:	f240 8081 	bls.w	8000ede <__udivmoddi4+0x2a2>
 8000ddc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	eba4 0409 	sub.w	r4, r4, r9
 8000de6:	fa1f f983 	uxth.w	r9, r3
 8000dea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dee:	fb00 4413 	mls	r4, r0, r3, r4
 8000df2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1d2>
 8000dfe:	193c      	adds	r4, r7, r4
 8000e00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e04:	d267      	bcs.n	8000ed6 <__udivmoddi4+0x29a>
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0x29a>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e12:	fba0 9302 	umull	r9, r3, r0, r2
 8000e16:	eba4 040c 	sub.w	r4, r4, ip
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	46ce      	mov	lr, r9
 8000e1e:	469c      	mov	ip, r3
 8000e20:	d351      	bcc.n	8000ec6 <__udivmoddi4+0x28a>
 8000e22:	d04e      	beq.n	8000ec2 <__udivmoddi4+0x286>
 8000e24:	b155      	cbz	r5, 8000e3c <__udivmoddi4+0x200>
 8000e26:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e32:	40cb      	lsrs	r3, r1
 8000e34:	431e      	orrs	r6, r3
 8000e36:	40cc      	lsrs	r4, r1
 8000e38:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	e750      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f103 	lsr.w	r1, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e50:	4094      	lsls	r4, r2
 8000e52:	430c      	orrs	r4, r1
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e5c:	fa1f f78c 	uxth.w	r7, ip
 8000e60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e64:	fb08 3110 	mls	r1, r8, r0, r3
 8000e68:	0c23      	lsrs	r3, r4, #16
 8000e6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6e:	fb00 f107 	mul.w	r1, r0, r7
 8000e72:	4299      	cmp	r1, r3
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x24c>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7e:	d22c      	bcs.n	8000eda <__udivmoddi4+0x29e>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d92a      	bls.n	8000eda <__udivmoddi4+0x29e>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e90:	fb08 3311 	mls	r3, r8, r1, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb01 f307 	mul.w	r3, r1, r7
 8000e9c:	42a3      	cmp	r3, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x276>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea8:	d213      	bcs.n	8000ed2 <__udivmoddi4+0x296>
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	d911      	bls.n	8000ed2 <__udivmoddi4+0x296>
 8000eae:	3902      	subs	r1, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	1ae4      	subs	r4, r4, r3
 8000eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb8:	e739      	b.n	8000d2e <__udivmoddi4+0xf2>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	e6f0      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e706      	b.n	8000cd0 <__udivmoddi4+0x94>
 8000ec2:	45c8      	cmp	r8, r9
 8000ec4:	d2ae      	bcs.n	8000e24 <__udivmoddi4+0x1e8>
 8000ec6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7a8      	b.n	8000e24 <__udivmoddi4+0x1e8>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	e7ed      	b.n	8000eb2 <__udivmoddi4+0x276>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e799      	b.n	8000e0e <__udivmoddi4+0x1d2>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e7d4      	b.n	8000e88 <__udivmoddi4+0x24c>
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	e77f      	b.n	8000de2 <__udivmoddi4+0x1a6>
 8000ee2:	4463      	add	r3, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e74d      	b.n	8000d84 <__udivmoddi4+0x148>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	4623      	mov	r3, r4
 8000eec:	4608      	mov	r0, r1
 8000eee:	e70f      	b.n	8000d10 <__udivmoddi4+0xd4>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	e730      	b.n	8000d58 <__udivmoddi4+0x11c>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb4 <MX_DMA_Init+0xb8>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8000fb4 <MX_DMA_Init+0xb8>)
 8000f0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f12:	4b28      	ldr	r3, [pc, #160]	@ (8000fb4 <MX_DMA_Init+0xb8>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <MX_DMA_Init+0xb8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	4a23      	ldr	r2, [pc, #140]	@ (8000fb4 <MX_DMA_Init+0xb8>)
 8000f28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2e:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <MX_DMA_Init+0xb8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2105      	movs	r1, #5
 8000f3e:	200b      	movs	r0, #11
 8000f40:	f002 fa70 	bl	8003424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f44:	200b      	movs	r0, #11
 8000f46:	f002 fa89 	bl	800345c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2105      	movs	r1, #5
 8000f4e:	200d      	movs	r0, #13
 8000f50:	f002 fa68 	bl	8003424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f54:	200d      	movs	r0, #13
 8000f56:	f002 fa81 	bl	800345c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	200e      	movs	r0, #14
 8000f60:	f002 fa60 	bl	8003424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f64:	200e      	movs	r0, #14
 8000f66:	f002 fa79 	bl	800345c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2105      	movs	r1, #5
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f002 fa58 	bl	8003424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f74:	200f      	movs	r0, #15
 8000f76:	f002 fa71 	bl	800345c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	2010      	movs	r0, #16
 8000f80:	f002 fa50 	bl	8003424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f84:	2010      	movs	r0, #16
 8000f86:	f002 fa69 	bl	800345c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2105      	movs	r1, #5
 8000f8e:	202f      	movs	r0, #47	@ 0x2f
 8000f90:	f002 fa48 	bl	8003424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000f94:	202f      	movs	r0, #47	@ 0x2f
 8000f96:	f002 fa61 	bl	800345c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2105      	movs	r1, #5
 8000f9e:	203a      	movs	r0, #58	@ 0x3a
 8000fa0:	f002 fa40 	bl	8003424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fa4:	203a      	movs	r0, #58	@ 0x3a
 8000fa6:	f002 fa59 	bl	800345c <HAL_NVIC_EnableIRQ>

}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of auto_drive_task */
  auto_drive_taskHandle = osThreadNew(StartTask_auto_drive, NULL, &auto_drive_task_attributes);
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff0 <MX_FREERTOS_Init+0x38>)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <MX_FREERTOS_Init+0x3c>)
 8000fc2:	f006 fbe7 	bl	8007794 <osThreadNew>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <MX_FREERTOS_Init+0x40>)
 8000fca:	6013      	str	r3, [r2, #0]

  /* creation of get_echo_time */
  get_echo_timeHandle = osThreadNew(StartTask_get_echo_time, NULL, &get_echo_time_attributes);
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000ffc <MX_FREERTOS_Init+0x44>)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	480b      	ldr	r0, [pc, #44]	@ (8001000 <MX_FREERTOS_Init+0x48>)
 8000fd2:	f006 fbdf 	bl	8007794 <osThreadNew>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <MX_FREERTOS_Init+0x4c>)
 8000fda:	6013      	str	r3, [r2, #0]

  /* creation of print_sensor_va */
  print_sensor_vaHandle = osThreadNew(StartTask_print_sensor_value, NULL, &print_sensor_va_attributes);
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <MX_FREERTOS_Init+0x50>)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	480a      	ldr	r0, [pc, #40]	@ (800100c <MX_FREERTOS_Init+0x54>)
 8000fe2:	f006 fbd7 	bl	8007794 <osThreadNew>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a09      	ldr	r2, [pc, #36]	@ (8001010 <MX_FREERTOS_Init+0x58>)
 8000fea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	0800b204 	.word	0x0800b204
 8000ff4:	08001019 	.word	0x08001019
 8000ff8:	2000008c 	.word	0x2000008c
 8000ffc:	0800b228 	.word	0x0800b228
 8001000:	080017a9 	.word	0x080017a9
 8001004:	20000090 	.word	0x20000090
 8001008:	0800b24c 	.word	0x0800b24c
 800100c:	0800195d 	.word	0x0800195d
 8001010:	20000094 	.word	0x20000094
 8001014:	00000000 	.word	0x00000000

08001018 <StartTask_auto_drive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_auto_drive */
void StartTask_auto_drive(void *argument)
{
 8001018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN StartTask_auto_drive */
  osDelay(100);
 8001022:	2064      	movs	r0, #100	@ 0x64
 8001024:	f006 fc48 	bl	80078b8 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	// apply motor values one step later
	if (mode_auto_manu) RCcar_set_motor_speed(left_motor_duty_int, right_motor_duty_int);
 8001028:	4b45      	ldr	r3, [pc, #276]	@ (8001140 <StartTask_auto_drive+0x128>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d009      	beq.n	8001044 <StartTask_auto_drive+0x2c>
 8001030:	4b44      	ldr	r3, [pc, #272]	@ (8001144 <StartTask_auto_drive+0x12c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	b25b      	sxtb	r3, r3
 8001036:	4a44      	ldr	r2, [pc, #272]	@ (8001148 <StartTask_auto_drive+0x130>)
 8001038:	6812      	ldr	r2, [r2, #0]
 800103a:	b252      	sxtb	r2, r2
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f000 feae 	bl	8001da0 <RCcar_set_motor_speed>

	float distance_sensitivity = CONSTANT_CALIBRATION_MAX - (echo_left_time_us + echo_center_time_us + echo_right_time_us) / 3.0 / 2000.0;
 8001044:	4b41      	ldr	r3, [pc, #260]	@ (800114c <StartTask_auto_drive+0x134>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b41      	ldr	r3, [pc, #260]	@ (8001150 <StartTask_auto_drive+0x138>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	441a      	add	r2, r3
 800104e:	4b41      	ldr	r3, [pc, #260]	@ (8001154 <StartTask_auto_drive+0x13c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa65 	bl	8000524 <__aeabi_i2d>
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	4b3e      	ldr	r3, [pc, #248]	@ (8001158 <StartTask_auto_drive+0x140>)
 8001060:	f7ff fbf4 	bl	800084c <__aeabi_ddiv>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	4b3a      	ldr	r3, [pc, #232]	@ (800115c <StartTask_auto_drive+0x144>)
 8001072:	f7ff fbeb 	bl	800084c <__aeabi_ddiv>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	f04f 0000 	mov.w	r0, #0
 800107e:	4938      	ldr	r1, [pc, #224]	@ (8001160 <StartTask_auto_drive+0x148>)
 8001080:	f7ff f902 	bl	8000288 <__aeabi_dsub>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f7ff fd6e 	bl	8000b6c <__aeabi_d2f>
 8001090:	4603      	mov	r3, r0
 8001092:	617b      	str	r3, [r7, #20]
	if (distance_sensitivity > CONSTANT_CALIBRATION_MAX) distance_sensitivity = CONSTANT_CALIBRATION_MAX;
 8001094:	edd7 7a05 	vldr	s15, [r7, #20]
 8001098:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800109c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a4:	dd03      	ble.n	80010ae <StartTask_auto_drive+0x96>
 80010a6:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	e00c      	b.n	80010c8 <StartTask_auto_drive+0xb0>
	else if (distance_sensitivity < CONSTANT_CALIBRATION_MIN) distance_sensitivity = CONSTANT_CALIBRATION_MIN;
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff fa4a 	bl	8000548 <__aeabi_f2d>
 80010b4:	a320      	add	r3, pc, #128	@ (adr r3, 8001138 <StartTask_auto_drive+0x120>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	f7ff fd0f 	bl	8000adc <__aeabi_dcmplt>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <StartTask_auto_drive+0xb0>
 80010c4:	4b27      	ldr	r3, [pc, #156]	@ (8001164 <StartTask_auto_drive+0x14c>)
 80010c6:	617b      	str	r3, [r7, #20]

	float curve_sensitivity = CONSTANT_CALIBRATION_MIN + (echo_left_time_us - echo_right_time_us) / 2000.0;
 80010c8:	4b20      	ldr	r3, [pc, #128]	@ (800114c <StartTask_auto_drive+0x134>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b21      	ldr	r3, [pc, #132]	@ (8001154 <StartTask_auto_drive+0x13c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fa26 	bl	8000524 <__aeabi_i2d>
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <StartTask_auto_drive+0x144>)
 80010de:	f7ff fbb5 	bl	800084c <__aeabi_ddiv>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	a313      	add	r3, pc, #76	@ (adr r3, 8001138 <StartTask_auto_drive+0x120>)
 80010ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f0:	f7ff f8cc 	bl	800028c <__adddf3>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	f7ff fd36 	bl	8000b6c <__aeabi_d2f>
 8001100:	4603      	mov	r3, r0
 8001102:	613b      	str	r3, [r7, #16]
	if (curve_sensitivity < 0) curve_sensitivity *= -1;
 8001104:	edd7 7a04 	vldr	s15, [r7, #16]
 8001108:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	d505      	bpl.n	800111e <StartTask_auto_drive+0x106>
 8001112:	edd7 7a04 	vldr	s15, [r7, #16]
 8001116:	eef1 7a67 	vneg.f32	s15, s15
 800111a:	edc7 7a04 	vstr	s15, [r7, #16]
	if (curve_sensitivity > CONSTANT_CALIBRATION_MAX) curve_sensitivity = CONSTANT_CALIBRATION_MAX;
 800111e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001122:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	dd1b      	ble.n	8001168 <StartTask_auto_drive+0x150>
 8001130:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	e024      	b.n	8001182 <StartTask_auto_drive+0x16a>
 8001138:	cccccccd 	.word	0xcccccccd
 800113c:	3feccccc 	.word	0x3feccccc
 8001140:	200000a8 	.word	0x200000a8
 8001144:	200000f4 	.word	0x200000f4
 8001148:	200000f8 	.word	0x200000f8
 800114c:	2000009c 	.word	0x2000009c
 8001150:	200000a0 	.word	0x200000a0
 8001154:	200000a4 	.word	0x200000a4
 8001158:	40080000 	.word	0x40080000
 800115c:	409f4000 	.word	0x409f4000
 8001160:	3ff80000 	.word	0x3ff80000
 8001164:	3f666666 	.word	0x3f666666
	else if (curve_sensitivity < CONSTANT_CALIBRATION_MIN) curve_sensitivity = CONSTANT_CALIBRATION_MIN;
 8001168:	6938      	ldr	r0, [r7, #16]
 800116a:	f7ff f9ed 	bl	8000548 <__aeabi_f2d>
 800116e:	a3db      	add	r3, pc, #876	@ (adr r3, 80014dc <StartTask_auto_drive+0x4c4>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff fcb2 	bl	8000adc <__aeabi_dcmplt>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <StartTask_auto_drive+0x16a>
 800117e:	4bcc      	ldr	r3, [pc, #816]	@ (80014b0 <StartTask_auto_drive+0x498>)
 8001180:	613b      	str	r3, [r7, #16]

	// and then calculate motor power for next step
	left_motor_duty_float = (   ( (K_SAMESIDE * distance_sensitivity * curve_sensitivity) * ( (float) echo_left_time_us - DIRECTION_THRESHOLD) / MAX_CURVE_SENSOR_VALUE) + \
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff f9e0 	bl	8000548 <__aeabi_f2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4690      	mov	r8, r2
 800118e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001192:	6938      	ldr	r0, [r7, #16]
 8001194:	f7ff f9d8 	bl	8000548 <__aeabi_f2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4640      	mov	r0, r8
 800119e:	4649      	mov	r1, r9
 80011a0:	f7ff fa2a 	bl	80005f8 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4614      	mov	r4, r2
 80011aa:	461d      	mov	r5, r3
 80011ac:	4bc1      	ldr	r3, [pc, #772]	@ (80014b4 <StartTask_auto_drive+0x49c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b8:	ee17 0a90 	vmov	r0, s15
 80011bc:	f7ff f9c4 	bl	8000548 <__aeabi_f2d>
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	4bbc      	ldr	r3, [pc, #752]	@ (80014b8 <StartTask_auto_drive+0x4a0>)
 80011c6:	f7ff f85f 	bl	8000288 <__aeabi_dsub>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4620      	mov	r0, r4
 80011d0:	4629      	mov	r1, r5
 80011d2:	f7ff fa11 	bl	80005f8 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	a3b0      	add	r3, pc, #704	@ (adr r3, 80014a0 <StartTask_auto_drive+0x488>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fb32 	bl	800084c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4614      	mov	r4, r2
 80011ee:	461d      	mov	r5, r3
								(K_CENTER * ( (float) echo_center_time_us - DIRECTION_THRESHOLD) / MAX_STRAIGHT_SENSOR_VALUE) + \
 80011f0:	4bb2      	ldr	r3, [pc, #712]	@ (80014bc <StartTask_auto_drive+0x4a4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011fc:	ee17 0a90 	vmov	r0, s15
 8001200:	f7ff f9a2 	bl	8000548 <__aeabi_f2d>
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	4bab      	ldr	r3, [pc, #684]	@ (80014b8 <StartTask_auto_drive+0x4a0>)
 800120a:	f7ff f83d 	bl	8000288 <__aeabi_dsub>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	a3a4      	add	r3, pc, #656	@ (adr r3, 80014a8 <StartTask_auto_drive+0x490>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff fb16 	bl	800084c <__aeabi_ddiv>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
	left_motor_duty_float = (   ( (K_SAMESIDE * distance_sensitivity * curve_sensitivity) * ( (float) echo_left_time_us - DIRECTION_THRESHOLD) / MAX_CURVE_SENSOR_VALUE) + \
 8001224:	4620      	mov	r0, r4
 8001226:	4629      	mov	r1, r5
 8001228:	f7ff f830 	bl	800028c <__adddf3>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	e9c7 2300 	strd	r2, r3, [r7]
								( (K_OPPSIDE * distance_sensitivity * curve_sensitivity) * ( (float) echo_right_time_us - DIRECTION_THRESHOLD) / MAX_CURVE_SENSOR_VALUE ) )  \
 8001234:	6978      	ldr	r0, [r7, #20]
 8001236:	f7ff f987 	bl	8000548 <__aeabi_f2d>
 800123a:	4604      	mov	r4, r0
 800123c:	460d      	mov	r5, r1
 800123e:	6938      	ldr	r0, [r7, #16]
 8001240:	f7ff f982 	bl	8000548 <__aeabi_f2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4620      	mov	r0, r4
 800124a:	4629      	mov	r1, r5
 800124c:	f7ff f9d4 	bl	80005f8 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4614      	mov	r4, r2
 8001256:	461d      	mov	r5, r3
 8001258:	4b99      	ldr	r3, [pc, #612]	@ (80014c0 <StartTask_auto_drive+0x4a8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001264:	ee17 0a90 	vmov	r0, s15
 8001268:	f7ff f96e 	bl	8000548 <__aeabi_f2d>
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4b91      	ldr	r3, [pc, #580]	@ (80014b8 <StartTask_auto_drive+0x4a0>)
 8001272:	f7ff f809 	bl	8000288 <__aeabi_dsub>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4620      	mov	r0, r4
 800127c:	4629      	mov	r1, r5
 800127e:	f7ff f9bb 	bl	80005f8 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	a385      	add	r3, pc, #532	@ (adr r3, 80014a0 <StartTask_auto_drive+0x488>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f7ff fadc 	bl	800084c <__aeabi_ddiv>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
								(K_CENTER * ( (float) echo_center_time_us - DIRECTION_THRESHOLD) / MAX_STRAIGHT_SENSOR_VALUE) + \
 8001298:	e9d7 0100 	ldrd	r0, r1, [r7]
 800129c:	f7fe fff6 	bl	800028c <__adddf3>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
								 / 3 * 100;
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	4b85      	ldr	r3, [pc, #532]	@ (80014c4 <StartTask_auto_drive+0x4ac>)
 80012ae:	f7ff facd 	bl	800084c <__aeabi_ddiv>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b82      	ldr	r3, [pc, #520]	@ (80014c8 <StartTask_auto_drive+0x4b0>)
 80012c0:	f7ff f99a 	bl	80005f8 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fc4e 	bl	8000b6c <__aeabi_d2f>
 80012d0:	4603      	mov	r3, r0
	left_motor_duty_float = (   ( (K_SAMESIDE * distance_sensitivity * curve_sensitivity) * ( (float) echo_left_time_us - DIRECTION_THRESHOLD) / MAX_CURVE_SENSOR_VALUE) + \
 80012d2:	4a7e      	ldr	r2, [pc, #504]	@ (80014cc <StartTask_auto_drive+0x4b4>)
 80012d4:	6013      	str	r3, [r2, #0]

	right_motor_duty_float = (  ( (K_SAMESIDE * distance_sensitivity * curve_sensitivity) * ( (float) echo_right_time_us - DIRECTION_THRESHOLD) / MAX_CURVE_SENSOR_VALUE)+ \
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f7ff f936 	bl	8000548 <__aeabi_f2d>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4692      	mov	sl, r2
 80012e2:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80012e6:	6938      	ldr	r0, [r7, #16]
 80012e8:	f7ff f92e 	bl	8000548 <__aeabi_f2d>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4650      	mov	r0, sl
 80012f2:	4659      	mov	r1, fp
 80012f4:	f7ff f980 	bl	80005f8 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4614      	mov	r4, r2
 80012fe:	461d      	mov	r5, r3
 8001300:	4b6f      	ldr	r3, [pc, #444]	@ (80014c0 <StartTask_auto_drive+0x4a8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130c:	ee17 0a90 	vmov	r0, s15
 8001310:	f7ff f91a 	bl	8000548 <__aeabi_f2d>
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b67      	ldr	r3, [pc, #412]	@ (80014b8 <StartTask_auto_drive+0x4a0>)
 800131a:	f7fe ffb5 	bl	8000288 <__aeabi_dsub>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7ff f967 	bl	80005f8 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	a35b      	add	r3, pc, #364	@ (adr r3, 80014a0 <StartTask_auto_drive+0x488>)
 8001334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001338:	f7ff fa88 	bl	800084c <__aeabi_ddiv>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4614      	mov	r4, r2
 8001342:	461d      	mov	r5, r3
								(K_CENTER * ( (float) echo_center_time_us - DIRECTION_THRESHOLD) / MAX_STRAIGHT_SENSOR_VALUE)+ \
 8001344:	4b5d      	ldr	r3, [pc, #372]	@ (80014bc <StartTask_auto_drive+0x4a4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001350:	ee17 0a90 	vmov	r0, s15
 8001354:	f7ff f8f8 	bl	8000548 <__aeabi_f2d>
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	4b56      	ldr	r3, [pc, #344]	@ (80014b8 <StartTask_auto_drive+0x4a0>)
 800135e:	f7fe ff93 	bl	8000288 <__aeabi_dsub>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	a34f      	add	r3, pc, #316	@ (adr r3, 80014a8 <StartTask_auto_drive+0x490>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff fa6c 	bl	800084c <__aeabi_ddiv>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
	right_motor_duty_float = (  ( (K_SAMESIDE * distance_sensitivity * curve_sensitivity) * ( (float) echo_right_time_us - DIRECTION_THRESHOLD) / MAX_CURVE_SENSOR_VALUE)+ \
 8001378:	4620      	mov	r0, r4
 800137a:	4629      	mov	r1, r5
 800137c:	f7fe ff86 	bl	800028c <__adddf3>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	e9c7 2300 	strd	r2, r3, [r7]
								( (K_OPPSIDE * distance_sensitivity * curve_sensitivity) * ( (float) echo_left_time_us - DIRECTION_THRESHOLD) / MAX_CURVE_SENSOR_VALUE )) \
 8001388:	6978      	ldr	r0, [r7, #20]
 800138a:	f7ff f8dd 	bl	8000548 <__aeabi_f2d>
 800138e:	4604      	mov	r4, r0
 8001390:	460d      	mov	r5, r1
 8001392:	6938      	ldr	r0, [r7, #16]
 8001394:	f7ff f8d8 	bl	8000548 <__aeabi_f2d>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4620      	mov	r0, r4
 800139e:	4629      	mov	r1, r5
 80013a0:	f7ff f92a 	bl	80005f8 <__aeabi_dmul>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4614      	mov	r4, r2
 80013aa:	461d      	mov	r5, r3
 80013ac:	4b41      	ldr	r3, [pc, #260]	@ (80014b4 <StartTask_auto_drive+0x49c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b8:	ee17 0a90 	vmov	r0, s15
 80013bc:	f7ff f8c4 	bl	8000548 <__aeabi_f2d>
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	4b3c      	ldr	r3, [pc, #240]	@ (80014b8 <StartTask_auto_drive+0x4a0>)
 80013c6:	f7fe ff5f 	bl	8000288 <__aeabi_dsub>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4620      	mov	r0, r4
 80013d0:	4629      	mov	r1, r5
 80013d2:	f7ff f911 	bl	80005f8 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	a330      	add	r3, pc, #192	@ (adr r3, 80014a0 <StartTask_auto_drive+0x488>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff fa32 	bl	800084c <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
								(K_CENTER * ( (float) echo_center_time_us - DIRECTION_THRESHOLD) / MAX_STRAIGHT_SENSOR_VALUE)+ \
 80013ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013f0:	f7fe ff4c 	bl	800028c <__adddf3>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
								 / 3 * 100;
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	4b30      	ldr	r3, [pc, #192]	@ (80014c4 <StartTask_auto_drive+0x4ac>)
 8001402:	f7ff fa23 	bl	800084c <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	4b2d      	ldr	r3, [pc, #180]	@ (80014c8 <StartTask_auto_drive+0x4b0>)
 8001414:	f7ff f8f0 	bl	80005f8 <__aeabi_dmul>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f7ff fba4 	bl	8000b6c <__aeabi_d2f>
 8001424:	4603      	mov	r3, r0
	right_motor_duty_float = (  ( (K_SAMESIDE * distance_sensitivity * curve_sensitivity) * ( (float) echo_right_time_us - DIRECTION_THRESHOLD) / MAX_CURVE_SENSOR_VALUE)+ \
 8001426:	4a2a      	ldr	r2, [pc, #168]	@ (80014d0 <StartTask_auto_drive+0x4b8>)
 8001428:	6013      	str	r3, [r2, #0]

	// deadlock escape
	if (((echo_left_time_us + echo_center_time_us + echo_right_time_us) / 3.0) < deadlock_threshold)
 800142a:	4b22      	ldr	r3, [pc, #136]	@ (80014b4 <StartTask_auto_drive+0x49c>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <StartTask_auto_drive+0x4a4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	441a      	add	r2, r3
 8001434:	4b22      	ldr	r3, [pc, #136]	@ (80014c0 <StartTask_auto_drive+0x4a8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4413      	add	r3, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f872 	bl	8000524 <__aeabi_i2d>
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <StartTask_auto_drive+0x4ac>)
 8001446:	f7ff fa01 	bl	800084c <__aeabi_ddiv>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4614      	mov	r4, r2
 8001450:	461d      	mov	r5, r3
 8001452:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <StartTask_auto_drive+0x4bc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f854 	bl	8000504 <__aeabi_ui2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4620      	mov	r0, r4
 8001462:	4629      	mov	r1, r5
 8001464:	f7ff fb3a 	bl	8000adc <__aeabi_dcmplt>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 809b 	beq.w	80015a6 <StartTask_auto_drive+0x58e>
	{
		if (arbitrary_turn_right_left)
 8001470:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <StartTask_auto_drive+0x4c0>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d05b      	beq.n	8001530 <StartTask_auto_drive+0x518>
		{
			if (left_motor_duty_float > 0) left_motor_duty_float *= CONSTANT_DEADLOCK_MAX;
 8001478:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <StartTask_auto_drive+0x4b4>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001486:	dd2d      	ble.n	80014e4 <StartTask_auto_drive+0x4cc>
 8001488:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <StartTask_auto_drive+0x4b4>)
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <StartTask_auto_drive+0x4b4>)
 8001494:	edc3 7a00 	vstr	s15, [r3]
 8001498:	e02e      	b.n	80014f8 <StartTask_auto_drive+0x4e0>
 800149a:	bf00      	nop
 800149c:	f3af 8000 	nop.w
 80014a0:	00000000 	.word	0x00000000
 80014a4:	40b38800 	.word	0x40b38800
 80014a8:	00000000 	.word	0x00000000
 80014ac:	40a77000 	.word	0x40a77000
 80014b0:	3f666666 	.word	0x3f666666
 80014b4:	2000009c 	.word	0x2000009c
 80014b8:	4082c000 	.word	0x4082c000
 80014bc:	200000a0 	.word	0x200000a0
 80014c0:	200000a4 	.word	0x200000a4
 80014c4:	40080000 	.word	0x40080000
 80014c8:	40590000 	.word	0x40590000
 80014cc:	200000ec 	.word	0x200000ec
 80014d0:	200000f0 	.word	0x200000f0
 80014d4:	20000000 	.word	0x20000000
 80014d8:	200000fc 	.word	0x200000fc
 80014dc:	cccccccd 	.word	0xcccccccd
 80014e0:	3feccccc 	.word	0x3feccccc
			else left_motor_duty_float *= CONSTANT_DEADLOCK_MIN;
 80014e4:	4ba6      	ldr	r3, [pc, #664]	@ (8001780 <StartTask_auto_drive+0x768>)
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f2:	4ba3      	ldr	r3, [pc, #652]	@ (8001780 <StartTask_auto_drive+0x768>)
 80014f4:	edc3 7a00 	vstr	s15, [r3]
			if (right_motor_duty_float > 0) right_motor_duty_float *= CONSTANT_DEADLOCK_MIN;
 80014f8:	4ba2      	ldr	r3, [pc, #648]	@ (8001784 <StartTask_auto_drive+0x76c>)
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001506:	dd0a      	ble.n	800151e <StartTask_auto_drive+0x506>
 8001508:	4b9e      	ldr	r3, [pc, #632]	@ (8001784 <StartTask_auto_drive+0x76c>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001516:	4b9b      	ldr	r3, [pc, #620]	@ (8001784 <StartTask_auto_drive+0x76c>)
 8001518:	edc3 7a00 	vstr	s15, [r3]
 800151c:	e03e      	b.n	800159c <StartTask_auto_drive+0x584>
			else right_motor_duty_float *= CONSTANT_DEADLOCK_MAX;
 800151e:	4b99      	ldr	r3, [pc, #612]	@ (8001784 <StartTask_auto_drive+0x76c>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001528:	4b96      	ldr	r3, [pc, #600]	@ (8001784 <StartTask_auto_drive+0x76c>)
 800152a:	edc3 7a00 	vstr	s15, [r3]
 800152e:	e035      	b.n	800159c <StartTask_auto_drive+0x584>
		}
		else
		{
			if (left_motor_duty_float > 0) left_motor_duty_float *= CONSTANT_DEADLOCK_MIN;
 8001530:	4b93      	ldr	r3, [pc, #588]	@ (8001780 <StartTask_auto_drive+0x768>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	dd0a      	ble.n	8001556 <StartTask_auto_drive+0x53e>
 8001540:	4b8f      	ldr	r3, [pc, #572]	@ (8001780 <StartTask_auto_drive+0x768>)
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800154a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154e:	4b8c      	ldr	r3, [pc, #560]	@ (8001780 <StartTask_auto_drive+0x768>)
 8001550:	edc3 7a00 	vstr	s15, [r3]
 8001554:	e007      	b.n	8001566 <StartTask_auto_drive+0x54e>
			else left_motor_duty_float *= CONSTANT_DEADLOCK_MAX;
 8001556:	4b8a      	ldr	r3, [pc, #552]	@ (8001780 <StartTask_auto_drive+0x768>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001560:	4b87      	ldr	r3, [pc, #540]	@ (8001780 <StartTask_auto_drive+0x768>)
 8001562:	edc3 7a00 	vstr	s15, [r3]
			if (right_motor_duty_float > 0) right_motor_duty_float *= CONSTANT_DEADLOCK_MAX;
 8001566:	4b87      	ldr	r3, [pc, #540]	@ (8001784 <StartTask_auto_drive+0x76c>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	dd08      	ble.n	8001588 <StartTask_auto_drive+0x570>
 8001576:	4b83      	ldr	r3, [pc, #524]	@ (8001784 <StartTask_auto_drive+0x76c>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001580:	4b80      	ldr	r3, [pc, #512]	@ (8001784 <StartTask_auto_drive+0x76c>)
 8001582:	edc3 7a00 	vstr	s15, [r3]
 8001586:	e009      	b.n	800159c <StartTask_auto_drive+0x584>
			else right_motor_duty_float *= CONSTANT_DEADLOCK_MIN;
 8001588:	4b7e      	ldr	r3, [pc, #504]	@ (8001784 <StartTask_auto_drive+0x76c>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001596:	4b7b      	ldr	r3, [pc, #492]	@ (8001784 <StartTask_auto_drive+0x76c>)
 8001598:	edc3 7a00 	vstr	s15, [r3]
		}
		deadlock_threshold = DIRECTION_THRESHOLD + 400;
 800159c:	4b7a      	ldr	r3, [pc, #488]	@ (8001788 <StartTask_auto_drive+0x770>)
 800159e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	e003      	b.n	80015ae <StartTask_auto_drive+0x596>
	}
	else
	{
		deadlock_threshold = DIRECTION_THRESHOLD;
 80015a6:	4b78      	ldr	r3, [pc, #480]	@ (8001788 <StartTask_auto_drive+0x770>)
 80015a8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80015ac:	601a      	str	r2, [r3, #0]
	}

	// left motor value correction
	if (left_motor_duty_float > 100) left_motor_duty_float = 100;
 80015ae:	4b74      	ldr	r3, [pc, #464]	@ (8001780 <StartTask_auto_drive+0x768>)
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800178c <StartTask_auto_drive+0x774>
 80015b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c0:	dd03      	ble.n	80015ca <StartTask_auto_drive+0x5b2>
 80015c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001780 <StartTask_auto_drive+0x768>)
 80015c4:	4a72      	ldr	r2, [pc, #456]	@ (8001790 <StartTask_auto_drive+0x778>)
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e056      	b.n	8001678 <StartTask_auto_drive+0x660>
	else if (left_motor_duty_float < -100) left_motor_duty_float = -100;
 80015ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001780 <StartTask_auto_drive+0x768>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8001794 <StartTask_auto_drive+0x77c>
 80015d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015dc:	d503      	bpl.n	80015e6 <StartTask_auto_drive+0x5ce>
 80015de:	4b68      	ldr	r3, [pc, #416]	@ (8001780 <StartTask_auto_drive+0x768>)
 80015e0:	4a6d      	ldr	r2, [pc, #436]	@ (8001798 <StartTask_auto_drive+0x780>)
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	e048      	b.n	8001678 <StartTask_auto_drive+0x660>
	else
	{
		if (left_motor_duty_float > 0) left_motor_duty_float = 0.6 * left_motor_duty_float + MINIMUM_MOTOR_DUTY;	// instead of 0 to 100, set to 40 to 100 linearly
 80015e6:	4b66      	ldr	r3, [pc, #408]	@ (8001780 <StartTask_auto_drive+0x768>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	dd1c      	ble.n	8001630 <StartTask_auto_drive+0x618>
 80015f6:	4b62      	ldr	r3, [pc, #392]	@ (8001780 <StartTask_auto_drive+0x768>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ffa4 	bl	8000548 <__aeabi_f2d>
 8001600:	a35d      	add	r3, pc, #372	@ (adr r3, 8001778 <StartTask_auto_drive+0x760>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7fe fff7 	bl	80005f8 <__aeabi_dmul>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	4b61      	ldr	r3, [pc, #388]	@ (800179c <StartTask_auto_drive+0x784>)
 8001618:	f7fe fe38 	bl	800028c <__adddf3>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff faa2 	bl	8000b6c <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	4a55      	ldr	r2, [pc, #340]	@ (8001780 <StartTask_auto_drive+0x768>)
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e023      	b.n	8001678 <StartTask_auto_drive+0x660>
		else if (left_motor_duty_float < 0) left_motor_duty_float = 0.6 * left_motor_duty_float - MINIMUM_MOTOR_DUTY;
 8001630:	4b53      	ldr	r3, [pc, #332]	@ (8001780 <StartTask_auto_drive+0x768>)
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800163a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163e:	d51b      	bpl.n	8001678 <StartTask_auto_drive+0x660>
 8001640:	4b4f      	ldr	r3, [pc, #316]	@ (8001780 <StartTask_auto_drive+0x768>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff7f 	bl	8000548 <__aeabi_f2d>
 800164a:	a34b      	add	r3, pc, #300	@ (adr r3, 8001778 <StartTask_auto_drive+0x760>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe ffd2 	bl	80005f8 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b4e      	ldr	r3, [pc, #312]	@ (800179c <StartTask_auto_drive+0x784>)
 8001662:	f7fe fe11 	bl	8000288 <__aeabi_dsub>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fa7d 	bl	8000b6c <__aeabi_d2f>
 8001672:	4603      	mov	r3, r0
 8001674:	4a42      	ldr	r2, [pc, #264]	@ (8001780 <StartTask_auto_drive+0x768>)
 8001676:	6013      	str	r3, [r2, #0]
	}


	// right motor value correction
	if (right_motor_duty_float > 100) right_motor_duty_float = 100;
 8001678:	4b42      	ldr	r3, [pc, #264]	@ (8001784 <StartTask_auto_drive+0x76c>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800178c <StartTask_auto_drive+0x774>
 8001682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168a:	dd03      	ble.n	8001694 <StartTask_auto_drive+0x67c>
 800168c:	4b3d      	ldr	r3, [pc, #244]	@ (8001784 <StartTask_auto_drive+0x76c>)
 800168e:	4a40      	ldr	r2, [pc, #256]	@ (8001790 <StartTask_auto_drive+0x778>)
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	e05a      	b.n	800174a <StartTask_auto_drive+0x732>
	else if (right_motor_duty_float < -100) right_motor_duty_float = -100;
 8001694:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <StartTask_auto_drive+0x76c>)
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001794 <StartTask_auto_drive+0x77c>
 800169e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a6:	d503      	bpl.n	80016b0 <StartTask_auto_drive+0x698>
 80016a8:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <StartTask_auto_drive+0x76c>)
 80016aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001798 <StartTask_auto_drive+0x780>)
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e04c      	b.n	800174a <StartTask_auto_drive+0x732>
	else
	{
		if (right_motor_duty_float > 0) right_motor_duty_float = 0.6 * right_motor_duty_float + MINIMUM_MOTOR_DUTY;	// instead of 0 to 100, set to 40 to 100 linearly
 80016b0:	4b34      	ldr	r3, [pc, #208]	@ (8001784 <StartTask_auto_drive+0x76c>)
 80016b2:	edd3 7a00 	vldr	s15, [r3]
 80016b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016be:	dd1c      	ble.n	80016fa <StartTask_auto_drive+0x6e2>
 80016c0:	4b30      	ldr	r3, [pc, #192]	@ (8001784 <StartTask_auto_drive+0x76c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff3f 	bl	8000548 <__aeabi_f2d>
 80016ca:	a32b      	add	r3, pc, #172	@ (adr r3, 8001778 <StartTask_auto_drive+0x760>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ff92 	bl	80005f8 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	4b2e      	ldr	r3, [pc, #184]	@ (800179c <StartTask_auto_drive+0x784>)
 80016e2:	f7fe fdd3 	bl	800028c <__adddf3>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f7ff fa3d 	bl	8000b6c <__aeabi_d2f>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a23      	ldr	r2, [pc, #140]	@ (8001784 <StartTask_auto_drive+0x76c>)
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e023      	b.n	8001742 <StartTask_auto_drive+0x72a>
		else if (right_motor_duty_float < 0) right_motor_duty_float = 0.6 * right_motor_duty_float - MINIMUM_MOTOR_DUTY;
 80016fa:	4b22      	ldr	r3, [pc, #136]	@ (8001784 <StartTask_auto_drive+0x76c>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001708:	d51b      	bpl.n	8001742 <StartTask_auto_drive+0x72a>
 800170a:	4b1e      	ldr	r3, [pc, #120]	@ (8001784 <StartTask_auto_drive+0x76c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff1a 	bl	8000548 <__aeabi_f2d>
 8001714:	a318      	add	r3, pc, #96	@ (adr r3, 8001778 <StartTask_auto_drive+0x760>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe ff6d 	bl	80005f8 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <StartTask_auto_drive+0x784>)
 800172c:	f7fe fdac 	bl	8000288 <__aeabi_dsub>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f7ff fa18 	bl	8000b6c <__aeabi_d2f>
 800173c:	4603      	mov	r3, r0
 800173e:	4a11      	ldr	r2, [pc, #68]	@ (8001784 <StartTask_auto_drive+0x76c>)
 8001740:	6013      	str	r3, [r2, #0]
		deadlock_threshold = DIRECTION_THRESHOLD;
 8001742:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <StartTask_auto_drive+0x770>)
 8001744:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001748:	601a      	str	r2, [r3, #0]
	}


	left_motor_duty_int = (int) left_motor_duty_float;
 800174a:	4b0d      	ldr	r3, [pc, #52]	@ (8001780 <StartTask_auto_drive+0x768>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001754:	ee17 2a90 	vmov	r2, s15
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <StartTask_auto_drive+0x788>)
 800175a:	601a      	str	r2, [r3, #0]
	right_motor_duty_int = (int) right_motor_duty_float;
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <StartTask_auto_drive+0x76c>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001766:	ee17 2a90 	vmov	r2, s15
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <StartTask_auto_drive+0x78c>)
 800176c:	601a      	str	r2, [r3, #0]

	osDelay(10);
 800176e:	200a      	movs	r0, #10
 8001770:	f006 f8a2 	bl	80078b8 <osDelay>
  {
 8001774:	e458      	b.n	8001028 <StartTask_auto_drive+0x10>
 8001776:	bf00      	nop
 8001778:	33333333 	.word	0x33333333
 800177c:	3fe33333 	.word	0x3fe33333
 8001780:	200000ec 	.word	0x200000ec
 8001784:	200000f0 	.word	0x200000f0
 8001788:	20000000 	.word	0x20000000
 800178c:	42c80000 	.word	0x42c80000
 8001790:	42c80000 	.word	0x42c80000
 8001794:	c2c80000 	.word	0xc2c80000
 8001798:	c2c80000 	.word	0xc2c80000
 800179c:	40440000 	.word	0x40440000
 80017a0:	200000f4 	.word	0x200000f4
 80017a4:	200000f8 	.word	0x200000f8

080017a8 <StartTask_get_echo_time>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_get_echo_time */
void StartTask_get_echo_time(void *argument)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	@ 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_get_echo_time */
  osDelay(100);
 80017b0:	2064      	movs	r0, #100	@ 0x64
 80017b2:	f006 f881 	bl	80078b8 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	int echo_left_time_us_temp, echo_center_time_us_temp, echo_right_time_us_temp;

	if (echo_left_fall_time > echo_left_rise_time && SENSOR_VALUE_THRESHOLD) echo_left_time_us_temp = echo_left_fall_time - echo_left_rise_time;
 80017b6:	4b59      	ldr	r3, [pc, #356]	@ (800191c <StartTask_get_echo_time+0x174>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4b59      	ldr	r3, [pc, #356]	@ (8001920 <StartTask_get_echo_time+0x178>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d905      	bls.n	80017ce <StartTask_get_echo_time+0x26>
 80017c2:	4b56      	ldr	r3, [pc, #344]	@ (800191c <StartTask_get_echo_time+0x174>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b56      	ldr	r3, [pc, #344]	@ (8001920 <StartTask_get_echo_time+0x178>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
	if (echo_center_fall_time > echo_center_rise_time) echo_center_time_us_temp = echo_center_fall_time - echo_center_rise_time;
 80017ce:	4b55      	ldr	r3, [pc, #340]	@ (8001924 <StartTask_get_echo_time+0x17c>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b55      	ldr	r3, [pc, #340]	@ (8001928 <StartTask_get_echo_time+0x180>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d905      	bls.n	80017e6 <StartTask_get_echo_time+0x3e>
 80017da:	4b52      	ldr	r3, [pc, #328]	@ (8001924 <StartTask_get_echo_time+0x17c>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4b52      	ldr	r3, [pc, #328]	@ (8001928 <StartTask_get_echo_time+0x180>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	623b      	str	r3, [r7, #32]
	if (echo_right_fall_time > echo_right_rise_time) echo_right_time_us_temp = echo_right_fall_time - echo_right_rise_time;
 80017e6:	4b51      	ldr	r3, [pc, #324]	@ (800192c <StartTask_get_echo_time+0x184>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b51      	ldr	r3, [pc, #324]	@ (8001930 <StartTask_get_echo_time+0x188>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d905      	bls.n	80017fe <StartTask_get_echo_time+0x56>
 80017f2:	4b4e      	ldr	r3, [pc, #312]	@ (800192c <StartTask_get_echo_time+0x184>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001930 <StartTask_get_echo_time+0x188>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	61fb      	str	r3, [r7, #28]

	if (echo_left_time_us_temp < SENSOR_VALUE_THRESHOLD) echo_left_time_queue[echo_left_time_queue_index++] = echo_left_time_us_temp;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	f648 02b7 	movw	r2, #34999	@ 0x88b7
 8001804:	4293      	cmp	r3, r2
 8001806:	dc0b      	bgt.n	8001820 <StartTask_get_echo_time+0x78>
 8001808:	4b4a      	ldr	r3, [pc, #296]	@ (8001934 <StartTask_get_echo_time+0x18c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	b2d1      	uxtb	r1, r2
 8001810:	4a48      	ldr	r2, [pc, #288]	@ (8001934 <StartTask_get_echo_time+0x18c>)
 8001812:	7011      	strb	r1, [r2, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001818:	b299      	uxth	r1, r3
 800181a:	4b47      	ldr	r3, [pc, #284]	@ (8001938 <StartTask_get_echo_time+0x190>)
 800181c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	if (echo_center_time_us_temp < SENSOR_VALUE_THRESHOLD) echo_center_time_queue[echo_center_time_queue_index++] = echo_center_time_us_temp;
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	f648 02b7 	movw	r2, #34999	@ 0x88b7
 8001826:	4293      	cmp	r3, r2
 8001828:	dc0b      	bgt.n	8001842 <StartTask_get_echo_time+0x9a>
 800182a:	4b44      	ldr	r3, [pc, #272]	@ (800193c <StartTask_get_echo_time+0x194>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	b2d1      	uxtb	r1, r2
 8001832:	4a42      	ldr	r2, [pc, #264]	@ (800193c <StartTask_get_echo_time+0x194>)
 8001834:	7011      	strb	r1, [r2, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	b299      	uxth	r1, r3
 800183c:	4b40      	ldr	r3, [pc, #256]	@ (8001940 <StartTask_get_echo_time+0x198>)
 800183e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	if (echo_right_time_us_temp < SENSOR_VALUE_THRESHOLD) echo_right_time_queue[echo_right_time_queue_index++] = echo_right_time_us_temp;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	f648 02b7 	movw	r2, #34999	@ 0x88b7
 8001848:	4293      	cmp	r3, r2
 800184a:	dc0b      	bgt.n	8001864 <StartTask_get_echo_time+0xbc>
 800184c:	4b3d      	ldr	r3, [pc, #244]	@ (8001944 <StartTask_get_echo_time+0x19c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	b2d1      	uxtb	r1, r2
 8001854:	4a3b      	ldr	r2, [pc, #236]	@ (8001944 <StartTask_get_echo_time+0x19c>)
 8001856:	7011      	strb	r1, [r2, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	b299      	uxth	r1, r3
 800185e:	4b3a      	ldr	r3, [pc, #232]	@ (8001948 <StartTask_get_echo_time+0x1a0>)
 8001860:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	int echo_left_sum = 0, echo_center_sum = 0, echo_right_sum = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	61bb      	str	r3, [r7, #24]
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
	for (uint8_t i=0; i<VALUE_QUEUE_SIZE; ++i)
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	e01a      	b.n	80018ac <StartTask_get_echo_time+0x104>
	{

		echo_left_sum += echo_left_time_queue[i];
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	4a2f      	ldr	r2, [pc, #188]	@ (8001938 <StartTask_get_echo_time+0x190>)
 800187a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800187e:	461a      	mov	r2, r3
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	4413      	add	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
		echo_center_sum += echo_center_time_queue[i];
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	4a2d      	ldr	r2, [pc, #180]	@ (8001940 <StartTask_get_echo_time+0x198>)
 800188a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800188e:	461a      	mov	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	4413      	add	r3, r2
 8001894:	617b      	str	r3, [r7, #20]
		echo_right_sum += echo_right_time_queue[i];
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	4a2b      	ldr	r2, [pc, #172]	@ (8001948 <StartTask_get_echo_time+0x1a0>)
 800189a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800189e:	461a      	mov	r2, r3
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4413      	add	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
	for (uint8_t i=0; i<VALUE_QUEUE_SIZE; ++i)
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	3301      	adds	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d9e1      	bls.n	8001876 <StartTask_get_echo_time+0xce>
	}

	echo_left_time_us = echo_left_sum / VALUE_QUEUE_SIZE;
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	4a25      	ldr	r2, [pc, #148]	@ (800194c <StartTask_get_echo_time+0x1a4>)
 80018b6:	fb82 1203 	smull	r1, r2, r2, r3
 80018ba:	1052      	asrs	r2, r2, #1
 80018bc:	17db      	asrs	r3, r3, #31
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	4a23      	ldr	r2, [pc, #140]	@ (8001950 <StartTask_get_echo_time+0x1a8>)
 80018c2:	6013      	str	r3, [r2, #0]
	echo_center_time_us = echo_center_sum / VALUE_QUEUE_SIZE;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	4a21      	ldr	r2, [pc, #132]	@ (800194c <StartTask_get_echo_time+0x1a4>)
 80018c8:	fb82 1203 	smull	r1, r2, r2, r3
 80018cc:	1052      	asrs	r2, r2, #1
 80018ce:	17db      	asrs	r3, r3, #31
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	4a20      	ldr	r2, [pc, #128]	@ (8001954 <StartTask_get_echo_time+0x1ac>)
 80018d4:	6013      	str	r3, [r2, #0]
	echo_right_time_us = echo_right_sum / VALUE_QUEUE_SIZE;
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4a1c      	ldr	r2, [pc, #112]	@ (800194c <StartTask_get_echo_time+0x1a4>)
 80018da:	fb82 1203 	smull	r1, r2, r2, r3
 80018de:	1052      	asrs	r2, r2, #1
 80018e0:	17db      	asrs	r3, r3, #31
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001958 <StartTask_get_echo_time+0x1b0>)
 80018e6:	6013      	str	r3, [r2, #0]

	if (echo_left_time_queue_index >= VALUE_QUEUE_SIZE) echo_left_time_queue_index = 0;
 80018e8:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <StartTask_get_echo_time+0x18c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d902      	bls.n	80018f6 <StartTask_get_echo_time+0x14e>
 80018f0:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <StartTask_get_echo_time+0x18c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
	if (echo_center_time_queue_index >= VALUE_QUEUE_SIZE) echo_center_time_queue_index = 0;
 80018f6:	4b11      	ldr	r3, [pc, #68]	@ (800193c <StartTask_get_echo_time+0x194>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d902      	bls.n	8001904 <StartTask_get_echo_time+0x15c>
 80018fe:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <StartTask_get_echo_time+0x194>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
	if (echo_right_time_queue_index >= VALUE_QUEUE_SIZE) echo_right_time_queue_index = 0;
 8001904:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <StartTask_get_echo_time+0x19c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b04      	cmp	r3, #4
 800190a:	d902      	bls.n	8001912 <StartTask_get_echo_time+0x16a>
 800190c:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <StartTask_get_echo_time+0x19c>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]

    osDelay(10);
 8001912:	200a      	movs	r0, #10
 8001914:	f005 ffd0 	bl	80078b8 <osDelay>
  {
 8001918:	e74d      	b.n	80017b6 <StartTask_get_echo_time+0xe>
 800191a:	bf00      	nop
 800191c:	200000d8 	.word	0x200000d8
 8001920:	200000d4 	.word	0x200000d4
 8001924:	200000e0 	.word	0x200000e0
 8001928:	200000dc 	.word	0x200000dc
 800192c:	200000e8 	.word	0x200000e8
 8001930:	200000e4 	.word	0x200000e4
 8001934:	200000ce 	.word	0x200000ce
 8001938:	200000ac 	.word	0x200000ac
 800193c:	200000cf 	.word	0x200000cf
 8001940:	200000b8 	.word	0x200000b8
 8001944:	200000d0 	.word	0x200000d0
 8001948:	200000c4 	.word	0x200000c4
 800194c:	66666667 	.word	0x66666667
 8001950:	2000009c 	.word	0x2000009c
 8001954:	200000a0 	.word	0x200000a0
 8001958:	200000a4 	.word	0x200000a4

0800195c <StartTask_print_sensor_value>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_print_sensor_value */
void StartTask_print_sensor_value(void *argument)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_print_sensor_value */
  osDelay(100);
 8001964:	2064      	movs	r0, #100	@ 0x64
 8001966:	f005 ffa7 	bl	80078b8 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	printf("%5lu %5lu %5lu  ", echo_left_time_us, echo_center_time_us, echo_right_time_us);
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <StartTask_print_sensor_value+0x50>)
 800196c:	6819      	ldr	r1, [r3, #0]
 800196e:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <StartTask_print_sensor_value+0x54>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <StartTask_print_sensor_value+0x58>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4810      	ldr	r0, [pc, #64]	@ (80019b8 <StartTask_print_sensor_value+0x5c>)
 8001978:	f008 fd30 	bl	800a3dc <iprintf>
	printf("L: %+5d R:%+5d\n", left_motor_duty_int, right_motor_duty_int);
 800197c:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <StartTask_print_sensor_value+0x60>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0f      	ldr	r2, [pc, #60]	@ (80019c0 <StartTask_print_sensor_value+0x64>)
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	480f      	ldr	r0, [pc, #60]	@ (80019c4 <StartTask_print_sensor_value+0x68>)
 8001988:	f008 fd28 	bl	800a3dc <iprintf>

	arbitrary_turn_right_left = !arbitrary_turn_right_left;
 800198c:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <StartTask_print_sensor_value+0x6c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf0c      	ite	eq
 8001994:	2301      	moveq	r3, #1
 8001996:	2300      	movne	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <StartTask_print_sensor_value+0x6c>)
 800199e:	701a      	strb	r2, [r3, #0]

    osDelay(1000);
 80019a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019a4:	f005 ff88 	bl	80078b8 <osDelay>
	printf("%5lu %5lu %5lu  ", echo_left_time_us, echo_center_time_us, echo_right_time_us);
 80019a8:	bf00      	nop
 80019aa:	e7de      	b.n	800196a <StartTask_print_sensor_value+0xe>
 80019ac:	2000009c 	.word	0x2000009c
 80019b0:	200000a0 	.word	0x200000a0
 80019b4:	200000a4 	.word	0x200000a4
 80019b8:	0800b1c8 	.word	0x0800b1c8
 80019bc:	200000f4 	.word	0x200000f4
 80019c0:	200000f8 	.word	0x200000f8
 80019c4:	0800b1dc 	.word	0x0800b1dc
 80019c8:	200000fc 	.word	0x200000fc

080019cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <MX_GPIO_Init+0x9c>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001a68 <MX_GPIO_Init+0x9c>)
 80019ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <MX_GPIO_Init+0x9c>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <MX_GPIO_Init+0x9c>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a18      	ldr	r2, [pc, #96]	@ (8001a68 <MX_GPIO_Init+0x9c>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <MX_GPIO_Init+0x9c>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <MX_GPIO_Init+0x9c>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a11      	ldr	r2, [pc, #68]	@ (8001a68 <MX_GPIO_Init+0x9c>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <MX_GPIO_Init+0x9c>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_motorDriver_IN1_Pin|GPIO_motorDriver_IN4_Pin|GPIO_motorDriver_IN3_Pin|GPIO_motorDriver_IN2_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	f24e 0102 	movw	r1, #57346	@ 0xe002
 8001a3c:	480b      	ldr	r0, [pc, #44]	@ (8001a6c <MX_GPIO_Init+0xa0>)
 8001a3e:	f002 faa1 	bl	8003f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_motorDriver_IN1_Pin|GPIO_motorDriver_IN4_Pin|GPIO_motorDriver_IN3_Pin|GPIO_motorDriver_IN2_Pin;
 8001a42:	f24e 0302 	movw	r3, #57346	@ 0xe002
 8001a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a50:	2302      	movs	r3, #2
 8001a52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4804      	ldr	r0, [pc, #16]	@ (8001a6c <MX_GPIO_Init+0xa0>)
 8001a5c:	f002 f90e 	bl	8003c7c <HAL_GPIO_Init>

}
 8001a60:	bf00      	nop
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020400 	.word	0x40020400

08001a70 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart_bluetooth, (uint8_t *) &ch, 1, 0xFFFF);
 8001a78:	1d39      	adds	r1, r7, #4
 8001a7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4803      	ldr	r0, [pc, #12]	@ (8001a90 <__io_putchar+0x20>)
 8001a82:	f004 fc61 	bl	8006348 <HAL_UART_Transmit>

  return ch;
 8001a86:	687b      	ldr	r3, [r7, #4]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200004ac 	.word	0x200004ac

08001a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a98:	f001 fbca 	bl	8003230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a9c:	f000 f86e 	bl	8001b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aa0:	f7ff ff94 	bl	80019cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001aa4:	f7ff fa2a 	bl	8000efc <MX_DMA_Init>
  MX_TIM3_Init();
 8001aa8:	f000 fe22 	bl	80026f0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001aac:	f001 fa62 	bl	8002f74 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001ab0:	f001 fa8a 	bl	8002fc8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001ab4:	f000 feba 	bl	800282c <MX_TIM4_Init>
  MX_TIM1_Init();
 8001ab8:	f000 fcde 	bl	8002478 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001abc:	f000 fd96 	bl	80025ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  pwmMotor_init(&htim_pwmMotor, CHANNEL_MOTOR_A);
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4822      	ldr	r0, [pc, #136]	@ (8001b4c <main+0xb8>)
 8001ac4:	f000 f8da 	bl	8001c7c <pwmMotor_init>
  pwmMotor_init(&htim_pwmMotor, CHANNEL_MOTOR_B);
 8001ac8:	2104      	movs	r1, #4
 8001aca:	4820      	ldr	r0, [pc, #128]	@ (8001b4c <main+0xb8>)
 8001acc:	f000 f8d6 	bl	8001c7c <pwmMotor_init>

  HAL_TIM_PWM_Start(&htim_triggerPulse, CHANNEL_TRIG_LEFT);
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	481f      	ldr	r0, [pc, #124]	@ (8001b50 <main+0xbc>)
 8001ad4:	f003 f846 	bl	8004b64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim_triggerPulse, CHANNEL_TRIG_CENTER);
 8001ad8:	2104      	movs	r1, #4
 8001ada:	481d      	ldr	r0, [pc, #116]	@ (8001b50 <main+0xbc>)
 8001adc:	f003 f842 	bl	8004b64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim_triggerPulse, CHANNEL_TRIG_RIGHT);
 8001ae0:	2108      	movs	r1, #8
 8001ae2:	481b      	ldr	r0, [pc, #108]	@ (8001b50 <main+0xbc>)
 8001ae4:	f003 f83e 	bl	8004b64 <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start_DMA(&htim_echoMeasure_1, CHANNEL_ECHO_LEFT_RISING, &echo_left_rise_time, 1);
 8001ae8:	2301      	movs	r3, #1
 8001aea:	4a1a      	ldr	r2, [pc, #104]	@ (8001b54 <main+0xc0>)
 8001aec:	2100      	movs	r1, #0
 8001aee:	481a      	ldr	r0, [pc, #104]	@ (8001b58 <main+0xc4>)
 8001af0:	f003 f942 	bl	8004d78 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim_echoMeasure_1, CHANNEL_ECHO_LEFT_FALLING, &echo_left_fall_time, 1);
 8001af4:	2301      	movs	r3, #1
 8001af6:	4a19      	ldr	r2, [pc, #100]	@ (8001b5c <main+0xc8>)
 8001af8:	2104      	movs	r1, #4
 8001afa:	4817      	ldr	r0, [pc, #92]	@ (8001b58 <main+0xc4>)
 8001afc:	f003 f93c 	bl	8004d78 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim_echoMeasure_1, CHANNEL_ECHO_CENTER_RISING, &echo_center_rise_time, 1);
 8001b00:	2301      	movs	r3, #1
 8001b02:	4a17      	ldr	r2, [pc, #92]	@ (8001b60 <main+0xcc>)
 8001b04:	2108      	movs	r1, #8
 8001b06:	4814      	ldr	r0, [pc, #80]	@ (8001b58 <main+0xc4>)
 8001b08:	f003 f936 	bl	8004d78 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim_echoMeasure_1, CHANNEL_ECHO_CENTER_FALLING, &echo_center_fall_time, 1);
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	4a15      	ldr	r2, [pc, #84]	@ (8001b64 <main+0xd0>)
 8001b10:	210c      	movs	r1, #12
 8001b12:	4811      	ldr	r0, [pc, #68]	@ (8001b58 <main+0xc4>)
 8001b14:	f003 f930 	bl	8004d78 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim_echoMeasure_2, CHANNEL_ECHO_RIGHT_RISING, &echo_right_rise_time, 1);
 8001b18:	2301      	movs	r3, #1
 8001b1a:	4a13      	ldr	r2, [pc, #76]	@ (8001b68 <main+0xd4>)
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4813      	ldr	r0, [pc, #76]	@ (8001b6c <main+0xd8>)
 8001b20:	f003 f92a 	bl	8004d78 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim_echoMeasure_2, CHANNEL_ECHO_RIGHT_FALLING, &echo_right_fall_time, 1);
 8001b24:	2301      	movs	r3, #1
 8001b26:	4a12      	ldr	r2, [pc, #72]	@ (8001b70 <main+0xdc>)
 8001b28:	2104      	movs	r1, #4
 8001b2a:	4810      	ldr	r0, [pc, #64]	@ (8001b6c <main+0xd8>)
 8001b2c:	f003 f924 	bl	8004d78 <HAL_TIM_IC_Start_DMA>

  HAL_UART_Receive_DMA(&huart_bluetooth, &rxChar, 1);
 8001b30:	2201      	movs	r2, #1
 8001b32:	4910      	ldr	r1, [pc, #64]	@ (8001b74 <main+0xe0>)
 8001b34:	4810      	ldr	r0, [pc, #64]	@ (8001b78 <main+0xe4>)
 8001b36:	f004 fc92 	bl	800645e <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b3a:	f005 fde1 	bl	8007700 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001b3e:	f7ff fa3b 	bl	8000fb8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b42:	f005 fe01 	bl	8007748 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b46:	bf00      	nop
 8001b48:	e7fd      	b.n	8001b46 <main+0xb2>
 8001b4a:	bf00      	nop
 8001b4c:	20000194 	.word	0x20000194
 8001b50:	2000014c 	.word	0x2000014c
 8001b54:	200000d4 	.word	0x200000d4
 8001b58:	200001dc 	.word	0x200001dc
 8001b5c:	200000d8 	.word	0x200000d8
 8001b60:	200000dc 	.word	0x200000dc
 8001b64:	200000e0 	.word	0x200000e0
 8001b68:	200000e4 	.word	0x200000e4
 8001b6c:	20000224 	.word	0x20000224
 8001b70:	200000e8 	.word	0x200000e8
 8001b74:	20000098 	.word	0x20000098
 8001b78:	200004ac 	.word	0x200004ac

08001b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b094      	sub	sp, #80	@ 0x50
 8001b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b82:	f107 0320 	add.w	r3, r7, #32
 8001b86:	2230      	movs	r2, #48	@ 0x30
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f008 fc7b 	bl	800a486 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	4b27      	ldr	r3, [pc, #156]	@ (8001c44 <SystemClock_Config+0xc8>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	4a26      	ldr	r2, [pc, #152]	@ (8001c44 <SystemClock_Config+0xc8>)
 8001baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb0:	4b24      	ldr	r3, [pc, #144]	@ (8001c44 <SystemClock_Config+0xc8>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	4b21      	ldr	r3, [pc, #132]	@ (8001c48 <SystemClock_Config+0xcc>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a20      	ldr	r2, [pc, #128]	@ (8001c48 <SystemClock_Config+0xcc>)
 8001bc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c48 <SystemClock_Config+0xcc>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bdc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be2:	2302      	movs	r3, #2
 8001be4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001be6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bec:	2304      	movs	r3, #4
 8001bee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001bf0:	2364      	movs	r3, #100	@ 0x64
 8001bf2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfc:	f107 0320 	add.w	r3, r7, #32
 8001c00:	4618      	mov	r0, r3
 8001c02:	f002 f9d9 	bl	8003fb8 <HAL_RCC_OscConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c0c:	f000 f830 	bl	8001c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c10:	230f      	movs	r3, #15
 8001c12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c14:	2302      	movs	r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c26:	f107 030c 	add.w	r3, r7, #12
 8001c2a:	2103      	movs	r1, #3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f002 fc3b 	bl	80044a8 <HAL_RCC_ClockConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c38:	f000 f81a 	bl	8001c70 <Error_Handler>
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3750      	adds	r7, #80	@ 0x50
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40007000 	.word	0x40007000

08001c4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a04      	ldr	r2, [pc, #16]	@ (8001c6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c5e:	f001 fb09 	bl	8003274 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40014800 	.word	0x40014800

08001c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c74:	b672      	cpsid	i
}
 8001c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <Error_Handler+0x8>

08001c7c <pwmMotor_init>:
#include "pwmMotor.h"

static uint16_t max_duty;

void pwmMotor_init(TIM_HandleTypeDef *htim, uint32_t motor_channel)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim, motor_channel);
 8001c86:	6839      	ldr	r1, [r7, #0]
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f002 ff6b 	bl	8004b64 <HAL_TIM_PWM_Start>
	max_duty = htim->Instance->ARR - 1;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <pwmMotor_init+0x2c>)
 8001c9c:	801a      	strh	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200000fe 	.word	0x200000fe

08001cac <pwmMotor_setDuty>:
void pwmMotor_setDuty(TIM_HandleTypeDef *htim, uint32_t motor_channel, uint16_t duty)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim, motor_channel, duty);
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d104      	bne.n	8001cca <pwmMotor_setDuty+0x1e>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	88fa      	ldrh	r2, [r7, #6]
 8001cc6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001cc8:	e013      	b.n	8001cf2 <pwmMotor_setDuty+0x46>
	__HAL_TIM_SET_COMPARE(htim, motor_channel, duty);
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d104      	bne.n	8001cda <pwmMotor_setDuty+0x2e>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001cd8:	e00b      	b.n	8001cf2 <pwmMotor_setDuty+0x46>
	__HAL_TIM_SET_COMPARE(htim, motor_channel, duty);
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d104      	bne.n	8001cea <pwmMotor_setDuty+0x3e>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001ce8:	e003      	b.n	8001cf2 <pwmMotor_setDuty+0x46>
	__HAL_TIM_SET_COMPARE(htim, motor_channel, duty);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <pwmMotor_directionShift>:
{
	HAL_TIM_PWM_Stop(htim, motor_channel);
}

void pwmMotor_directionShift (uint32_t motor_channel, pwmMotor_direction dir)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	70fb      	strb	r3, [r7, #3]
	GPIO_PinState GPIO_PinState_IN_1st;
	GPIO_PinState GPIO_PinState_IN_2nd;
	switch (dir)
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d81e      	bhi.n	8001d50 <pwmMotor_directionShift+0x50>
 8001d12:	a201      	add	r2, pc, #4	@ (adr r2, 8001d18 <pwmMotor_directionShift+0x18>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001d29 	.word	0x08001d29
 8001d1c:	08001d33 	.word	0x08001d33
 8001d20:	08001d3d 	.word	0x08001d3d
 8001d24:	08001d47 	.word	0x08001d47
	{
	case NEUTRAL:
		GPIO_PinState_IN_1st = GPIO_PIN_RESET;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]
		GPIO_PinState_IN_2nd = GPIO_PIN_RESET;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73bb      	strb	r3, [r7, #14]
		break;
 8001d30:	e00e      	b.n	8001d50 <pwmMotor_directionShift+0x50>
	case FORWARD:
		GPIO_PinState_IN_1st = GPIO_PIN_SET;
 8001d32:	2301      	movs	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
		GPIO_PinState_IN_2nd = GPIO_PIN_RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	73bb      	strb	r3, [r7, #14]
		break;
 8001d3a:	e009      	b.n	8001d50 <pwmMotor_directionShift+0x50>
	case BACKWARD:
		GPIO_PinState_IN_1st = GPIO_PIN_RESET;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]
		GPIO_PinState_IN_2nd = GPIO_PIN_SET;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73bb      	strb	r3, [r7, #14]
		break;
 8001d44:	e004      	b.n	8001d50 <pwmMotor_directionShift+0x50>
	case BREAK:
		GPIO_PinState_IN_1st = GPIO_PIN_SET;
 8001d46:	2301      	movs	r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]
		GPIO_PinState_IN_2nd = GPIO_PIN_SET;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	73bb      	strb	r3, [r7, #14]
		break;
 8001d4e:	bf00      	nop
	}

	if (motor_channel == CHANNEL_MOTOR_A)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10d      	bne.n	8001d72 <pwmMotor_directionShift+0x72>
	{
		HAL_GPIO_WritePin(GPIO_motorDriver_IN1_GPIO_Port, GPIO_motorDriver_IN1_Pin, GPIO_PinState_IN_1st);
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	480f      	ldr	r0, [pc, #60]	@ (8001d9c <pwmMotor_directionShift+0x9c>)
 8001d5e:	f002 f911 	bl	8003f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_motorDriver_IN2_GPIO_Port, GPIO_motorDriver_IN2_Pin, GPIO_PinState_IN_2nd);
 8001d62:	7bbb      	ldrb	r3, [r7, #14]
 8001d64:	461a      	mov	r2, r3
 8001d66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d6a:	480c      	ldr	r0, [pc, #48]	@ (8001d9c <pwmMotor_directionShift+0x9c>)
 8001d6c:	f002 f90a 	bl	8003f84 <HAL_GPIO_WritePin>
	else if (motor_channel == CHANNEL_MOTOR_B)
	{
		HAL_GPIO_WritePin(GPIO_motorDriver_IN3_GPIO_Port, GPIO_motorDriver_IN3_Pin, GPIO_PinState_IN_1st);
		HAL_GPIO_WritePin(GPIO_motorDriver_IN4_GPIO_Port, GPIO_motorDriver_IN4_Pin, GPIO_PinState_IN_2nd);
	}
}
 8001d70:	e010      	b.n	8001d94 <pwmMotor_directionShift+0x94>
	else if (motor_channel == CHANNEL_MOTOR_B)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d10d      	bne.n	8001d94 <pwmMotor_directionShift+0x94>
		HAL_GPIO_WritePin(GPIO_motorDriver_IN3_GPIO_Port, GPIO_motorDriver_IN3_Pin, GPIO_PinState_IN_1st);
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d80:	4806      	ldr	r0, [pc, #24]	@ (8001d9c <pwmMotor_directionShift+0x9c>)
 8001d82:	f002 f8ff 	bl	8003f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_motorDriver_IN4_GPIO_Port, GPIO_motorDriver_IN4_Pin, GPIO_PinState_IN_2nd);
 8001d86:	7bbb      	ldrb	r3, [r7, #14]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d8e:	4803      	ldr	r0, [pc, #12]	@ (8001d9c <pwmMotor_directionShift+0x9c>)
 8001d90:	f002 f8f8 	bl	8003f84 <HAL_GPIO_WritePin>
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40020400 	.word	0x40020400

08001da0 <RCcar_set_motor_speed>:

void RCcar_set_motor_speed (int8_t left_speed_percent, int8_t right_speed_percent)
{
 8001da0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	460a      	mov	r2, r1
 8001dac:	71fb      	strb	r3, [r7, #7]
 8001dae:	4613      	mov	r3, r2
 8001db0:	71bb      	strb	r3, [r7, #6]
	uint16_t left_motor_duty, right_motor_duty;

	if (left_speed_percent > 0)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	dd11      	ble.n	8001dde <RCcar_set_motor_speed+0x3e>
	{
		pwmMotor_directionShift (CHANNEL_MOTOR_A, FORWARD);
 8001dba:	2101      	movs	r1, #1
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f7ff ff9f 	bl	8001d00 <pwmMotor_directionShift>
		left_motor_duty = left_speed_percent * max_duty / 100;
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	4a4e      	ldr	r2, [pc, #312]	@ (8001f00 <RCcar_set_motor_speed+0x160>)
 8001dc8:	8812      	ldrh	r2, [r2, #0]
 8001dca:	fb02 f303 	mul.w	r3, r2, r3
 8001dce:	4a4d      	ldr	r2, [pc, #308]	@ (8001f04 <RCcar_set_motor_speed+0x164>)
 8001dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001dd4:	1152      	asrs	r2, r2, #5
 8001dd6:	17db      	asrs	r3, r3, #31
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	81fb      	strh	r3, [r7, #14]
 8001ddc:	e034      	b.n	8001e48 <RCcar_set_motor_speed+0xa8>
	}
	else if (left_speed_percent < 0)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	da2a      	bge.n	8001e3c <RCcar_set_motor_speed+0x9c>
	{
		pwmMotor_directionShift (CHANNEL_MOTOR_A, BACKWARD);
 8001de6:	2102      	movs	r1, #2
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff ff89 	bl	8001d00 <pwmMotor_directionShift>
		left_motor_duty = -1.0 * left_speed_percent * max_duty / 100;
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fb96 	bl	8000524 <__aeabi_i2d>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4690      	mov	r8, r2
 8001dfe:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001e02:	4b3f      	ldr	r3, [pc, #252]	@ (8001f00 <RCcar_set_motor_speed+0x160>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fb8c 	bl	8000524 <__aeabi_i2d>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4640      	mov	r0, r8
 8001e12:	4649      	mov	r1, r9
 8001e14:	f7fe fbf0 	bl	80005f8 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	4b38      	ldr	r3, [pc, #224]	@ (8001f08 <RCcar_set_motor_speed+0x168>)
 8001e26:	f7fe fd11 	bl	800084c <__aeabi_ddiv>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	f7fe fe7b 	bl	8000b2c <__aeabi_d2uiz>
 8001e36:	4603      	mov	r3, r0
 8001e38:	81fb      	strh	r3, [r7, #14]
 8001e3a:	e005      	b.n	8001e48 <RCcar_set_motor_speed+0xa8>
	}
	else /* (left_speed_percent == 0) */
	{
		pwmMotor_directionShift (CHANNEL_MOTOR_A, BREAK);
 8001e3c:	2103      	movs	r1, #3
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7ff ff5e 	bl	8001d00 <pwmMotor_directionShift>
		left_motor_duty = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	81fb      	strh	r3, [r7, #14]
	}


	if (right_speed_percent > 0)
 8001e48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	dd11      	ble.n	8001e74 <RCcar_set_motor_speed+0xd4>
	{
		pwmMotor_directionShift (CHANNEL_MOTOR_B, FORWARD);
 8001e50:	2101      	movs	r1, #1
 8001e52:	2004      	movs	r0, #4
 8001e54:	f7ff ff54 	bl	8001d00 <pwmMotor_directionShift>
		right_motor_duty = right_speed_percent * max_duty / 100;
 8001e58:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e5c:	4a28      	ldr	r2, [pc, #160]	@ (8001f00 <RCcar_set_motor_speed+0x160>)
 8001e5e:	8812      	ldrh	r2, [r2, #0]
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	4a27      	ldr	r2, [pc, #156]	@ (8001f04 <RCcar_set_motor_speed+0x164>)
 8001e66:	fb82 1203 	smull	r1, r2, r2, r3
 8001e6a:	1152      	asrs	r2, r2, #5
 8001e6c:	17db      	asrs	r3, r3, #31
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	81bb      	strh	r3, [r7, #12]
 8001e72:	e034      	b.n	8001ede <RCcar_set_motor_speed+0x13e>
	}
	else if (right_speed_percent < 0)
 8001e74:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	da2a      	bge.n	8001ed2 <RCcar_set_motor_speed+0x132>
	{
		pwmMotor_directionShift (CHANNEL_MOTOR_B, BACKWARD);
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	2004      	movs	r0, #4
 8001e80:	f7ff ff3e 	bl	8001d00 <pwmMotor_directionShift>
		right_motor_duty = -1.0 * right_speed_percent * max_duty / 100;
 8001e84:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb4b 	bl	8000524 <__aeabi_i2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4614      	mov	r4, r2
 8001e94:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001e98:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <RCcar_set_motor_speed+0x160>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fb41 	bl	8000524 <__aeabi_i2d>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	f7fe fba5 	bl	80005f8 <__aeabi_dmul>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <RCcar_set_motor_speed+0x168>)
 8001ebc:	f7fe fcc6 	bl	800084c <__aeabi_ddiv>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f7fe fe30 	bl	8000b2c <__aeabi_d2uiz>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	81bb      	strh	r3, [r7, #12]
 8001ed0:	e005      	b.n	8001ede <RCcar_set_motor_speed+0x13e>
	}
	else /* (right_speed_percent == 0) */
	{
		pwmMotor_directionShift (CHANNEL_MOTOR_B, BREAK);
 8001ed2:	2103      	movs	r1, #3
 8001ed4:	2004      	movs	r0, #4
 8001ed6:	f7ff ff13 	bl	8001d00 <pwmMotor_directionShift>
		right_motor_duty = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	81bb      	strh	r3, [r7, #12]
	}

	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_A, left_motor_duty);
 8001ede:	89fb      	ldrh	r3, [r7, #14]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4809      	ldr	r0, [pc, #36]	@ (8001f0c <RCcar_set_motor_speed+0x16c>)
 8001ee6:	f7ff fee1 	bl	8001cac <pwmMotor_setDuty>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, right_motor_duty);
 8001eea:	89bb      	ldrh	r3, [r7, #12]
 8001eec:	461a      	mov	r2, r3
 8001eee:	2104      	movs	r1, #4
 8001ef0:	4806      	ldr	r0, [pc, #24]	@ (8001f0c <RCcar_set_motor_speed+0x16c>)
 8001ef2:	f7ff fedb 	bl	8001cac <pwmMotor_setDuty>
}
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f00:	200000fe 	.word	0x200000fe
 8001f04:	51eb851f 	.word	0x51eb851f
 8001f08:	40590000 	.word	0x40590000
 8001f0c:	20000194 	.word	0x20000194

08001f10 <RCcar_go_forward>:

void RCcar_go_forward(uint8_t speed_percent)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
	uint16_t duty = speed_percent * max_duty / 100;
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	4a11      	ldr	r2, [pc, #68]	@ (8001f64 <RCcar_go_forward+0x54>)
 8001f1e:	8812      	ldrh	r2, [r2, #0]
 8001f20:	fb02 f303 	mul.w	r3, r2, r3
 8001f24:	4a10      	ldr	r2, [pc, #64]	@ (8001f68 <RCcar_go_forward+0x58>)
 8001f26:	fb82 1203 	smull	r1, r2, r2, r3
 8001f2a:	1152      	asrs	r2, r2, #5
 8001f2c:	17db      	asrs	r3, r3, #31
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	81fb      	strh	r3, [r7, #14]
	pwmMotor_directionShift (CHANNEL_MOTOR_A, FORWARD);
 8001f32:	2101      	movs	r1, #1
 8001f34:	2000      	movs	r0, #0
 8001f36:	f7ff fee3 	bl	8001d00 <pwmMotor_directionShift>
	pwmMotor_directionShift (CHANNEL_MOTOR_B, FORWARD);
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	2004      	movs	r0, #4
 8001f3e:	f7ff fedf 	bl	8001d00 <pwmMotor_directionShift>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_A, duty);
 8001f42:	89fb      	ldrh	r3, [r7, #14]
 8001f44:	461a      	mov	r2, r3
 8001f46:	2100      	movs	r1, #0
 8001f48:	4808      	ldr	r0, [pc, #32]	@ (8001f6c <RCcar_go_forward+0x5c>)
 8001f4a:	f7ff feaf 	bl	8001cac <pwmMotor_setDuty>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, duty);
 8001f4e:	89fb      	ldrh	r3, [r7, #14]
 8001f50:	461a      	mov	r2, r3
 8001f52:	2104      	movs	r1, #4
 8001f54:	4805      	ldr	r0, [pc, #20]	@ (8001f6c <RCcar_go_forward+0x5c>)
 8001f56:	f7ff fea9 	bl	8001cac <pwmMotor_setDuty>

}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200000fe 	.word	0x200000fe
 8001f68:	51eb851f 	.word	0x51eb851f
 8001f6c:	20000194 	.word	0x20000194

08001f70 <RCcar_go_soft_left>:

void RCcar_go_soft_left(uint8_t speed_percent)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
	uint16_t duty = speed_percent * max_duty / 100;
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	4a12      	ldr	r2, [pc, #72]	@ (8001fc8 <RCcar_go_soft_left+0x58>)
 8001f7e:	8812      	ldrh	r2, [r2, #0]
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	4a11      	ldr	r2, [pc, #68]	@ (8001fcc <RCcar_go_soft_left+0x5c>)
 8001f86:	fb82 1203 	smull	r1, r2, r2, r3
 8001f8a:	1152      	asrs	r2, r2, #5
 8001f8c:	17db      	asrs	r3, r3, #31
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	81fb      	strh	r3, [r7, #14]
	pwmMotor_directionShift (CHANNEL_MOTOR_A, FORWARD);
 8001f92:	2101      	movs	r1, #1
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7ff feb3 	bl	8001d00 <pwmMotor_directionShift>
	pwmMotor_directionShift (CHANNEL_MOTOR_B, FORWARD);
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	2004      	movs	r0, #4
 8001f9e:	f7ff feaf 	bl	8001d00 <pwmMotor_directionShift>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_A, duty / 8);
 8001fa2:	89fb      	ldrh	r3, [r7, #14]
 8001fa4:	08db      	lsrs	r3, r3, #3
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2100      	movs	r1, #0
 8001fac:	4808      	ldr	r0, [pc, #32]	@ (8001fd0 <RCcar_go_soft_left+0x60>)
 8001fae:	f7ff fe7d 	bl	8001cac <pwmMotor_setDuty>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, duty);
 8001fb2:	89fb      	ldrh	r3, [r7, #14]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2104      	movs	r1, #4
 8001fb8:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <RCcar_go_soft_left+0x60>)
 8001fba:	f7ff fe77 	bl	8001cac <pwmMotor_setDuty>
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200000fe 	.word	0x200000fe
 8001fcc:	51eb851f 	.word	0x51eb851f
 8001fd0:	20000194 	.word	0x20000194

08001fd4 <RCcar_go_soft_right>:

void RCcar_go_soft_right(uint8_t speed_percent)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
	uint16_t duty = speed_percent * max_duty / 100;
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	4a12      	ldr	r2, [pc, #72]	@ (800202c <RCcar_go_soft_right+0x58>)
 8001fe2:	8812      	ldrh	r2, [r2, #0]
 8001fe4:	fb02 f303 	mul.w	r3, r2, r3
 8001fe8:	4a11      	ldr	r2, [pc, #68]	@ (8002030 <RCcar_go_soft_right+0x5c>)
 8001fea:	fb82 1203 	smull	r1, r2, r2, r3
 8001fee:	1152      	asrs	r2, r2, #5
 8001ff0:	17db      	asrs	r3, r3, #31
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	81fb      	strh	r3, [r7, #14]
	pwmMotor_directionShift (CHANNEL_MOTOR_A, FORWARD);
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f7ff fe81 	bl	8001d00 <pwmMotor_directionShift>
	pwmMotor_directionShift (CHANNEL_MOTOR_B, FORWARD);
 8001ffe:	2101      	movs	r1, #1
 8002000:	2004      	movs	r0, #4
 8002002:	f7ff fe7d 	bl	8001d00 <pwmMotor_directionShift>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_A, duty);
 8002006:	89fb      	ldrh	r3, [r7, #14]
 8002008:	461a      	mov	r2, r3
 800200a:	2100      	movs	r1, #0
 800200c:	4809      	ldr	r0, [pc, #36]	@ (8002034 <RCcar_go_soft_right+0x60>)
 800200e:	f7ff fe4d 	bl	8001cac <pwmMotor_setDuty>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, duty / 8);
 8002012:	89fb      	ldrh	r3, [r7, #14]
 8002014:	08db      	lsrs	r3, r3, #3
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	2104      	movs	r1, #4
 800201c:	4805      	ldr	r0, [pc, #20]	@ (8002034 <RCcar_go_soft_right+0x60>)
 800201e:	f7ff fe45 	bl	8001cac <pwmMotor_setDuty>
}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200000fe 	.word	0x200000fe
 8002030:	51eb851f 	.word	0x51eb851f
 8002034:	20000194 	.word	0x20000194

08002038 <RCcar_go_backward>:

void RCcar_go_backward(uint8_t speed_percent)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
	uint16_t duty = speed_percent * max_duty / 100;
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	4a11      	ldr	r2, [pc, #68]	@ (800208c <RCcar_go_backward+0x54>)
 8002046:	8812      	ldrh	r2, [r2, #0]
 8002048:	fb02 f303 	mul.w	r3, r2, r3
 800204c:	4a10      	ldr	r2, [pc, #64]	@ (8002090 <RCcar_go_backward+0x58>)
 800204e:	fb82 1203 	smull	r1, r2, r2, r3
 8002052:	1152      	asrs	r2, r2, #5
 8002054:	17db      	asrs	r3, r3, #31
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	81fb      	strh	r3, [r7, #14]
	pwmMotor_directionShift (CHANNEL_MOTOR_A, BACKWARD);
 800205a:	2102      	movs	r1, #2
 800205c:	2000      	movs	r0, #0
 800205e:	f7ff fe4f 	bl	8001d00 <pwmMotor_directionShift>
	pwmMotor_directionShift (CHANNEL_MOTOR_B, BACKWARD);
 8002062:	2102      	movs	r1, #2
 8002064:	2004      	movs	r0, #4
 8002066:	f7ff fe4b 	bl	8001d00 <pwmMotor_directionShift>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_A, duty);
 800206a:	89fb      	ldrh	r3, [r7, #14]
 800206c:	461a      	mov	r2, r3
 800206e:	2100      	movs	r1, #0
 8002070:	4808      	ldr	r0, [pc, #32]	@ (8002094 <RCcar_go_backward+0x5c>)
 8002072:	f7ff fe1b 	bl	8001cac <pwmMotor_setDuty>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, duty);
 8002076:	89fb      	ldrh	r3, [r7, #14]
 8002078:	461a      	mov	r2, r3
 800207a:	2104      	movs	r1, #4
 800207c:	4805      	ldr	r0, [pc, #20]	@ (8002094 <RCcar_go_backward+0x5c>)
 800207e:	f7ff fe15 	bl	8001cac <pwmMotor_setDuty>
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200000fe 	.word	0x200000fe
 8002090:	51eb851f 	.word	0x51eb851f
 8002094:	20000194 	.word	0x20000194

08002098 <RCcar_stop>:

void RCcar_stop()
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	pwmMotor_directionShift (CHANNEL_MOTOR_A, BREAK);
 800209c:	2103      	movs	r1, #3
 800209e:	2000      	movs	r0, #0
 80020a0:	f7ff fe2e 	bl	8001d00 <pwmMotor_directionShift>
	pwmMotor_directionShift (CHANNEL_MOTOR_B, BREAK);
 80020a4:	2103      	movs	r1, #3
 80020a6:	2004      	movs	r0, #4
 80020a8:	f7ff fe2a 	bl	8001d00 <pwmMotor_directionShift>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_A, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	4804      	ldr	r0, [pc, #16]	@ (80020c4 <RCcar_stop+0x2c>)
 80020b2:	f7ff fdfb 	bl	8001cac <pwmMotor_setDuty>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2104      	movs	r1, #4
 80020ba:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <RCcar_stop+0x2c>)
 80020bc:	f7ff fdf6 	bl	8001cac <pwmMotor_setDuty>
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000194 	.word	0x20000194

080020c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4b12      	ldr	r3, [pc, #72]	@ (800211c <HAL_MspInit+0x54>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	4a11      	ldr	r2, [pc, #68]	@ (800211c <HAL_MspInit+0x54>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020de:	4b0f      	ldr	r3, [pc, #60]	@ (800211c <HAL_MspInit+0x54>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_MspInit+0x54>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	4a0a      	ldr	r2, [pc, #40]	@ (800211c <HAL_MspInit+0x54>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fa:	4b08      	ldr	r3, [pc, #32]	@ (800211c <HAL_MspInit+0x54>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	210f      	movs	r1, #15
 800210a:	f06f 0001 	mvn.w	r0, #1
 800210e:	f001 f989 	bl	8003424 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800

08002120 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	@ 0x30
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	4b2e      	ldr	r3, [pc, #184]	@ (80021f0 <HAL_InitTick+0xd0>)
 8002136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002138:	4a2d      	ldr	r2, [pc, #180]	@ (80021f0 <HAL_InitTick+0xd0>)
 800213a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800213e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002140:	4b2b      	ldr	r3, [pc, #172]	@ (80021f0 <HAL_InitTick+0xd0>)
 8002142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002144:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800214c:	f107 020c 	add.w	r2, r7, #12
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f002 fbc6 	bl	80048e8 <HAL_RCC_GetClockConfig>
  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800215c:	f002 fbb0 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 8002160:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002164:	4a23      	ldr	r2, [pc, #140]	@ (80021f4 <HAL_InitTick+0xd4>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0c9b      	lsrs	r3, r3, #18
 800216c:	3b01      	subs	r3, #1
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8002170:	4b21      	ldr	r3, [pc, #132]	@ (80021f8 <HAL_InitTick+0xd8>)
 8002172:	4a22      	ldr	r2, [pc, #136]	@ (80021fc <HAL_InitTick+0xdc>)
 8002174:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8002176:	4b20      	ldr	r3, [pc, #128]	@ (80021f8 <HAL_InitTick+0xd8>)
 8002178:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800217c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800217e:	4a1e      	ldr	r2, [pc, #120]	@ (80021f8 <HAL_InitTick+0xd8>)
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8002184:	4b1c      	ldr	r3, [pc, #112]	@ (80021f8 <HAL_InitTick+0xd8>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218a:	4b1b      	ldr	r3, [pc, #108]	@ (80021f8 <HAL_InitTick+0xd8>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002190:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_InitTick+0xd8>)
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8002196:	4818      	ldr	r0, [pc, #96]	@ (80021f8 <HAL_InitTick+0xd8>)
 8002198:	f002 fbd8 	bl	800494c <HAL_TIM_Base_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80021a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d11b      	bne.n	80021e2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80021aa:	4813      	ldr	r0, [pc, #76]	@ (80021f8 <HAL_InitTick+0xd8>)
 80021ac:	f002 fc1e 	bl	80049ec <HAL_TIM_Base_Start_IT>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80021b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d111      	bne.n	80021e2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80021be:	201a      	movs	r0, #26
 80021c0:	f001 f94c 	bl	800345c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b0f      	cmp	r3, #15
 80021c8:	d808      	bhi.n	80021dc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80021ca:	2200      	movs	r2, #0
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	201a      	movs	r0, #26
 80021d0:	f001 f928 	bl	8003424 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <HAL_InitTick+0xe0>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e002      	b.n	80021e2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80021e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3730      	adds	r7, #48	@ 0x30
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	431bde83 	.word	0x431bde83
 80021f8:	20000100 	.word	0x20000100
 80021fc:	40014800 	.word	0x40014800
 8002200:	20000008 	.word	0x20000008

08002204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <NMI_Handler+0x4>

0800220c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <HardFault_Handler+0x4>

08002214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <MemManage_Handler+0x4>

0800221c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <BusFault_Handler+0x4>

08002224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <UsageFault_Handler+0x4>

0800222c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002240:	4802      	ldr	r0, [pc, #8]	@ (800224c <DMA1_Stream0_IRQHandler+0x10>)
 8002242:	f001 fab1 	bl	80037a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200003ec 	.word	0x200003ec

08002250 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8002254:	4802      	ldr	r0, [pc, #8]	@ (8002260 <DMA1_Stream2_IRQHandler+0x10>)
 8002256:	f001 faa7 	bl	80037a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000038c 	.word	0x2000038c

08002264 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8002268:	4802      	ldr	r0, [pc, #8]	@ (8002274 <DMA1_Stream3_IRQHandler+0x10>)
 800226a:	f001 fa9d 	bl	80037a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	2000044c 	.word	0x2000044c

08002278 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800227c:	4802      	ldr	r0, [pc, #8]	@ (8002288 <DMA1_Stream4_IRQHandler+0x10>)
 800227e:	f001 fa93 	bl	80037a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	2000026c 	.word	0x2000026c

0800228c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002290:	4802      	ldr	r0, [pc, #8]	@ (800229c <DMA1_Stream5_IRQHandler+0x10>)
 8002292:	f001 fa89 	bl	80037a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200002cc 	.word	0x200002cc

080022a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022a4:	4803      	ldr	r0, [pc, #12]	@ (80022b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80022a6:	f002 ff03 	bl	80050b0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80022aa:	4803      	ldr	r0, [pc, #12]	@ (80022b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80022ac:	f002 ff00 	bl	80050b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	2000014c 	.word	0x2000014c
 80022b8:	20000100 	.word	0x20000100

080022bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022c0:	4802      	ldr	r0, [pc, #8]	@ (80022cc <USART1_IRQHandler+0x10>)
 80022c2:	f004 f8f1 	bl	80064a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200004ac 	.word	0x200004ac

080022d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022d4:	4802      	ldr	r0, [pc, #8]	@ (80022e0 <USART2_IRQHandler+0x10>)
 80022d6:	f004 f8e7 	bl	80064a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200004f4 	.word	0x200004f4

080022e4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 80022e8:	4802      	ldr	r0, [pc, #8]	@ (80022f4 <DMA1_Stream7_IRQHandler+0x10>)
 80022ea:	f001 fa5d 	bl	80037a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000032c 	.word	0x2000032c

080022f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80022fc:	4802      	ldr	r0, [pc, #8]	@ (8002308 <DMA2_Stream2_IRQHandler+0x10>)
 80022fe:	f001 fa53 	bl	80037a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	2000053c 	.word	0x2000053c

0800230c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	e00a      	b.n	8002334 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800231e:	f3af 8000 	nop.w
 8002322:	4601      	mov	r1, r0
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	60ba      	str	r2, [r7, #8]
 800232a:	b2ca      	uxtb	r2, r1
 800232c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	dbf0      	blt.n	800231e <_read+0x12>
  }

  return len;
 800233c:	687b      	ldr	r3, [r7, #4]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b086      	sub	sp, #24
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e009      	b.n	800236c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	60ba      	str	r2, [r7, #8]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fb85 	bl	8001a70 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3301      	adds	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	dbf1      	blt.n	8002358 <_write+0x12>
  }
  return len;
 8002374:	687b      	ldr	r3, [r7, #4]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <_close>:

int _close(int file)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023a6:	605a      	str	r2, [r3, #4]
  return 0;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <_isatty>:

int _isatty(int file)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023be:	2301      	movs	r3, #1
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f0:	4a14      	ldr	r2, [pc, #80]	@ (8002444 <_sbrk+0x5c>)
 80023f2:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <_sbrk+0x60>)
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023fc:	4b13      	ldr	r3, [pc, #76]	@ (800244c <_sbrk+0x64>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002404:	4b11      	ldr	r3, [pc, #68]	@ (800244c <_sbrk+0x64>)
 8002406:	4a12      	ldr	r2, [pc, #72]	@ (8002450 <_sbrk+0x68>)
 8002408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240a:	4b10      	ldr	r3, [pc, #64]	@ (800244c <_sbrk+0x64>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	429a      	cmp	r2, r3
 8002416:	d207      	bcs.n	8002428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002418:	f008 f8da 	bl	800a5d0 <__errno>
 800241c:	4603      	mov	r3, r0
 800241e:	220c      	movs	r2, #12
 8002420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
 8002426:	e009      	b.n	800243c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002428:	4b08      	ldr	r3, [pc, #32]	@ (800244c <_sbrk+0x64>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800242e:	4b07      	ldr	r3, [pc, #28]	@ (800244c <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	4a05      	ldr	r2, [pc, #20]	@ (800244c <_sbrk+0x64>)
 8002438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243a:	68fb      	ldr	r3, [r7, #12]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20020000 	.word	0x20020000
 8002448:	00000400 	.word	0x00000400
 800244c:	20000148 	.word	0x20000148
 8002450:	200050d8 	.word	0x200050d8

08002454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002458:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <SystemInit+0x20>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245e:	4a05      	ldr	r2, [pc, #20]	@ (8002474 <SystemInit+0x20>)
 8002460:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002464:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim4_ch1;
DMA_HandleTypeDef hdma_tim4_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b096      	sub	sp, #88	@ 0x58
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	611a      	str	r2, [r3, #16]
 80024a6:	615a      	str	r2, [r3, #20]
 80024a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	2220      	movs	r2, #32
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f007 ffe8 	bl	800a486 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024b6:	4b4b      	ldr	r3, [pc, #300]	@ (80025e4 <MX_TIM1_Init+0x16c>)
 80024b8:	4a4b      	ldr	r2, [pc, #300]	@ (80025e8 <MX_TIM1_Init+0x170>)
 80024ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 80024bc:	4b49      	ldr	r3, [pc, #292]	@ (80025e4 <MX_TIM1_Init+0x16c>)
 80024be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c4:	4b47      	ldr	r3, [pc, #284]	@ (80025e4 <MX_TIM1_Init+0x16c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80024ca:	4b46      	ldr	r3, [pc, #280]	@ (80025e4 <MX_TIM1_Init+0x16c>)
 80024cc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80024d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d2:	4b44      	ldr	r3, [pc, #272]	@ (80025e4 <MX_TIM1_Init+0x16c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024d8:	4b42      	ldr	r3, [pc, #264]	@ (80025e4 <MX_TIM1_Init+0x16c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024de:	4b41      	ldr	r3, [pc, #260]	@ (80025e4 <MX_TIM1_Init+0x16c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024e4:	483f      	ldr	r0, [pc, #252]	@ (80025e4 <MX_TIM1_Init+0x16c>)
 80024e6:	f002 fa31 	bl	800494c <HAL_TIM_Base_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80024f0:	f7ff fbbe 	bl	8001c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80024fe:	4619      	mov	r1, r3
 8002500:	4838      	ldr	r0, [pc, #224]	@ (80025e4 <MX_TIM1_Init+0x16c>)
 8002502:	f003 f823 	bl	800554c <HAL_TIM_ConfigClockSource>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800250c:	f7ff fbb0 	bl	8001c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002510:	4834      	ldr	r0, [pc, #208]	@ (80025e4 <MX_TIM1_Init+0x16c>)
 8002512:	f002 facd 	bl	8004ab0 <HAL_TIM_PWM_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800251c:	f7ff fba8 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002528:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800252c:	4619      	mov	r1, r3
 800252e:	482d      	ldr	r0, [pc, #180]	@ (80025e4 <MX_TIM1_Init+0x16c>)
 8002530:	f003 fde6 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800253a:	f7ff fb99 	bl	8001c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800253e:	2360      	movs	r3, #96	@ 0x60
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1;
 8002542:	2301      	movs	r3, #1
 8002544:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002546:	2300      	movs	r3, #0
 8002548:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800254a:	2300      	movs	r3, #0
 800254c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800254e:	2304      	movs	r3, #4
 8002550:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800255a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800255e:	2200      	movs	r2, #0
 8002560:	4619      	mov	r1, r3
 8002562:	4820      	ldr	r0, [pc, #128]	@ (80025e4 <MX_TIM1_Init+0x16c>)
 8002564:	f002 ff30 	bl	80053c8 <HAL_TIM_PWM_ConfigChannel>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800256e:	f7ff fb7f 	bl	8001c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002576:	2204      	movs	r2, #4
 8002578:	4619      	mov	r1, r3
 800257a:	481a      	ldr	r0, [pc, #104]	@ (80025e4 <MX_TIM1_Init+0x16c>)
 800257c:	f002 ff24 	bl	80053c8 <HAL_TIM_PWM_ConfigChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8002586:	f7ff fb73 	bl	8001c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800258a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800258e:	2208      	movs	r2, #8
 8002590:	4619      	mov	r1, r3
 8002592:	4814      	ldr	r0, [pc, #80]	@ (80025e4 <MX_TIM1_Init+0x16c>)
 8002594:	f002 ff18 	bl	80053c8 <HAL_TIM_PWM_ConfigChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800259e:	f7ff fb67 	bl	8001c70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	4619      	mov	r1, r3
 80025c4:	4807      	ldr	r0, [pc, #28]	@ (80025e4 <MX_TIM1_Init+0x16c>)
 80025c6:	f003 fe09 	bl	80061dc <HAL_TIMEx_ConfigBreakDeadTime>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80025d0:	f7ff fb4e 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025d4:	4803      	ldr	r0, [pc, #12]	@ (80025e4 <MX_TIM1_Init+0x16c>)
 80025d6:	f000 fbc9 	bl	8002d6c <HAL_TIM_MspPostInit>

}
 80025da:	bf00      	nop
 80025dc:	3758      	adds	r7, #88	@ 0x58
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	2000014c 	.word	0x2000014c
 80025e8:	40010000 	.word	0x40010000

080025ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08e      	sub	sp, #56	@ 0x38
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002600:	f107 0320 	add.w	r3, r7, #32
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
 8002618:	615a      	str	r2, [r3, #20]
 800261a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800261c:	4b33      	ldr	r3, [pc, #204]	@ (80026ec <MX_TIM2_Init+0x100>)
 800261e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002622:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8002624:	4b31      	ldr	r3, [pc, #196]	@ (80026ec <MX_TIM2_Init+0x100>)
 8002626:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800262a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262c:	4b2f      	ldr	r3, [pc, #188]	@ (80026ec <MX_TIM2_Init+0x100>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002632:	4b2e      	ldr	r3, [pc, #184]	@ (80026ec <MX_TIM2_Init+0x100>)
 8002634:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002638:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800263a:	4b2c      	ldr	r3, [pc, #176]	@ (80026ec <MX_TIM2_Init+0x100>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002640:	4b2a      	ldr	r3, [pc, #168]	@ (80026ec <MX_TIM2_Init+0x100>)
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002646:	4829      	ldr	r0, [pc, #164]	@ (80026ec <MX_TIM2_Init+0x100>)
 8002648:	f002 f980 	bl	800494c <HAL_TIM_Base_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002652:	f7ff fb0d 	bl	8001c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800265a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800265c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002660:	4619      	mov	r1, r3
 8002662:	4822      	ldr	r0, [pc, #136]	@ (80026ec <MX_TIM2_Init+0x100>)
 8002664:	f002 ff72 	bl	800554c <HAL_TIM_ConfigClockSource>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800266e:	f7ff faff 	bl	8001c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002672:	481e      	ldr	r0, [pc, #120]	@ (80026ec <MX_TIM2_Init+0x100>)
 8002674:	f002 fa1c 	bl	8004ab0 <HAL_TIM_PWM_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800267e:	f7ff faf7 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800268a:	f107 0320 	add.w	r3, r7, #32
 800268e:	4619      	mov	r1, r3
 8002690:	4816      	ldr	r0, [pc, #88]	@ (80026ec <MX_TIM2_Init+0x100>)
 8002692:	f003 fd35 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800269c:	f7ff fae8 	bl	8001c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026a0:	2360      	movs	r3, #96	@ 0x60
 80026a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	2200      	movs	r2, #0
 80026b4:	4619      	mov	r1, r3
 80026b6:	480d      	ldr	r0, [pc, #52]	@ (80026ec <MX_TIM2_Init+0x100>)
 80026b8:	f002 fe86 	bl	80053c8 <HAL_TIM_PWM_ConfigChannel>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80026c2:	f7ff fad5 	bl	8001c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	2204      	movs	r2, #4
 80026ca:	4619      	mov	r1, r3
 80026cc:	4807      	ldr	r0, [pc, #28]	@ (80026ec <MX_TIM2_Init+0x100>)
 80026ce:	f002 fe7b 	bl	80053c8 <HAL_TIM_PWM_ConfigChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80026d8:	f7ff faca 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80026dc:	4803      	ldr	r0, [pc, #12]	@ (80026ec <MX_TIM2_Init+0x100>)
 80026de:	f000 fb45 	bl	8002d6c <HAL_TIM_MspPostInit>

}
 80026e2:	bf00      	nop
 80026e4:	3738      	adds	r7, #56	@ 0x38
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000194 	.word	0x20000194

080026f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	@ 0x28
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026f6:	f107 0318 	add.w	r3, r7, #24
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002704:	f107 0310 	add.w	r3, r7, #16
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800270e:	463b      	mov	r3, r7
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800271a:	4b42      	ldr	r3, [pc, #264]	@ (8002824 <MX_TIM3_Init+0x134>)
 800271c:	4a42      	ldr	r2, [pc, #264]	@ (8002828 <MX_TIM3_Init+0x138>)
 800271e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8002720:	4b40      	ldr	r3, [pc, #256]	@ (8002824 <MX_TIM3_Init+0x134>)
 8002722:	2263      	movs	r2, #99	@ 0x63
 8002724:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002726:	4b3f      	ldr	r3, [pc, #252]	@ (8002824 <MX_TIM3_Init+0x134>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800272c:	4b3d      	ldr	r3, [pc, #244]	@ (8002824 <MX_TIM3_Init+0x134>)
 800272e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002732:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002734:	4b3b      	ldr	r3, [pc, #236]	@ (8002824 <MX_TIM3_Init+0x134>)
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273a:	4b3a      	ldr	r3, [pc, #232]	@ (8002824 <MX_TIM3_Init+0x134>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002740:	4838      	ldr	r0, [pc, #224]	@ (8002824 <MX_TIM3_Init+0x134>)
 8002742:	f002 f903 	bl	800494c <HAL_TIM_Base_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800274c:	f7ff fa90 	bl	8001c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002754:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002756:	f107 0318 	add.w	r3, r7, #24
 800275a:	4619      	mov	r1, r3
 800275c:	4831      	ldr	r0, [pc, #196]	@ (8002824 <MX_TIM3_Init+0x134>)
 800275e:	f002 fef5 	bl	800554c <HAL_TIM_ConfigClockSource>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002768:	f7ff fa82 	bl	8001c70 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800276c:	482d      	ldr	r0, [pc, #180]	@ (8002824 <MX_TIM3_Init+0x134>)
 800276e:	f002 faa9 	bl	8004cc4 <HAL_TIM_IC_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002778:	f7ff fa7a 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002784:	f107 0310 	add.w	r3, r7, #16
 8002788:	4619      	mov	r1, r3
 800278a:	4826      	ldr	r0, [pc, #152]	@ (8002824 <MX_TIM3_Init+0x134>)
 800278c:	f003 fcb8 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002796:	f7ff fa6b 	bl	8001c70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800279a:	2300      	movs	r3, #0
 800279c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800279e:	2301      	movs	r3, #1
 80027a0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80027aa:	463b      	mov	r3, r7
 80027ac:	2200      	movs	r2, #0
 80027ae:	4619      	mov	r1, r3
 80027b0:	481c      	ldr	r0, [pc, #112]	@ (8002824 <MX_TIM3_Init+0x134>)
 80027b2:	f002 fd6d 	bl	8005290 <HAL_TIM_IC_ConfigChannel>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80027bc:	f7ff fa58 	bl	8001c70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80027c0:	2302      	movs	r3, #2
 80027c2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80027c4:	2302      	movs	r3, #2
 80027c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80027c8:	463b      	mov	r3, r7
 80027ca:	2204      	movs	r2, #4
 80027cc:	4619      	mov	r1, r3
 80027ce:	4815      	ldr	r0, [pc, #84]	@ (8002824 <MX_TIM3_Init+0x134>)
 80027d0:	f002 fd5e 	bl	8005290 <HAL_TIM_IC_ConfigChannel>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80027da:	f7ff fa49 	bl	8001c70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80027de:	2300      	movs	r3, #0
 80027e0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80027e2:	2301      	movs	r3, #1
 80027e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80027e6:	463b      	mov	r3, r7
 80027e8:	2208      	movs	r2, #8
 80027ea:	4619      	mov	r1, r3
 80027ec:	480d      	ldr	r0, [pc, #52]	@ (8002824 <MX_TIM3_Init+0x134>)
 80027ee:	f002 fd4f 	bl	8005290 <HAL_TIM_IC_ConfigChannel>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 80027f8:	f7ff fa3a 	bl	8001c70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80027fc:	2302      	movs	r3, #2
 80027fe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002800:	2302      	movs	r3, #2
 8002802:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002804:	463b      	mov	r3, r7
 8002806:	220c      	movs	r2, #12
 8002808:	4619      	mov	r1, r3
 800280a:	4806      	ldr	r0, [pc, #24]	@ (8002824 <MX_TIM3_Init+0x134>)
 800280c:	f002 fd40 	bl	8005290 <HAL_TIM_IC_ConfigChannel>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 8002816:	f7ff fa2b 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800281a:	bf00      	nop
 800281c:	3728      	adds	r7, #40	@ 0x28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200001dc 	.word	0x200001dc
 8002828:	40000400 	.word	0x40000400

0800282c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	@ 0x28
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002832:	f107 0318 	add.w	r3, r7, #24
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002840:	f107 0310 	add.w	r3, r7, #16
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800284a:	463b      	mov	r3, r7
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002856:	4b33      	ldr	r3, [pc, #204]	@ (8002924 <MX_TIM4_Init+0xf8>)
 8002858:	4a33      	ldr	r2, [pc, #204]	@ (8002928 <MX_TIM4_Init+0xfc>)
 800285a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 800285c:	4b31      	ldr	r3, [pc, #196]	@ (8002924 <MX_TIM4_Init+0xf8>)
 800285e:	2263      	movs	r2, #99	@ 0x63
 8002860:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002862:	4b30      	ldr	r3, [pc, #192]	@ (8002924 <MX_TIM4_Init+0xf8>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002868:	4b2e      	ldr	r3, [pc, #184]	@ (8002924 <MX_TIM4_Init+0xf8>)
 800286a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800286e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002870:	4b2c      	ldr	r3, [pc, #176]	@ (8002924 <MX_TIM4_Init+0xf8>)
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002876:	4b2b      	ldr	r3, [pc, #172]	@ (8002924 <MX_TIM4_Init+0xf8>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800287c:	4829      	ldr	r0, [pc, #164]	@ (8002924 <MX_TIM4_Init+0xf8>)
 800287e:	f002 f865 	bl	800494c <HAL_TIM_Base_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002888:	f7ff f9f2 	bl	8001c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800288c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002890:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002892:	f107 0318 	add.w	r3, r7, #24
 8002896:	4619      	mov	r1, r3
 8002898:	4822      	ldr	r0, [pc, #136]	@ (8002924 <MX_TIM4_Init+0xf8>)
 800289a:	f002 fe57 	bl	800554c <HAL_TIM_ConfigClockSource>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80028a4:	f7ff f9e4 	bl	8001c70 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80028a8:	481e      	ldr	r0, [pc, #120]	@ (8002924 <MX_TIM4_Init+0xf8>)
 80028aa:	f002 fa0b 	bl	8004cc4 <HAL_TIM_IC_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80028b4:	f7ff f9dc 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b8:	2300      	movs	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	4619      	mov	r1, r3
 80028c6:	4817      	ldr	r0, [pc, #92]	@ (8002924 <MX_TIM4_Init+0xf8>)
 80028c8:	f003 fc1a 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80028d2:	f7ff f9cd 	bl	8001c70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80028d6:	2300      	movs	r3, #0
 80028d8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80028da:	2301      	movs	r3, #1
 80028dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80028e6:	463b      	mov	r3, r7
 80028e8:	2200      	movs	r2, #0
 80028ea:	4619      	mov	r1, r3
 80028ec:	480d      	ldr	r0, [pc, #52]	@ (8002924 <MX_TIM4_Init+0xf8>)
 80028ee:	f002 fccf 	bl	8005290 <HAL_TIM_IC_ConfigChannel>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80028f8:	f7ff f9ba 	bl	8001c70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80028fc:	2302      	movs	r3, #2
 80028fe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002900:	2302      	movs	r3, #2
 8002902:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002904:	463b      	mov	r3, r7
 8002906:	2204      	movs	r2, #4
 8002908:	4619      	mov	r1, r3
 800290a:	4806      	ldr	r0, [pc, #24]	@ (8002924 <MX_TIM4_Init+0xf8>)
 800290c:	f002 fcc0 	bl	8005290 <HAL_TIM_IC_ConfigChannel>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8002916:	f7ff f9ab 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800291a:	bf00      	nop
 800291c:	3728      	adds	r7, #40	@ 0x28
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000224 	.word	0x20000224
 8002928:	40000800 	.word	0x40000800

0800292c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08e      	sub	sp, #56	@ 0x38
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a16      	ldr	r2, [pc, #88]	@ (80029a4 <HAL_TIM_Base_MspInit+0x78>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d116      	bne.n	800297c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	623b      	str	r3, [r7, #32]
 8002952:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <HAL_TIM_Base_MspInit+0x7c>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	4a14      	ldr	r2, [pc, #80]	@ (80029a8 <HAL_TIM_Base_MspInit+0x7c>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6453      	str	r3, [r2, #68]	@ 0x44
 800295e:	4b12      	ldr	r3, [pc, #72]	@ (80029a8 <HAL_TIM_Base_MspInit+0x7c>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	623b      	str	r3, [r7, #32]
 8002968:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2105      	movs	r1, #5
 800296e:	201a      	movs	r0, #26
 8002970:	f000 fd58 	bl	8003424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002974:	201a      	movs	r0, #26
 8002976:	f000 fd71 	bl	800345c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800297a:	e1e5      	b.n	8002d48 <HAL_TIM_Base_MspInit+0x41c>
  else if(tim_baseHandle->Instance==TIM2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002984:	d112      	bne.n	80029ac <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	4b07      	ldr	r3, [pc, #28]	@ (80029a8 <HAL_TIM_Base_MspInit+0x7c>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	4a06      	ldr	r2, [pc, #24]	@ (80029a8 <HAL_TIM_Base_MspInit+0x7c>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6413      	str	r3, [r2, #64]	@ 0x40
 8002996:	4b04      	ldr	r3, [pc, #16]	@ (80029a8 <HAL_TIM_Base_MspInit+0x7c>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	69fb      	ldr	r3, [r7, #28]
}
 80029a2:	e1d1      	b.n	8002d48 <HAL_TIM_Base_MspInit+0x41c>
 80029a4:	40010000 	.word	0x40010000
 80029a8:	40023800 	.word	0x40023800
  else if(tim_baseHandle->Instance==TIM3)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a8f      	ldr	r2, [pc, #572]	@ (8002bf0 <HAL_TIM_Base_MspInit+0x2c4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	f040 8134 	bne.w	8002c20 <HAL_TIM_Base_MspInit+0x2f4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029b8:	2300      	movs	r3, #0
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	4b8d      	ldr	r3, [pc, #564]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x2c8>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	4a8c      	ldr	r2, [pc, #560]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x2c8>)
 80029c2:	f043 0302 	orr.w	r3, r3, #2
 80029c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c8:	4b8a      	ldr	r3, [pc, #552]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x2c8>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	4b86      	ldr	r3, [pc, #536]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x2c8>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029dc:	4a85      	ldr	r2, [pc, #532]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x2c8>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e4:	4b83      	ldr	r3, [pc, #524]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x2c8>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	4b7f      	ldr	r3, [pc, #508]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x2c8>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f8:	4a7e      	ldr	r2, [pc, #504]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x2c8>)
 80029fa:	f043 0302 	orr.w	r3, r3, #2
 80029fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a00:	4b7c      	ldr	r3, [pc, #496]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x2c8>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_LEFT_Pin;
 8002a0c:	2340      	movs	r3, #64	@ 0x40
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
 8002a12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ECHO_LEFT_GPIO_Port, &GPIO_InitStruct);
 8002a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a24:	4619      	mov	r1, r3
 8002a26:	4874      	ldr	r0, [pc, #464]	@ (8002bf8 <HAL_TIM_Base_MspInit+0x2cc>)
 8002a28:	f001 f928 	bl	8003c7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ECHO_CENTER_Pin;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a30:	2302      	movs	r3, #2
 8002a32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ECHO_CENTER_GPIO_Port, &GPIO_InitStruct);
 8002a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a44:	4619      	mov	r1, r3
 8002a46:	486d      	ldr	r0, [pc, #436]	@ (8002bfc <HAL_TIM_Base_MspInit+0x2d0>)
 8002a48:	f001 f918 	bl	8003c7c <HAL_GPIO_Init>
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8002a4c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c00 <HAL_TIM_Base_MspInit+0x2d4>)
 8002a4e:	4a6d      	ldr	r2, [pc, #436]	@ (8002c04 <HAL_TIM_Base_MspInit+0x2d8>)
 8002a50:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002a52:	4b6b      	ldr	r3, [pc, #428]	@ (8002c00 <HAL_TIM_Base_MspInit+0x2d4>)
 8002a54:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002a58:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a5a:	4b69      	ldr	r3, [pc, #420]	@ (8002c00 <HAL_TIM_Base_MspInit+0x2d4>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a60:	4b67      	ldr	r3, [pc, #412]	@ (8002c00 <HAL_TIM_Base_MspInit+0x2d4>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002a66:	4b66      	ldr	r3, [pc, #408]	@ (8002c00 <HAL_TIM_Base_MspInit+0x2d4>)
 8002a68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a6c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a6e:	4b64      	ldr	r3, [pc, #400]	@ (8002c00 <HAL_TIM_Base_MspInit+0x2d4>)
 8002a70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a74:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a76:	4b62      	ldr	r3, [pc, #392]	@ (8002c00 <HAL_TIM_Base_MspInit+0x2d4>)
 8002a78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a7c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8002a7e:	4b60      	ldr	r3, [pc, #384]	@ (8002c00 <HAL_TIM_Base_MspInit+0x2d4>)
 8002a80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a84:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002a86:	4b5e      	ldr	r3, [pc, #376]	@ (8002c00 <HAL_TIM_Base_MspInit+0x2d4>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a8c:	4b5c      	ldr	r3, [pc, #368]	@ (8002c00 <HAL_TIM_Base_MspInit+0x2d4>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002a92:	485b      	ldr	r0, [pc, #364]	@ (8002c00 <HAL_TIM_Base_MspInit+0x2d4>)
 8002a94:	f000 fcf0 	bl	8003478 <HAL_DMA_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_TIM_Base_MspInit+0x176>
      Error_Handler();
 8002a9e:	f7ff f8e7 	bl	8001c70 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a56      	ldr	r2, [pc, #344]	@ (8002c00 <HAL_TIM_Base_MspInit+0x2d4>)
 8002aa6:	625a      	str	r2, [r3, #36]	@ 0x24
 8002aa8:	4a55      	ldr	r2, [pc, #340]	@ (8002c00 <HAL_TIM_Base_MspInit+0x2d4>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a53      	ldr	r2, [pc, #332]	@ (8002c00 <HAL_TIM_Base_MspInit+0x2d4>)
 8002ab2:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ab4:	4a52      	ldr	r2, [pc, #328]	@ (8002c00 <HAL_TIM_Base_MspInit+0x2d4>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8002aba:	4b53      	ldr	r3, [pc, #332]	@ (8002c08 <HAL_TIM_Base_MspInit+0x2dc>)
 8002abc:	4a53      	ldr	r2, [pc, #332]	@ (8002c0c <HAL_TIM_Base_MspInit+0x2e0>)
 8002abe:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8002ac0:	4b51      	ldr	r3, [pc, #324]	@ (8002c08 <HAL_TIM_Base_MspInit+0x2dc>)
 8002ac2:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002ac6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ac8:	4b4f      	ldr	r3, [pc, #316]	@ (8002c08 <HAL_TIM_Base_MspInit+0x2dc>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ace:	4b4e      	ldr	r3, [pc, #312]	@ (8002c08 <HAL_TIM_Base_MspInit+0x2dc>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002ad4:	4b4c      	ldr	r3, [pc, #304]	@ (8002c08 <HAL_TIM_Base_MspInit+0x2dc>)
 8002ad6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ada:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002adc:	4b4a      	ldr	r3, [pc, #296]	@ (8002c08 <HAL_TIM_Base_MspInit+0x2dc>)
 8002ade:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ae2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ae4:	4b48      	ldr	r3, [pc, #288]	@ (8002c08 <HAL_TIM_Base_MspInit+0x2dc>)
 8002ae6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002aea:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8002aec:	4b46      	ldr	r3, [pc, #280]	@ (8002c08 <HAL_TIM_Base_MspInit+0x2dc>)
 8002aee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002af2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002af4:	4b44      	ldr	r3, [pc, #272]	@ (8002c08 <HAL_TIM_Base_MspInit+0x2dc>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002afa:	4b43      	ldr	r3, [pc, #268]	@ (8002c08 <HAL_TIM_Base_MspInit+0x2dc>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002b00:	4841      	ldr	r0, [pc, #260]	@ (8002c08 <HAL_TIM_Base_MspInit+0x2dc>)
 8002b02:	f000 fcb9 	bl	8003478 <HAL_DMA_Init>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_TIM_Base_MspInit+0x1e4>
      Error_Handler();
 8002b0c:	f7ff f8b0 	bl	8001c70 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a3d      	ldr	r2, [pc, #244]	@ (8002c08 <HAL_TIM_Base_MspInit+0x2dc>)
 8002b14:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b16:	4a3c      	ldr	r2, [pc, #240]	@ (8002c08 <HAL_TIM_Base_MspInit+0x2dc>)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 8002b1c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c10 <HAL_TIM_Base_MspInit+0x2e4>)
 8002b1e:	4a3d      	ldr	r2, [pc, #244]	@ (8002c14 <HAL_TIM_Base_MspInit+0x2e8>)
 8002b20:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 8002b22:	4b3b      	ldr	r3, [pc, #236]	@ (8002c10 <HAL_TIM_Base_MspInit+0x2e4>)
 8002b24:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002b28:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b2a:	4b39      	ldr	r3, [pc, #228]	@ (8002c10 <HAL_TIM_Base_MspInit+0x2e4>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b30:	4b37      	ldr	r3, [pc, #220]	@ (8002c10 <HAL_TIM_Base_MspInit+0x2e4>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002b36:	4b36      	ldr	r3, [pc, #216]	@ (8002c10 <HAL_TIM_Base_MspInit+0x2e4>)
 8002b38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b3c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b3e:	4b34      	ldr	r3, [pc, #208]	@ (8002c10 <HAL_TIM_Base_MspInit+0x2e4>)
 8002b40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b44:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b46:	4b32      	ldr	r3, [pc, #200]	@ (8002c10 <HAL_TIM_Base_MspInit+0x2e4>)
 8002b48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b4c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8002b4e:	4b30      	ldr	r3, [pc, #192]	@ (8002c10 <HAL_TIM_Base_MspInit+0x2e4>)
 8002b50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b54:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002b56:	4b2e      	ldr	r3, [pc, #184]	@ (8002c10 <HAL_TIM_Base_MspInit+0x2e4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c10 <HAL_TIM_Base_MspInit+0x2e4>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8002b62:	482b      	ldr	r0, [pc, #172]	@ (8002c10 <HAL_TIM_Base_MspInit+0x2e4>)
 8002b64:	f000 fc88 	bl	8003478 <HAL_DMA_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_TIM_Base_MspInit+0x246>
      Error_Handler();
 8002b6e:	f7ff f87f 	bl	8001c70 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a26      	ldr	r2, [pc, #152]	@ (8002c10 <HAL_TIM_Base_MspInit+0x2e4>)
 8002b76:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b78:	4a25      	ldr	r2, [pc, #148]	@ (8002c10 <HAL_TIM_Base_MspInit+0x2e4>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8002b7e:	4b26      	ldr	r3, [pc, #152]	@ (8002c18 <HAL_TIM_Base_MspInit+0x2ec>)
 8002b80:	4a26      	ldr	r2, [pc, #152]	@ (8002c1c <HAL_TIM_Base_MspInit+0x2f0>)
 8002b82:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8002b84:	4b24      	ldr	r3, [pc, #144]	@ (8002c18 <HAL_TIM_Base_MspInit+0x2ec>)
 8002b86:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002b8a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b8c:	4b22      	ldr	r3, [pc, #136]	@ (8002c18 <HAL_TIM_Base_MspInit+0x2ec>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b92:	4b21      	ldr	r3, [pc, #132]	@ (8002c18 <HAL_TIM_Base_MspInit+0x2ec>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002b98:	4b1f      	ldr	r3, [pc, #124]	@ (8002c18 <HAL_TIM_Base_MspInit+0x2ec>)
 8002b9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b9e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c18 <HAL_TIM_Base_MspInit+0x2ec>)
 8002ba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ba6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c18 <HAL_TIM_Base_MspInit+0x2ec>)
 8002baa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bae:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8002bb0:	4b19      	ldr	r3, [pc, #100]	@ (8002c18 <HAL_TIM_Base_MspInit+0x2ec>)
 8002bb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bb6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002bb8:	4b17      	ldr	r3, [pc, #92]	@ (8002c18 <HAL_TIM_Base_MspInit+0x2ec>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bbe:	4b16      	ldr	r3, [pc, #88]	@ (8002c18 <HAL_TIM_Base_MspInit+0x2ec>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8002bc4:	4814      	ldr	r0, [pc, #80]	@ (8002c18 <HAL_TIM_Base_MspInit+0x2ec>)
 8002bc6:	f000 fc57 	bl	8003478 <HAL_DMA_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_TIM_Base_MspInit+0x2a8>
      Error_Handler();
 8002bd0:	f7ff f84e 	bl	8001c70 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a10      	ldr	r2, [pc, #64]	@ (8002c18 <HAL_TIM_Base_MspInit+0x2ec>)
 8002bd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bda:	4a0f      	ldr	r2, [pc, #60]	@ (8002c18 <HAL_TIM_Base_MspInit+0x2ec>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a0d      	ldr	r2, [pc, #52]	@ (8002c18 <HAL_TIM_Base_MspInit+0x2ec>)
 8002be4:	621a      	str	r2, [r3, #32]
 8002be6:	4a0c      	ldr	r2, [pc, #48]	@ (8002c18 <HAL_TIM_Base_MspInit+0x2ec>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002bec:	e0ac      	b.n	8002d48 <HAL_TIM_Base_MspInit+0x41c>
 8002bee:	bf00      	nop
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40020000 	.word	0x40020000
 8002bfc:	40020400 	.word	0x40020400
 8002c00:	2000026c 	.word	0x2000026c
 8002c04:	40026070 	.word	0x40026070
 8002c08:	200002cc 	.word	0x200002cc
 8002c0c:	40026088 	.word	0x40026088
 8002c10:	2000032c 	.word	0x2000032c
 8002c14:	400260b8 	.word	0x400260b8
 8002c18:	2000038c 	.word	0x2000038c
 8002c1c:	40026040 	.word	0x40026040
  else if(tim_baseHandle->Instance==TIM4)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a4a      	ldr	r2, [pc, #296]	@ (8002d50 <HAL_TIM_Base_MspInit+0x424>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	f040 808e 	bne.w	8002d48 <HAL_TIM_Base_MspInit+0x41c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	4b48      	ldr	r3, [pc, #288]	@ (8002d54 <HAL_TIM_Base_MspInit+0x428>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	4a47      	ldr	r2, [pc, #284]	@ (8002d54 <HAL_TIM_Base_MspInit+0x428>)
 8002c36:	f043 0304 	orr.w	r3, r3, #4
 8002c3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c3c:	4b45      	ldr	r3, [pc, #276]	@ (8002d54 <HAL_TIM_Base_MspInit+0x428>)
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	4b41      	ldr	r3, [pc, #260]	@ (8002d54 <HAL_TIM_Base_MspInit+0x428>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c50:	4a40      	ldr	r2, [pc, #256]	@ (8002d54 <HAL_TIM_Base_MspInit+0x428>)
 8002c52:	f043 0302 	orr.w	r3, r3, #2
 8002c56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c58:	4b3e      	ldr	r3, [pc, #248]	@ (8002d54 <HAL_TIM_Base_MspInit+0x428>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECHO_RIGHT_Pin;
 8002c64:	2340      	movs	r3, #64	@ 0x40
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c70:	2303      	movs	r3, #3
 8002c72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c74:	2302      	movs	r3, #2
 8002c76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ECHO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8002c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4836      	ldr	r0, [pc, #216]	@ (8002d58 <HAL_TIM_Base_MspInit+0x42c>)
 8002c80:	f000 fffc 	bl	8003c7c <HAL_GPIO_Init>
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8002c84:	4b35      	ldr	r3, [pc, #212]	@ (8002d5c <HAL_TIM_Base_MspInit+0x430>)
 8002c86:	4a36      	ldr	r2, [pc, #216]	@ (8002d60 <HAL_TIM_Base_MspInit+0x434>)
 8002c88:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8002c8a:	4b34      	ldr	r3, [pc, #208]	@ (8002d5c <HAL_TIM_Base_MspInit+0x430>)
 8002c8c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002c90:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c92:	4b32      	ldr	r3, [pc, #200]	@ (8002d5c <HAL_TIM_Base_MspInit+0x430>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c98:	4b30      	ldr	r3, [pc, #192]	@ (8002d5c <HAL_TIM_Base_MspInit+0x430>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002d5c <HAL_TIM_Base_MspInit+0x430>)
 8002ca0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ca4:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8002d5c <HAL_TIM_Base_MspInit+0x430>)
 8002ca8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002cac:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cae:	4b2b      	ldr	r3, [pc, #172]	@ (8002d5c <HAL_TIM_Base_MspInit+0x430>)
 8002cb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cb4:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8002cb6:	4b29      	ldr	r3, [pc, #164]	@ (8002d5c <HAL_TIM_Base_MspInit+0x430>)
 8002cb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cbc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002cbe:	4b27      	ldr	r3, [pc, #156]	@ (8002d5c <HAL_TIM_Base_MspInit+0x430>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cc4:	4b25      	ldr	r3, [pc, #148]	@ (8002d5c <HAL_TIM_Base_MspInit+0x430>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002cca:	4824      	ldr	r0, [pc, #144]	@ (8002d5c <HAL_TIM_Base_MspInit+0x430>)
 8002ccc:	f000 fbd4 	bl	8003478 <HAL_DMA_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_TIM_Base_MspInit+0x3ae>
      Error_Handler();
 8002cd6:	f7fe ffcb 	bl	8001c70 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8002d5c <HAL_TIM_Base_MspInit+0x430>)
 8002cde:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d5c <HAL_TIM_Base_MspInit+0x430>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8002ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d64 <HAL_TIM_Base_MspInit+0x438>)
 8002ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d68 <HAL_TIM_Base_MspInit+0x43c>)
 8002cea:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8002cec:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <HAL_TIM_Base_MspInit+0x438>)
 8002cee:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002cf2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d64 <HAL_TIM_Base_MspInit+0x438>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002d64 <HAL_TIM_Base_MspInit+0x438>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002d00:	4b18      	ldr	r3, [pc, #96]	@ (8002d64 <HAL_TIM_Base_MspInit+0x438>)
 8002d02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d06:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d08:	4b16      	ldr	r3, [pc, #88]	@ (8002d64 <HAL_TIM_Base_MspInit+0x438>)
 8002d0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d0e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d10:	4b14      	ldr	r3, [pc, #80]	@ (8002d64 <HAL_TIM_Base_MspInit+0x438>)
 8002d12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d16:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 8002d18:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <HAL_TIM_Base_MspInit+0x438>)
 8002d1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d1e:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002d20:	4b10      	ldr	r3, [pc, #64]	@ (8002d64 <HAL_TIM_Base_MspInit+0x438>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d26:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <HAL_TIM_Base_MspInit+0x438>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8002d2c:	480d      	ldr	r0, [pc, #52]	@ (8002d64 <HAL_TIM_Base_MspInit+0x438>)
 8002d2e:	f000 fba3 	bl	8003478 <HAL_DMA_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_TIM_Base_MspInit+0x410>
      Error_Handler();
 8002d38:	f7fe ff9a 	bl	8001c70 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a09      	ldr	r2, [pc, #36]	@ (8002d64 <HAL_TIM_Base_MspInit+0x438>)
 8002d40:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d42:	4a08      	ldr	r2, [pc, #32]	@ (8002d64 <HAL_TIM_Base_MspInit+0x438>)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002d48:	bf00      	nop
 8002d4a:	3738      	adds	r7, #56	@ 0x38
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40000800 	.word	0x40000800
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020400 	.word	0x40020400
 8002d5c:	200003ec 	.word	0x200003ec
 8002d60:	40026010 	.word	0x40026010
 8002d64:	2000044c 	.word	0x2000044c
 8002d68:	40026058 	.word	0x40026058

08002d6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	@ 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a24      	ldr	r2, [pc, #144]	@ (8002e1c <HAL_TIM_MspPostInit+0xb0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d11f      	bne.n	8002dce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	4b23      	ldr	r3, [pc, #140]	@ (8002e20 <HAL_TIM_MspPostInit+0xb4>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	4a22      	ldr	r2, [pc, #136]	@ (8002e20 <HAL_TIM_MspPostInit+0xb4>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d9e:	4b20      	ldr	r3, [pc, #128]	@ (8002e20 <HAL_TIM_MspPostInit+0xb4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TRIG_LEFT_Pin|TRIG_CENTER_Pin|TRIG_RIGHT_Pin;
 8002daa:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db0:	2302      	movs	r3, #2
 8002db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db8:	2303      	movs	r3, #3
 8002dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc0:	f107 0314 	add.w	r3, r7, #20
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4817      	ldr	r0, [pc, #92]	@ (8002e24 <HAL_TIM_MspPostInit+0xb8>)
 8002dc8:	f000 ff58 	bl	8003c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002dcc:	e022      	b.n	8002e14 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd6:	d11d      	bne.n	8002e14 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <HAL_TIM_MspPostInit+0xb4>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	4a0f      	ldr	r2, [pc, #60]	@ (8002e20 <HAL_TIM_MspPostInit+0xb4>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e20 <HAL_TIM_MspPostInit+0xb4>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = out_pwmMotor_A_Pin|out_pwmMotor_B_Pin;
 8002df4:	2303      	movs	r3, #3
 8002df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e00:	2302      	movs	r3, #2
 8002e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e04:	2301      	movs	r3, #1
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4805      	ldr	r0, [pc, #20]	@ (8002e24 <HAL_TIM_MspPostInit+0xb8>)
 8002e10:	f000 ff34 	bl	8003c7c <HAL_GPIO_Init>
}
 8002e14:	bf00      	nop
 8002e16:	3728      	adds	r7, #40	@ 0x28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40010000 	.word	0x40010000
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40020000 	.word	0x40020000

08002e28 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 0 */
extern void RCcar_analogStick(uint8_t x, uint8_t y);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
	// Android arduino bluetooth controller app
	if (huart == &huart_bluetooth)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a4d      	ldr	r2, [pc, #308]	@ (8002f68 <HAL_UART_RxCpltCallback+0x140>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	f040 8092 	bne.w	8002f5e <HAL_UART_RxCpltCallback+0x136>
	{
		switch (rxChar)
 8002e3a:	4b4c      	ldr	r3, [pc, #304]	@ (8002f6c <HAL_UART_RxCpltCallback+0x144>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	3b30      	subs	r3, #48	@ 0x30
 8002e40:	2b22      	cmp	r3, #34	@ 0x22
 8002e42:	f200 808c 	bhi.w	8002f5e <HAL_UART_RxCpltCallback+0x136>
 8002e46:	a201      	add	r2, pc, #4	@ (adr r2, 8002e4c <HAL_UART_RxCpltCallback+0x24>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002f3b 	.word	0x08002f3b
 8002e50:	08002f5f 	.word	0x08002f5f
 8002e54:	08002f5f 	.word	0x08002f5f
 8002e58:	08002f5f 	.word	0x08002f5f
 8002e5c:	08002f5f 	.word	0x08002f5f
 8002e60:	08002f5f 	.word	0x08002f5f
 8002e64:	08002f5f 	.word	0x08002f5f
 8002e68:	08002f5f 	.word	0x08002f5f
 8002e6c:	08002f5f 	.word	0x08002f5f
 8002e70:	08002f5f 	.word	0x08002f5f
 8002e74:	08002f5f 	.word	0x08002f5f
 8002e78:	08002f5f 	.word	0x08002f5f
 8002e7c:	08002f5f 	.word	0x08002f5f
 8002e80:	08002f5f 	.word	0x08002f5f
 8002e84:	08002f5f 	.word	0x08002f5f
 8002e88:	08002f5f 	.word	0x08002f5f
 8002e8c:	08002f5f 	.word	0x08002f5f
 8002e90:	08002f19 	.word	0x08002f19
 8002e94:	08002ee9 	.word	0x08002ee9
 8002e98:	08002f5f 	.word	0x08002f5f
 8002e9c:	08002f5f 	.word	0x08002f5f
 8002ea0:	08002f5f 	.word	0x08002f5f
 8002ea4:	08002ed9 	.word	0x08002ed9
 8002ea8:	08002f5f 	.word	0x08002f5f
 8002eac:	08002f5f 	.word	0x08002f5f
 8002eb0:	08002f5f 	.word	0x08002f5f
 8002eb4:	08002f5f 	.word	0x08002f5f
 8002eb8:	08002f5f 	.word	0x08002f5f
 8002ebc:	08002ef9 	.word	0x08002ef9
 8002ec0:	08002f5f 	.word	0x08002f5f
 8002ec4:	08002f5f 	.word	0x08002f5f
 8002ec8:	08002f5f 	.word	0x08002f5f
 8002ecc:	08002f5f 	.word	0x08002f5f
 8002ed0:	08002f5f 	.word	0x08002f5f
 8002ed4:	08002f09 	.word	0x08002f09
		{
		case 'F':
			if (!mode_auto_manu) RCcar_go_forward(100);
 8002ed8:	4b25      	ldr	r3, [pc, #148]	@ (8002f70 <HAL_UART_RxCpltCallback+0x148>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d133      	bne.n	8002f48 <HAL_UART_RxCpltCallback+0x120>
 8002ee0:	2064      	movs	r0, #100	@ 0x64
 8002ee2:	f7ff f815 	bl	8001f10 <RCcar_go_forward>
			break;
 8002ee6:	e02f      	b.n	8002f48 <HAL_UART_RxCpltCallback+0x120>
		case 'B':
			if (!mode_auto_manu) RCcar_go_backward(100);
 8002ee8:	4b21      	ldr	r3, [pc, #132]	@ (8002f70 <HAL_UART_RxCpltCallback+0x148>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d12d      	bne.n	8002f4c <HAL_UART_RxCpltCallback+0x124>
 8002ef0:	2064      	movs	r0, #100	@ 0x64
 8002ef2:	f7ff f8a1 	bl	8002038 <RCcar_go_backward>
			break;
 8002ef6:	e029      	b.n	8002f4c <HAL_UART_RxCpltCallback+0x124>
		case 'L':
			if (!mode_auto_manu) RCcar_go_soft_left(100);
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f70 <HAL_UART_RxCpltCallback+0x148>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d127      	bne.n	8002f50 <HAL_UART_RxCpltCallback+0x128>
 8002f00:	2064      	movs	r0, #100	@ 0x64
 8002f02:	f7ff f835 	bl	8001f70 <RCcar_go_soft_left>
			break;
 8002f06:	e023      	b.n	8002f50 <HAL_UART_RxCpltCallback+0x128>
		case 'R':
			if (!mode_auto_manu) RCcar_go_soft_right(100);
 8002f08:	4b19      	ldr	r3, [pc, #100]	@ (8002f70 <HAL_UART_RxCpltCallback+0x148>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d121      	bne.n	8002f54 <HAL_UART_RxCpltCallback+0x12c>
 8002f10:	2064      	movs	r0, #100	@ 0x64
 8002f12:	f7ff f85f 	bl	8001fd4 <RCcar_go_soft_right>
			break;
 8002f16:	e01d      	b.n	8002f54 <HAL_UART_RxCpltCallback+0x12c>
		case 'A':
			mode_auto_manu = !mode_auto_manu;
 8002f18:	4b15      	ldr	r3, [pc, #84]	@ (8002f70 <HAL_UART_RxCpltCallback+0x148>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	4b11      	ldr	r3, [pc, #68]	@ (8002f70 <HAL_UART_RxCpltCallback+0x148>)
 8002f2a:	701a      	strb	r2, [r3, #0]
			if (!mode_auto_manu) RCcar_stop();
 8002f2c:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <HAL_UART_RxCpltCallback+0x148>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d111      	bne.n	8002f58 <HAL_UART_RxCpltCallback+0x130>
 8002f34:	f7ff f8b0 	bl	8002098 <RCcar_stop>
			break;
 8002f38:	e00e      	b.n	8002f58 <HAL_UART_RxCpltCallback+0x130>
		case '0':
			if (!mode_auto_manu) RCcar_stop();
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f70 <HAL_UART_RxCpltCallback+0x148>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10c      	bne.n	8002f5c <HAL_UART_RxCpltCallback+0x134>
 8002f42:	f7ff f8a9 	bl	8002098 <RCcar_stop>
			break;
 8002f46:	e009      	b.n	8002f5c <HAL_UART_RxCpltCallback+0x134>
			break;
 8002f48:	bf00      	nop
 8002f4a:	e008      	b.n	8002f5e <HAL_UART_RxCpltCallback+0x136>
			break;
 8002f4c:	bf00      	nop
 8002f4e:	e006      	b.n	8002f5e <HAL_UART_RxCpltCallback+0x136>
			break;
 8002f50:	bf00      	nop
 8002f52:	e004      	b.n	8002f5e <HAL_UART_RxCpltCallback+0x136>
			break;
 8002f54:	bf00      	nop
 8002f56:	e002      	b.n	8002f5e <HAL_UART_RxCpltCallback+0x136>
			break;
 8002f58:	bf00      	nop
 8002f5a:	e000      	b.n	8002f5e <HAL_UART_RxCpltCallback+0x136>
			break;
 8002f5c:	bf00      	nop
		}
	}

}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	200004ac 	.word	0x200004ac
 8002f6c:	20000098 	.word	0x20000098
 8002f70:	200000a8 	.word	0x200000a8

08002f74 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f78:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002f7a:	4a12      	ldr	r2, [pc, #72]	@ (8002fc4 <MX_USART1_UART_Init+0x50>)
 8002f7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002f7e:	4b10      	ldr	r3, [pc, #64]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002f80:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002f84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f86:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f92:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f98:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9e:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002faa:	4805      	ldr	r0, [pc, #20]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002fac:	f003 f97c 	bl	80062a8 <HAL_UART_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fb6:	f7fe fe5b 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200004ac 	.word	0x200004ac
 8002fc4:	40011000 	.word	0x40011000

08002fc8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <MX_USART2_UART_Init+0x4c>)
 8002fce:	4a12      	ldr	r2, [pc, #72]	@ (8003018 <MX_USART2_UART_Init+0x50>)
 8002fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002fd2:	4b10      	ldr	r3, [pc, #64]	@ (8003014 <MX_USART2_UART_Init+0x4c>)
 8002fd4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002fd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fda:	4b0e      	ldr	r3, [pc, #56]	@ (8003014 <MX_USART2_UART_Init+0x4c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8003014 <MX_USART2_UART_Init+0x4c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8003014 <MX_USART2_UART_Init+0x4c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fec:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <MX_USART2_UART_Init+0x4c>)
 8002fee:	220c      	movs	r2, #12
 8002ff0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff2:	4b08      	ldr	r3, [pc, #32]	@ (8003014 <MX_USART2_UART_Init+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff8:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <MX_USART2_UART_Init+0x4c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ffe:	4805      	ldr	r0, [pc, #20]	@ (8003014 <MX_USART2_UART_Init+0x4c>)
 8003000:	f003 f952 	bl	80062a8 <HAL_UART_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800300a:	f7fe fe31 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	200004f4 	.word	0x200004f4
 8003018:	40004400 	.word	0x40004400

0800301c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	@ 0x30
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 031c 	add.w	r3, r7, #28
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a61      	ldr	r2, [pc, #388]	@ (80031c0 <HAL_UART_MspInit+0x1a4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	f040 8083 	bne.w	8003146 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003040:	2300      	movs	r3, #0
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	4b5f      	ldr	r3, [pc, #380]	@ (80031c4 <HAL_UART_MspInit+0x1a8>)
 8003046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003048:	4a5e      	ldr	r2, [pc, #376]	@ (80031c4 <HAL_UART_MspInit+0x1a8>)
 800304a:	f043 0310 	orr.w	r3, r3, #16
 800304e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003050:	4b5c      	ldr	r3, [pc, #368]	@ (80031c4 <HAL_UART_MspInit+0x1a8>)
 8003052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	4b58      	ldr	r3, [pc, #352]	@ (80031c4 <HAL_UART_MspInit+0x1a8>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003064:	4a57      	ldr	r2, [pc, #348]	@ (80031c4 <HAL_UART_MspInit+0x1a8>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6313      	str	r3, [r2, #48]	@ 0x30
 800306c:	4b55      	ldr	r3, [pc, #340]	@ (80031c4 <HAL_UART_MspInit+0x1a8>)
 800306e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	4b51      	ldr	r3, [pc, #324]	@ (80031c4 <HAL_UART_MspInit+0x1a8>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003080:	4a50      	ldr	r2, [pc, #320]	@ (80031c4 <HAL_UART_MspInit+0x1a8>)
 8003082:	f043 0302 	orr.w	r3, r3, #2
 8003086:	6313      	str	r3, [r2, #48]	@ 0x30
 8003088:	4b4e      	ldr	r3, [pc, #312]	@ (80031c4 <HAL_UART_MspInit+0x1a8>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003094:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309a:	2302      	movs	r3, #2
 800309c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a2:	2303      	movs	r3, #3
 80030a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030a6:	2307      	movs	r3, #7
 80030a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030aa:	f107 031c 	add.w	r3, r7, #28
 80030ae:	4619      	mov	r1, r3
 80030b0:	4845      	ldr	r0, [pc, #276]	@ (80031c8 <HAL_UART_MspInit+0x1ac>)
 80030b2:	f000 fde3 	bl	8003c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030b6:	2308      	movs	r3, #8
 80030b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ba:	2302      	movs	r3, #2
 80030bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c2:	2303      	movs	r3, #3
 80030c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030c6:	2307      	movs	r3, #7
 80030c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ca:	f107 031c 	add.w	r3, r7, #28
 80030ce:	4619      	mov	r1, r3
 80030d0:	483e      	ldr	r0, [pc, #248]	@ (80031cc <HAL_UART_MspInit+0x1b0>)
 80030d2:	f000 fdd3 	bl	8003c7c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80030d6:	4b3e      	ldr	r3, [pc, #248]	@ (80031d0 <HAL_UART_MspInit+0x1b4>)
 80030d8:	4a3e      	ldr	r2, [pc, #248]	@ (80031d4 <HAL_UART_MspInit+0x1b8>)
 80030da:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80030dc:	4b3c      	ldr	r3, [pc, #240]	@ (80031d0 <HAL_UART_MspInit+0x1b4>)
 80030de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80030e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030e4:	4b3a      	ldr	r3, [pc, #232]	@ (80031d0 <HAL_UART_MspInit+0x1b4>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ea:	4b39      	ldr	r3, [pc, #228]	@ (80031d0 <HAL_UART_MspInit+0x1b4>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030f0:	4b37      	ldr	r3, [pc, #220]	@ (80031d0 <HAL_UART_MspInit+0x1b4>)
 80030f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030f8:	4b35      	ldr	r3, [pc, #212]	@ (80031d0 <HAL_UART_MspInit+0x1b4>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030fe:	4b34      	ldr	r3, [pc, #208]	@ (80031d0 <HAL_UART_MspInit+0x1b4>)
 8003100:	2200      	movs	r2, #0
 8003102:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003104:	4b32      	ldr	r3, [pc, #200]	@ (80031d0 <HAL_UART_MspInit+0x1b4>)
 8003106:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800310a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800310c:	4b30      	ldr	r3, [pc, #192]	@ (80031d0 <HAL_UART_MspInit+0x1b4>)
 800310e:	2200      	movs	r2, #0
 8003110:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003112:	4b2f      	ldr	r3, [pc, #188]	@ (80031d0 <HAL_UART_MspInit+0x1b4>)
 8003114:	2200      	movs	r2, #0
 8003116:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003118:	482d      	ldr	r0, [pc, #180]	@ (80031d0 <HAL_UART_MspInit+0x1b4>)
 800311a:	f000 f9ad 	bl	8003478 <HAL_DMA_Init>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003124:	f7fe fda4 	bl	8001c70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a29      	ldr	r2, [pc, #164]	@ (80031d0 <HAL_UART_MspInit+0x1b4>)
 800312c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800312e:	4a28      	ldr	r2, [pc, #160]	@ (80031d0 <HAL_UART_MspInit+0x1b4>)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003134:	2200      	movs	r2, #0
 8003136:	2105      	movs	r1, #5
 8003138:	2025      	movs	r0, #37	@ 0x25
 800313a:	f000 f973 	bl	8003424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800313e:	2025      	movs	r0, #37	@ 0x25
 8003140:	f000 f98c 	bl	800345c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003144:	e038      	b.n	80031b8 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART2)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a23      	ldr	r2, [pc, #140]	@ (80031d8 <HAL_UART_MspInit+0x1bc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d133      	bne.n	80031b8 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	4b1b      	ldr	r3, [pc, #108]	@ (80031c4 <HAL_UART_MspInit+0x1a8>)
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	4a1a      	ldr	r2, [pc, #104]	@ (80031c4 <HAL_UART_MspInit+0x1a8>)
 800315a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800315e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003160:	4b18      	ldr	r3, [pc, #96]	@ (80031c4 <HAL_UART_MspInit+0x1a8>)
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316c:	2300      	movs	r3, #0
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <HAL_UART_MspInit+0x1a8>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003174:	4a13      	ldr	r2, [pc, #76]	@ (80031c4 <HAL_UART_MspInit+0x1a8>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6313      	str	r3, [r2, #48]	@ 0x30
 800317c:	4b11      	ldr	r3, [pc, #68]	@ (80031c4 <HAL_UART_MspInit+0x1a8>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003188:	230c      	movs	r3, #12
 800318a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318c:	2302      	movs	r3, #2
 800318e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003194:	2303      	movs	r3, #3
 8003196:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003198:	2307      	movs	r3, #7
 800319a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319c:	f107 031c 	add.w	r3, r7, #28
 80031a0:	4619      	mov	r1, r3
 80031a2:	4809      	ldr	r0, [pc, #36]	@ (80031c8 <HAL_UART_MspInit+0x1ac>)
 80031a4:	f000 fd6a 	bl	8003c7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80031a8:	2200      	movs	r2, #0
 80031aa:	2105      	movs	r1, #5
 80031ac:	2026      	movs	r0, #38	@ 0x26
 80031ae:	f000 f939 	bl	8003424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031b2:	2026      	movs	r0, #38	@ 0x26
 80031b4:	f000 f952 	bl	800345c <HAL_NVIC_EnableIRQ>
}
 80031b8:	bf00      	nop
 80031ba:	3730      	adds	r7, #48	@ 0x30
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40011000 	.word	0x40011000
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40020000 	.word	0x40020000
 80031cc:	40020400 	.word	0x40020400
 80031d0:	2000053c 	.word	0x2000053c
 80031d4:	40026440 	.word	0x40026440
 80031d8:	40004400 	.word	0x40004400

080031dc <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 80031dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003214 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031e0:	f7ff f938 	bl	8002454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031e4:	480c      	ldr	r0, [pc, #48]	@ (8003218 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031e6:	490d      	ldr	r1, [pc, #52]	@ (800321c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003220 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031ec:	e002      	b.n	80031f4 <LoopCopyDataInit>

080031ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031f2:	3304      	adds	r3, #4

080031f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031f8:	d3f9      	bcc.n	80031ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003224 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003228 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003200:	e001      	b.n	8003206 <LoopFillZerobss>

08003202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003204:	3204      	adds	r2, #4

08003206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003208:	d3fb      	bcc.n	8003202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800320a:	f007 f9e7 	bl	800a5dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800320e:	f7fe fc41 	bl	8001a94 <main>
  bx  lr    
 8003212:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003214:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800321c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003220:	0800b2d4 	.word	0x0800b2d4
  ldr r2, =_sbss
 8003224:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003228:	200050d4 	.word	0x200050d4

0800322c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800322c:	e7fe      	b.n	800322c <ADC_IRQHandler>
	...

08003230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003234:	4b0e      	ldr	r3, [pc, #56]	@ (8003270 <HAL_Init+0x40>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a0d      	ldr	r2, [pc, #52]	@ (8003270 <HAL_Init+0x40>)
 800323a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800323e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003240:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <HAL_Init+0x40>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a0a      	ldr	r2, [pc, #40]	@ (8003270 <HAL_Init+0x40>)
 8003246:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800324a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800324c:	4b08      	ldr	r3, [pc, #32]	@ (8003270 <HAL_Init+0x40>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a07      	ldr	r2, [pc, #28]	@ (8003270 <HAL_Init+0x40>)
 8003252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003258:	2003      	movs	r0, #3
 800325a:	f000 f8d8 	bl	800340e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800325e:	2005      	movs	r0, #5
 8003260:	f7fe ff5e 	bl	8002120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003264:	f7fe ff30 	bl	80020c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023c00 	.word	0x40023c00

08003274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003278:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_IncTick+0x20>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <HAL_IncTick+0x24>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4413      	add	r3, r2
 8003284:	4a04      	ldr	r2, [pc, #16]	@ (8003298 <HAL_IncTick+0x24>)
 8003286:	6013      	str	r3, [r2, #0]
}
 8003288:	bf00      	nop
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	2000000c 	.word	0x2000000c
 8003298:	2000059c 	.word	0x2000059c

0800329c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return uwTick;
 80032a0:	4b03      	ldr	r3, [pc, #12]	@ (80032b0 <HAL_GetTick+0x14>)
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	2000059c 	.word	0x2000059c

080032b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c4:	4b0c      	ldr	r3, [pc, #48]	@ (80032f8 <__NVIC_SetPriorityGrouping+0x44>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032d0:	4013      	ands	r3, r2
 80032d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032e6:	4a04      	ldr	r2, [pc, #16]	@ (80032f8 <__NVIC_SetPriorityGrouping+0x44>)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	60d3      	str	r3, [r2, #12]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003300:	4b04      	ldr	r3, [pc, #16]	@ (8003314 <__NVIC_GetPriorityGrouping+0x18>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	0a1b      	lsrs	r3, r3, #8
 8003306:	f003 0307 	and.w	r3, r3, #7
}
 800330a:	4618      	mov	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	2b00      	cmp	r3, #0
 8003328:	db0b      	blt.n	8003342 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	f003 021f 	and.w	r2, r3, #31
 8003330:	4907      	ldr	r1, [pc, #28]	@ (8003350 <__NVIC_EnableIRQ+0x38>)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	2001      	movs	r0, #1
 800333a:	fa00 f202 	lsl.w	r2, r0, r2
 800333e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	e000e100 	.word	0xe000e100

08003354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	2b00      	cmp	r3, #0
 8003366:	db0a      	blt.n	800337e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	490c      	ldr	r1, [pc, #48]	@ (80033a0 <__NVIC_SetPriority+0x4c>)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	0112      	lsls	r2, r2, #4
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	440b      	add	r3, r1
 8003378:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800337c:	e00a      	b.n	8003394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	4908      	ldr	r1, [pc, #32]	@ (80033a4 <__NVIC_SetPriority+0x50>)
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	3b04      	subs	r3, #4
 800338c:	0112      	lsls	r2, r2, #4
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	440b      	add	r3, r1
 8003392:	761a      	strb	r2, [r3, #24]
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000e100 	.word	0xe000e100
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	@ 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f1c3 0307 	rsb	r3, r3, #7
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	bf28      	it	cs
 80033c6:	2304      	movcs	r3, #4
 80033c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3304      	adds	r3, #4
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d902      	bls.n	80033d8 <NVIC_EncodePriority+0x30>
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3b03      	subs	r3, #3
 80033d6:	e000      	b.n	80033da <NVIC_EncodePriority+0x32>
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033dc:	f04f 32ff 	mov.w	r2, #4294967295
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43da      	mvns	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	401a      	ands	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f0:	f04f 31ff 	mov.w	r1, #4294967295
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	43d9      	mvns	r1, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003400:	4313      	orrs	r3, r2
         );
}
 8003402:	4618      	mov	r0, r3
 8003404:	3724      	adds	r7, #36	@ 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ff4c 	bl	80032b4 <__NVIC_SetPriorityGrouping>
}
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003436:	f7ff ff61 	bl	80032fc <__NVIC_GetPriorityGrouping>
 800343a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	6978      	ldr	r0, [r7, #20]
 8003442:	f7ff ffb1 	bl	80033a8 <NVIC_EncodePriority>
 8003446:	4602      	mov	r2, r0
 8003448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800344c:	4611      	mov	r1, r2
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff ff80 	bl	8003354 <__NVIC_SetPriority>
}
 8003454:	bf00      	nop
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff ff54 	bl	8003318 <__NVIC_EnableIRQ>
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003484:	f7ff ff0a 	bl	800329c <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e099      	b.n	80035c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0201 	bic.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b4:	e00f      	b.n	80034d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034b6:	f7ff fef1 	bl	800329c <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b05      	cmp	r3, #5
 80034c2:	d908      	bls.n	80034d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2203      	movs	r2, #3
 80034ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e078      	b.n	80035c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e8      	bne.n	80034b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	4b38      	ldr	r3, [pc, #224]	@ (80035d0 <HAL_DMA_Init+0x158>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003502:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800351a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4313      	orrs	r3, r2
 8003526:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	2b04      	cmp	r3, #4
 800352e:	d107      	bne.n	8003540 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003538:	4313      	orrs	r3, r2
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f023 0307 	bic.w	r3, r3, #7
 8003556:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	2b04      	cmp	r3, #4
 8003568:	d117      	bne.n	800359a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00e      	beq.n	800359a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fb01 	bl	8003b84 <DMA_CheckFifoParam>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2240      	movs	r2, #64	@ 0x40
 800358c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003596:	2301      	movs	r3, #1
 8003598:	e016      	b.n	80035c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fab8 	bl	8003b18 <DMA_CalcBaseAndBitshift>
 80035a8:	4603      	mov	r3, r0
 80035aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b0:	223f      	movs	r2, #63	@ 0x3f
 80035b2:	409a      	lsls	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	f010803f 	.word	0xf010803f

080035d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_DMA_Start_IT+0x26>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e040      	b.n	800367c <HAL_DMA_Start_IT+0xa8>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b01      	cmp	r3, #1
 800360c:	d12f      	bne.n	800366e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2202      	movs	r2, #2
 8003612:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 fa4a 	bl	8003abc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362c:	223f      	movs	r2, #63	@ 0x3f
 800362e:	409a      	lsls	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0216 	orr.w	r2, r2, #22
 8003642:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0208 	orr.w	r2, r2, #8
 800365a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e005      	b.n	800367a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003676:	2302      	movs	r3, #2
 8003678:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800367a:	7dfb      	ldrb	r3, [r7, #23]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003690:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003692:	f7ff fe03 	bl	800329c <HAL_GetTick>
 8003696:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d008      	beq.n	80036b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2280      	movs	r2, #128	@ 0x80
 80036a8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e052      	b.n	800375c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0216 	bic.w	r2, r2, #22
 80036c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d103      	bne.n	80036e6 <HAL_DMA_Abort+0x62>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0208 	bic.w	r2, r2, #8
 80036f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0201 	bic.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003706:	e013      	b.n	8003730 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003708:	f7ff fdc8 	bl	800329c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b05      	cmp	r3, #5
 8003714:	d90c      	bls.n	8003730 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2203      	movs	r2, #3
 8003720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e015      	b.n	800375c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1e4      	bne.n	8003708 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003742:	223f      	movs	r2, #63	@ 0x3f
 8003744:	409a      	lsls	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d004      	beq.n	8003782 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2280      	movs	r2, #128	@ 0x80
 800377c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e00c      	b.n	800379c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2205      	movs	r2, #5
 8003786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037b4:	4b8e      	ldr	r3, [pc, #568]	@ (80039f0 <HAL_DMA_IRQHandler+0x248>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a8e      	ldr	r2, [pc, #568]	@ (80039f4 <HAL_DMA_IRQHandler+0x24c>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	0a9b      	lsrs	r3, r3, #10
 80037c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d2:	2208      	movs	r2, #8
 80037d4:	409a      	lsls	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d01a      	beq.n	8003814 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0204 	bic.w	r2, r2, #4
 80037fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003800:	2208      	movs	r2, #8
 8003802:	409a      	lsls	r2, r3
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800380c:	f043 0201 	orr.w	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003818:	2201      	movs	r2, #1
 800381a:	409a      	lsls	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d012      	beq.n	800384a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003836:	2201      	movs	r2, #1
 8003838:	409a      	lsls	r2, r3
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003842:	f043 0202 	orr.w	r2, r3, #2
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384e:	2204      	movs	r2, #4
 8003850:	409a      	lsls	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d012      	beq.n	8003880 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386c:	2204      	movs	r2, #4
 800386e:	409a      	lsls	r2, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003878:	f043 0204 	orr.w	r2, r3, #4
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003884:	2210      	movs	r2, #16
 8003886:	409a      	lsls	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d043      	beq.n	8003918 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d03c      	beq.n	8003918 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a2:	2210      	movs	r2, #16
 80038a4:	409a      	lsls	r2, r3
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d018      	beq.n	80038ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d108      	bne.n	80038d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d024      	beq.n	8003918 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4798      	blx	r3
 80038d6:	e01f      	b.n	8003918 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01b      	beq.n	8003918 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
 80038e8:	e016      	b.n	8003918 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d107      	bne.n	8003908 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0208 	bic.w	r2, r2, #8
 8003906:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391c:	2220      	movs	r2, #32
 800391e:	409a      	lsls	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 808f 	beq.w	8003a48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 8087 	beq.w	8003a48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393e:	2220      	movs	r2, #32
 8003940:	409a      	lsls	r2, r3
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b05      	cmp	r3, #5
 8003950:	d136      	bne.n	80039c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0216 	bic.w	r2, r2, #22
 8003960:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003970:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d103      	bne.n	8003982 <HAL_DMA_IRQHandler+0x1da>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800397e:	2b00      	cmp	r3, #0
 8003980:	d007      	beq.n	8003992 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0208 	bic.w	r2, r2, #8
 8003990:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003996:	223f      	movs	r2, #63	@ 0x3f
 8003998:	409a      	lsls	r2, r3
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d07e      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	4798      	blx	r3
        }
        return;
 80039be:	e079      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d01d      	beq.n	8003a0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10d      	bne.n	80039f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d031      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
 80039ec:	e02c      	b.n	8003a48 <HAL_DMA_IRQHandler+0x2a0>
 80039ee:	bf00      	nop
 80039f0:	20000004 	.word	0x20000004
 80039f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d023      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
 8003a08:	e01e      	b.n	8003a48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10f      	bne.n	8003a38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0210 	bic.w	r2, r2, #16
 8003a26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d032      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d022      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2205      	movs	r2, #5
 8003a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	3301      	adds	r3, #1
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d307      	bcc.n	8003a90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f2      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x2cc>
 8003a8e:	e000      	b.n	8003a92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	4798      	blx	r3
 8003ab2:	e000      	b.n	8003ab6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ab4:	bf00      	nop
    }
  }
}
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ad8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b40      	cmp	r3, #64	@ 0x40
 8003ae8:	d108      	bne.n	8003afc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003afa:	e007      	b.n	8003b0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	60da      	str	r2, [r3, #12]
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	3b10      	subs	r3, #16
 8003b28:	4a14      	ldr	r2, [pc, #80]	@ (8003b7c <DMA_CalcBaseAndBitshift+0x64>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	091b      	lsrs	r3, r3, #4
 8003b30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b32:	4a13      	ldr	r2, [pc, #76]	@ (8003b80 <DMA_CalcBaseAndBitshift+0x68>)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d909      	bls.n	8003b5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b4e:	f023 0303 	bic.w	r3, r3, #3
 8003b52:	1d1a      	adds	r2, r3, #4
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b58:	e007      	b.n	8003b6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b62:	f023 0303 	bic.w	r3, r3, #3
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	aaaaaaab 	.word	0xaaaaaaab
 8003b80:	0800b288 	.word	0x0800b288

08003b84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d11f      	bne.n	8003bde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d856      	bhi.n	8003c52 <DMA_CheckFifoParam+0xce>
 8003ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bac <DMA_CheckFifoParam+0x28>)
 8003ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003baa:	bf00      	nop
 8003bac:	08003bbd 	.word	0x08003bbd
 8003bb0:	08003bcf 	.word	0x08003bcf
 8003bb4:	08003bbd 	.word	0x08003bbd
 8003bb8:	08003c53 	.word	0x08003c53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d046      	beq.n	8003c56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bcc:	e043      	b.n	8003c56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bd6:	d140      	bne.n	8003c5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bdc:	e03d      	b.n	8003c5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003be6:	d121      	bne.n	8003c2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d837      	bhi.n	8003c5e <DMA_CheckFifoParam+0xda>
 8003bee:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf4 <DMA_CheckFifoParam+0x70>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c05 	.word	0x08003c05
 8003bf8:	08003c0b 	.word	0x08003c0b
 8003bfc:	08003c05 	.word	0x08003c05
 8003c00:	08003c1d 	.word	0x08003c1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      break;
 8003c08:	e030      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d025      	beq.n	8003c62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c1a:	e022      	b.n	8003c62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c24:	d11f      	bne.n	8003c66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c2a:	e01c      	b.n	8003c66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d903      	bls.n	8003c3a <DMA_CheckFifoParam+0xb6>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d003      	beq.n	8003c40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c38:	e018      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c3e:	e015      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00e      	beq.n	8003c6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c50:	e00b      	b.n	8003c6a <DMA_CheckFifoParam+0xe6>
      break;
 8003c52:	bf00      	nop
 8003c54:	e00a      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
      break;
 8003c56:	bf00      	nop
 8003c58:	e008      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e006      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
      break;
 8003c5e:	bf00      	nop
 8003c60:	e004      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
      break;
 8003c62:	bf00      	nop
 8003c64:	e002      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
      break;   
 8003c66:	bf00      	nop
 8003c68:	e000      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
      break;
 8003c6a:	bf00      	nop
    }
  } 
  
  return status; 
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop

08003c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b089      	sub	sp, #36	@ 0x24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	e159      	b.n	8003f4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c98:	2201      	movs	r2, #1
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	f040 8148 	bne.w	8003f46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d005      	beq.n	8003cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d130      	bne.n	8003d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	2203      	movs	r2, #3
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d04:	2201      	movs	r2, #1
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4013      	ands	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 0201 	and.w	r2, r3, #1
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d017      	beq.n	8003d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	2203      	movs	r2, #3
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d123      	bne.n	8003dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	08da      	lsrs	r2, r3, #3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3208      	adds	r2, #8
 8003d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	220f      	movs	r2, #15
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	08da      	lsrs	r2, r3, #3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3208      	adds	r2, #8
 8003dba:	69b9      	ldr	r1, [r7, #24]
 8003dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	2203      	movs	r2, #3
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0203 	and.w	r2, r3, #3
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80a2 	beq.w	8003f46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	4b57      	ldr	r3, [pc, #348]	@ (8003f64 <HAL_GPIO_Init+0x2e8>)
 8003e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0a:	4a56      	ldr	r2, [pc, #344]	@ (8003f64 <HAL_GPIO_Init+0x2e8>)
 8003e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e12:	4b54      	ldr	r3, [pc, #336]	@ (8003f64 <HAL_GPIO_Init+0x2e8>)
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e1e:	4a52      	ldr	r2, [pc, #328]	@ (8003f68 <HAL_GPIO_Init+0x2ec>)
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	089b      	lsrs	r3, r3, #2
 8003e24:	3302      	adds	r3, #2
 8003e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	220f      	movs	r2, #15
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a49      	ldr	r2, [pc, #292]	@ (8003f6c <HAL_GPIO_Init+0x2f0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d019      	beq.n	8003e7e <HAL_GPIO_Init+0x202>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a48      	ldr	r2, [pc, #288]	@ (8003f70 <HAL_GPIO_Init+0x2f4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <HAL_GPIO_Init+0x1fe>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a47      	ldr	r2, [pc, #284]	@ (8003f74 <HAL_GPIO_Init+0x2f8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00d      	beq.n	8003e76 <HAL_GPIO_Init+0x1fa>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a46      	ldr	r2, [pc, #280]	@ (8003f78 <HAL_GPIO_Init+0x2fc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d007      	beq.n	8003e72 <HAL_GPIO_Init+0x1f6>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a45      	ldr	r2, [pc, #276]	@ (8003f7c <HAL_GPIO_Init+0x300>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d101      	bne.n	8003e6e <HAL_GPIO_Init+0x1f2>
 8003e6a:	2304      	movs	r3, #4
 8003e6c:	e008      	b.n	8003e80 <HAL_GPIO_Init+0x204>
 8003e6e:	2307      	movs	r3, #7
 8003e70:	e006      	b.n	8003e80 <HAL_GPIO_Init+0x204>
 8003e72:	2303      	movs	r3, #3
 8003e74:	e004      	b.n	8003e80 <HAL_GPIO_Init+0x204>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e002      	b.n	8003e80 <HAL_GPIO_Init+0x204>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_GPIO_Init+0x204>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	f002 0203 	and.w	r2, r2, #3
 8003e86:	0092      	lsls	r2, r2, #2
 8003e88:	4093      	lsls	r3, r2
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e90:	4935      	ldr	r1, [pc, #212]	@ (8003f68 <HAL_GPIO_Init+0x2ec>)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	3302      	adds	r3, #2
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e9e:	4b38      	ldr	r3, [pc, #224]	@ (8003f80 <HAL_GPIO_Init+0x304>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8003f80 <HAL_GPIO_Init+0x304>)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f80 <HAL_GPIO_Init+0x304>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003eec:	4a24      	ldr	r2, [pc, #144]	@ (8003f80 <HAL_GPIO_Init+0x304>)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ef2:	4b23      	ldr	r3, [pc, #140]	@ (8003f80 <HAL_GPIO_Init+0x304>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f16:	4a1a      	ldr	r2, [pc, #104]	@ (8003f80 <HAL_GPIO_Init+0x304>)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f1c:	4b18      	ldr	r3, [pc, #96]	@ (8003f80 <HAL_GPIO_Init+0x304>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f40:	4a0f      	ldr	r2, [pc, #60]	@ (8003f80 <HAL_GPIO_Init+0x304>)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	f67f aea2 	bls.w	8003c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3724      	adds	r7, #36	@ 0x24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40013800 	.word	0x40013800
 8003f6c:	40020000 	.word	0x40020000
 8003f70:	40020400 	.word	0x40020400
 8003f74:	40020800 	.word	0x40020800
 8003f78:	40020c00 	.word	0x40020c00
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40013c00 	.word	0x40013c00

08003f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	807b      	strh	r3, [r7, #2]
 8003f90:	4613      	mov	r3, r2
 8003f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f94:	787b      	ldrb	r3, [r7, #1]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f9a:	887a      	ldrh	r2, [r7, #2]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fa0:	e003      	b.n	8003faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fa2:	887b      	ldrh	r3, [r7, #2]
 8003fa4:	041a      	lsls	r2, r3, #16
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	619a      	str	r2, [r3, #24]
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e267      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d075      	beq.n	80040c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fd6:	4b88      	ldr	r3, [pc, #544]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 030c 	and.w	r3, r3, #12
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d00c      	beq.n	8003ffc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fe2:	4b85      	ldr	r3, [pc, #532]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d112      	bne.n	8004014 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fee:	4b82      	ldr	r3, [pc, #520]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ff6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ffa:	d10b      	bne.n	8004014 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffc:	4b7e      	ldr	r3, [pc, #504]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d05b      	beq.n	80040c0 <HAL_RCC_OscConfig+0x108>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d157      	bne.n	80040c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e242      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800401c:	d106      	bne.n	800402c <HAL_RCC_OscConfig+0x74>
 800401e:	4b76      	ldr	r3, [pc, #472]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a75      	ldr	r2, [pc, #468]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	e01d      	b.n	8004068 <HAL_RCC_OscConfig+0xb0>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004034:	d10c      	bne.n	8004050 <HAL_RCC_OscConfig+0x98>
 8004036:	4b70      	ldr	r3, [pc, #448]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a6f      	ldr	r2, [pc, #444]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 800403c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	4b6d      	ldr	r3, [pc, #436]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a6c      	ldr	r2, [pc, #432]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	e00b      	b.n	8004068 <HAL_RCC_OscConfig+0xb0>
 8004050:	4b69      	ldr	r3, [pc, #420]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a68      	ldr	r2, [pc, #416]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004056:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	4b66      	ldr	r3, [pc, #408]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a65      	ldr	r2, [pc, #404]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004062:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d013      	beq.n	8004098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004070:	f7ff f914 	bl	800329c <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004078:	f7ff f910 	bl	800329c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b64      	cmp	r3, #100	@ 0x64
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e207      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	4b5b      	ldr	r3, [pc, #364]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0xc0>
 8004096:	e014      	b.n	80040c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004098:	f7ff f900 	bl	800329c <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a0:	f7ff f8fc 	bl	800329c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b64      	cmp	r3, #100	@ 0x64
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e1f3      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b2:	4b51      	ldr	r3, [pc, #324]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0xe8>
 80040be:	e000      	b.n	80040c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d063      	beq.n	8004196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040ce:	4b4a      	ldr	r3, [pc, #296]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040da:	4b47      	ldr	r3, [pc, #284]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d11c      	bne.n	8004120 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040e6:	4b44      	ldr	r3, [pc, #272]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d116      	bne.n	8004120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f2:	4b41      	ldr	r3, [pc, #260]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <HAL_RCC_OscConfig+0x152>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d001      	beq.n	800410a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e1c7      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410a:	4b3b      	ldr	r3, [pc, #236]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	4937      	ldr	r1, [pc, #220]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 800411a:	4313      	orrs	r3, r2
 800411c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800411e:	e03a      	b.n	8004196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d020      	beq.n	800416a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004128:	4b34      	ldr	r3, [pc, #208]	@ (80041fc <HAL_RCC_OscConfig+0x244>)
 800412a:	2201      	movs	r2, #1
 800412c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412e:	f7ff f8b5 	bl	800329c <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004136:	f7ff f8b1 	bl	800329c <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e1a8      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004148:	4b2b      	ldr	r3, [pc, #172]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004154:	4b28      	ldr	r3, [pc, #160]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4925      	ldr	r1, [pc, #148]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004164:	4313      	orrs	r3, r2
 8004166:	600b      	str	r3, [r1, #0]
 8004168:	e015      	b.n	8004196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416a:	4b24      	ldr	r3, [pc, #144]	@ (80041fc <HAL_RCC_OscConfig+0x244>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7ff f894 	bl	800329c <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004178:	f7ff f890 	bl	800329c <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e187      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418a:	4b1b      	ldr	r3, [pc, #108]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d036      	beq.n	8004210 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d016      	beq.n	80041d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041aa:	4b15      	ldr	r3, [pc, #84]	@ (8004200 <HAL_RCC_OscConfig+0x248>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b0:	f7ff f874 	bl	800329c <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b8:	f7ff f870 	bl	800329c <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e167      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ca:	4b0b      	ldr	r3, [pc, #44]	@ (80041f8 <HAL_RCC_OscConfig+0x240>)
 80041cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0x200>
 80041d6:	e01b      	b.n	8004210 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041d8:	4b09      	ldr	r3, [pc, #36]	@ (8004200 <HAL_RCC_OscConfig+0x248>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041de:	f7ff f85d 	bl	800329c <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e4:	e00e      	b.n	8004204 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e6:	f7ff f859 	bl	800329c <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d907      	bls.n	8004204 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e150      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
 80041f8:	40023800 	.word	0x40023800
 80041fc:	42470000 	.word	0x42470000
 8004200:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004204:	4b88      	ldr	r3, [pc, #544]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 8004206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1ea      	bne.n	80041e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 8097 	beq.w	800434c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800421e:	2300      	movs	r3, #0
 8004220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004222:	4b81      	ldr	r3, [pc, #516]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10f      	bne.n	800424e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	4b7d      	ldr	r3, [pc, #500]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	4a7c      	ldr	r2, [pc, #496]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800423c:	6413      	str	r3, [r2, #64]	@ 0x40
 800423e:	4b7a      	ldr	r3, [pc, #488]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424e:	4b77      	ldr	r3, [pc, #476]	@ (800442c <HAL_RCC_OscConfig+0x474>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d118      	bne.n	800428c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800425a:	4b74      	ldr	r3, [pc, #464]	@ (800442c <HAL_RCC_OscConfig+0x474>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a73      	ldr	r2, [pc, #460]	@ (800442c <HAL_RCC_OscConfig+0x474>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004266:	f7ff f819 	bl	800329c <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7ff f815 	bl	800329c <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e10c      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004280:	4b6a      	ldr	r3, [pc, #424]	@ (800442c <HAL_RCC_OscConfig+0x474>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x2ea>
 8004294:	4b64      	ldr	r3, [pc, #400]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004298:	4a63      	ldr	r2, [pc, #396]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6713      	str	r3, [r2, #112]	@ 0x70
 80042a0:	e01c      	b.n	80042dc <HAL_RCC_OscConfig+0x324>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b05      	cmp	r3, #5
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x30c>
 80042aa:	4b5f      	ldr	r3, [pc, #380]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ae:	4a5e      	ldr	r2, [pc, #376]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 80042b0:	f043 0304 	orr.w	r3, r3, #4
 80042b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ba:	4a5b      	ldr	r2, [pc, #364]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c2:	e00b      	b.n	80042dc <HAL_RCC_OscConfig+0x324>
 80042c4:	4b58      	ldr	r3, [pc, #352]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 80042c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c8:	4a57      	ldr	r2, [pc, #348]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d0:	4b55      	ldr	r3, [pc, #340]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d4:	4a54      	ldr	r2, [pc, #336]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 80042d6:	f023 0304 	bic.w	r3, r3, #4
 80042da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d015      	beq.n	8004310 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7fe ffda 	bl	800329c <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ea:	e00a      	b.n	8004302 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ec:	f7fe ffd6 	bl	800329c <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e0cb      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004302:	4b49      	ldr	r3, [pc, #292]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0ee      	beq.n	80042ec <HAL_RCC_OscConfig+0x334>
 800430e:	e014      	b.n	800433a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004310:	f7fe ffc4 	bl	800329c <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004316:	e00a      	b.n	800432e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004318:	f7fe ffc0 	bl	800329c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004326:	4293      	cmp	r3, r2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e0b5      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432e:	4b3e      	ldr	r3, [pc, #248]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1ee      	bne.n	8004318 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d105      	bne.n	800434c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004340:	4b39      	ldr	r3, [pc, #228]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 8004342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004344:	4a38      	ldr	r2, [pc, #224]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 8004346:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800434a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80a1 	beq.w	8004498 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004356:	4b34      	ldr	r3, [pc, #208]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b08      	cmp	r3, #8
 8004360:	d05c      	beq.n	800441c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d141      	bne.n	80043ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436a:	4b31      	ldr	r3, [pc, #196]	@ (8004430 <HAL_RCC_OscConfig+0x478>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fe ff94 	bl	800329c <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004378:	f7fe ff90 	bl	800329c <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e087      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438a:	4b27      	ldr	r3, [pc, #156]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69da      	ldr	r2, [r3, #28]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a4:	019b      	lsls	r3, r3, #6
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ac:	085b      	lsrs	r3, r3, #1
 80043ae:	3b01      	subs	r3, #1
 80043b0:	041b      	lsls	r3, r3, #16
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b8:	061b      	lsls	r3, r3, #24
 80043ba:	491b      	ldr	r1, [pc, #108]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004430 <HAL_RCC_OscConfig+0x478>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c6:	f7fe ff69 	bl	800329c <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ce:	f7fe ff65 	bl	800329c <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e05c      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e0:	4b11      	ldr	r3, [pc, #68]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x416>
 80043ec:	e054      	b.n	8004498 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ee:	4b10      	ldr	r3, [pc, #64]	@ (8004430 <HAL_RCC_OscConfig+0x478>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fe ff52 	bl	800329c <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fc:	f7fe ff4e 	bl	800329c <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e045      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440e:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <HAL_RCC_OscConfig+0x470>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x444>
 800441a:	e03d      	b.n	8004498 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d107      	bne.n	8004434 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e038      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
 8004428:	40023800 	.word	0x40023800
 800442c:	40007000 	.word	0x40007000
 8004430:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004434:	4b1b      	ldr	r3, [pc, #108]	@ (80044a4 <HAL_RCC_OscConfig+0x4ec>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d028      	beq.n	8004494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d121      	bne.n	8004494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445a:	429a      	cmp	r2, r3
 800445c:	d11a      	bne.n	8004494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004464:	4013      	ands	r3, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800446a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800446c:	4293      	cmp	r3, r2
 800446e:	d111      	bne.n	8004494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	3b01      	subs	r3, #1
 800447e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004480:	429a      	cmp	r2, r3
 8004482:	d107      	bne.n	8004494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d001      	beq.n	8004498 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40023800 	.word	0x40023800

080044a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0cc      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044bc:	4b68      	ldr	r3, [pc, #416]	@ (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d90c      	bls.n	80044e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ca:	4b65      	ldr	r3, [pc, #404]	@ (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d2:	4b63      	ldr	r3, [pc, #396]	@ (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d001      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0b8      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d020      	beq.n	8004532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044fc:	4b59      	ldr	r3, [pc, #356]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	4a58      	ldr	r2, [pc, #352]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004506:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004514:	4b53      	ldr	r3, [pc, #332]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	4a52      	ldr	r2, [pc, #328]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800451e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004520:	4b50      	ldr	r3, [pc, #320]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	494d      	ldr	r1, [pc, #308]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d044      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d107      	bne.n	8004556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	4b47      	ldr	r3, [pc, #284]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d119      	bne.n	8004586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e07f      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d003      	beq.n	8004566 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004562:	2b03      	cmp	r3, #3
 8004564:	d107      	bne.n	8004576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004566:	4b3f      	ldr	r3, [pc, #252]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e06f      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004576:	4b3b      	ldr	r3, [pc, #236]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e067      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004586:	4b37      	ldr	r3, [pc, #220]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f023 0203 	bic.w	r2, r3, #3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	4934      	ldr	r1, [pc, #208]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	4313      	orrs	r3, r2
 8004596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004598:	f7fe fe80 	bl	800329c <HAL_GetTick>
 800459c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459e:	e00a      	b.n	80045b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a0:	f7fe fe7c 	bl	800329c <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e04f      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 020c 	and.w	r2, r3, #12
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d1eb      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045c8:	4b25      	ldr	r3, [pc, #148]	@ (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d20c      	bcs.n	80045f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d6:	4b22      	ldr	r3, [pc, #136]	@ (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	4b20      	ldr	r3, [pc, #128]	@ (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e032      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045fc:	4b19      	ldr	r3, [pc, #100]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4916      	ldr	r1, [pc, #88]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	4313      	orrs	r3, r2
 800460c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800461a:	4b12      	ldr	r3, [pc, #72]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	490e      	ldr	r1, [pc, #56]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	4313      	orrs	r3, r2
 800462c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800462e:	f000 f821 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8004632:	4602      	mov	r2, r0
 8004634:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	091b      	lsrs	r3, r3, #4
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	490a      	ldr	r1, [pc, #40]	@ (8004668 <HAL_RCC_ClockConfig+0x1c0>)
 8004640:	5ccb      	ldrb	r3, [r1, r3]
 8004642:	fa22 f303 	lsr.w	r3, r2, r3
 8004646:	4a09      	ldr	r2, [pc, #36]	@ (800466c <HAL_RCC_ClockConfig+0x1c4>)
 8004648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800464a:	4b09      	ldr	r3, [pc, #36]	@ (8004670 <HAL_RCC_ClockConfig+0x1c8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f7fd fd66 	bl	8002120 <HAL_InitTick>

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40023c00 	.word	0x40023c00
 8004664:	40023800 	.word	0x40023800
 8004668:	0800b270 	.word	0x0800b270
 800466c:	20000004 	.word	0x20000004
 8004670:	20000008 	.word	0x20000008

08004674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004678:	b094      	sub	sp, #80	@ 0x50
 800467a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800468c:	4b79      	ldr	r3, [pc, #484]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 030c 	and.w	r3, r3, #12
 8004694:	2b08      	cmp	r3, #8
 8004696:	d00d      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004698:	2b08      	cmp	r3, #8
 800469a:	f200 80e1 	bhi.w	8004860 <HAL_RCC_GetSysClockFreq+0x1ec>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x34>
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d003      	beq.n	80046ae <HAL_RCC_GetSysClockFreq+0x3a>
 80046a6:	e0db      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046a8:	4b73      	ldr	r3, [pc, #460]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x204>)
 80046aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046ac:	e0db      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ae:	4b73      	ldr	r3, [pc, #460]	@ (800487c <HAL_RCC_GetSysClockFreq+0x208>)
 80046b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046b2:	e0d8      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046be:	4b6d      	ldr	r3, [pc, #436]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d063      	beq.n	8004792 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	099b      	lsrs	r3, r3, #6
 80046d0:	2200      	movs	r2, #0
 80046d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80046de:	2300      	movs	r3, #0
 80046e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80046e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046e6:	4622      	mov	r2, r4
 80046e8:	462b      	mov	r3, r5
 80046ea:	f04f 0000 	mov.w	r0, #0
 80046ee:	f04f 0100 	mov.w	r1, #0
 80046f2:	0159      	lsls	r1, r3, #5
 80046f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f8:	0150      	lsls	r0, r2, #5
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4621      	mov	r1, r4
 8004700:	1a51      	subs	r1, r2, r1
 8004702:	6139      	str	r1, [r7, #16]
 8004704:	4629      	mov	r1, r5
 8004706:	eb63 0301 	sbc.w	r3, r3, r1
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004718:	4659      	mov	r1, fp
 800471a:	018b      	lsls	r3, r1, #6
 800471c:	4651      	mov	r1, sl
 800471e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004722:	4651      	mov	r1, sl
 8004724:	018a      	lsls	r2, r1, #6
 8004726:	4651      	mov	r1, sl
 8004728:	ebb2 0801 	subs.w	r8, r2, r1
 800472c:	4659      	mov	r1, fp
 800472e:	eb63 0901 	sbc.w	r9, r3, r1
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800473e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004742:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004746:	4690      	mov	r8, r2
 8004748:	4699      	mov	r9, r3
 800474a:	4623      	mov	r3, r4
 800474c:	eb18 0303 	adds.w	r3, r8, r3
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	462b      	mov	r3, r5
 8004754:	eb49 0303 	adc.w	r3, r9, r3
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004766:	4629      	mov	r1, r5
 8004768:	024b      	lsls	r3, r1, #9
 800476a:	4621      	mov	r1, r4
 800476c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004770:	4621      	mov	r1, r4
 8004772:	024a      	lsls	r2, r1, #9
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800477a:	2200      	movs	r2, #0
 800477c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800477e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004780:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004784:	f7fc fa42 	bl	8000c0c <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4613      	mov	r3, r2
 800478e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004790:	e058      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004792:	4b38      	ldr	r3, [pc, #224]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	2200      	movs	r2, #0
 800479a:	4618      	mov	r0, r3
 800479c:	4611      	mov	r1, r2
 800479e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047a2:	623b      	str	r3, [r7, #32]
 80047a4:	2300      	movs	r3, #0
 80047a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047ac:	4642      	mov	r2, r8
 80047ae:	464b      	mov	r3, r9
 80047b0:	f04f 0000 	mov.w	r0, #0
 80047b4:	f04f 0100 	mov.w	r1, #0
 80047b8:	0159      	lsls	r1, r3, #5
 80047ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047be:	0150      	lsls	r0, r2, #5
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4641      	mov	r1, r8
 80047c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80047ca:	4649      	mov	r1, r9
 80047cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047e4:	ebb2 040a 	subs.w	r4, r2, sl
 80047e8:	eb63 050b 	sbc.w	r5, r3, fp
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	00eb      	lsls	r3, r5, #3
 80047f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047fa:	00e2      	lsls	r2, r4, #3
 80047fc:	4614      	mov	r4, r2
 80047fe:	461d      	mov	r5, r3
 8004800:	4643      	mov	r3, r8
 8004802:	18e3      	adds	r3, r4, r3
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	464b      	mov	r3, r9
 8004808:	eb45 0303 	adc.w	r3, r5, r3
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800481a:	4629      	mov	r1, r5
 800481c:	028b      	lsls	r3, r1, #10
 800481e:	4621      	mov	r1, r4
 8004820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004824:	4621      	mov	r1, r4
 8004826:	028a      	lsls	r2, r1, #10
 8004828:	4610      	mov	r0, r2
 800482a:	4619      	mov	r1, r3
 800482c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800482e:	2200      	movs	r2, #0
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	61fa      	str	r2, [r7, #28]
 8004834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004838:	f7fc f9e8 	bl	8000c0c <__aeabi_uldivmod>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4613      	mov	r3, r2
 8004842:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004844:	4b0b      	ldr	r3, [pc, #44]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	3301      	adds	r3, #1
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004854:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800485e:	e002      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004860:	4b05      	ldr	r3, [pc, #20]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x204>)
 8004862:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004868:	4618      	mov	r0, r3
 800486a:	3750      	adds	r7, #80	@ 0x50
 800486c:	46bd      	mov	sp, r7
 800486e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	00f42400 	.word	0x00f42400
 800487c:	007a1200 	.word	0x007a1200

08004880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004884:	4b03      	ldr	r3, [pc, #12]	@ (8004894 <HAL_RCC_GetHCLKFreq+0x14>)
 8004886:	681b      	ldr	r3, [r3, #0]
}
 8004888:	4618      	mov	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000004 	.word	0x20000004

08004898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800489c:	f7ff fff0 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b05      	ldr	r3, [pc, #20]	@ (80048b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	0a9b      	lsrs	r3, r3, #10
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4903      	ldr	r1, [pc, #12]	@ (80048bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40023800 	.word	0x40023800
 80048bc:	0800b280 	.word	0x0800b280

080048c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048c4:	f7ff ffdc 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	0b5b      	lsrs	r3, r3, #13
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	4903      	ldr	r1, [pc, #12]	@ (80048e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048dc:	4618      	mov	r0, r3
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40023800 	.word	0x40023800
 80048e4:	0800b280 	.word	0x0800b280

080048e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	220f      	movs	r2, #15
 80048f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048f8:	4b12      	ldr	r3, [pc, #72]	@ (8004944 <HAL_RCC_GetClockConfig+0x5c>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0203 	and.w	r2, r3, #3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004904:	4b0f      	ldr	r3, [pc, #60]	@ (8004944 <HAL_RCC_GetClockConfig+0x5c>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004910:	4b0c      	ldr	r3, [pc, #48]	@ (8004944 <HAL_RCC_GetClockConfig+0x5c>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800491c:	4b09      	ldr	r3, [pc, #36]	@ (8004944 <HAL_RCC_GetClockConfig+0x5c>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	08db      	lsrs	r3, r3, #3
 8004922:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800492a:	4b07      	ldr	r3, [pc, #28]	@ (8004948 <HAL_RCC_GetClockConfig+0x60>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0207 	and.w	r2, r3, #7
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	601a      	str	r2, [r3, #0]
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	40023c00 	.word	0x40023c00

0800494c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e041      	b.n	80049e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fd ffda 	bl	800292c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3304      	adds	r3, #4
 8004988:	4619      	mov	r1, r3
 800498a:	4610      	mov	r0, r2
 800498c:	f000 ffc2 	bl	8005914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d001      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e044      	b.n	8004a8e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1e      	ldr	r2, [pc, #120]	@ (8004a9c <HAL_TIM_Base_Start_IT+0xb0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d018      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0x6c>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2e:	d013      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0x6c>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1a      	ldr	r2, [pc, #104]	@ (8004aa0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00e      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0x6c>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a19      	ldr	r2, [pc, #100]	@ (8004aa4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d009      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0x6c>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a17      	ldr	r2, [pc, #92]	@ (8004aa8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d004      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0x6c>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a16      	ldr	r2, [pc, #88]	@ (8004aac <HAL_TIM_Base_Start_IT+0xc0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d111      	bne.n	8004a7c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b06      	cmp	r3, #6
 8004a68:	d010      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0201 	orr.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a7a:	e007      	b.n	8004a8c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40014000 	.word	0x40014000

08004ab0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e041      	b.n	8004b46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f839 	bl	8004b4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f000 ff10 	bl	8005914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <HAL_TIM_PWM_Start+0x24>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	bf14      	ite	ne
 8004b80:	2301      	movne	r3, #1
 8004b82:	2300      	moveq	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	e022      	b.n	8004bce <HAL_TIM_PWM_Start+0x6a>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d109      	bne.n	8004ba2 <HAL_TIM_PWM_Start+0x3e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	bf14      	ite	ne
 8004b9a:	2301      	movne	r3, #1
 8004b9c:	2300      	moveq	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	e015      	b.n	8004bce <HAL_TIM_PWM_Start+0x6a>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d109      	bne.n	8004bbc <HAL_TIM_PWM_Start+0x58>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	e008      	b.n	8004bce <HAL_TIM_PWM_Start+0x6a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e068      	b.n	8004ca8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d104      	bne.n	8004be6 <HAL_TIM_PWM_Start+0x82>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004be4:	e013      	b.n	8004c0e <HAL_TIM_PWM_Start+0xaa>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d104      	bne.n	8004bf6 <HAL_TIM_PWM_Start+0x92>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bf4:	e00b      	b.n	8004c0e <HAL_TIM_PWM_Start+0xaa>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d104      	bne.n	8004c06 <HAL_TIM_PWM_Start+0xa2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c04:	e003      	b.n	8004c0e <HAL_TIM_PWM_Start+0xaa>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2201      	movs	r2, #1
 8004c14:	6839      	ldr	r1, [r7, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f001 fa4c 	bl	80060b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a23      	ldr	r2, [pc, #140]	@ (8004cb0 <HAL_TIM_PWM_Start+0x14c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d107      	bne.n	8004c36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb0 <HAL_TIM_PWM_Start+0x14c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d018      	beq.n	8004c72 <HAL_TIM_PWM_Start+0x10e>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c48:	d013      	beq.n	8004c72 <HAL_TIM_PWM_Start+0x10e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a19      	ldr	r2, [pc, #100]	@ (8004cb4 <HAL_TIM_PWM_Start+0x150>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00e      	beq.n	8004c72 <HAL_TIM_PWM_Start+0x10e>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a17      	ldr	r2, [pc, #92]	@ (8004cb8 <HAL_TIM_PWM_Start+0x154>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d009      	beq.n	8004c72 <HAL_TIM_PWM_Start+0x10e>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a16      	ldr	r2, [pc, #88]	@ (8004cbc <HAL_TIM_PWM_Start+0x158>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d004      	beq.n	8004c72 <HAL_TIM_PWM_Start+0x10e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a14      	ldr	r2, [pc, #80]	@ (8004cc0 <HAL_TIM_PWM_Start+0x15c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d111      	bne.n	8004c96 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b06      	cmp	r3, #6
 8004c82:	d010      	beq.n	8004ca6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c94:	e007      	b.n	8004ca6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0201 	orr.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40010000 	.word	0x40010000
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	40000800 	.word	0x40000800
 8004cbc:	40000c00 	.word	0x40000c00
 8004cc0:	40014000 	.word	0x40014000

08004cc4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e041      	b.n	8004d5a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f839 	bl	8004d62 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f000 fe06 	bl	8005914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d104      	bne.n	8004d9a <HAL_TIM_IC_Start_DMA+0x22>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	e013      	b.n	8004dc2 <HAL_TIM_IC_Start_DMA+0x4a>
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d104      	bne.n	8004daa <HAL_TIM_IC_Start_DMA+0x32>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	e00b      	b.n	8004dc2 <HAL_TIM_IC_Start_DMA+0x4a>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d104      	bne.n	8004dba <HAL_TIM_IC_Start_DMA+0x42>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	e003      	b.n	8004dc2 <HAL_TIM_IC_Start_DMA+0x4a>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <HAL_TIM_IC_Start_DMA+0x5c>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	e013      	b.n	8004dfc <HAL_TIM_IC_Start_DMA+0x84>
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d104      	bne.n	8004de4 <HAL_TIM_IC_Start_DMA+0x6c>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	e00b      	b.n	8004dfc <HAL_TIM_IC_Start_DMA+0x84>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d104      	bne.n	8004df4 <HAL_TIM_IC_Start_DMA+0x7c>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e003      	b.n	8004dfc <HAL_TIM_IC_Start_DMA+0x84>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8004dfe:	7dbb      	ldrb	r3, [r7, #22]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d002      	beq.n	8004e0a <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8004e04:	7d7b      	ldrb	r3, [r7, #21]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d101      	bne.n	8004e0e <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e13c      	b.n	8005088 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8004e0e:	7dbb      	ldrb	r3, [r7, #22]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d143      	bne.n	8004e9c <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8004e14:	7d7b      	ldrb	r3, [r7, #21]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d140      	bne.n	8004e9c <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <HAL_TIM_IC_Start_DMA+0xae>
 8004e20:	887b      	ldrh	r3, [r7, #2]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e12e      	b.n	8005088 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d104      	bne.n	8004e3a <HAL_TIM_IC_Start_DMA+0xc2>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e38:	e013      	b.n	8004e62 <HAL_TIM_IC_Start_DMA+0xea>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d104      	bne.n	8004e4a <HAL_TIM_IC_Start_DMA+0xd2>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e48:	e00b      	b.n	8004e62 <HAL_TIM_IC_Start_DMA+0xea>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_IC_Start_DMA+0xe2>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e58:	e003      	b.n	8004e62 <HAL_TIM_IC_Start_DMA+0xea>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d104      	bne.n	8004e72 <HAL_TIM_IC_Start_DMA+0xfa>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    if ((pData == NULL) || (Length == 0U))
 8004e70:	e016      	b.n	8004ea0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d104      	bne.n	8004e82 <HAL_TIM_IC_Start_DMA+0x10a>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    if ((pData == NULL) || (Length == 0U))
 8004e80:	e00e      	b.n	8004ea0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d104      	bne.n	8004e92 <HAL_TIM_IC_Start_DMA+0x11a>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 8004e90:	e006      	b.n	8004ea0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 8004e9a:	e001      	b.n	8004ea0 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0f3      	b.n	8005088 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f001 f903 	bl	80060b4 <TIM_CCxChannelCmd>

  switch (Channel)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b0c      	cmp	r3, #12
 8004eb2:	f200 80ad 	bhi.w	8005010 <HAL_TIM_IC_Start_DMA+0x298>
 8004eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ebc <HAL_TIM_IC_Start_DMA+0x144>)
 8004eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebc:	08004ef1 	.word	0x08004ef1
 8004ec0:	08005011 	.word	0x08005011
 8004ec4:	08005011 	.word	0x08005011
 8004ec8:	08005011 	.word	0x08005011
 8004ecc:	08004f39 	.word	0x08004f39
 8004ed0:	08005011 	.word	0x08005011
 8004ed4:	08005011 	.word	0x08005011
 8004ed8:	08005011 	.word	0x08005011
 8004edc:	08004f81 	.word	0x08004f81
 8004ee0:	08005011 	.word	0x08005011
 8004ee4:	08005011 	.word	0x08005011
 8004ee8:	08005011 	.word	0x08005011
 8004eec:	08004fc9 	.word	0x08004fc9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	4a66      	ldr	r2, [pc, #408]	@ (8005090 <HAL_TIM_IC_Start_DMA+0x318>)
 8004ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	4a65      	ldr	r2, [pc, #404]	@ (8005094 <HAL_TIM_IC_Start_DMA+0x31c>)
 8004efe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f04:	4a64      	ldr	r2, [pc, #400]	@ (8005098 <HAL_TIM_IC_Start_DMA+0x320>)
 8004f06:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3334      	adds	r3, #52	@ 0x34
 8004f12:	4619      	mov	r1, r3
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	887b      	ldrh	r3, [r7, #2]
 8004f18:	f7fe fb5c 	bl	80035d4 <HAL_DMA_Start_IT>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e0b0      	b.n	8005088 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f34:	60da      	str	r2, [r3, #12]
      break;
 8004f36:	e06e      	b.n	8005016 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3c:	4a54      	ldr	r2, [pc, #336]	@ (8005090 <HAL_TIM_IC_Start_DMA+0x318>)
 8004f3e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f44:	4a53      	ldr	r2, [pc, #332]	@ (8005094 <HAL_TIM_IC_Start_DMA+0x31c>)
 8004f46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4c:	4a52      	ldr	r2, [pc, #328]	@ (8005098 <HAL_TIM_IC_Start_DMA+0x320>)
 8004f4e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3338      	adds	r3, #56	@ 0x38
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	887b      	ldrh	r3, [r7, #2]
 8004f60:	f7fe fb38 	bl	80035d4 <HAL_DMA_Start_IT>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e08c      	b.n	8005088 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f7c:	60da      	str	r2, [r3, #12]
      break;
 8004f7e:	e04a      	b.n	8005016 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f84:	4a42      	ldr	r2, [pc, #264]	@ (8005090 <HAL_TIM_IC_Start_DMA+0x318>)
 8004f86:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8c:	4a41      	ldr	r2, [pc, #260]	@ (8005094 <HAL_TIM_IC_Start_DMA+0x31c>)
 8004f8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	4a40      	ldr	r2, [pc, #256]	@ (8005098 <HAL_TIM_IC_Start_DMA+0x320>)
 8004f96:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	333c      	adds	r3, #60	@ 0x3c
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	887b      	ldrh	r3, [r7, #2]
 8004fa8:	f7fe fb14 	bl	80035d4 <HAL_DMA_Start_IT>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e068      	b.n	8005088 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fc4:	60da      	str	r2, [r3, #12]
      break;
 8004fc6:	e026      	b.n	8005016 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fcc:	4a30      	ldr	r2, [pc, #192]	@ (8005090 <HAL_TIM_IC_Start_DMA+0x318>)
 8004fce:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd4:	4a2f      	ldr	r2, [pc, #188]	@ (8005094 <HAL_TIM_IC_Start_DMA+0x31c>)
 8004fd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fdc:	4a2e      	ldr	r2, [pc, #184]	@ (8005098 <HAL_TIM_IC_Start_DMA+0x320>)
 8004fde:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3340      	adds	r3, #64	@ 0x40
 8004fea:	4619      	mov	r1, r3
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	887b      	ldrh	r3, [r7, #2]
 8004ff0:	f7fe faf0 	bl	80035d4 <HAL_DMA_Start_IT>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e044      	b.n	8005088 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800500c:	60da      	str	r2, [r3, #12]
      break;
 800500e:	e002      	b.n	8005016 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	75fb      	strb	r3, [r7, #23]
      break;
 8005014:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a20      	ldr	r2, [pc, #128]	@ (800509c <HAL_TIM_IC_Start_DMA+0x324>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d018      	beq.n	8005052 <HAL_TIM_IC_Start_DMA+0x2da>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005028:	d013      	beq.n	8005052 <HAL_TIM_IC_Start_DMA+0x2da>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1c      	ldr	r2, [pc, #112]	@ (80050a0 <HAL_TIM_IC_Start_DMA+0x328>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00e      	beq.n	8005052 <HAL_TIM_IC_Start_DMA+0x2da>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1a      	ldr	r2, [pc, #104]	@ (80050a4 <HAL_TIM_IC_Start_DMA+0x32c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d009      	beq.n	8005052 <HAL_TIM_IC_Start_DMA+0x2da>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a19      	ldr	r2, [pc, #100]	@ (80050a8 <HAL_TIM_IC_Start_DMA+0x330>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d004      	beq.n	8005052 <HAL_TIM_IC_Start_DMA+0x2da>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a17      	ldr	r2, [pc, #92]	@ (80050ac <HAL_TIM_IC_Start_DMA+0x334>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d111      	bne.n	8005076 <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b06      	cmp	r3, #6
 8005062:	d010      	beq.n	8005086 <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005074:	e007      	b.n	8005086 <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0201 	orr.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005086:	7dfb      	ldrb	r3, [r7, #23]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	080057e5 	.word	0x080057e5
 8005094:	080058ad 	.word	0x080058ad
 8005098:	08005753 	.word	0x08005753
 800509c:	40010000 	.word	0x40010000
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40014000 	.word	0x40014000

080050b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d020      	beq.n	8005114 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01b      	beq.n	8005114 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0202 	mvn.w	r2, #2
 80050e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 faf7 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
 8005100:	e005      	b.n	800510e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fae9 	bl	80056da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 fb04 	bl	8005716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b00      	cmp	r3, #0
 800511c:	d020      	beq.n	8005160 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01b      	beq.n	8005160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0204 	mvn.w	r2, #4
 8005130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2202      	movs	r2, #2
 8005136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fad1 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
 800514c:	e005      	b.n	800515a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fac3 	bl	80056da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fade 	bl	8005716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d020      	beq.n	80051ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01b      	beq.n	80051ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0208 	mvn.w	r2, #8
 800517c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2204      	movs	r2, #4
 8005182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 faab 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
 8005198:	e005      	b.n	80051a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fa9d 	bl	80056da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fab8 	bl	8005716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d020      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01b      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0210 	mvn.w	r2, #16
 80051c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2208      	movs	r2, #8
 80051ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fa85 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
 80051e4:	e005      	b.n	80051f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fa77 	bl	80056da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fa92 	bl	8005716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00c      	beq.n	800521c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d007      	beq.n	800521c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0201 	mvn.w	r2, #1
 8005214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fc fd18 	bl	8001c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00c      	beq.n	8005240 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f001 f82a 	bl	8006294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800525c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fa63 	bl	800572a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0220 	mvn.w	r2, #32
 8005280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fffc 	bl	8006280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005288:	bf00      	nop
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e088      	b.n	80053c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d11b      	bne.n	80052f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80052cc:	f000 fd3a 	bl	8005d44 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699a      	ldr	r2, [r3, #24]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 020c 	bic.w	r2, r2, #12
 80052de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6999      	ldr	r1, [r3, #24]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	619a      	str	r2, [r3, #24]
 80052f2:	e060      	b.n	80053b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d11c      	bne.n	8005334 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800530a:	f000 fdb2 	bl	8005e72 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699a      	ldr	r2, [r3, #24]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800531c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6999      	ldr	r1, [r3, #24]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	021a      	lsls	r2, r3, #8
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	619a      	str	r2, [r3, #24]
 8005332:	e040      	b.n	80053b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b08      	cmp	r3, #8
 8005338:	d11b      	bne.n	8005372 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800534a:	f000 fdff 	bl	8005f4c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69da      	ldr	r2, [r3, #28]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 020c 	bic.w	r2, r2, #12
 800535c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69d9      	ldr	r1, [r3, #28]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	61da      	str	r2, [r3, #28]
 8005370:	e021      	b.n	80053b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b0c      	cmp	r3, #12
 8005376:	d11c      	bne.n	80053b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005388:	f000 fe1c 	bl	8005fc4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	69da      	ldr	r2, [r3, #28]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800539a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	69d9      	ldr	r1, [r3, #28]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	021a      	lsls	r2, r3, #8
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	61da      	str	r2, [r3, #28]
 80053b0:	e001      	b.n	80053b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053be:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e0ae      	b.n	8005544 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b0c      	cmp	r3, #12
 80053f2:	f200 809f 	bhi.w	8005534 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053f6:	a201      	add	r2, pc, #4	@ (adr r2, 80053fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	08005431 	.word	0x08005431
 8005400:	08005535 	.word	0x08005535
 8005404:	08005535 	.word	0x08005535
 8005408:	08005535 	.word	0x08005535
 800540c:	08005471 	.word	0x08005471
 8005410:	08005535 	.word	0x08005535
 8005414:	08005535 	.word	0x08005535
 8005418:	08005535 	.word	0x08005535
 800541c:	080054b3 	.word	0x080054b3
 8005420:	08005535 	.word	0x08005535
 8005424:	08005535 	.word	0x08005535
 8005428:	08005535 	.word	0x08005535
 800542c:	080054f3 	.word	0x080054f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 faf8 	bl	8005a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699a      	ldr	r2, [r3, #24]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0208 	orr.w	r2, r2, #8
 800544a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699a      	ldr	r2, [r3, #24]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0204 	bic.w	r2, r2, #4
 800545a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6999      	ldr	r1, [r3, #24]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	691a      	ldr	r2, [r3, #16]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	619a      	str	r2, [r3, #24]
      break;
 800546e:	e064      	b.n	800553a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fb3e 	bl	8005af8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800548a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800549a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6999      	ldr	r1, [r3, #24]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	021a      	lsls	r2, r3, #8
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	619a      	str	r2, [r3, #24]
      break;
 80054b0:	e043      	b.n	800553a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fb89 	bl	8005bd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69da      	ldr	r2, [r3, #28]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f042 0208 	orr.w	r2, r2, #8
 80054cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0204 	bic.w	r2, r2, #4
 80054dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69d9      	ldr	r1, [r3, #28]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	61da      	str	r2, [r3, #28]
      break;
 80054f0:	e023      	b.n	800553a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fbd3 	bl	8005ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800550c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69da      	ldr	r2, [r3, #28]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800551c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69d9      	ldr	r1, [r3, #28]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	021a      	lsls	r2, r3, #8
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	61da      	str	r2, [r3, #28]
      break;
 8005532:	e002      	b.n	800553a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	75fb      	strb	r3, [r7, #23]
      break;
 8005538:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005542:	7dfb      	ldrb	r3, [r7, #23]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_TIM_ConfigClockSource+0x1c>
 8005564:	2302      	movs	r3, #2
 8005566:	e0b4      	b.n	80056d2 <HAL_TIM_ConfigClockSource+0x186>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800558e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055a0:	d03e      	beq.n	8005620 <HAL_TIM_ConfigClockSource+0xd4>
 80055a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055a6:	f200 8087 	bhi.w	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
 80055aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ae:	f000 8086 	beq.w	80056be <HAL_TIM_ConfigClockSource+0x172>
 80055b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055b6:	d87f      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
 80055b8:	2b70      	cmp	r3, #112	@ 0x70
 80055ba:	d01a      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0xa6>
 80055bc:	2b70      	cmp	r3, #112	@ 0x70
 80055be:	d87b      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
 80055c0:	2b60      	cmp	r3, #96	@ 0x60
 80055c2:	d050      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0x11a>
 80055c4:	2b60      	cmp	r3, #96	@ 0x60
 80055c6:	d877      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
 80055c8:	2b50      	cmp	r3, #80	@ 0x50
 80055ca:	d03c      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0xfa>
 80055cc:	2b50      	cmp	r3, #80	@ 0x50
 80055ce:	d873      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
 80055d0:	2b40      	cmp	r3, #64	@ 0x40
 80055d2:	d058      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0x13a>
 80055d4:	2b40      	cmp	r3, #64	@ 0x40
 80055d6:	d86f      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
 80055d8:	2b30      	cmp	r3, #48	@ 0x30
 80055da:	d064      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x15a>
 80055dc:	2b30      	cmp	r3, #48	@ 0x30
 80055de:	d86b      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d060      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x15a>
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d867      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d05c      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x15a>
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d05a      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x15a>
 80055f0:	e062      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005602:	f000 fd37 	bl	8006074 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	609a      	str	r2, [r3, #8]
      break;
 800561e:	e04f      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005630:	f000 fd20 	bl	8006074 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005642:	609a      	str	r2, [r3, #8]
      break;
 8005644:	e03c      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005652:	461a      	mov	r2, r3
 8005654:	f000 fbde 	bl	8005e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2150      	movs	r1, #80	@ 0x50
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fced 	bl	800603e <TIM_ITRx_SetConfig>
      break;
 8005664:	e02c      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005672:	461a      	mov	r2, r3
 8005674:	f000 fc3a 	bl	8005eec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2160      	movs	r1, #96	@ 0x60
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fcdd 	bl	800603e <TIM_ITRx_SetConfig>
      break;
 8005684:	e01c      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005692:	461a      	mov	r2, r3
 8005694:	f000 fbbe 	bl	8005e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2140      	movs	r1, #64	@ 0x40
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fccd 	bl	800603e <TIM_ITRx_SetConfig>
      break;
 80056a4:	e00c      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f000 fcc4 	bl	800603e <TIM_ITRx_SetConfig>
      break;
 80056b6:	e003      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]
      break;
 80056bc:	e000      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	429a      	cmp	r2, r3
 8005768:	d107      	bne.n	800577a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2201      	movs	r2, #1
 800576e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005778:	e02a      	b.n	80057d0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	d107      	bne.n	8005794 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2202      	movs	r2, #2
 8005788:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005792:	e01d      	b.n	80057d0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	429a      	cmp	r2, r3
 800579c:	d107      	bne.n	80057ae <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2204      	movs	r2, #4
 80057a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057ac:	e010      	b.n	80057d0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d107      	bne.n	80057c8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2208      	movs	r2, #8
 80057bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057c6:	e003      	b.n	80057d0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f7ff ffb4 	bl	800573e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	771a      	strb	r2, [r3, #28]
}
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d10f      	bne.n	800581c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d146      	bne.n	8005898 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800581a:	e03d      	b.n	8005898 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	429a      	cmp	r2, r3
 8005824:	d10f      	bne.n	8005846 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2202      	movs	r2, #2
 800582a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d131      	bne.n	8005898 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005844:	e028      	b.n	8005898 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	429a      	cmp	r2, r3
 800584e:	d10f      	bne.n	8005870 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2204      	movs	r2, #4
 8005854:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d11c      	bne.n	8005898 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800586e:	e013      	b.n	8005898 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	429a      	cmp	r2, r3
 8005878:	d10e      	bne.n	8005898 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2208      	movs	r2, #8
 800587e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d107      	bne.n	8005898 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f7ff ff28 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	771a      	strb	r2, [r3, #28]
}
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d103      	bne.n	80058cc <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	771a      	strb	r2, [r3, #28]
 80058ca:	e019      	b.n	8005900 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d103      	bne.n	80058de <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2202      	movs	r2, #2
 80058da:	771a      	strb	r2, [r3, #28]
 80058dc:	e010      	b.n	8005900 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d103      	bne.n	80058f0 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2204      	movs	r2, #4
 80058ec:	771a      	strb	r2, [r3, #28]
 80058ee:	e007      	b.n	8005900 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d102      	bne.n	8005900 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2208      	movs	r2, #8
 80058fe:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f7ff fefe 	bl	8005702 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	771a      	strb	r2, [r3, #28]
}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a3a      	ldr	r2, [pc, #232]	@ (8005a10 <TIM_Base_SetConfig+0xfc>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00f      	beq.n	800594c <TIM_Base_SetConfig+0x38>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005932:	d00b      	beq.n	800594c <TIM_Base_SetConfig+0x38>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a37      	ldr	r2, [pc, #220]	@ (8005a14 <TIM_Base_SetConfig+0x100>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d007      	beq.n	800594c <TIM_Base_SetConfig+0x38>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a36      	ldr	r2, [pc, #216]	@ (8005a18 <TIM_Base_SetConfig+0x104>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_Base_SetConfig+0x38>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a35      	ldr	r2, [pc, #212]	@ (8005a1c <TIM_Base_SetConfig+0x108>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d108      	bne.n	800595e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a2b      	ldr	r2, [pc, #172]	@ (8005a10 <TIM_Base_SetConfig+0xfc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d01b      	beq.n	800599e <TIM_Base_SetConfig+0x8a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800596c:	d017      	beq.n	800599e <TIM_Base_SetConfig+0x8a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a28      	ldr	r2, [pc, #160]	@ (8005a14 <TIM_Base_SetConfig+0x100>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d013      	beq.n	800599e <TIM_Base_SetConfig+0x8a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a27      	ldr	r2, [pc, #156]	@ (8005a18 <TIM_Base_SetConfig+0x104>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00f      	beq.n	800599e <TIM_Base_SetConfig+0x8a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a26      	ldr	r2, [pc, #152]	@ (8005a1c <TIM_Base_SetConfig+0x108>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d00b      	beq.n	800599e <TIM_Base_SetConfig+0x8a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a25      	ldr	r2, [pc, #148]	@ (8005a20 <TIM_Base_SetConfig+0x10c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d007      	beq.n	800599e <TIM_Base_SetConfig+0x8a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a24      	ldr	r2, [pc, #144]	@ (8005a24 <TIM_Base_SetConfig+0x110>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d003      	beq.n	800599e <TIM_Base_SetConfig+0x8a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a23      	ldr	r2, [pc, #140]	@ (8005a28 <TIM_Base_SetConfig+0x114>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d108      	bne.n	80059b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a0e      	ldr	r2, [pc, #56]	@ (8005a10 <TIM_Base_SetConfig+0xfc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d103      	bne.n	80059e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d105      	bne.n	8005a02 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f023 0201 	bic.w	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	611a      	str	r2, [r3, #16]
  }
}
 8005a02:	bf00      	nop
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40010000 	.word	0x40010000
 8005a14:	40000400 	.word	0x40000400
 8005a18:	40000800 	.word	0x40000800
 8005a1c:	40000c00 	.word	0x40000c00
 8005a20:	40014000 	.word	0x40014000
 8005a24:	40014400 	.word	0x40014400
 8005a28:	40014800 	.word	0x40014800

08005a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f023 0201 	bic.w	r2, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0303 	bic.w	r3, r3, #3
 8005a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f023 0302 	bic.w	r3, r3, #2
 8005a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a1c      	ldr	r2, [pc, #112]	@ (8005af4 <TIM_OC1_SetConfig+0xc8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d10c      	bne.n	8005aa2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0308 	bic.w	r3, r3, #8
 8005a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f023 0304 	bic.w	r3, r3, #4
 8005aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a13      	ldr	r2, [pc, #76]	@ (8005af4 <TIM_OC1_SetConfig+0xc8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d111      	bne.n	8005ace <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	621a      	str	r2, [r3, #32]
}
 8005ae8:	bf00      	nop
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	40010000 	.word	0x40010000

08005af8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	f023 0210 	bic.w	r2, r3, #16
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	021b      	lsls	r3, r3, #8
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f023 0320 	bic.w	r3, r3, #32
 8005b42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a1e      	ldr	r2, [pc, #120]	@ (8005bcc <TIM_OC2_SetConfig+0xd4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d10d      	bne.n	8005b74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a15      	ldr	r2, [pc, #84]	@ (8005bcc <TIM_OC2_SetConfig+0xd4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d113      	bne.n	8005ba4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000

08005bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a1d      	ldr	r2, [pc, #116]	@ (8005ca0 <TIM_OC3_SetConfig+0xd0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d10d      	bne.n	8005c4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	021b      	lsls	r3, r3, #8
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a14      	ldr	r2, [pc, #80]	@ (8005ca0 <TIM_OC3_SetConfig+0xd0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d113      	bne.n	8005c7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	621a      	str	r2, [r3, #32]
}
 8005c94:	bf00      	nop
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	40010000 	.word	0x40010000

08005ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	021b      	lsls	r3, r3, #8
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	031b      	lsls	r3, r3, #12
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a10      	ldr	r2, [pc, #64]	@ (8005d40 <TIM_OC4_SetConfig+0x9c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d109      	bne.n	8005d18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	019b      	lsls	r3, r3, #6
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	621a      	str	r2, [r3, #32]
}
 8005d32:	bf00      	nop
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40010000 	.word	0x40010000

08005d44 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	f023 0201 	bic.w	r2, r3, #1
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4a24      	ldr	r2, [pc, #144]	@ (8005e00 <TIM_TI1_SetConfig+0xbc>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d013      	beq.n	8005d9a <TIM_TI1_SetConfig+0x56>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d78:	d00f      	beq.n	8005d9a <TIM_TI1_SetConfig+0x56>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4a21      	ldr	r2, [pc, #132]	@ (8005e04 <TIM_TI1_SetConfig+0xc0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00b      	beq.n	8005d9a <TIM_TI1_SetConfig+0x56>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4a20      	ldr	r2, [pc, #128]	@ (8005e08 <TIM_TI1_SetConfig+0xc4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d007      	beq.n	8005d9a <TIM_TI1_SetConfig+0x56>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8005e0c <TIM_TI1_SetConfig+0xc8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d003      	beq.n	8005d9a <TIM_TI1_SetConfig+0x56>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4a1e      	ldr	r2, [pc, #120]	@ (8005e10 <TIM_TI1_SetConfig+0xcc>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d101      	bne.n	8005d9e <TIM_TI1_SetConfig+0x5a>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e000      	b.n	8005da0 <TIM_TI1_SetConfig+0x5c>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d008      	beq.n	8005db6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f023 0303 	bic.w	r3, r3, #3
 8005daa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	e003      	b.n	8005dbe <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f043 0301 	orr.w	r3, r3, #1
 8005dbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f023 030a 	bic.w	r3, r3, #10
 8005dd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f003 030a 	and.w	r3, r3, #10
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40000400 	.word	0x40000400
 8005e08:	40000800 	.word	0x40000800
 8005e0c:	40000c00 	.word	0x40000c00
 8005e10:	40014000 	.word	0x40014000

08005e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	f023 0201 	bic.w	r2, r3, #1
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f023 030a 	bic.w	r3, r3, #10
 8005e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	621a      	str	r2, [r3, #32]
}
 8005e66:	bf00      	nop
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b087      	sub	sp, #28
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	607a      	str	r2, [r7, #4]
 8005e7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	f023 0210 	bic.w	r2, r3, #16
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005eb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	031b      	lsls	r3, r3, #12
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	621a      	str	r2, [r3, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f023 0210 	bic.w	r2, r3, #16
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	031b      	lsls	r3, r3, #12
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	621a      	str	r2, [r3, #32]
}
 8005f40:	bf00      	nop
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f023 0303 	bic.w	r3, r3, #3
 8005f78:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f88:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	021b      	lsls	r3, r3, #8
 8005fa2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	621a      	str	r2, [r3, #32]
}
 8005fb8:	bf00      	nop
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ff0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	021b      	lsls	r3, r3, #8
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006002:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	031b      	lsls	r3, r3, #12
 8006008:	b29b      	uxth	r3, r3
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006016:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	031b      	lsls	r3, r3, #12
 800601c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	621a      	str	r2, [r3, #32]
}
 8006032:	bf00      	nop
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800603e:	b480      	push	{r7}
 8006040:	b085      	sub	sp, #20
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	f043 0307 	orr.w	r3, r3, #7
 8006060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	609a      	str	r2, [r3, #8]
}
 8006068:	bf00      	nop
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800608e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	021a      	lsls	r2, r3, #8
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	431a      	orrs	r2, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	4313      	orrs	r3, r2
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	609a      	str	r2, [r3, #8]
}
 80060a8:	bf00      	nop
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f003 031f 	and.w	r3, r3, #31
 80060c6:	2201      	movs	r2, #1
 80060c8:	fa02 f303 	lsl.w	r3, r2, r3
 80060cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a1a      	ldr	r2, [r3, #32]
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	43db      	mvns	r3, r3
 80060d6:	401a      	ands	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a1a      	ldr	r2, [r3, #32]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f003 031f 	and.w	r3, r3, #31
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	fa01 f303 	lsl.w	r3, r1, r3
 80060ec:	431a      	orrs	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	621a      	str	r2, [r3, #32]
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
	...

08006100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006114:	2302      	movs	r3, #2
 8006116:	e050      	b.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800613e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1c      	ldr	r2, [pc, #112]	@ (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d018      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006164:	d013      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a18      	ldr	r2, [pc, #96]	@ (80061cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00e      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a16      	ldr	r2, [pc, #88]	@ (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d009      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a15      	ldr	r2, [pc, #84]	@ (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d004      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a13      	ldr	r2, [pc, #76]	@ (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d10c      	bne.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	4313      	orrs	r3, r2
 800619e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40010000 	.word	0x40010000
 80061cc:	40000400 	.word	0x40000400
 80061d0:	40000800 	.word	0x40000800
 80061d4:	40000c00 	.word	0x40000c00
 80061d8:	40014000 	.word	0x40014000

080061dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e03d      	b.n	8006274 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	4313      	orrs	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4313      	orrs	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e042      	b.n	8006340 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fc fea4 	bl	800301c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2224      	movs	r2, #36	@ 0x24
 80062d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 ff4f 	bl	8007190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	695a      	ldr	r2, [r3, #20]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2220      	movs	r2, #32
 800632c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08a      	sub	sp, #40	@ 0x28
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	4613      	mov	r3, r2
 8006356:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b20      	cmp	r3, #32
 8006366:	d175      	bne.n	8006454 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <HAL_UART_Transmit+0x2c>
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e06e      	b.n	8006456 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2221      	movs	r2, #33	@ 0x21
 8006382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006386:	f7fc ff89 	bl	800329c <HAL_GetTick>
 800638a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	88fa      	ldrh	r2, [r7, #6]
 8006390:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	88fa      	ldrh	r2, [r7, #6]
 8006396:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063a0:	d108      	bne.n	80063b4 <HAL_UART_Transmit+0x6c>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d104      	bne.n	80063b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80063aa:	2300      	movs	r3, #0
 80063ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	e003      	b.n	80063bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063bc:	e02e      	b.n	800641c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	2200      	movs	r2, #0
 80063c6:	2180      	movs	r1, #128	@ 0x80
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 fc27 	bl	8006c1c <UART_WaitOnFlagUntilTimeout>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e03a      	b.n	8006456 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10b      	bne.n	80063fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	3302      	adds	r3, #2
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	e007      	b.n	800640e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	781a      	ldrb	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	3301      	adds	r3, #1
 800640c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006412:	b29b      	uxth	r3, r3
 8006414:	3b01      	subs	r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006420:	b29b      	uxth	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1cb      	bne.n	80063be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2200      	movs	r2, #0
 800642e:	2140      	movs	r1, #64	@ 0x40
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 fbf3 	bl	8006c1c <UART_WaitOnFlagUntilTimeout>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e006      	b.n	8006456 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	e000      	b.n	8006456 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006454:	2302      	movs	r3, #2
  }
}
 8006456:	4618      	mov	r0, r3
 8006458:	3720      	adds	r7, #32
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	4613      	mov	r3, r2
 800646a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b20      	cmp	r3, #32
 8006476:	d112      	bne.n	800649e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <HAL_UART_Receive_DMA+0x26>
 800647e:	88fb      	ldrh	r3, [r7, #6]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e00b      	b.n	80064a0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800648e:	88fb      	ldrh	r3, [r7, #6]
 8006490:	461a      	mov	r2, r3
 8006492:	68b9      	ldr	r1, [r7, #8]
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f000 fc1b 	bl	8006cd0 <UART_Start_Receive_DMA>
 800649a:	4603      	mov	r3, r0
 800649c:	e000      	b.n	80064a0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800649e:	2302      	movs	r3, #2
  }
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b0ba      	sub	sp, #232	@ 0xe8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80064e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10f      	bne.n	800650e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d009      	beq.n	800650e <HAL_UART_IRQHandler+0x66>
 80064fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fd83 	bl	8007012 <UART_Receive_IT>
      return;
 800650c:	e25b      	b.n	80069c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800650e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 80de 	beq.w	80066d4 <HAL_UART_IRQHandler+0x22c>
 8006518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d106      	bne.n	8006532 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006528:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 80d1 	beq.w	80066d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00b      	beq.n	8006556 <HAL_UART_IRQHandler+0xae>
 800653e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654e:	f043 0201 	orr.w	r2, r3, #1
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800655a:	f003 0304 	and.w	r3, r3, #4
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00b      	beq.n	800657a <HAL_UART_IRQHandler+0xd2>
 8006562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006572:	f043 0202 	orr.w	r2, r3, #2
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800657a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00b      	beq.n	800659e <HAL_UART_IRQHandler+0xf6>
 8006586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006596:	f043 0204 	orr.w	r2, r3, #4
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800659e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d011      	beq.n	80065ce <HAL_UART_IRQHandler+0x126>
 80065aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d105      	bne.n	80065c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d005      	beq.n	80065ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c6:	f043 0208 	orr.w	r2, r3, #8
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 81f2 	beq.w	80069bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065dc:	f003 0320 	and.w	r3, r3, #32
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d008      	beq.n	80065f6 <HAL_UART_IRQHandler+0x14e>
 80065e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fd0e 	bl	8007012 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006600:	2b40      	cmp	r3, #64	@ 0x40
 8006602:	bf0c      	ite	eq
 8006604:	2301      	moveq	r3, #1
 8006606:	2300      	movne	r3, #0
 8006608:	b2db      	uxtb	r3, r3
 800660a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <HAL_UART_IRQHandler+0x17a>
 800661a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800661e:	2b00      	cmp	r3, #0
 8006620:	d04f      	beq.n	80066c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fc16 	bl	8006e54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006632:	2b40      	cmp	r3, #64	@ 0x40
 8006634:	d141      	bne.n	80066ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3314      	adds	r3, #20
 800663c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800664c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006654:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3314      	adds	r3, #20
 800665e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006662:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006666:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800666e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800667a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1d9      	bne.n	8006636 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d013      	beq.n	80066b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800668e:	4a7e      	ldr	r2, [pc, #504]	@ (8006888 <HAL_UART_IRQHandler+0x3e0>)
 8006690:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006696:	4618      	mov	r0, r3
 8006698:	f7fd f864 	bl	8003764 <HAL_DMA_Abort_IT>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d016      	beq.n	80066d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80066ac:	4610      	mov	r0, r2
 80066ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b0:	e00e      	b.n	80066d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f99e 	bl	80069f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b8:	e00a      	b.n	80066d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f99a 	bl	80069f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c0:	e006      	b.n	80066d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f996 	bl	80069f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80066ce:	e175      	b.n	80069bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d0:	bf00      	nop
    return;
 80066d2:	e173      	b.n	80069bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d8:	2b01      	cmp	r3, #1
 80066da:	f040 814f 	bne.w	800697c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80066de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066e2:	f003 0310 	and.w	r3, r3, #16
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 8148 	beq.w	800697c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066f0:	f003 0310 	and.w	r3, r3, #16
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 8141 	beq.w	800697c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066fa:	2300      	movs	r3, #0
 80066fc:	60bb      	str	r3, [r7, #8]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	60bb      	str	r3, [r7, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	60bb      	str	r3, [r7, #8]
 800670e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800671a:	2b40      	cmp	r3, #64	@ 0x40
 800671c:	f040 80b6 	bne.w	800688c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800672c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 8145 	beq.w	80069c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800673a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800673e:	429a      	cmp	r2, r3
 8006740:	f080 813e 	bcs.w	80069c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800674a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006756:	f000 8088 	beq.w	800686a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	330c      	adds	r3, #12
 8006760:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006764:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006770:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	330c      	adds	r3, #12
 8006782:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006786:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800678a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006792:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800679e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1d9      	bne.n	800675a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3314      	adds	r3, #20
 80067ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80067b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067b8:	f023 0301 	bic.w	r3, r3, #1
 80067bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3314      	adds	r3, #20
 80067c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80067ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80067ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80067d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80067d6:	e841 2300 	strex	r3, r2, [r1]
 80067da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80067dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1e1      	bne.n	80067a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3314      	adds	r3, #20
 80067e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067ec:	e853 3f00 	ldrex	r3, [r3]
 80067f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80067f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3314      	adds	r3, #20
 8006802:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006806:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006808:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800680c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e3      	bne.n	80067e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	330c      	adds	r3, #12
 800682e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006832:	e853 3f00 	ldrex	r3, [r3]
 8006836:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006838:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800683a:	f023 0310 	bic.w	r3, r3, #16
 800683e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	330c      	adds	r3, #12
 8006848:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800684c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800684e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006852:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800685a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e3      	bne.n	8006828 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006864:	4618      	mov	r0, r3
 8006866:	f7fc ff0d 	bl	8003684 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006878:	b29b      	uxth	r3, r3
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	b29b      	uxth	r3, r3
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f8c1 	bl	8006a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006886:	e09b      	b.n	80069c0 <HAL_UART_IRQHandler+0x518>
 8006888:	08006f1b 	.word	0x08006f1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006894:	b29b      	uxth	r3, r3
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 808e 	beq.w	80069c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80068a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 8089 	beq.w	80069c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	330c      	adds	r3, #12
 80068b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068bc:	e853 3f00 	ldrex	r3, [r3]
 80068c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	330c      	adds	r3, #12
 80068d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80068d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80068d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e3      	bne.n	80068b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3314      	adds	r3, #20
 80068f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	623b      	str	r3, [r7, #32]
   return(result);
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	f023 0301 	bic.w	r3, r3, #1
 8006900:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3314      	adds	r3, #20
 800690a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800690e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006910:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006912:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800691c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1e3      	bne.n	80068ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	330c      	adds	r3, #12
 8006936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 0310 	bic.w	r3, r3, #16
 8006946:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	330c      	adds	r3, #12
 8006950:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006954:	61fa      	str	r2, [r7, #28]
 8006956:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	69b9      	ldr	r1, [r7, #24]
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	e841 2300 	strex	r3, r2, [r1]
 8006960:	617b      	str	r3, [r7, #20]
   return(result);
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e3      	bne.n	8006930 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800696e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f847 	bl	8006a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800697a:	e023      	b.n	80069c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800697c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006984:	2b00      	cmp	r3, #0
 8006986:	d009      	beq.n	800699c <HAL_UART_IRQHandler+0x4f4>
 8006988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800698c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fad4 	bl	8006f42 <UART_Transmit_IT>
    return;
 800699a:	e014      	b.n	80069c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800699c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00e      	beq.n	80069c6 <HAL_UART_IRQHandler+0x51e>
 80069a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d008      	beq.n	80069c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fb14 	bl	8006fe2 <UART_EndTransmit_IT>
    return;
 80069ba:	e004      	b.n	80069c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80069bc:	bf00      	nop
 80069be:	e002      	b.n	80069c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80069c0:	bf00      	nop
 80069c2:	e000      	b.n	80069c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80069c4:	bf00      	nop
  }
}
 80069c6:	37e8      	adds	r7, #232	@ 0xe8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b09c      	sub	sp, #112	@ 0x70
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d172      	bne.n	8006b22 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006a3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a3e:	2200      	movs	r2, #0
 8006a40:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	330c      	adds	r3, #12
 8006a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	330c      	adds	r3, #12
 8006a60:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006a62:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a64:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e5      	bne.n	8006a42 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3314      	adds	r3, #20
 8006a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a88:	f023 0301 	bic.w	r3, r3, #1
 8006a8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3314      	adds	r3, #20
 8006a94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a96:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e5      	bne.n	8006a76 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3314      	adds	r3, #20
 8006ab0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ac0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3314      	adds	r3, #20
 8006ac8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006aca:	633a      	str	r2, [r7, #48]	@ 0x30
 8006acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e5      	bne.n	8006aaa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d119      	bne.n	8006b22 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f023 0310 	bic.w	r3, r3, #16
 8006b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	330c      	adds	r3, #12
 8006b0c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006b0e:	61fa      	str	r2, [r7, #28]
 8006b10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	69b9      	ldr	r1, [r7, #24]
 8006b14:	69fa      	ldr	r2, [r7, #28]
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	617b      	str	r3, [r7, #20]
   return(result);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e5      	bne.n	8006aee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b24:	2200      	movs	r2, #0
 8006b26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d106      	bne.n	8006b3e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b32:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b34:	4619      	mov	r1, r3
 8006b36:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b38:	f7ff ff66 	bl	8006a08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b3c:	e002      	b.n	8006b44 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006b3e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b40:	f7fc f972 	bl	8002e28 <HAL_UART_RxCpltCallback>
}
 8006b44:	bf00      	nop
 8006b46:	3770      	adds	r7, #112	@ 0x70
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b58:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d108      	bne.n	8006b7a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b6c:	085b      	lsrs	r3, r3, #1
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	4619      	mov	r1, r3
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f7ff ff48 	bl	8006a08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b78:	e002      	b.n	8006b80 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f7ff ff30 	bl	80069e0 <HAL_UART_RxHalfCpltCallback>
}
 8006b80:	bf00      	nop
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b98:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ba4:	2b80      	cmp	r3, #128	@ 0x80
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2301      	moveq	r3, #1
 8006baa:	2300      	movne	r3, #0
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b21      	cmp	r3, #33	@ 0x21
 8006bba:	d108      	bne.n	8006bce <UART_DMAError+0x46>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d005      	beq.n	8006bce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006bc8:	68b8      	ldr	r0, [r7, #8]
 8006bca:	f000 f91b 	bl	8006e04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd8:	2b40      	cmp	r3, #64	@ 0x40
 8006bda:	bf0c      	ite	eq
 8006bdc:	2301      	moveq	r3, #1
 8006bde:	2300      	movne	r3, #0
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b22      	cmp	r3, #34	@ 0x22
 8006bee:	d108      	bne.n	8006c02 <UART_DMAError+0x7a>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d005      	beq.n	8006c02 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006bfc:	68b8      	ldr	r0, [r7, #8]
 8006bfe:	f000 f929 	bl	8006e54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c06:	f043 0210 	orr.w	r2, r3, #16
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c0e:	68b8      	ldr	r0, [r7, #8]
 8006c10:	f7ff fef0 	bl	80069f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c14:	bf00      	nop
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c2c:	e03b      	b.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c34:	d037      	beq.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c36:	f7fc fb31 	bl	800329c <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	6a3a      	ldr	r2, [r7, #32]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d302      	bcc.n	8006c4c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e03a      	b.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f003 0304 	and.w	r3, r3, #4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d023      	beq.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b80      	cmp	r3, #128	@ 0x80
 8006c62:	d020      	beq.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b40      	cmp	r3, #64	@ 0x40
 8006c68:	d01d      	beq.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0308 	and.w	r3, r3, #8
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d116      	bne.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	617b      	str	r3, [r7, #20]
 8006c8c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 f8e0 	bl	8006e54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2208      	movs	r2, #8
 8006c98:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e00f      	b.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	4013      	ands	r3, r2
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	bf0c      	ite	eq
 8006cb6:	2301      	moveq	r3, #1
 8006cb8:	2300      	movne	r3, #0
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	79fb      	ldrb	r3, [r7, #7]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d0b4      	beq.n	8006c2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b098      	sub	sp, #96	@ 0x60
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	88fa      	ldrh	r2, [r7, #6]
 8006ce8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2222      	movs	r2, #34	@ 0x22
 8006cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cfc:	4a3e      	ldr	r2, [pc, #248]	@ (8006df8 <UART_Start_Receive_DMA+0x128>)
 8006cfe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d04:	4a3d      	ldr	r2, [pc, #244]	@ (8006dfc <UART_Start_Receive_DMA+0x12c>)
 8006d06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d0c:	4a3c      	ldr	r2, [pc, #240]	@ (8006e00 <UART_Start_Receive_DMA+0x130>)
 8006d0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d14:	2200      	movs	r2, #0
 8006d16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006d18:	f107 0308 	add.w	r3, r7, #8
 8006d1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3304      	adds	r3, #4
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	f7fc fc50 	bl	80035d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006d34:	2300      	movs	r3, #0
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	613b      	str	r3, [r7, #16]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d019      	beq.n	8006d86 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	330c      	adds	r3, #12
 8006d58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	330c      	adds	r3, #12
 8006d70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d72:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006d74:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d76:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006d78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1e5      	bne.n	8006d52 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3314      	adds	r3, #20
 8006d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d98:	f043 0301 	orr.w	r3, r3, #1
 8006d9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3314      	adds	r3, #20
 8006da4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006da6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006da8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006dac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e5      	bne.n	8006d86 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3314      	adds	r3, #20
 8006dc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	e853 3f00 	ldrex	r3, [r3]
 8006dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3314      	adds	r3, #20
 8006dd8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006dda:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ddc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	6a39      	ldr	r1, [r7, #32]
 8006de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e5      	bne.n	8006dba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3760      	adds	r7, #96	@ 0x60
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	08006a21 	.word	0x08006a21
 8006dfc:	08006b4d 	.word	0x08006b4d
 8006e00:	08006b89 	.word	0x08006b89

08006e04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b089      	sub	sp, #36	@ 0x24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	330c      	adds	r3, #12
 8006e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	e853 3f00 	ldrex	r3, [r3]
 8006e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	330c      	adds	r3, #12
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	61ba      	str	r2, [r7, #24]
 8006e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	6979      	ldr	r1, [r7, #20]
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	613b      	str	r3, [r7, #16]
   return(result);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e5      	bne.n	8006e0c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006e48:	bf00      	nop
 8006e4a:	3724      	adds	r7, #36	@ 0x24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b095      	sub	sp, #84	@ 0x54
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	330c      	adds	r3, #12
 8006e7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e7c:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e5      	bne.n	8006e5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3314      	adds	r3, #20
 8006e96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	f023 0301 	bic.w	r3, r3, #1
 8006ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3314      	adds	r3, #20
 8006eae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006eb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006eb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e5      	bne.n	8006e90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d119      	bne.n	8006f00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	330c      	adds	r3, #12
 8006ed2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	e853 3f00 	ldrex	r3, [r3]
 8006eda:	60bb      	str	r3, [r7, #8]
   return(result);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f023 0310 	bic.w	r3, r3, #16
 8006ee2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	330c      	adds	r3, #12
 8006eea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006eec:	61ba      	str	r2, [r7, #24]
 8006eee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	6979      	ldr	r1, [r7, #20]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e5      	bne.n	8006ecc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f0e:	bf00      	nop
 8006f10:	3754      	adds	r7, #84	@ 0x54
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b084      	sub	sp, #16
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f7ff fd5d 	bl	80069f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f3a:	bf00      	nop
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b085      	sub	sp, #20
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b21      	cmp	r3, #33	@ 0x21
 8006f54:	d13e      	bne.n	8006fd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f5e:	d114      	bne.n	8006f8a <UART_Transmit_IT+0x48>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d110      	bne.n	8006f8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	1c9a      	adds	r2, r3, #2
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	621a      	str	r2, [r3, #32]
 8006f88:	e008      	b.n	8006f9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	1c59      	adds	r1, r3, #1
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6211      	str	r1, [r2, #32]
 8006f94:	781a      	ldrb	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10f      	bne.n	8006fd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68da      	ldr	r2, [r3, #12]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e000      	b.n	8006fd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fd4:	2302      	movs	r3, #2
  }
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b082      	sub	sp, #8
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68da      	ldr	r2, [r3, #12]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ff8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7ff fce2 	bl	80069cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b08c      	sub	sp, #48	@ 0x30
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b22      	cmp	r3, #34	@ 0x22
 8007024:	f040 80ae 	bne.w	8007184 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007030:	d117      	bne.n	8007062 <UART_Receive_IT+0x50>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d113      	bne.n	8007062 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800703a:	2300      	movs	r3, #0
 800703c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007042:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	b29b      	uxth	r3, r3
 800704c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007050:	b29a      	uxth	r2, r3
 8007052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007054:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705a:	1c9a      	adds	r2, r3, #2
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007060:	e026      	b.n	80070b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007066:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007068:	2300      	movs	r3, #0
 800706a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007074:	d007      	beq.n	8007086 <UART_Receive_IT+0x74>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <UART_Receive_IT+0x82>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	b2da      	uxtb	r2, r3
 800708e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007090:	701a      	strb	r2, [r3, #0]
 8007092:	e008      	b.n	80070a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	3b01      	subs	r3, #1
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	4619      	mov	r1, r3
 80070be:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d15d      	bne.n	8007180 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0220 	bic.w	r2, r2, #32
 80070d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	695a      	ldr	r2, [r3, #20]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 0201 	bic.w	r2, r2, #1
 80070f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007106:	2b01      	cmp	r3, #1
 8007108:	d135      	bne.n	8007176 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	330c      	adds	r3, #12
 8007116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	e853 3f00 	ldrex	r3, [r3]
 800711e:	613b      	str	r3, [r7, #16]
   return(result);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f023 0310 	bic.w	r3, r3, #16
 8007126:	627b      	str	r3, [r7, #36]	@ 0x24
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	330c      	adds	r3, #12
 800712e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007130:	623a      	str	r2, [r7, #32]
 8007132:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	69f9      	ldr	r1, [r7, #28]
 8007136:	6a3a      	ldr	r2, [r7, #32]
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	61bb      	str	r3, [r7, #24]
   return(result);
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e5      	bne.n	8007110 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0310 	and.w	r3, r3, #16
 800714e:	2b10      	cmp	r3, #16
 8007150:	d10a      	bne.n	8007168 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7ff fc4a 	bl	8006a08 <HAL_UARTEx_RxEventCallback>
 8007174:	e002      	b.n	800717c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fb fe56 	bl	8002e28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	e002      	b.n	8007186 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	e000      	b.n	8007186 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007184:	2302      	movs	r3, #2
  }
}
 8007186:	4618      	mov	r0, r3
 8007188:	3730      	adds	r7, #48	@ 0x30
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007194:	b0c0      	sub	sp, #256	@ 0x100
 8007196:	af00      	add	r7, sp, #0
 8007198:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800719c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ac:	68d9      	ldr	r1, [r3, #12]
 80071ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	ea40 0301 	orr.w	r3, r0, r1
 80071b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	431a      	orrs	r2, r3
 80071c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80071e8:	f021 010c 	bic.w	r1, r1, #12
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071f6:	430b      	orrs	r3, r1
 80071f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720a:	6999      	ldr	r1, [r3, #24]
 800720c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	ea40 0301 	orr.w	r3, r0, r1
 8007216:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	4b8f      	ldr	r3, [pc, #572]	@ (800745c <UART_SetConfig+0x2cc>)
 8007220:	429a      	cmp	r2, r3
 8007222:	d005      	beq.n	8007230 <UART_SetConfig+0xa0>
 8007224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4b8d      	ldr	r3, [pc, #564]	@ (8007460 <UART_SetConfig+0x2d0>)
 800722c:	429a      	cmp	r2, r3
 800722e:	d104      	bne.n	800723a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007230:	f7fd fb46 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 8007234:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007238:	e003      	b.n	8007242 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800723a:	f7fd fb2d 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 800723e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800724c:	f040 810c 	bne.w	8007468 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007254:	2200      	movs	r2, #0
 8007256:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800725a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800725e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007262:	4622      	mov	r2, r4
 8007264:	462b      	mov	r3, r5
 8007266:	1891      	adds	r1, r2, r2
 8007268:	65b9      	str	r1, [r7, #88]	@ 0x58
 800726a:	415b      	adcs	r3, r3
 800726c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800726e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007272:	4621      	mov	r1, r4
 8007274:	eb12 0801 	adds.w	r8, r2, r1
 8007278:	4629      	mov	r1, r5
 800727a:	eb43 0901 	adc.w	r9, r3, r1
 800727e:	f04f 0200 	mov.w	r2, #0
 8007282:	f04f 0300 	mov.w	r3, #0
 8007286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800728a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800728e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007292:	4690      	mov	r8, r2
 8007294:	4699      	mov	r9, r3
 8007296:	4623      	mov	r3, r4
 8007298:	eb18 0303 	adds.w	r3, r8, r3
 800729c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072a0:	462b      	mov	r3, r5
 80072a2:	eb49 0303 	adc.w	r3, r9, r3
 80072a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80072ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80072be:	460b      	mov	r3, r1
 80072c0:	18db      	adds	r3, r3, r3
 80072c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80072c4:	4613      	mov	r3, r2
 80072c6:	eb42 0303 	adc.w	r3, r2, r3
 80072ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80072cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80072d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80072d4:	f7f9 fc9a 	bl	8000c0c <__aeabi_uldivmod>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4b61      	ldr	r3, [pc, #388]	@ (8007464 <UART_SetConfig+0x2d4>)
 80072de:	fba3 2302 	umull	r2, r3, r3, r2
 80072e2:	095b      	lsrs	r3, r3, #5
 80072e4:	011c      	lsls	r4, r3, #4
 80072e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ea:	2200      	movs	r2, #0
 80072ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80072f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072f8:	4642      	mov	r2, r8
 80072fa:	464b      	mov	r3, r9
 80072fc:	1891      	adds	r1, r2, r2
 80072fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007300:	415b      	adcs	r3, r3
 8007302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007304:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007308:	4641      	mov	r1, r8
 800730a:	eb12 0a01 	adds.w	sl, r2, r1
 800730e:	4649      	mov	r1, r9
 8007310:	eb43 0b01 	adc.w	fp, r3, r1
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007320:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007328:	4692      	mov	sl, r2
 800732a:	469b      	mov	fp, r3
 800732c:	4643      	mov	r3, r8
 800732e:	eb1a 0303 	adds.w	r3, sl, r3
 8007332:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007336:	464b      	mov	r3, r9
 8007338:	eb4b 0303 	adc.w	r3, fp, r3
 800733c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800734c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007350:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007354:	460b      	mov	r3, r1
 8007356:	18db      	adds	r3, r3, r3
 8007358:	643b      	str	r3, [r7, #64]	@ 0x40
 800735a:	4613      	mov	r3, r2
 800735c:	eb42 0303 	adc.w	r3, r2, r3
 8007360:	647b      	str	r3, [r7, #68]	@ 0x44
 8007362:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007366:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800736a:	f7f9 fc4f 	bl	8000c0c <__aeabi_uldivmod>
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	4611      	mov	r1, r2
 8007374:	4b3b      	ldr	r3, [pc, #236]	@ (8007464 <UART_SetConfig+0x2d4>)
 8007376:	fba3 2301 	umull	r2, r3, r3, r1
 800737a:	095b      	lsrs	r3, r3, #5
 800737c:	2264      	movs	r2, #100	@ 0x64
 800737e:	fb02 f303 	mul.w	r3, r2, r3
 8007382:	1acb      	subs	r3, r1, r3
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800738a:	4b36      	ldr	r3, [pc, #216]	@ (8007464 <UART_SetConfig+0x2d4>)
 800738c:	fba3 2302 	umull	r2, r3, r3, r2
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007398:	441c      	add	r4, r3
 800739a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80073a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80073ac:	4642      	mov	r2, r8
 80073ae:	464b      	mov	r3, r9
 80073b0:	1891      	adds	r1, r2, r2
 80073b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80073b4:	415b      	adcs	r3, r3
 80073b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80073bc:	4641      	mov	r1, r8
 80073be:	1851      	adds	r1, r2, r1
 80073c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80073c2:	4649      	mov	r1, r9
 80073c4:	414b      	adcs	r3, r1
 80073c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c8:	f04f 0200 	mov.w	r2, #0
 80073cc:	f04f 0300 	mov.w	r3, #0
 80073d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80073d4:	4659      	mov	r1, fp
 80073d6:	00cb      	lsls	r3, r1, #3
 80073d8:	4651      	mov	r1, sl
 80073da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073de:	4651      	mov	r1, sl
 80073e0:	00ca      	lsls	r2, r1, #3
 80073e2:	4610      	mov	r0, r2
 80073e4:	4619      	mov	r1, r3
 80073e6:	4603      	mov	r3, r0
 80073e8:	4642      	mov	r2, r8
 80073ea:	189b      	adds	r3, r3, r2
 80073ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073f0:	464b      	mov	r3, r9
 80073f2:	460a      	mov	r2, r1
 80073f4:	eb42 0303 	adc.w	r3, r2, r3
 80073f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007408:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800740c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007410:	460b      	mov	r3, r1
 8007412:	18db      	adds	r3, r3, r3
 8007414:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007416:	4613      	mov	r3, r2
 8007418:	eb42 0303 	adc.w	r3, r2, r3
 800741c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800741e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007422:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007426:	f7f9 fbf1 	bl	8000c0c <__aeabi_uldivmod>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	4b0d      	ldr	r3, [pc, #52]	@ (8007464 <UART_SetConfig+0x2d4>)
 8007430:	fba3 1302 	umull	r1, r3, r3, r2
 8007434:	095b      	lsrs	r3, r3, #5
 8007436:	2164      	movs	r1, #100	@ 0x64
 8007438:	fb01 f303 	mul.w	r3, r1, r3
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	3332      	adds	r3, #50	@ 0x32
 8007442:	4a08      	ldr	r2, [pc, #32]	@ (8007464 <UART_SetConfig+0x2d4>)
 8007444:	fba2 2303 	umull	r2, r3, r2, r3
 8007448:	095b      	lsrs	r3, r3, #5
 800744a:	f003 0207 	and.w	r2, r3, #7
 800744e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4422      	add	r2, r4
 8007456:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007458:	e106      	b.n	8007668 <UART_SetConfig+0x4d8>
 800745a:	bf00      	nop
 800745c:	40011000 	.word	0x40011000
 8007460:	40011400 	.word	0x40011400
 8007464:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800746c:	2200      	movs	r2, #0
 800746e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007472:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007476:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800747a:	4642      	mov	r2, r8
 800747c:	464b      	mov	r3, r9
 800747e:	1891      	adds	r1, r2, r2
 8007480:	6239      	str	r1, [r7, #32]
 8007482:	415b      	adcs	r3, r3
 8007484:	627b      	str	r3, [r7, #36]	@ 0x24
 8007486:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800748a:	4641      	mov	r1, r8
 800748c:	1854      	adds	r4, r2, r1
 800748e:	4649      	mov	r1, r9
 8007490:	eb43 0501 	adc.w	r5, r3, r1
 8007494:	f04f 0200 	mov.w	r2, #0
 8007498:	f04f 0300 	mov.w	r3, #0
 800749c:	00eb      	lsls	r3, r5, #3
 800749e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074a2:	00e2      	lsls	r2, r4, #3
 80074a4:	4614      	mov	r4, r2
 80074a6:	461d      	mov	r5, r3
 80074a8:	4643      	mov	r3, r8
 80074aa:	18e3      	adds	r3, r4, r3
 80074ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80074b0:	464b      	mov	r3, r9
 80074b2:	eb45 0303 	adc.w	r3, r5, r3
 80074b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80074ca:	f04f 0200 	mov.w	r2, #0
 80074ce:	f04f 0300 	mov.w	r3, #0
 80074d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80074d6:	4629      	mov	r1, r5
 80074d8:	008b      	lsls	r3, r1, #2
 80074da:	4621      	mov	r1, r4
 80074dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074e0:	4621      	mov	r1, r4
 80074e2:	008a      	lsls	r2, r1, #2
 80074e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80074e8:	f7f9 fb90 	bl	8000c0c <__aeabi_uldivmod>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4b60      	ldr	r3, [pc, #384]	@ (8007674 <UART_SetConfig+0x4e4>)
 80074f2:	fba3 2302 	umull	r2, r3, r3, r2
 80074f6:	095b      	lsrs	r3, r3, #5
 80074f8:	011c      	lsls	r4, r3, #4
 80074fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074fe:	2200      	movs	r2, #0
 8007500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007504:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007508:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800750c:	4642      	mov	r2, r8
 800750e:	464b      	mov	r3, r9
 8007510:	1891      	adds	r1, r2, r2
 8007512:	61b9      	str	r1, [r7, #24]
 8007514:	415b      	adcs	r3, r3
 8007516:	61fb      	str	r3, [r7, #28]
 8007518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800751c:	4641      	mov	r1, r8
 800751e:	1851      	adds	r1, r2, r1
 8007520:	6139      	str	r1, [r7, #16]
 8007522:	4649      	mov	r1, r9
 8007524:	414b      	adcs	r3, r1
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	f04f 0200 	mov.w	r2, #0
 800752c:	f04f 0300 	mov.w	r3, #0
 8007530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007534:	4659      	mov	r1, fp
 8007536:	00cb      	lsls	r3, r1, #3
 8007538:	4651      	mov	r1, sl
 800753a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800753e:	4651      	mov	r1, sl
 8007540:	00ca      	lsls	r2, r1, #3
 8007542:	4610      	mov	r0, r2
 8007544:	4619      	mov	r1, r3
 8007546:	4603      	mov	r3, r0
 8007548:	4642      	mov	r2, r8
 800754a:	189b      	adds	r3, r3, r2
 800754c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007550:	464b      	mov	r3, r9
 8007552:	460a      	mov	r2, r1
 8007554:	eb42 0303 	adc.w	r3, r2, r3
 8007558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007566:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007568:	f04f 0200 	mov.w	r2, #0
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007574:	4649      	mov	r1, r9
 8007576:	008b      	lsls	r3, r1, #2
 8007578:	4641      	mov	r1, r8
 800757a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800757e:	4641      	mov	r1, r8
 8007580:	008a      	lsls	r2, r1, #2
 8007582:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007586:	f7f9 fb41 	bl	8000c0c <__aeabi_uldivmod>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4611      	mov	r1, r2
 8007590:	4b38      	ldr	r3, [pc, #224]	@ (8007674 <UART_SetConfig+0x4e4>)
 8007592:	fba3 2301 	umull	r2, r3, r3, r1
 8007596:	095b      	lsrs	r3, r3, #5
 8007598:	2264      	movs	r2, #100	@ 0x64
 800759a:	fb02 f303 	mul.w	r3, r2, r3
 800759e:	1acb      	subs	r3, r1, r3
 80075a0:	011b      	lsls	r3, r3, #4
 80075a2:	3332      	adds	r3, #50	@ 0x32
 80075a4:	4a33      	ldr	r2, [pc, #204]	@ (8007674 <UART_SetConfig+0x4e4>)
 80075a6:	fba2 2303 	umull	r2, r3, r2, r3
 80075aa:	095b      	lsrs	r3, r3, #5
 80075ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075b0:	441c      	add	r4, r3
 80075b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075b6:	2200      	movs	r2, #0
 80075b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80075ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80075bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80075c0:	4642      	mov	r2, r8
 80075c2:	464b      	mov	r3, r9
 80075c4:	1891      	adds	r1, r2, r2
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	415b      	adcs	r3, r3
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075d0:	4641      	mov	r1, r8
 80075d2:	1851      	adds	r1, r2, r1
 80075d4:	6039      	str	r1, [r7, #0]
 80075d6:	4649      	mov	r1, r9
 80075d8:	414b      	adcs	r3, r1
 80075da:	607b      	str	r3, [r7, #4]
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	f04f 0300 	mov.w	r3, #0
 80075e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075e8:	4659      	mov	r1, fp
 80075ea:	00cb      	lsls	r3, r1, #3
 80075ec:	4651      	mov	r1, sl
 80075ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075f2:	4651      	mov	r1, sl
 80075f4:	00ca      	lsls	r2, r1, #3
 80075f6:	4610      	mov	r0, r2
 80075f8:	4619      	mov	r1, r3
 80075fa:	4603      	mov	r3, r0
 80075fc:	4642      	mov	r2, r8
 80075fe:	189b      	adds	r3, r3, r2
 8007600:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007602:	464b      	mov	r3, r9
 8007604:	460a      	mov	r2, r1
 8007606:	eb42 0303 	adc.w	r3, r2, r3
 800760a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	663b      	str	r3, [r7, #96]	@ 0x60
 8007616:	667a      	str	r2, [r7, #100]	@ 0x64
 8007618:	f04f 0200 	mov.w	r2, #0
 800761c:	f04f 0300 	mov.w	r3, #0
 8007620:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007624:	4649      	mov	r1, r9
 8007626:	008b      	lsls	r3, r1, #2
 8007628:	4641      	mov	r1, r8
 800762a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800762e:	4641      	mov	r1, r8
 8007630:	008a      	lsls	r2, r1, #2
 8007632:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007636:	f7f9 fae9 	bl	8000c0c <__aeabi_uldivmod>
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	4b0d      	ldr	r3, [pc, #52]	@ (8007674 <UART_SetConfig+0x4e4>)
 8007640:	fba3 1302 	umull	r1, r3, r3, r2
 8007644:	095b      	lsrs	r3, r3, #5
 8007646:	2164      	movs	r1, #100	@ 0x64
 8007648:	fb01 f303 	mul.w	r3, r1, r3
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	011b      	lsls	r3, r3, #4
 8007650:	3332      	adds	r3, #50	@ 0x32
 8007652:	4a08      	ldr	r2, [pc, #32]	@ (8007674 <UART_SetConfig+0x4e4>)
 8007654:	fba2 2303 	umull	r2, r3, r2, r3
 8007658:	095b      	lsrs	r3, r3, #5
 800765a:	f003 020f 	and.w	r2, r3, #15
 800765e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4422      	add	r2, r4
 8007666:	609a      	str	r2, [r3, #8]
}
 8007668:	bf00      	nop
 800766a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800766e:	46bd      	mov	sp, r7
 8007670:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007674:	51eb851f 	.word	0x51eb851f

08007678 <__NVIC_SetPriority>:
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	4603      	mov	r3, r0
 8007680:	6039      	str	r1, [r7, #0]
 8007682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007688:	2b00      	cmp	r3, #0
 800768a:	db0a      	blt.n	80076a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	b2da      	uxtb	r2, r3
 8007690:	490c      	ldr	r1, [pc, #48]	@ (80076c4 <__NVIC_SetPriority+0x4c>)
 8007692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007696:	0112      	lsls	r2, r2, #4
 8007698:	b2d2      	uxtb	r2, r2
 800769a:	440b      	add	r3, r1
 800769c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80076a0:	e00a      	b.n	80076b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	4908      	ldr	r1, [pc, #32]	@ (80076c8 <__NVIC_SetPriority+0x50>)
 80076a8:	79fb      	ldrb	r3, [r7, #7]
 80076aa:	f003 030f 	and.w	r3, r3, #15
 80076ae:	3b04      	subs	r3, #4
 80076b0:	0112      	lsls	r2, r2, #4
 80076b2:	b2d2      	uxtb	r2, r2
 80076b4:	440b      	add	r3, r1
 80076b6:	761a      	strb	r2, [r3, #24]
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	e000e100 	.word	0xe000e100
 80076c8:	e000ed00 	.word	0xe000ed00

080076cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80076cc:	b580      	push	{r7, lr}
 80076ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80076d0:	4b05      	ldr	r3, [pc, #20]	@ (80076e8 <SysTick_Handler+0x1c>)
 80076d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80076d4:	f001 fd46 	bl	8009164 <xTaskGetSchedulerState>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d001      	beq.n	80076e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80076de:	f002 fb3b 	bl	8009d58 <xPortSysTickHandler>
  }
}
 80076e2:	bf00      	nop
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	e000e010 	.word	0xe000e010

080076ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80076f0:	2100      	movs	r1, #0
 80076f2:	f06f 0004 	mvn.w	r0, #4
 80076f6:	f7ff ffbf 	bl	8007678 <__NVIC_SetPriority>
#endif
}
 80076fa:	bf00      	nop
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007706:	f3ef 8305 	mrs	r3, IPSR
 800770a:	603b      	str	r3, [r7, #0]
  return(result);
 800770c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007712:	f06f 0305 	mvn.w	r3, #5
 8007716:	607b      	str	r3, [r7, #4]
 8007718:	e00c      	b.n	8007734 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800771a:	4b0a      	ldr	r3, [pc, #40]	@ (8007744 <osKernelInitialize+0x44>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d105      	bne.n	800772e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007722:	4b08      	ldr	r3, [pc, #32]	@ (8007744 <osKernelInitialize+0x44>)
 8007724:	2201      	movs	r2, #1
 8007726:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007728:	2300      	movs	r3, #0
 800772a:	607b      	str	r3, [r7, #4]
 800772c:	e002      	b.n	8007734 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800772e:	f04f 33ff 	mov.w	r3, #4294967295
 8007732:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007734:	687b      	ldr	r3, [r7, #4]
}
 8007736:	4618      	mov	r0, r3
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	200005a0 	.word	0x200005a0

08007748 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800774e:	f3ef 8305 	mrs	r3, IPSR
 8007752:	603b      	str	r3, [r7, #0]
  return(result);
 8007754:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <osKernelStart+0x1a>
    stat = osErrorISR;
 800775a:	f06f 0305 	mvn.w	r3, #5
 800775e:	607b      	str	r3, [r7, #4]
 8007760:	e010      	b.n	8007784 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007762:	4b0b      	ldr	r3, [pc, #44]	@ (8007790 <osKernelStart+0x48>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d109      	bne.n	800777e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800776a:	f7ff ffbf 	bl	80076ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800776e:	4b08      	ldr	r3, [pc, #32]	@ (8007790 <osKernelStart+0x48>)
 8007770:	2202      	movs	r2, #2
 8007772:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007774:	f001 f892 	bl	800889c <vTaskStartScheduler>
      stat = osOK;
 8007778:	2300      	movs	r3, #0
 800777a:	607b      	str	r3, [r7, #4]
 800777c:	e002      	b.n	8007784 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800777e:	f04f 33ff 	mov.w	r3, #4294967295
 8007782:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007784:	687b      	ldr	r3, [r7, #4]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	200005a0 	.word	0x200005a0

08007794 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007794:	b580      	push	{r7, lr}
 8007796:	b08e      	sub	sp, #56	@ 0x38
 8007798:	af04      	add	r7, sp, #16
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80077a0:	2300      	movs	r3, #0
 80077a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077a4:	f3ef 8305 	mrs	r3, IPSR
 80077a8:	617b      	str	r3, [r7, #20]
  return(result);
 80077aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d17e      	bne.n	80078ae <osThreadNew+0x11a>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d07b      	beq.n	80078ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80077b6:	2380      	movs	r3, #128	@ 0x80
 80077b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80077ba:	2318      	movs	r3, #24
 80077bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80077c2:	f04f 33ff 	mov.w	r3, #4294967295
 80077c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d045      	beq.n	800785a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <osThreadNew+0x48>
        name = attr->name;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d008      	beq.n	8007802 <osThreadNew+0x6e>
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	2b38      	cmp	r3, #56	@ 0x38
 80077f4:	d805      	bhi.n	8007802 <osThreadNew+0x6e>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <osThreadNew+0x72>
        return (NULL);
 8007802:	2300      	movs	r3, #0
 8007804:	e054      	b.n	80078b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	089b      	lsrs	r3, r3, #2
 8007814:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00e      	beq.n	800783c <osThreadNew+0xa8>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	2ba7      	cmp	r3, #167	@ 0xa7
 8007824:	d90a      	bls.n	800783c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800782a:	2b00      	cmp	r3, #0
 800782c:	d006      	beq.n	800783c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <osThreadNew+0xa8>
        mem = 1;
 8007836:	2301      	movs	r3, #1
 8007838:	61bb      	str	r3, [r7, #24]
 800783a:	e010      	b.n	800785e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10c      	bne.n	800785e <osThreadNew+0xca>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d108      	bne.n	800785e <osThreadNew+0xca>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d104      	bne.n	800785e <osThreadNew+0xca>
          mem = 0;
 8007854:	2300      	movs	r3, #0
 8007856:	61bb      	str	r3, [r7, #24]
 8007858:	e001      	b.n	800785e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800785a:	2300      	movs	r3, #0
 800785c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d110      	bne.n	8007886 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800786c:	9202      	str	r2, [sp, #8]
 800786e:	9301      	str	r3, [sp, #4]
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6a3a      	ldr	r2, [r7, #32]
 8007878:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 fe1a 	bl	80084b4 <xTaskCreateStatic>
 8007880:	4603      	mov	r3, r0
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	e013      	b.n	80078ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d110      	bne.n	80078ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	b29a      	uxth	r2, r3
 8007890:	f107 0310 	add.w	r3, r7, #16
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 fe68 	bl	8008574 <xTaskCreate>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d001      	beq.n	80078ae <osThreadNew+0x11a>
            hTask = NULL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80078ae:	693b      	ldr	r3, [r7, #16]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3728      	adds	r7, #40	@ 0x28
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c0:	f3ef 8305 	mrs	r3, IPSR
 80078c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80078c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <osDelay+0x1c>
    stat = osErrorISR;
 80078cc:	f06f 0305 	mvn.w	r3, #5
 80078d0:	60fb      	str	r3, [r7, #12]
 80078d2:	e007      	b.n	80078e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 ffa6 	bl	8008830 <vTaskDelay>
    }
  }

  return (stat);
 80078e4:	68fb      	ldr	r3, [r7, #12]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4a07      	ldr	r2, [pc, #28]	@ (800791c <vApplicationGetIdleTaskMemory+0x2c>)
 8007900:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	4a06      	ldr	r2, [pc, #24]	@ (8007920 <vApplicationGetIdleTaskMemory+0x30>)
 8007906:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2280      	movs	r2, #128	@ 0x80
 800790c:	601a      	str	r2, [r3, #0]
}
 800790e:	bf00      	nop
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	200005a4 	.word	0x200005a4
 8007920:	2000064c 	.word	0x2000064c

08007924 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4a07      	ldr	r2, [pc, #28]	@ (8007950 <vApplicationGetTimerTaskMemory+0x2c>)
 8007934:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	4a06      	ldr	r2, [pc, #24]	@ (8007954 <vApplicationGetTimerTaskMemory+0x30>)
 800793a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007942:	601a      	str	r2, [r3, #0]
}
 8007944:	bf00      	nop
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	2000084c 	.word	0x2000084c
 8007954:	200008f4 	.word	0x200008f4

08007958 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f103 0208 	add.w	r2, r3, #8
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f04f 32ff 	mov.w	r2, #4294967295
 8007970:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f103 0208 	add.w	r2, r3, #8
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f103 0208 	add.w	r2, r3, #8
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079b2:	b480      	push	{r7}
 80079b4:	b085      	sub	sp, #20
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	1c5a      	adds	r2, r3, #1
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	601a      	str	r2, [r3, #0]
}
 80079ee:	bf00      	nop
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079fa:	b480      	push	{r7}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a10:	d103      	bne.n	8007a1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	e00c      	b.n	8007a34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	e002      	b.n	8007a28 <vListInsert+0x2e>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d2f6      	bcs.n	8007a22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	601a      	str	r2, [r3, #0]
}
 8007a60:	bf00      	nop
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6892      	ldr	r2, [r2, #8]
 8007a82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6852      	ldr	r2, [r2, #4]
 8007a8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d103      	bne.n	8007aa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	1e5a      	subs	r2, r3, #1
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10b      	bne.n	8007aec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ae6:	bf00      	nop
 8007ae8:	bf00      	nop
 8007aea:	e7fd      	b.n	8007ae8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007aec:	f002 f8a4 	bl	8009c38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af8:	68f9      	ldr	r1, [r7, #12]
 8007afa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007afc:	fb01 f303 	mul.w	r3, r1, r3
 8007b00:	441a      	add	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	68f9      	ldr	r1, [r7, #12]
 8007b20:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007b22:	fb01 f303 	mul.w	r3, r1, r3
 8007b26:	441a      	add	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	22ff      	movs	r2, #255	@ 0xff
 8007b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	22ff      	movs	r2, #255	@ 0xff
 8007b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d114      	bne.n	8007b6c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d01a      	beq.n	8007b80 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3310      	adds	r3, #16
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 f942 	bl	8008dd8 <xTaskRemoveFromEventList>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d012      	beq.n	8007b80 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b90 <xQueueGenericReset+0xd0>)
 8007b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b60:	601a      	str	r2, [r3, #0]
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	e009      	b.n	8007b80 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3310      	adds	r3, #16
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff fef1 	bl	8007958 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3324      	adds	r3, #36	@ 0x24
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff feec 	bl	8007958 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b80:	f002 f88c 	bl	8009c9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b84:	2301      	movs	r3, #1
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	e000ed04 	.word	0xe000ed04

08007b94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08e      	sub	sp, #56	@ 0x38
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
 8007ba0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10b      	bne.n	8007bc0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007bba:	bf00      	nop
 8007bbc:	bf00      	nop
 8007bbe:	e7fd      	b.n	8007bbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10b      	bne.n	8007bde <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	e7fd      	b.n	8007bda <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <xQueueGenericCreateStatic+0x56>
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <xQueueGenericCreateStatic+0x5a>
 8007bea:	2301      	movs	r3, #1
 8007bec:	e000      	b.n	8007bf0 <xQueueGenericCreateStatic+0x5c>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10b      	bne.n	8007c0c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	623b      	str	r3, [r7, #32]
}
 8007c06:	bf00      	nop
 8007c08:	bf00      	nop
 8007c0a:	e7fd      	b.n	8007c08 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d102      	bne.n	8007c18 <xQueueGenericCreateStatic+0x84>
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <xQueueGenericCreateStatic+0x88>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e000      	b.n	8007c1e <xQueueGenericCreateStatic+0x8a>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10b      	bne.n	8007c3a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	61fb      	str	r3, [r7, #28]
}
 8007c34:	bf00      	nop
 8007c36:	bf00      	nop
 8007c38:	e7fd      	b.n	8007c36 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c3a:	2350      	movs	r3, #80	@ 0x50
 8007c3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b50      	cmp	r3, #80	@ 0x50
 8007c42:	d00b      	beq.n	8007c5c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	61bb      	str	r3, [r7, #24]
}
 8007c56:	bf00      	nop
 8007c58:	bf00      	nop
 8007c5a:	e7fd      	b.n	8007c58 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c5c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00d      	beq.n	8007c84 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c70:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	68b9      	ldr	r1, [r7, #8]
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f000 f805 	bl	8007c8e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3730      	adds	r7, #48	@ 0x30
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	60f8      	str	r0, [r7, #12]
 8007c96:	60b9      	str	r1, [r7, #8]
 8007c98:	607a      	str	r2, [r7, #4]
 8007c9a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d103      	bne.n	8007caa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	69ba      	ldr	r2, [r7, #24]
 8007ca6:	601a      	str	r2, [r3, #0]
 8007ca8:	e002      	b.n	8007cb0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	69b8      	ldr	r0, [r7, #24]
 8007cc0:	f7ff fefe 	bl	8007ac0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	78fa      	ldrb	r2, [r7, #3]
 8007cc8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ccc:	bf00      	nop
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08e      	sub	sp, #56	@ 0x38
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10b      	bne.n	8007d08 <xQueueGenericSend+0x34>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d02:	bf00      	nop
 8007d04:	bf00      	nop
 8007d06:	e7fd      	b.n	8007d04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d103      	bne.n	8007d16 <xQueueGenericSend+0x42>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <xQueueGenericSend+0x46>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e000      	b.n	8007d1c <xQueueGenericSend+0x48>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10b      	bne.n	8007d38 <xQueueGenericSend+0x64>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d32:	bf00      	nop
 8007d34:	bf00      	nop
 8007d36:	e7fd      	b.n	8007d34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d103      	bne.n	8007d46 <xQueueGenericSend+0x72>
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d101      	bne.n	8007d4a <xQueueGenericSend+0x76>
 8007d46:	2301      	movs	r3, #1
 8007d48:	e000      	b.n	8007d4c <xQueueGenericSend+0x78>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10b      	bne.n	8007d68 <xQueueGenericSend+0x94>
	__asm volatile
 8007d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	623b      	str	r3, [r7, #32]
}
 8007d62:	bf00      	nop
 8007d64:	bf00      	nop
 8007d66:	e7fd      	b.n	8007d64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d68:	f001 f9fc 	bl	8009164 <xTaskGetSchedulerState>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d102      	bne.n	8007d78 <xQueueGenericSend+0xa4>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <xQueueGenericSend+0xa8>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e000      	b.n	8007d7e <xQueueGenericSend+0xaa>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10b      	bne.n	8007d9a <xQueueGenericSend+0xc6>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	61fb      	str	r3, [r7, #28]
}
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop
 8007d98:	e7fd      	b.n	8007d96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d9a:	f001 ff4d 	bl	8009c38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d302      	bcc.n	8007db0 <xQueueGenericSend+0xdc>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d129      	bne.n	8007e04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007db6:	f000 fa0f 	bl	80081d8 <prvCopyDataToQueue>
 8007dba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d010      	beq.n	8007de6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc6:	3324      	adds	r3, #36	@ 0x24
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f001 f805 	bl	8008dd8 <xTaskRemoveFromEventList>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d013      	beq.n	8007dfc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8007ed4 <xQueueGenericSend+0x200>)
 8007dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	e00a      	b.n	8007dfc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d007      	beq.n	8007dfc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007dec:	4b39      	ldr	r3, [pc, #228]	@ (8007ed4 <xQueueGenericSend+0x200>)
 8007dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007dfc:	f001 ff4e 	bl	8009c9c <vPortExitCritical>
				return pdPASS;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e063      	b.n	8007ecc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d103      	bne.n	8007e12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e0a:	f001 ff47 	bl	8009c9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	e05c      	b.n	8007ecc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d106      	bne.n	8007e26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e18:	f107 0314 	add.w	r3, r7, #20
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f001 f83f 	bl	8008ea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e22:	2301      	movs	r3, #1
 8007e24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e26:	f001 ff39 	bl	8009c9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e2a:	f000 fda7 	bl	800897c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e2e:	f001 ff03 	bl	8009c38 <vPortEnterCritical>
 8007e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e38:	b25b      	sxtb	r3, r3
 8007e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3e:	d103      	bne.n	8007e48 <xQueueGenericSend+0x174>
 8007e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e4e:	b25b      	sxtb	r3, r3
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e54:	d103      	bne.n	8007e5e <xQueueGenericSend+0x18a>
 8007e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e5e:	f001 ff1d 	bl	8009c9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e62:	1d3a      	adds	r2, r7, #4
 8007e64:	f107 0314 	add.w	r3, r7, #20
 8007e68:	4611      	mov	r1, r2
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f001 f82e 	bl	8008ecc <xTaskCheckForTimeOut>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d124      	bne.n	8007ec0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e78:	f000 faa6 	bl	80083c8 <prvIsQueueFull>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d018      	beq.n	8007eb4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e84:	3310      	adds	r3, #16
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	4611      	mov	r1, r2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 ff52 	bl	8008d34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e92:	f000 fa31 	bl	80082f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e96:	f000 fd7f 	bl	8008998 <xTaskResumeAll>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f47f af7c 	bne.w	8007d9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed4 <xQueueGenericSend+0x200>)
 8007ea4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	e772      	b.n	8007d9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007eb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007eb6:	f000 fa1f 	bl	80082f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007eba:	f000 fd6d 	bl	8008998 <xTaskResumeAll>
 8007ebe:	e76c      	b.n	8007d9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ec0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ec2:	f000 fa19 	bl	80082f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ec6:	f000 fd67 	bl	8008998 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007eca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3738      	adds	r7, #56	@ 0x38
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	e000ed04 	.word	0xe000ed04

08007ed8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b090      	sub	sp, #64	@ 0x40
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10b      	bne.n	8007f08 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f02:	bf00      	nop
 8007f04:	bf00      	nop
 8007f06:	e7fd      	b.n	8007f04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d103      	bne.n	8007f16 <xQueueGenericSendFromISR+0x3e>
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <xQueueGenericSendFromISR+0x42>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e000      	b.n	8007f1c <xQueueGenericSendFromISR+0x44>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10b      	bne.n	8007f38 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d103      	bne.n	8007f46 <xQueueGenericSendFromISR+0x6e>
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d101      	bne.n	8007f4a <xQueueGenericSendFromISR+0x72>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e000      	b.n	8007f4c <xQueueGenericSendFromISR+0x74>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10b      	bne.n	8007f68 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	623b      	str	r3, [r7, #32]
}
 8007f62:	bf00      	nop
 8007f64:	bf00      	nop
 8007f66:	e7fd      	b.n	8007f64 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f68:	f001 ff46 	bl	8009df8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f6c:	f3ef 8211 	mrs	r2, BASEPRI
 8007f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	61fa      	str	r2, [r7, #28]
 8007f82:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f84:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f86:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d302      	bcc.n	8007f9a <xQueueGenericSendFromISR+0xc2>
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d12f      	bne.n	8007ffa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fa0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	68b9      	ldr	r1, [r7, #8]
 8007fae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007fb0:	f000 f912 	bl	80081d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fb4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fbc:	d112      	bne.n	8007fe4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d016      	beq.n	8007ff4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc8:	3324      	adds	r3, #36	@ 0x24
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 ff04 	bl	8008dd8 <xTaskRemoveFromEventList>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00e      	beq.n	8007ff4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00b      	beq.n	8007ff4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e007      	b.n	8007ff4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fe4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007fe8:	3301      	adds	r3, #1
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	b25a      	sxtb	r2, r3
 8007fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007ff8:	e001      	b.n	8007ffe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008000:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008008:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800800a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800800c:	4618      	mov	r0, r3
 800800e:	3740      	adds	r7, #64	@ 0x40
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b08c      	sub	sp, #48	@ 0x30
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008020:	2300      	movs	r3, #0
 8008022:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10b      	bne.n	8008046 <xQueueReceive+0x32>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	623b      	str	r3, [r7, #32]
}
 8008040:	bf00      	nop
 8008042:	bf00      	nop
 8008044:	e7fd      	b.n	8008042 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d103      	bne.n	8008054 <xQueueReceive+0x40>
 800804c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <xQueueReceive+0x44>
 8008054:	2301      	movs	r3, #1
 8008056:	e000      	b.n	800805a <xQueueReceive+0x46>
 8008058:	2300      	movs	r3, #0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10b      	bne.n	8008076 <xQueueReceive+0x62>
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	61fb      	str	r3, [r7, #28]
}
 8008070:	bf00      	nop
 8008072:	bf00      	nop
 8008074:	e7fd      	b.n	8008072 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008076:	f001 f875 	bl	8009164 <xTaskGetSchedulerState>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d102      	bne.n	8008086 <xQueueReceive+0x72>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <xQueueReceive+0x76>
 8008086:	2301      	movs	r3, #1
 8008088:	e000      	b.n	800808c <xQueueReceive+0x78>
 800808a:	2300      	movs	r3, #0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10b      	bne.n	80080a8 <xQueueReceive+0x94>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	61bb      	str	r3, [r7, #24]
}
 80080a2:	bf00      	nop
 80080a4:	bf00      	nop
 80080a6:	e7fd      	b.n	80080a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080a8:	f001 fdc6 	bl	8009c38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01f      	beq.n	80080f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080b8:	68b9      	ldr	r1, [r7, #8]
 80080ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080bc:	f000 f8f6 	bl	80082ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c2:	1e5a      	subs	r2, r3, #1
 80080c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00f      	beq.n	80080f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d2:	3310      	adds	r3, #16
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 fe7f 	bl	8008dd8 <xTaskRemoveFromEventList>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d007      	beq.n	80080f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080e0:	4b3c      	ldr	r3, [pc, #240]	@ (80081d4 <xQueueReceive+0x1c0>)
 80080e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080f0:	f001 fdd4 	bl	8009c9c <vPortExitCritical>
				return pdPASS;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e069      	b.n	80081cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d103      	bne.n	8008106 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080fe:	f001 fdcd 	bl	8009c9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008102:	2300      	movs	r3, #0
 8008104:	e062      	b.n	80081cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008108:	2b00      	cmp	r3, #0
 800810a:	d106      	bne.n	800811a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800810c:	f107 0310 	add.w	r3, r7, #16
 8008110:	4618      	mov	r0, r3
 8008112:	f000 fec5 	bl	8008ea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008116:	2301      	movs	r3, #1
 8008118:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800811a:	f001 fdbf 	bl	8009c9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800811e:	f000 fc2d 	bl	800897c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008122:	f001 fd89 	bl	8009c38 <vPortEnterCritical>
 8008126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008128:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800812c:	b25b      	sxtb	r3, r3
 800812e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008132:	d103      	bne.n	800813c <xQueueReceive+0x128>
 8008134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800813c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008142:	b25b      	sxtb	r3, r3
 8008144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008148:	d103      	bne.n	8008152 <xQueueReceive+0x13e>
 800814a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008152:	f001 fda3 	bl	8009c9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008156:	1d3a      	adds	r2, r7, #4
 8008158:	f107 0310 	add.w	r3, r7, #16
 800815c:	4611      	mov	r1, r2
 800815e:	4618      	mov	r0, r3
 8008160:	f000 feb4 	bl	8008ecc <xTaskCheckForTimeOut>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d123      	bne.n	80081b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800816a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800816c:	f000 f916 	bl	800839c <prvIsQueueEmpty>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d017      	beq.n	80081a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008178:	3324      	adds	r3, #36	@ 0x24
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	4611      	mov	r1, r2
 800817e:	4618      	mov	r0, r3
 8008180:	f000 fdd8 	bl	8008d34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008184:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008186:	f000 f8b7 	bl	80082f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800818a:	f000 fc05 	bl	8008998 <xTaskResumeAll>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d189      	bne.n	80080a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008194:	4b0f      	ldr	r3, [pc, #60]	@ (80081d4 <xQueueReceive+0x1c0>)
 8008196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	e780      	b.n	80080a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80081a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081a8:	f000 f8a6 	bl	80082f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081ac:	f000 fbf4 	bl	8008998 <xTaskResumeAll>
 80081b0:	e77a      	b.n	80080a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80081b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081b4:	f000 f8a0 	bl	80082f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081b8:	f000 fbee 	bl	8008998 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081be:	f000 f8ed 	bl	800839c <prvIsQueueEmpty>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f43f af6f 	beq.w	80080a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3730      	adds	r7, #48	@ 0x30
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	e000ed04 	.word	0xe000ed04

080081d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081e4:	2300      	movs	r3, #0
 80081e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10d      	bne.n	8008212 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d14d      	bne.n	800829a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	4618      	mov	r0, r3
 8008204:	f000 ffcc 	bl	80091a0 <xTaskPriorityDisinherit>
 8008208:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	609a      	str	r2, [r3, #8]
 8008210:	e043      	b.n	800829a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d119      	bne.n	800824c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6858      	ldr	r0, [r3, #4]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008220:	461a      	mov	r2, r3
 8008222:	68b9      	ldr	r1, [r7, #8]
 8008224:	f002 fa01 	bl	800a62a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008230:	441a      	add	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	429a      	cmp	r2, r3
 8008240:	d32b      	bcc.n	800829a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	605a      	str	r2, [r3, #4]
 800824a:	e026      	b.n	800829a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	68d8      	ldr	r0, [r3, #12]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008254:	461a      	mov	r2, r3
 8008256:	68b9      	ldr	r1, [r7, #8]
 8008258:	f002 f9e7 	bl	800a62a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008264:	425b      	negs	r3, r3
 8008266:	441a      	add	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	429a      	cmp	r2, r3
 8008276:	d207      	bcs.n	8008288 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	689a      	ldr	r2, [r3, #8]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008280:	425b      	negs	r3, r3
 8008282:	441a      	add	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b02      	cmp	r3, #2
 800828c:	d105      	bne.n	800829a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d002      	beq.n	800829a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	3b01      	subs	r3, #1
 8008298:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80082a2:	697b      	ldr	r3, [r7, #20]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d018      	beq.n	80082f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c6:	441a      	add	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68da      	ldr	r2, [r3, #12]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d303      	bcc.n	80082e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68d9      	ldr	r1, [r3, #12]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e8:	461a      	mov	r2, r3
 80082ea:	6838      	ldr	r0, [r7, #0]
 80082ec:	f002 f99d 	bl	800a62a <memcpy>
	}
}
 80082f0:	bf00      	nop
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008300:	f001 fc9a 	bl	8009c38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800830a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800830c:	e011      	b.n	8008332 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008312:	2b00      	cmp	r3, #0
 8008314:	d012      	beq.n	800833c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	3324      	adds	r3, #36	@ 0x24
 800831a:	4618      	mov	r0, r3
 800831c:	f000 fd5c 	bl	8008dd8 <xTaskRemoveFromEventList>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008326:	f000 fe35 	bl	8008f94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	3b01      	subs	r3, #1
 800832e:	b2db      	uxtb	r3, r3
 8008330:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008336:	2b00      	cmp	r3, #0
 8008338:	dce9      	bgt.n	800830e <prvUnlockQueue+0x16>
 800833a:	e000      	b.n	800833e <prvUnlockQueue+0x46>
					break;
 800833c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	22ff      	movs	r2, #255	@ 0xff
 8008342:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008346:	f001 fca9 	bl	8009c9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800834a:	f001 fc75 	bl	8009c38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008354:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008356:	e011      	b.n	800837c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d012      	beq.n	8008386 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	3310      	adds	r3, #16
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fd37 	bl	8008dd8 <xTaskRemoveFromEventList>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008370:	f000 fe10 	bl	8008f94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	3b01      	subs	r3, #1
 8008378:	b2db      	uxtb	r3, r3
 800837a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800837c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008380:	2b00      	cmp	r3, #0
 8008382:	dce9      	bgt.n	8008358 <prvUnlockQueue+0x60>
 8008384:	e000      	b.n	8008388 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008386:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	22ff      	movs	r2, #255	@ 0xff
 800838c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008390:	f001 fc84 	bl	8009c9c <vPortExitCritical>
}
 8008394:	bf00      	nop
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083a4:	f001 fc48 	bl	8009c38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d102      	bne.n	80083b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80083b0:	2301      	movs	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	e001      	b.n	80083ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083ba:	f001 fc6f 	bl	8009c9c <vPortExitCritical>

	return xReturn;
 80083be:	68fb      	ldr	r3, [r7, #12]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083d0:	f001 fc32 	bl	8009c38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083dc:	429a      	cmp	r2, r3
 80083de:	d102      	bne.n	80083e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083e0:	2301      	movs	r3, #1
 80083e2:	60fb      	str	r3, [r7, #12]
 80083e4:	e001      	b.n	80083ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083e6:	2300      	movs	r3, #0
 80083e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083ea:	f001 fc57 	bl	8009c9c <vPortExitCritical>

	return xReturn;
 80083ee:	68fb      	ldr	r3, [r7, #12]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008402:	2300      	movs	r3, #0
 8008404:	60fb      	str	r3, [r7, #12]
 8008406:	e014      	b.n	8008432 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008408:	4a0f      	ldr	r2, [pc, #60]	@ (8008448 <vQueueAddToRegistry+0x50>)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10b      	bne.n	800842c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008414:	490c      	ldr	r1, [pc, #48]	@ (8008448 <vQueueAddToRegistry+0x50>)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800841e:	4a0a      	ldr	r2, [pc, #40]	@ (8008448 <vQueueAddToRegistry+0x50>)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	4413      	add	r3, r2
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800842a:	e006      	b.n	800843a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3301      	adds	r3, #1
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2b07      	cmp	r3, #7
 8008436:	d9e7      	bls.n	8008408 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	20000cf4 	.word	0x20000cf4

0800844c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800845c:	f001 fbec 	bl	8009c38 <vPortEnterCritical>
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008466:	b25b      	sxtb	r3, r3
 8008468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846c:	d103      	bne.n	8008476 <vQueueWaitForMessageRestricted+0x2a>
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800847c:	b25b      	sxtb	r3, r3
 800847e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008482:	d103      	bne.n	800848c <vQueueWaitForMessageRestricted+0x40>
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800848c:	f001 fc06 	bl	8009c9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008494:	2b00      	cmp	r3, #0
 8008496:	d106      	bne.n	80084a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	3324      	adds	r3, #36	@ 0x24
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	68b9      	ldr	r1, [r7, #8]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 fc6d 	bl	8008d80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80084a6:	6978      	ldr	r0, [r7, #20]
 80084a8:	f7ff ff26 	bl	80082f8 <prvUnlockQueue>
	}
 80084ac:	bf00      	nop
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08e      	sub	sp, #56	@ 0x38
 80084b8:	af04      	add	r7, sp, #16
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
 80084c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10b      	bne.n	80084e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	623b      	str	r3, [r7, #32]
}
 80084da:	bf00      	nop
 80084dc:	bf00      	nop
 80084de:	e7fd      	b.n	80084dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10b      	bne.n	80084fe <xTaskCreateStatic+0x4a>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	61fb      	str	r3, [r7, #28]
}
 80084f8:	bf00      	nop
 80084fa:	bf00      	nop
 80084fc:	e7fd      	b.n	80084fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084fe:	23a8      	movs	r3, #168	@ 0xa8
 8008500:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	2ba8      	cmp	r3, #168	@ 0xa8
 8008506:	d00b      	beq.n	8008520 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	61bb      	str	r3, [r7, #24]
}
 800851a:	bf00      	nop
 800851c:	bf00      	nop
 800851e:	e7fd      	b.n	800851c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008520:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01e      	beq.n	8008566 <xTaskCreateStatic+0xb2>
 8008528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800852a:	2b00      	cmp	r3, #0
 800852c:	d01b      	beq.n	8008566 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800852e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008530:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008534:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008536:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853a:	2202      	movs	r2, #2
 800853c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008540:	2300      	movs	r3, #0
 8008542:	9303      	str	r3, [sp, #12]
 8008544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008546:	9302      	str	r3, [sp, #8]
 8008548:	f107 0314 	add.w	r3, r7, #20
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	68b9      	ldr	r1, [r7, #8]
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 f851 	bl	8008600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800855e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008560:	f000 f8f6 	bl	8008750 <prvAddNewTaskToReadyList>
 8008564:	e001      	b.n	800856a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008566:	2300      	movs	r3, #0
 8008568:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800856a:	697b      	ldr	r3, [r7, #20]
	}
 800856c:	4618      	mov	r0, r3
 800856e:	3728      	adds	r7, #40	@ 0x28
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08c      	sub	sp, #48	@ 0x30
 8008578:	af04      	add	r7, sp, #16
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	603b      	str	r3, [r7, #0]
 8008580:	4613      	mov	r3, r2
 8008582:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008584:	88fb      	ldrh	r3, [r7, #6]
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4618      	mov	r0, r3
 800858a:	f001 fc77 	bl	8009e7c <pvPortMalloc>
 800858e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00e      	beq.n	80085b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008596:	20a8      	movs	r0, #168	@ 0xa8
 8008598:	f001 fc70 	bl	8009e7c <pvPortMalloc>
 800859c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80085aa:	e005      	b.n	80085b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80085ac:	6978      	ldr	r0, [r7, #20]
 80085ae:	f001 fd33 	bl	800a018 <vPortFree>
 80085b2:	e001      	b.n	80085b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80085b4:	2300      	movs	r3, #0
 80085b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d017      	beq.n	80085ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085c6:	88fa      	ldrh	r2, [r7, #6]
 80085c8:	2300      	movs	r3, #0
 80085ca:	9303      	str	r3, [sp, #12]
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	9302      	str	r3, [sp, #8]
 80085d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d2:	9301      	str	r3, [sp, #4]
 80085d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	68b9      	ldr	r1, [r7, #8]
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 f80f 	bl	8008600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085e2:	69f8      	ldr	r0, [r7, #28]
 80085e4:	f000 f8b4 	bl	8008750 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085e8:	2301      	movs	r3, #1
 80085ea:	61bb      	str	r3, [r7, #24]
 80085ec:	e002      	b.n	80085f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085ee:	f04f 33ff 	mov.w	r3, #4294967295
 80085f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085f4:	69bb      	ldr	r3, [r7, #24]
	}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3720      	adds	r7, #32
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b088      	sub	sp, #32
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
 800860c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800860e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008610:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	461a      	mov	r2, r3
 8008618:	21a5      	movs	r1, #165	@ 0xa5
 800861a:	f001 ff34 	bl	800a486 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800861e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008620:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008628:	3b01      	subs	r3, #1
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	f023 0307 	bic.w	r3, r3, #7
 8008636:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	f003 0307 	and.w	r3, r3, #7
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00b      	beq.n	800865a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	617b      	str	r3, [r7, #20]
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop
 8008658:	e7fd      	b.n	8008656 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d01f      	beq.n	80086a0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008660:	2300      	movs	r3, #0
 8008662:	61fb      	str	r3, [r7, #28]
 8008664:	e012      	b.n	800868c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	4413      	add	r3, r2
 800866c:	7819      	ldrb	r1, [r3, #0]
 800866e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	4413      	add	r3, r2
 8008674:	3334      	adds	r3, #52	@ 0x34
 8008676:	460a      	mov	r2, r1
 8008678:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	4413      	add	r3, r2
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d006      	beq.n	8008694 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	3301      	adds	r3, #1
 800868a:	61fb      	str	r3, [r7, #28]
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	2b0f      	cmp	r3, #15
 8008690:	d9e9      	bls.n	8008666 <prvInitialiseNewTask+0x66>
 8008692:	e000      	b.n	8008696 <prvInitialiseNewTask+0x96>
			{
				break;
 8008694:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800869e:	e003      	b.n	80086a8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80086a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086aa:	2b37      	cmp	r3, #55	@ 0x37
 80086ac:	d901      	bls.n	80086b2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086ae:	2337      	movs	r3, #55	@ 0x37
 80086b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80086b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086bc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80086be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c0:	2200      	movs	r2, #0
 80086c2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c6:	3304      	adds	r3, #4
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff f965 	bl	8007998 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d0:	3318      	adds	r3, #24
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff f960 	bl	8007998 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80086e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f0:	2200      	movs	r2, #0
 80086f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008700:	3354      	adds	r3, #84	@ 0x54
 8008702:	224c      	movs	r2, #76	@ 0x4c
 8008704:	2100      	movs	r1, #0
 8008706:	4618      	mov	r0, r3
 8008708:	f001 febd 	bl	800a486 <memset>
 800870c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870e:	4a0d      	ldr	r2, [pc, #52]	@ (8008744 <prvInitialiseNewTask+0x144>)
 8008710:	659a      	str	r2, [r3, #88]	@ 0x58
 8008712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008714:	4a0c      	ldr	r2, [pc, #48]	@ (8008748 <prvInitialiseNewTask+0x148>)
 8008716:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871a:	4a0c      	ldr	r2, [pc, #48]	@ (800874c <prvInitialiseNewTask+0x14c>)
 800871c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	68f9      	ldr	r1, [r7, #12]
 8008722:	69b8      	ldr	r0, [r7, #24]
 8008724:	f001 f95a 	bl	80099dc <pxPortInitialiseStack>
 8008728:	4602      	mov	r2, r0
 800872a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800872e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008738:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800873a:	bf00      	nop
 800873c:	3720      	adds	r7, #32
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	20004f88 	.word	0x20004f88
 8008748:	20004ff0 	.word	0x20004ff0
 800874c:	20005058 	.word	0x20005058

08008750 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008758:	f001 fa6e 	bl	8009c38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800875c:	4b2d      	ldr	r3, [pc, #180]	@ (8008814 <prvAddNewTaskToReadyList+0xc4>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3301      	adds	r3, #1
 8008762:	4a2c      	ldr	r2, [pc, #176]	@ (8008814 <prvAddNewTaskToReadyList+0xc4>)
 8008764:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008766:	4b2c      	ldr	r3, [pc, #176]	@ (8008818 <prvAddNewTaskToReadyList+0xc8>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d109      	bne.n	8008782 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800876e:	4a2a      	ldr	r2, [pc, #168]	@ (8008818 <prvAddNewTaskToReadyList+0xc8>)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008774:	4b27      	ldr	r3, [pc, #156]	@ (8008814 <prvAddNewTaskToReadyList+0xc4>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d110      	bne.n	800879e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800877c:	f000 fc2e 	bl	8008fdc <prvInitialiseTaskLists>
 8008780:	e00d      	b.n	800879e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008782:	4b26      	ldr	r3, [pc, #152]	@ (800881c <prvAddNewTaskToReadyList+0xcc>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d109      	bne.n	800879e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800878a:	4b23      	ldr	r3, [pc, #140]	@ (8008818 <prvAddNewTaskToReadyList+0xc8>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008794:	429a      	cmp	r2, r3
 8008796:	d802      	bhi.n	800879e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008798:	4a1f      	ldr	r2, [pc, #124]	@ (8008818 <prvAddNewTaskToReadyList+0xc8>)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800879e:	4b20      	ldr	r3, [pc, #128]	@ (8008820 <prvAddNewTaskToReadyList+0xd0>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3301      	adds	r3, #1
 80087a4:	4a1e      	ldr	r2, [pc, #120]	@ (8008820 <prvAddNewTaskToReadyList+0xd0>)
 80087a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80087a8:	4b1d      	ldr	r3, [pc, #116]	@ (8008820 <prvAddNewTaskToReadyList+0xd0>)
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b4:	4b1b      	ldr	r3, [pc, #108]	@ (8008824 <prvAddNewTaskToReadyList+0xd4>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d903      	bls.n	80087c4 <prvAddNewTaskToReadyList+0x74>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c0:	4a18      	ldr	r2, [pc, #96]	@ (8008824 <prvAddNewTaskToReadyList+0xd4>)
 80087c2:	6013      	str	r3, [r2, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c8:	4613      	mov	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4a15      	ldr	r2, [pc, #84]	@ (8008828 <prvAddNewTaskToReadyList+0xd8>)
 80087d2:	441a      	add	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3304      	adds	r3, #4
 80087d8:	4619      	mov	r1, r3
 80087da:	4610      	mov	r0, r2
 80087dc:	f7ff f8e9 	bl	80079b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087e0:	f001 fa5c 	bl	8009c9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087e4:	4b0d      	ldr	r3, [pc, #52]	@ (800881c <prvAddNewTaskToReadyList+0xcc>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00e      	beq.n	800880a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008818 <prvAddNewTaskToReadyList+0xc8>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d207      	bcs.n	800880a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087fa:	4b0c      	ldr	r3, [pc, #48]	@ (800882c <prvAddNewTaskToReadyList+0xdc>)
 80087fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20001208 	.word	0x20001208
 8008818:	20000d34 	.word	0x20000d34
 800881c:	20001214 	.word	0x20001214
 8008820:	20001224 	.word	0x20001224
 8008824:	20001210 	.word	0x20001210
 8008828:	20000d38 	.word	0x20000d38
 800882c:	e000ed04 	.word	0xe000ed04

08008830 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008838:	2300      	movs	r3, #0
 800883a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d018      	beq.n	8008874 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008842:	4b14      	ldr	r3, [pc, #80]	@ (8008894 <vTaskDelay+0x64>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00b      	beq.n	8008862 <vTaskDelay+0x32>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	60bb      	str	r3, [r7, #8]
}
 800885c:	bf00      	nop
 800885e:	bf00      	nop
 8008860:	e7fd      	b.n	800885e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008862:	f000 f88b 	bl	800897c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008866:	2100      	movs	r1, #0
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fd09 	bl	8009280 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800886e:	f000 f893 	bl	8008998 <xTaskResumeAll>
 8008872:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d107      	bne.n	800888a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800887a:	4b07      	ldr	r3, [pc, #28]	@ (8008898 <vTaskDelay+0x68>)
 800887c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800888a:	bf00      	nop
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	20001230 	.word	0x20001230
 8008898:	e000ed04 	.word	0xe000ed04

0800889c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08a      	sub	sp, #40	@ 0x28
 80088a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80088aa:	463a      	mov	r2, r7
 80088ac:	1d39      	adds	r1, r7, #4
 80088ae:	f107 0308 	add.w	r3, r7, #8
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7ff f81c 	bl	80078f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	9202      	str	r2, [sp, #8]
 80088c0:	9301      	str	r3, [sp, #4]
 80088c2:	2300      	movs	r3, #0
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	2300      	movs	r3, #0
 80088c8:	460a      	mov	r2, r1
 80088ca:	4924      	ldr	r1, [pc, #144]	@ (800895c <vTaskStartScheduler+0xc0>)
 80088cc:	4824      	ldr	r0, [pc, #144]	@ (8008960 <vTaskStartScheduler+0xc4>)
 80088ce:	f7ff fdf1 	bl	80084b4 <xTaskCreateStatic>
 80088d2:	4603      	mov	r3, r0
 80088d4:	4a23      	ldr	r2, [pc, #140]	@ (8008964 <vTaskStartScheduler+0xc8>)
 80088d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80088d8:	4b22      	ldr	r3, [pc, #136]	@ (8008964 <vTaskStartScheduler+0xc8>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d002      	beq.n	80088e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088e0:	2301      	movs	r3, #1
 80088e2:	617b      	str	r3, [r7, #20]
 80088e4:	e001      	b.n	80088ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088e6:	2300      	movs	r3, #0
 80088e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d102      	bne.n	80088f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088f0:	f000 fd1a 	bl	8009328 <xTimerCreateTimerTask>
 80088f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d11b      	bne.n	8008934 <vTaskStartScheduler+0x98>
	__asm volatile
 80088fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	613b      	str	r3, [r7, #16]
}
 800890e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008910:	4b15      	ldr	r3, [pc, #84]	@ (8008968 <vTaskStartScheduler+0xcc>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3354      	adds	r3, #84	@ 0x54
 8008916:	4a15      	ldr	r2, [pc, #84]	@ (800896c <vTaskStartScheduler+0xd0>)
 8008918:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800891a:	4b15      	ldr	r3, [pc, #84]	@ (8008970 <vTaskStartScheduler+0xd4>)
 800891c:	f04f 32ff 	mov.w	r2, #4294967295
 8008920:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008922:	4b14      	ldr	r3, [pc, #80]	@ (8008974 <vTaskStartScheduler+0xd8>)
 8008924:	2201      	movs	r2, #1
 8008926:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008928:	4b13      	ldr	r3, [pc, #76]	@ (8008978 <vTaskStartScheduler+0xdc>)
 800892a:	2200      	movs	r2, #0
 800892c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800892e:	f001 f8df 	bl	8009af0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008932:	e00f      	b.n	8008954 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893a:	d10b      	bne.n	8008954 <vTaskStartScheduler+0xb8>
	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	60fb      	str	r3, [r7, #12]
}
 800894e:	bf00      	nop
 8008950:	bf00      	nop
 8008952:	e7fd      	b.n	8008950 <vTaskStartScheduler+0xb4>
}
 8008954:	bf00      	nop
 8008956:	3718      	adds	r7, #24
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	0800b1ec 	.word	0x0800b1ec
 8008960:	08008fad 	.word	0x08008fad
 8008964:	2000122c 	.word	0x2000122c
 8008968:	20000d34 	.word	0x20000d34
 800896c:	20000020 	.word	0x20000020
 8008970:	20001228 	.word	0x20001228
 8008974:	20001214 	.word	0x20001214
 8008978:	2000120c 	.word	0x2000120c

0800897c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800897c:	b480      	push	{r7}
 800897e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008980:	4b04      	ldr	r3, [pc, #16]	@ (8008994 <vTaskSuspendAll+0x18>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3301      	adds	r3, #1
 8008986:	4a03      	ldr	r2, [pc, #12]	@ (8008994 <vTaskSuspendAll+0x18>)
 8008988:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800898a:	bf00      	nop
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	20001230 	.word	0x20001230

08008998 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800899e:	2300      	movs	r3, #0
 80089a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80089a2:	2300      	movs	r3, #0
 80089a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80089a6:	4b42      	ldr	r3, [pc, #264]	@ (8008ab0 <xTaskResumeAll+0x118>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10b      	bne.n	80089c6 <xTaskResumeAll+0x2e>
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	603b      	str	r3, [r7, #0]
}
 80089c0:	bf00      	nop
 80089c2:	bf00      	nop
 80089c4:	e7fd      	b.n	80089c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80089c6:	f001 f937 	bl	8009c38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80089ca:	4b39      	ldr	r3, [pc, #228]	@ (8008ab0 <xTaskResumeAll+0x118>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	4a37      	ldr	r2, [pc, #220]	@ (8008ab0 <xTaskResumeAll+0x118>)
 80089d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089d4:	4b36      	ldr	r3, [pc, #216]	@ (8008ab0 <xTaskResumeAll+0x118>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d162      	bne.n	8008aa2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089dc:	4b35      	ldr	r3, [pc, #212]	@ (8008ab4 <xTaskResumeAll+0x11c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d05e      	beq.n	8008aa2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089e4:	e02f      	b.n	8008a46 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e6:	4b34      	ldr	r3, [pc, #208]	@ (8008ab8 <xTaskResumeAll+0x120>)
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	3318      	adds	r3, #24
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff f83a 	bl	8007a6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	3304      	adds	r3, #4
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff f835 	bl	8007a6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a06:	4b2d      	ldr	r3, [pc, #180]	@ (8008abc <xTaskResumeAll+0x124>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d903      	bls.n	8008a16 <xTaskResumeAll+0x7e>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a12:	4a2a      	ldr	r2, [pc, #168]	@ (8008abc <xTaskResumeAll+0x124>)
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4a27      	ldr	r2, [pc, #156]	@ (8008ac0 <xTaskResumeAll+0x128>)
 8008a24:	441a      	add	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	f7fe ffc0 	bl	80079b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a36:	4b23      	ldr	r3, [pc, #140]	@ (8008ac4 <xTaskResumeAll+0x12c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d302      	bcc.n	8008a46 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008a40:	4b21      	ldr	r3, [pc, #132]	@ (8008ac8 <xTaskResumeAll+0x130>)
 8008a42:	2201      	movs	r2, #1
 8008a44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a46:	4b1c      	ldr	r3, [pc, #112]	@ (8008ab8 <xTaskResumeAll+0x120>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1cb      	bne.n	80089e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a54:	f000 fb66 	bl	8009124 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a58:	4b1c      	ldr	r3, [pc, #112]	@ (8008acc <xTaskResumeAll+0x134>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d010      	beq.n	8008a86 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a64:	f000 f846 	bl	8008af4 <xTaskIncrementTick>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d002      	beq.n	8008a74 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008a6e:	4b16      	ldr	r3, [pc, #88]	@ (8008ac8 <xTaskResumeAll+0x130>)
 8008a70:	2201      	movs	r2, #1
 8008a72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	3b01      	subs	r3, #1
 8008a78:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1f1      	bne.n	8008a64 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008a80:	4b12      	ldr	r3, [pc, #72]	@ (8008acc <xTaskResumeAll+0x134>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a86:	4b10      	ldr	r3, [pc, #64]	@ (8008ac8 <xTaskResumeAll+0x130>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d009      	beq.n	8008aa2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a92:	4b0f      	ldr	r3, [pc, #60]	@ (8008ad0 <xTaskResumeAll+0x138>)
 8008a94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008aa2:	f001 f8fb 	bl	8009c9c <vPortExitCritical>

	return xAlreadyYielded;
 8008aa6:	68bb      	ldr	r3, [r7, #8]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	20001230 	.word	0x20001230
 8008ab4:	20001208 	.word	0x20001208
 8008ab8:	200011c8 	.word	0x200011c8
 8008abc:	20001210 	.word	0x20001210
 8008ac0:	20000d38 	.word	0x20000d38
 8008ac4:	20000d34 	.word	0x20000d34
 8008ac8:	2000121c 	.word	0x2000121c
 8008acc:	20001218 	.word	0x20001218
 8008ad0:	e000ed04 	.word	0xe000ed04

08008ad4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ada:	4b05      	ldr	r3, [pc, #20]	@ (8008af0 <xTaskGetTickCount+0x1c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ae0:	687b      	ldr	r3, [r7, #4]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	2000120c 	.word	0x2000120c

08008af4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008afa:	2300      	movs	r3, #0
 8008afc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008afe:	4b4f      	ldr	r3, [pc, #316]	@ (8008c3c <xTaskIncrementTick+0x148>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f040 8090 	bne.w	8008c28 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b08:	4b4d      	ldr	r3, [pc, #308]	@ (8008c40 <xTaskIncrementTick+0x14c>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b10:	4a4b      	ldr	r2, [pc, #300]	@ (8008c40 <xTaskIncrementTick+0x14c>)
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d121      	bne.n	8008b60 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b1c:	4b49      	ldr	r3, [pc, #292]	@ (8008c44 <xTaskIncrementTick+0x150>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00b      	beq.n	8008b3e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	603b      	str	r3, [r7, #0]
}
 8008b38:	bf00      	nop
 8008b3a:	bf00      	nop
 8008b3c:	e7fd      	b.n	8008b3a <xTaskIncrementTick+0x46>
 8008b3e:	4b41      	ldr	r3, [pc, #260]	@ (8008c44 <xTaskIncrementTick+0x150>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	4b40      	ldr	r3, [pc, #256]	@ (8008c48 <xTaskIncrementTick+0x154>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a3e      	ldr	r2, [pc, #248]	@ (8008c44 <xTaskIncrementTick+0x150>)
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	4a3e      	ldr	r2, [pc, #248]	@ (8008c48 <xTaskIncrementTick+0x154>)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6013      	str	r3, [r2, #0]
 8008b52:	4b3e      	ldr	r3, [pc, #248]	@ (8008c4c <xTaskIncrementTick+0x158>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3301      	adds	r3, #1
 8008b58:	4a3c      	ldr	r2, [pc, #240]	@ (8008c4c <xTaskIncrementTick+0x158>)
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	f000 fae2 	bl	8009124 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b60:	4b3b      	ldr	r3, [pc, #236]	@ (8008c50 <xTaskIncrementTick+0x15c>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d349      	bcc.n	8008bfe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b6a:	4b36      	ldr	r3, [pc, #216]	@ (8008c44 <xTaskIncrementTick+0x150>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d104      	bne.n	8008b7e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b74:	4b36      	ldr	r3, [pc, #216]	@ (8008c50 <xTaskIncrementTick+0x15c>)
 8008b76:	f04f 32ff 	mov.w	r2, #4294967295
 8008b7a:	601a      	str	r2, [r3, #0]
					break;
 8008b7c:	e03f      	b.n	8008bfe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b7e:	4b31      	ldr	r3, [pc, #196]	@ (8008c44 <xTaskIncrementTick+0x150>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d203      	bcs.n	8008b9e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b96:	4a2e      	ldr	r2, [pc, #184]	@ (8008c50 <xTaskIncrementTick+0x15c>)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b9c:	e02f      	b.n	8008bfe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fe ff62 	bl	8007a6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d004      	beq.n	8008bba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	3318      	adds	r3, #24
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fe ff59 	bl	8007a6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bbe:	4b25      	ldr	r3, [pc, #148]	@ (8008c54 <xTaskIncrementTick+0x160>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d903      	bls.n	8008bce <xTaskIncrementTick+0xda>
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bca:	4a22      	ldr	r2, [pc, #136]	@ (8008c54 <xTaskIncrementTick+0x160>)
 8008bcc:	6013      	str	r3, [r2, #0]
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4a1f      	ldr	r2, [pc, #124]	@ (8008c58 <xTaskIncrementTick+0x164>)
 8008bdc:	441a      	add	r2, r3
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	3304      	adds	r3, #4
 8008be2:	4619      	mov	r1, r3
 8008be4:	4610      	mov	r0, r2
 8008be6:	f7fe fee4 	bl	80079b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bee:	4b1b      	ldr	r3, [pc, #108]	@ (8008c5c <xTaskIncrementTick+0x168>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d3b8      	bcc.n	8008b6a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bfc:	e7b5      	b.n	8008b6a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bfe:	4b17      	ldr	r3, [pc, #92]	@ (8008c5c <xTaskIncrementTick+0x168>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c04:	4914      	ldr	r1, [pc, #80]	@ (8008c58 <xTaskIncrementTick+0x164>)
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	440b      	add	r3, r1
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d901      	bls.n	8008c1a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008c16:	2301      	movs	r3, #1
 8008c18:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008c1a:	4b11      	ldr	r3, [pc, #68]	@ (8008c60 <xTaskIncrementTick+0x16c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d007      	beq.n	8008c32 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008c22:	2301      	movs	r3, #1
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	e004      	b.n	8008c32 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c28:	4b0e      	ldr	r3, [pc, #56]	@ (8008c64 <xTaskIncrementTick+0x170>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	4a0d      	ldr	r2, [pc, #52]	@ (8008c64 <xTaskIncrementTick+0x170>)
 8008c30:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008c32:	697b      	ldr	r3, [r7, #20]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	20001230 	.word	0x20001230
 8008c40:	2000120c 	.word	0x2000120c
 8008c44:	200011c0 	.word	0x200011c0
 8008c48:	200011c4 	.word	0x200011c4
 8008c4c:	20001220 	.word	0x20001220
 8008c50:	20001228 	.word	0x20001228
 8008c54:	20001210 	.word	0x20001210
 8008c58:	20000d38 	.word	0x20000d38
 8008c5c:	20000d34 	.word	0x20000d34
 8008c60:	2000121c 	.word	0x2000121c
 8008c64:	20001218 	.word	0x20001218

08008c68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8008d1c <vTaskSwitchContext+0xb4>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c76:	4b2a      	ldr	r3, [pc, #168]	@ (8008d20 <vTaskSwitchContext+0xb8>)
 8008c78:	2201      	movs	r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c7c:	e047      	b.n	8008d0e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008c7e:	4b28      	ldr	r3, [pc, #160]	@ (8008d20 <vTaskSwitchContext+0xb8>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c84:	4b27      	ldr	r3, [pc, #156]	@ (8008d24 <vTaskSwitchContext+0xbc>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	e011      	b.n	8008cb0 <vTaskSwitchContext+0x48>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10b      	bne.n	8008caa <vTaskSwitchContext+0x42>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	607b      	str	r3, [r7, #4]
}
 8008ca4:	bf00      	nop
 8008ca6:	bf00      	nop
 8008ca8:	e7fd      	b.n	8008ca6 <vTaskSwitchContext+0x3e>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	491d      	ldr	r1, [pc, #116]	@ (8008d28 <vTaskSwitchContext+0xc0>)
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	440b      	add	r3, r1
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d0e3      	beq.n	8008c8c <vTaskSwitchContext+0x24>
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4a16      	ldr	r2, [pc, #88]	@ (8008d28 <vTaskSwitchContext+0xc0>)
 8008cd0:	4413      	add	r3, r2
 8008cd2:	60bb      	str	r3, [r7, #8]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	605a      	str	r2, [r3, #4]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	3308      	adds	r3, #8
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d104      	bne.n	8008cf4 <vTaskSwitchContext+0x8c>
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	605a      	str	r2, [r3, #4]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8008d2c <vTaskSwitchContext+0xc4>)
 8008cfc:	6013      	str	r3, [r2, #0]
 8008cfe:	4a09      	ldr	r2, [pc, #36]	@ (8008d24 <vTaskSwitchContext+0xbc>)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d04:	4b09      	ldr	r3, [pc, #36]	@ (8008d2c <vTaskSwitchContext+0xc4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	3354      	adds	r3, #84	@ 0x54
 8008d0a:	4a09      	ldr	r2, [pc, #36]	@ (8008d30 <vTaskSwitchContext+0xc8>)
 8008d0c:	6013      	str	r3, [r2, #0]
}
 8008d0e:	bf00      	nop
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	20001230 	.word	0x20001230
 8008d20:	2000121c 	.word	0x2000121c
 8008d24:	20001210 	.word	0x20001210
 8008d28:	20000d38 	.word	0x20000d38
 8008d2c:	20000d34 	.word	0x20000d34
 8008d30:	20000020 	.word	0x20000020

08008d34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10b      	bne.n	8008d5c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	60fb      	str	r3, [r7, #12]
}
 8008d56:	bf00      	nop
 8008d58:	bf00      	nop
 8008d5a:	e7fd      	b.n	8008d58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d5c:	4b07      	ldr	r3, [pc, #28]	@ (8008d7c <vTaskPlaceOnEventList+0x48>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3318      	adds	r3, #24
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7fe fe48 	bl	80079fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d6a:	2101      	movs	r1, #1
 8008d6c:	6838      	ldr	r0, [r7, #0]
 8008d6e:	f000 fa87 	bl	8009280 <prvAddCurrentTaskToDelayedList>
}
 8008d72:	bf00      	nop
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	20000d34 	.word	0x20000d34

08008d80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10b      	bne.n	8008daa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	617b      	str	r3, [r7, #20]
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop
 8008da8:	e7fd      	b.n	8008da6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008daa:	4b0a      	ldr	r3, [pc, #40]	@ (8008dd4 <vTaskPlaceOnEventListRestricted+0x54>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3318      	adds	r3, #24
 8008db0:	4619      	mov	r1, r3
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f7fe fdfd 	bl	80079b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d002      	beq.n	8008dc4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008dc4:	6879      	ldr	r1, [r7, #4]
 8008dc6:	68b8      	ldr	r0, [r7, #8]
 8008dc8:	f000 fa5a 	bl	8009280 <prvAddCurrentTaskToDelayedList>
	}
 8008dcc:	bf00      	nop
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	20000d34 	.word	0x20000d34

08008dd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10b      	bne.n	8008e06 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	60fb      	str	r3, [r7, #12]
}
 8008e00:	bf00      	nop
 8008e02:	bf00      	nop
 8008e04:	e7fd      	b.n	8008e02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	3318      	adds	r3, #24
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fe fe2e 	bl	8007a6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e10:	4b1d      	ldr	r3, [pc, #116]	@ (8008e88 <xTaskRemoveFromEventList+0xb0>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d11d      	bne.n	8008e54 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fe fe25 	bl	8007a6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e26:	4b19      	ldr	r3, [pc, #100]	@ (8008e8c <xTaskRemoveFromEventList+0xb4>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d903      	bls.n	8008e36 <xTaskRemoveFromEventList+0x5e>
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e32:	4a16      	ldr	r2, [pc, #88]	@ (8008e8c <xTaskRemoveFromEventList+0xb4>)
 8008e34:	6013      	str	r3, [r2, #0]
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4a13      	ldr	r2, [pc, #76]	@ (8008e90 <xTaskRemoveFromEventList+0xb8>)
 8008e44:	441a      	add	r2, r3
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	3304      	adds	r3, #4
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	4610      	mov	r0, r2
 8008e4e:	f7fe fdb0 	bl	80079b2 <vListInsertEnd>
 8008e52:	e005      	b.n	8008e60 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	3318      	adds	r3, #24
 8008e58:	4619      	mov	r1, r3
 8008e5a:	480e      	ldr	r0, [pc, #56]	@ (8008e94 <xTaskRemoveFromEventList+0xbc>)
 8008e5c:	f7fe fda9 	bl	80079b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e64:	4b0c      	ldr	r3, [pc, #48]	@ (8008e98 <xTaskRemoveFromEventList+0xc0>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d905      	bls.n	8008e7a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e72:	4b0a      	ldr	r3, [pc, #40]	@ (8008e9c <xTaskRemoveFromEventList+0xc4>)
 8008e74:	2201      	movs	r2, #1
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	e001      	b.n	8008e7e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e7e:	697b      	ldr	r3, [r7, #20]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	20001230 	.word	0x20001230
 8008e8c:	20001210 	.word	0x20001210
 8008e90:	20000d38 	.word	0x20000d38
 8008e94:	200011c8 	.word	0x200011c8
 8008e98:	20000d34 	.word	0x20000d34
 8008e9c:	2000121c 	.word	0x2000121c

08008ea0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ea8:	4b06      	ldr	r3, [pc, #24]	@ (8008ec4 <vTaskInternalSetTimeOutState+0x24>)
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008eb0:	4b05      	ldr	r3, [pc, #20]	@ (8008ec8 <vTaskInternalSetTimeOutState+0x28>)
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	605a      	str	r2, [r3, #4]
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	20001220 	.word	0x20001220
 8008ec8:	2000120c 	.word	0x2000120c

08008ecc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b088      	sub	sp, #32
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10b      	bne.n	8008ef4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	613b      	str	r3, [r7, #16]
}
 8008eee:	bf00      	nop
 8008ef0:	bf00      	nop
 8008ef2:	e7fd      	b.n	8008ef0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10b      	bne.n	8008f12 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	60fb      	str	r3, [r7, #12]
}
 8008f0c:	bf00      	nop
 8008f0e:	bf00      	nop
 8008f10:	e7fd      	b.n	8008f0e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008f12:	f000 fe91 	bl	8009c38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f16:	4b1d      	ldr	r3, [pc, #116]	@ (8008f8c <xTaskCheckForTimeOut+0xc0>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	69ba      	ldr	r2, [r7, #24]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2e:	d102      	bne.n	8008f36 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f30:	2300      	movs	r3, #0
 8008f32:	61fb      	str	r3, [r7, #28]
 8008f34:	e023      	b.n	8008f7e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	4b15      	ldr	r3, [pc, #84]	@ (8008f90 <xTaskCheckForTimeOut+0xc4>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d007      	beq.n	8008f52 <xTaskCheckForTimeOut+0x86>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d302      	bcc.n	8008f52 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	61fb      	str	r3, [r7, #28]
 8008f50:	e015      	b.n	8008f7e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d20b      	bcs.n	8008f74 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	1ad2      	subs	r2, r2, r3
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff ff99 	bl	8008ea0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	61fb      	str	r3, [r7, #28]
 8008f72:	e004      	b.n	8008f7e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	2200      	movs	r2, #0
 8008f78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f7e:	f000 fe8d 	bl	8009c9c <vPortExitCritical>

	return xReturn;
 8008f82:	69fb      	ldr	r3, [r7, #28]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3720      	adds	r7, #32
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	2000120c 	.word	0x2000120c
 8008f90:	20001220 	.word	0x20001220

08008f94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f94:	b480      	push	{r7}
 8008f96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f98:	4b03      	ldr	r3, [pc, #12]	@ (8008fa8 <vTaskMissedYield+0x14>)
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	601a      	str	r2, [r3, #0]
}
 8008f9e:	bf00      	nop
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	2000121c 	.word	0x2000121c

08008fac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008fb4:	f000 f852 	bl	800905c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008fb8:	4b06      	ldr	r3, [pc, #24]	@ (8008fd4 <prvIdleTask+0x28>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d9f9      	bls.n	8008fb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008fc0:	4b05      	ldr	r3, [pc, #20]	@ (8008fd8 <prvIdleTask+0x2c>)
 8008fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008fd0:	e7f0      	b.n	8008fb4 <prvIdleTask+0x8>
 8008fd2:	bf00      	nop
 8008fd4:	20000d38 	.word	0x20000d38
 8008fd8:	e000ed04 	.word	0xe000ed04

08008fdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	607b      	str	r3, [r7, #4]
 8008fe6:	e00c      	b.n	8009002 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	4613      	mov	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4413      	add	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4a12      	ldr	r2, [pc, #72]	@ (800903c <prvInitialiseTaskLists+0x60>)
 8008ff4:	4413      	add	r3, r2
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fe fcae 	bl	8007958 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	3301      	adds	r3, #1
 8009000:	607b      	str	r3, [r7, #4]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b37      	cmp	r3, #55	@ 0x37
 8009006:	d9ef      	bls.n	8008fe8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009008:	480d      	ldr	r0, [pc, #52]	@ (8009040 <prvInitialiseTaskLists+0x64>)
 800900a:	f7fe fca5 	bl	8007958 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800900e:	480d      	ldr	r0, [pc, #52]	@ (8009044 <prvInitialiseTaskLists+0x68>)
 8009010:	f7fe fca2 	bl	8007958 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009014:	480c      	ldr	r0, [pc, #48]	@ (8009048 <prvInitialiseTaskLists+0x6c>)
 8009016:	f7fe fc9f 	bl	8007958 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800901a:	480c      	ldr	r0, [pc, #48]	@ (800904c <prvInitialiseTaskLists+0x70>)
 800901c:	f7fe fc9c 	bl	8007958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009020:	480b      	ldr	r0, [pc, #44]	@ (8009050 <prvInitialiseTaskLists+0x74>)
 8009022:	f7fe fc99 	bl	8007958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009026:	4b0b      	ldr	r3, [pc, #44]	@ (8009054 <prvInitialiseTaskLists+0x78>)
 8009028:	4a05      	ldr	r2, [pc, #20]	@ (8009040 <prvInitialiseTaskLists+0x64>)
 800902a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800902c:	4b0a      	ldr	r3, [pc, #40]	@ (8009058 <prvInitialiseTaskLists+0x7c>)
 800902e:	4a05      	ldr	r2, [pc, #20]	@ (8009044 <prvInitialiseTaskLists+0x68>)
 8009030:	601a      	str	r2, [r3, #0]
}
 8009032:	bf00      	nop
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	20000d38 	.word	0x20000d38
 8009040:	20001198 	.word	0x20001198
 8009044:	200011ac 	.word	0x200011ac
 8009048:	200011c8 	.word	0x200011c8
 800904c:	200011dc 	.word	0x200011dc
 8009050:	200011f4 	.word	0x200011f4
 8009054:	200011c0 	.word	0x200011c0
 8009058:	200011c4 	.word	0x200011c4

0800905c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009062:	e019      	b.n	8009098 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009064:	f000 fde8 	bl	8009c38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009068:	4b10      	ldr	r3, [pc, #64]	@ (80090ac <prvCheckTasksWaitingTermination+0x50>)
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3304      	adds	r3, #4
 8009074:	4618      	mov	r0, r3
 8009076:	f7fe fcf9 	bl	8007a6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800907a:	4b0d      	ldr	r3, [pc, #52]	@ (80090b0 <prvCheckTasksWaitingTermination+0x54>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3b01      	subs	r3, #1
 8009080:	4a0b      	ldr	r2, [pc, #44]	@ (80090b0 <prvCheckTasksWaitingTermination+0x54>)
 8009082:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009084:	4b0b      	ldr	r3, [pc, #44]	@ (80090b4 <prvCheckTasksWaitingTermination+0x58>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	3b01      	subs	r3, #1
 800908a:	4a0a      	ldr	r2, [pc, #40]	@ (80090b4 <prvCheckTasksWaitingTermination+0x58>)
 800908c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800908e:	f000 fe05 	bl	8009c9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f810 	bl	80090b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009098:	4b06      	ldr	r3, [pc, #24]	@ (80090b4 <prvCheckTasksWaitingTermination+0x58>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1e1      	bne.n	8009064 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80090a0:	bf00      	nop
 80090a2:	bf00      	nop
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	200011dc 	.word	0x200011dc
 80090b0:	20001208 	.word	0x20001208
 80090b4:	200011f0 	.word	0x200011f0

080090b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3354      	adds	r3, #84	@ 0x54
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 f9f7 	bl	800a4b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d108      	bne.n	80090e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 ff9d 	bl	800a018 <vPortFree>
				vPortFree( pxTCB );
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 ff9a 	bl	800a018 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090e4:	e019      	b.n	800911a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d103      	bne.n	80090f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 ff91 	bl	800a018 <vPortFree>
	}
 80090f6:	e010      	b.n	800911a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d00b      	beq.n	800911a <prvDeleteTCB+0x62>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	60fb      	str	r3, [r7, #12]
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	e7fd      	b.n	8009116 <prvDeleteTCB+0x5e>
	}
 800911a:	bf00      	nop
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
	...

08009124 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800912a:	4b0c      	ldr	r3, [pc, #48]	@ (800915c <prvResetNextTaskUnblockTime+0x38>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d104      	bne.n	800913e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009134:	4b0a      	ldr	r3, [pc, #40]	@ (8009160 <prvResetNextTaskUnblockTime+0x3c>)
 8009136:	f04f 32ff 	mov.w	r2, #4294967295
 800913a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800913c:	e008      	b.n	8009150 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800913e:	4b07      	ldr	r3, [pc, #28]	@ (800915c <prvResetNextTaskUnblockTime+0x38>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	4a04      	ldr	r2, [pc, #16]	@ (8009160 <prvResetNextTaskUnblockTime+0x3c>)
 800914e:	6013      	str	r3, [r2, #0]
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	200011c0 	.word	0x200011c0
 8009160:	20001228 	.word	0x20001228

08009164 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800916a:	4b0b      	ldr	r3, [pc, #44]	@ (8009198 <xTaskGetSchedulerState+0x34>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d102      	bne.n	8009178 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009172:	2301      	movs	r3, #1
 8009174:	607b      	str	r3, [r7, #4]
 8009176:	e008      	b.n	800918a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009178:	4b08      	ldr	r3, [pc, #32]	@ (800919c <xTaskGetSchedulerState+0x38>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d102      	bne.n	8009186 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009180:	2302      	movs	r3, #2
 8009182:	607b      	str	r3, [r7, #4]
 8009184:	e001      	b.n	800918a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009186:	2300      	movs	r3, #0
 8009188:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800918a:	687b      	ldr	r3, [r7, #4]
	}
 800918c:	4618      	mov	r0, r3
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	20001214 	.word	0x20001214
 800919c:	20001230 	.word	0x20001230

080091a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80091ac:	2300      	movs	r3, #0
 80091ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d058      	beq.n	8009268 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80091b6:	4b2f      	ldr	r3, [pc, #188]	@ (8009274 <xTaskPriorityDisinherit+0xd4>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d00b      	beq.n	80091d8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	60fb      	str	r3, [r7, #12]
}
 80091d2:	bf00      	nop
 80091d4:	bf00      	nop
 80091d6:	e7fd      	b.n	80091d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10b      	bne.n	80091f8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	60bb      	str	r3, [r7, #8]
}
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	e7fd      	b.n	80091f4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091fc:	1e5a      	subs	r2, r3, #1
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800920a:	429a      	cmp	r2, r3
 800920c:	d02c      	beq.n	8009268 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009212:	2b00      	cmp	r3, #0
 8009214:	d128      	bne.n	8009268 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	3304      	adds	r3, #4
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe fc26 	bl	8007a6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009238:	4b0f      	ldr	r3, [pc, #60]	@ (8009278 <xTaskPriorityDisinherit+0xd8>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	429a      	cmp	r2, r3
 800923e:	d903      	bls.n	8009248 <xTaskPriorityDisinherit+0xa8>
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009244:	4a0c      	ldr	r2, [pc, #48]	@ (8009278 <xTaskPriorityDisinherit+0xd8>)
 8009246:	6013      	str	r3, [r2, #0]
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800924c:	4613      	mov	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4413      	add	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4a09      	ldr	r2, [pc, #36]	@ (800927c <xTaskPriorityDisinherit+0xdc>)
 8009256:	441a      	add	r2, r3
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	3304      	adds	r3, #4
 800925c:	4619      	mov	r1, r3
 800925e:	4610      	mov	r0, r2
 8009260:	f7fe fba7 	bl	80079b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009264:	2301      	movs	r3, #1
 8009266:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009268:	697b      	ldr	r3, [r7, #20]
	}
 800926a:	4618      	mov	r0, r3
 800926c:	3718      	adds	r7, #24
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	20000d34 	.word	0x20000d34
 8009278:	20001210 	.word	0x20001210
 800927c:	20000d38 	.word	0x20000d38

08009280 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800928a:	4b21      	ldr	r3, [pc, #132]	@ (8009310 <prvAddCurrentTaskToDelayedList+0x90>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009290:	4b20      	ldr	r3, [pc, #128]	@ (8009314 <prvAddCurrentTaskToDelayedList+0x94>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3304      	adds	r3, #4
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe fbe8 	bl	8007a6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a2:	d10a      	bne.n	80092ba <prvAddCurrentTaskToDelayedList+0x3a>
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d007      	beq.n	80092ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092aa:	4b1a      	ldr	r3, [pc, #104]	@ (8009314 <prvAddCurrentTaskToDelayedList+0x94>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3304      	adds	r3, #4
 80092b0:	4619      	mov	r1, r3
 80092b2:	4819      	ldr	r0, [pc, #100]	@ (8009318 <prvAddCurrentTaskToDelayedList+0x98>)
 80092b4:	f7fe fb7d 	bl	80079b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80092b8:	e026      	b.n	8009308 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4413      	add	r3, r2
 80092c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80092c2:	4b14      	ldr	r3, [pc, #80]	@ (8009314 <prvAddCurrentTaskToDelayedList+0x94>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d209      	bcs.n	80092e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092d2:	4b12      	ldr	r3, [pc, #72]	@ (800931c <prvAddCurrentTaskToDelayedList+0x9c>)
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009314 <prvAddCurrentTaskToDelayedList+0x94>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3304      	adds	r3, #4
 80092dc:	4619      	mov	r1, r3
 80092de:	4610      	mov	r0, r2
 80092e0:	f7fe fb8b 	bl	80079fa <vListInsert>
}
 80092e4:	e010      	b.n	8009308 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009320 <prvAddCurrentTaskToDelayedList+0xa0>)
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009314 <prvAddCurrentTaskToDelayedList+0x94>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3304      	adds	r3, #4
 80092f0:	4619      	mov	r1, r3
 80092f2:	4610      	mov	r0, r2
 80092f4:	f7fe fb81 	bl	80079fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80092f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009324 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d202      	bcs.n	8009308 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009302:	4a08      	ldr	r2, [pc, #32]	@ (8009324 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	6013      	str	r3, [r2, #0]
}
 8009308:	bf00      	nop
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	2000120c 	.word	0x2000120c
 8009314:	20000d34 	.word	0x20000d34
 8009318:	200011f4 	.word	0x200011f4
 800931c:	200011c4 	.word	0x200011c4
 8009320:	200011c0 	.word	0x200011c0
 8009324:	20001228 	.word	0x20001228

08009328 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b08a      	sub	sp, #40	@ 0x28
 800932c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800932e:	2300      	movs	r3, #0
 8009330:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009332:	f000 fb13 	bl	800995c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009336:	4b1d      	ldr	r3, [pc, #116]	@ (80093ac <xTimerCreateTimerTask+0x84>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d021      	beq.n	8009382 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800933e:	2300      	movs	r3, #0
 8009340:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009342:	2300      	movs	r3, #0
 8009344:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009346:	1d3a      	adds	r2, r7, #4
 8009348:	f107 0108 	add.w	r1, r7, #8
 800934c:	f107 030c 	add.w	r3, r7, #12
 8009350:	4618      	mov	r0, r3
 8009352:	f7fe fae7 	bl	8007924 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009356:	6879      	ldr	r1, [r7, #4]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	9202      	str	r2, [sp, #8]
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	2302      	movs	r3, #2
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	2300      	movs	r3, #0
 8009366:	460a      	mov	r2, r1
 8009368:	4911      	ldr	r1, [pc, #68]	@ (80093b0 <xTimerCreateTimerTask+0x88>)
 800936a:	4812      	ldr	r0, [pc, #72]	@ (80093b4 <xTimerCreateTimerTask+0x8c>)
 800936c:	f7ff f8a2 	bl	80084b4 <xTaskCreateStatic>
 8009370:	4603      	mov	r3, r0
 8009372:	4a11      	ldr	r2, [pc, #68]	@ (80093b8 <xTimerCreateTimerTask+0x90>)
 8009374:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009376:	4b10      	ldr	r3, [pc, #64]	@ (80093b8 <xTimerCreateTimerTask+0x90>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d001      	beq.n	8009382 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800937e:	2301      	movs	r3, #1
 8009380:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10b      	bne.n	80093a0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	613b      	str	r3, [r7, #16]
}
 800939a:	bf00      	nop
 800939c:	bf00      	nop
 800939e:	e7fd      	b.n	800939c <xTimerCreateTimerTask+0x74>
	return xReturn;
 80093a0:	697b      	ldr	r3, [r7, #20]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3718      	adds	r7, #24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20001264 	.word	0x20001264
 80093b0:	0800b1f4 	.word	0x0800b1f4
 80093b4:	080094f5 	.word	0x080094f5
 80093b8:	20001268 	.word	0x20001268

080093bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08a      	sub	sp, #40	@ 0x28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80093ca:	2300      	movs	r3, #0
 80093cc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10b      	bne.n	80093ec <xTimerGenericCommand+0x30>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	623b      	str	r3, [r7, #32]
}
 80093e6:	bf00      	nop
 80093e8:	bf00      	nop
 80093ea:	e7fd      	b.n	80093e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80093ec:	4b19      	ldr	r3, [pc, #100]	@ (8009454 <xTimerGenericCommand+0x98>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d02a      	beq.n	800944a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	2b05      	cmp	r3, #5
 8009404:	dc18      	bgt.n	8009438 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009406:	f7ff fead 	bl	8009164 <xTaskGetSchedulerState>
 800940a:	4603      	mov	r3, r0
 800940c:	2b02      	cmp	r3, #2
 800940e:	d109      	bne.n	8009424 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009410:	4b10      	ldr	r3, [pc, #64]	@ (8009454 <xTimerGenericCommand+0x98>)
 8009412:	6818      	ldr	r0, [r3, #0]
 8009414:	f107 0110 	add.w	r1, r7, #16
 8009418:	2300      	movs	r3, #0
 800941a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800941c:	f7fe fc5a 	bl	8007cd4 <xQueueGenericSend>
 8009420:	6278      	str	r0, [r7, #36]	@ 0x24
 8009422:	e012      	b.n	800944a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009424:	4b0b      	ldr	r3, [pc, #44]	@ (8009454 <xTimerGenericCommand+0x98>)
 8009426:	6818      	ldr	r0, [r3, #0]
 8009428:	f107 0110 	add.w	r1, r7, #16
 800942c:	2300      	movs	r3, #0
 800942e:	2200      	movs	r2, #0
 8009430:	f7fe fc50 	bl	8007cd4 <xQueueGenericSend>
 8009434:	6278      	str	r0, [r7, #36]	@ 0x24
 8009436:	e008      	b.n	800944a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009438:	4b06      	ldr	r3, [pc, #24]	@ (8009454 <xTimerGenericCommand+0x98>)
 800943a:	6818      	ldr	r0, [r3, #0]
 800943c:	f107 0110 	add.w	r1, r7, #16
 8009440:	2300      	movs	r3, #0
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	f7fe fd48 	bl	8007ed8 <xQueueGenericSendFromISR>
 8009448:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800944a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800944c:	4618      	mov	r0, r3
 800944e:	3728      	adds	r7, #40	@ 0x28
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	20001264 	.word	0x20001264

08009458 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b088      	sub	sp, #32
 800945c:	af02      	add	r7, sp, #8
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009462:	4b23      	ldr	r3, [pc, #140]	@ (80094f0 <prvProcessExpiredTimer+0x98>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	3304      	adds	r3, #4
 8009470:	4618      	mov	r0, r3
 8009472:	f7fe fafb 	bl	8007a6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800947c:	f003 0304 	and.w	r3, r3, #4
 8009480:	2b00      	cmp	r3, #0
 8009482:	d023      	beq.n	80094cc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	699a      	ldr	r2, [r3, #24]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	18d1      	adds	r1, r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	6978      	ldr	r0, [r7, #20]
 8009492:	f000 f8d5 	bl	8009640 <prvInsertTimerInActiveList>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d020      	beq.n	80094de <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800949c:	2300      	movs	r3, #0
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	2300      	movs	r3, #0
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	2100      	movs	r1, #0
 80094a6:	6978      	ldr	r0, [r7, #20]
 80094a8:	f7ff ff88 	bl	80093bc <xTimerGenericCommand>
 80094ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d114      	bne.n	80094de <prvProcessExpiredTimer+0x86>
	__asm volatile
 80094b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	60fb      	str	r3, [r7, #12]
}
 80094c6:	bf00      	nop
 80094c8:	bf00      	nop
 80094ca:	e7fd      	b.n	80094c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094d2:	f023 0301 	bic.w	r3, r3, #1
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	6978      	ldr	r0, [r7, #20]
 80094e4:	4798      	blx	r3
}
 80094e6:	bf00      	nop
 80094e8:	3718      	adds	r7, #24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	2000125c 	.word	0x2000125c

080094f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094fc:	f107 0308 	add.w	r3, r7, #8
 8009500:	4618      	mov	r0, r3
 8009502:	f000 f859 	bl	80095b8 <prvGetNextExpireTime>
 8009506:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	4619      	mov	r1, r3
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f000 f805 	bl	800951c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009512:	f000 f8d7 	bl	80096c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009516:	bf00      	nop
 8009518:	e7f0      	b.n	80094fc <prvTimerTask+0x8>
	...

0800951c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009526:	f7ff fa29 	bl	800897c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800952a:	f107 0308 	add.w	r3, r7, #8
 800952e:	4618      	mov	r0, r3
 8009530:	f000 f866 	bl	8009600 <prvSampleTimeNow>
 8009534:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d130      	bne.n	800959e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10a      	bne.n	8009558 <prvProcessTimerOrBlockTask+0x3c>
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	429a      	cmp	r2, r3
 8009548:	d806      	bhi.n	8009558 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800954a:	f7ff fa25 	bl	8008998 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800954e:	68f9      	ldr	r1, [r7, #12]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7ff ff81 	bl	8009458 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009556:	e024      	b.n	80095a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d008      	beq.n	8009570 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800955e:	4b13      	ldr	r3, [pc, #76]	@ (80095ac <prvProcessTimerOrBlockTask+0x90>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <prvProcessTimerOrBlockTask+0x50>
 8009568:	2301      	movs	r3, #1
 800956a:	e000      	b.n	800956e <prvProcessTimerOrBlockTask+0x52>
 800956c:	2300      	movs	r3, #0
 800956e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009570:	4b0f      	ldr	r3, [pc, #60]	@ (80095b0 <prvProcessTimerOrBlockTask+0x94>)
 8009572:	6818      	ldr	r0, [r3, #0]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	4619      	mov	r1, r3
 800957e:	f7fe ff65 	bl	800844c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009582:	f7ff fa09 	bl	8008998 <xTaskResumeAll>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10a      	bne.n	80095a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800958c:	4b09      	ldr	r3, [pc, #36]	@ (80095b4 <prvProcessTimerOrBlockTask+0x98>)
 800958e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009592:	601a      	str	r2, [r3, #0]
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	f3bf 8f6f 	isb	sy
}
 800959c:	e001      	b.n	80095a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800959e:	f7ff f9fb 	bl	8008998 <xTaskResumeAll>
}
 80095a2:	bf00      	nop
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20001260 	.word	0x20001260
 80095b0:	20001264 	.word	0x20001264
 80095b4:	e000ed04 	.word	0xe000ed04

080095b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80095c0:	4b0e      	ldr	r3, [pc, #56]	@ (80095fc <prvGetNextExpireTime+0x44>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <prvGetNextExpireTime+0x16>
 80095ca:	2201      	movs	r2, #1
 80095cc:	e000      	b.n	80095d0 <prvGetNextExpireTime+0x18>
 80095ce:	2200      	movs	r2, #0
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d105      	bne.n	80095e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095dc:	4b07      	ldr	r3, [pc, #28]	@ (80095fc <prvGetNextExpireTime+0x44>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	60fb      	str	r3, [r7, #12]
 80095e6:	e001      	b.n	80095ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80095e8:	2300      	movs	r3, #0
 80095ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80095ec:	68fb      	ldr	r3, [r7, #12]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3714      	adds	r7, #20
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	2000125c 	.word	0x2000125c

08009600 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009608:	f7ff fa64 	bl	8008ad4 <xTaskGetTickCount>
 800960c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800960e:	4b0b      	ldr	r3, [pc, #44]	@ (800963c <prvSampleTimeNow+0x3c>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	429a      	cmp	r2, r3
 8009616:	d205      	bcs.n	8009624 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009618:	f000 f93a 	bl	8009890 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	e002      	b.n	800962a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800962a:	4a04      	ldr	r2, [pc, #16]	@ (800963c <prvSampleTimeNow+0x3c>)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009630:	68fb      	ldr	r3, [r7, #12]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	2000126c 	.word	0x2000126c

08009640 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
 800964c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800964e:	2300      	movs	r3, #0
 8009650:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	429a      	cmp	r2, r3
 8009664:	d812      	bhi.n	800968c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	1ad2      	subs	r2, r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	429a      	cmp	r2, r3
 8009672:	d302      	bcc.n	800967a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009674:	2301      	movs	r3, #1
 8009676:	617b      	str	r3, [r7, #20]
 8009678:	e01b      	b.n	80096b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800967a:	4b10      	ldr	r3, [pc, #64]	@ (80096bc <prvInsertTimerInActiveList+0x7c>)
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	3304      	adds	r3, #4
 8009682:	4619      	mov	r1, r3
 8009684:	4610      	mov	r0, r2
 8009686:	f7fe f9b8 	bl	80079fa <vListInsert>
 800968a:	e012      	b.n	80096b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	429a      	cmp	r2, r3
 8009692:	d206      	bcs.n	80096a2 <prvInsertTimerInActiveList+0x62>
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d302      	bcc.n	80096a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800969c:	2301      	movs	r3, #1
 800969e:	617b      	str	r3, [r7, #20]
 80096a0:	e007      	b.n	80096b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096a2:	4b07      	ldr	r3, [pc, #28]	@ (80096c0 <prvInsertTimerInActiveList+0x80>)
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	3304      	adds	r3, #4
 80096aa:	4619      	mov	r1, r3
 80096ac:	4610      	mov	r0, r2
 80096ae:	f7fe f9a4 	bl	80079fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80096b2:	697b      	ldr	r3, [r7, #20]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	20001260 	.word	0x20001260
 80096c0:	2000125c 	.word	0x2000125c

080096c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b08e      	sub	sp, #56	@ 0x38
 80096c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096ca:	e0ce      	b.n	800986a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	da19      	bge.n	8009706 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80096d2:	1d3b      	adds	r3, r7, #4
 80096d4:	3304      	adds	r3, #4
 80096d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80096d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10b      	bne.n	80096f6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	61fb      	str	r3, [r7, #28]
}
 80096f0:	bf00      	nop
 80096f2:	bf00      	nop
 80096f4:	e7fd      	b.n	80096f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80096f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096fc:	6850      	ldr	r0, [r2, #4]
 80096fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009700:	6892      	ldr	r2, [r2, #8]
 8009702:	4611      	mov	r1, r2
 8009704:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	f2c0 80ae 	blt.w	800986a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d004      	beq.n	8009724 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800971a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971c:	3304      	adds	r3, #4
 800971e:	4618      	mov	r0, r3
 8009720:	f7fe f9a4 	bl	8007a6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009724:	463b      	mov	r3, r7
 8009726:	4618      	mov	r0, r3
 8009728:	f7ff ff6a 	bl	8009600 <prvSampleTimeNow>
 800972c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b09      	cmp	r3, #9
 8009732:	f200 8097 	bhi.w	8009864 <prvProcessReceivedCommands+0x1a0>
 8009736:	a201      	add	r2, pc, #4	@ (adr r2, 800973c <prvProcessReceivedCommands+0x78>)
 8009738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973c:	08009765 	.word	0x08009765
 8009740:	08009765 	.word	0x08009765
 8009744:	08009765 	.word	0x08009765
 8009748:	080097db 	.word	0x080097db
 800974c:	080097ef 	.word	0x080097ef
 8009750:	0800983b 	.word	0x0800983b
 8009754:	08009765 	.word	0x08009765
 8009758:	08009765 	.word	0x08009765
 800975c:	080097db 	.word	0x080097db
 8009760:	080097ef 	.word	0x080097ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009766:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800976a:	f043 0301 	orr.w	r3, r3, #1
 800976e:	b2da      	uxtb	r2, r3
 8009770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009772:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	18d1      	adds	r1, r2, r3
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009784:	f7ff ff5c 	bl	8009640 <prvInsertTimerInActiveList>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d06c      	beq.n	8009868 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800978e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009794:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009798:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800979c:	f003 0304 	and.w	r3, r3, #4
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d061      	beq.n	8009868 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	441a      	add	r2, r3
 80097ac:	2300      	movs	r3, #0
 80097ae:	9300      	str	r3, [sp, #0]
 80097b0:	2300      	movs	r3, #0
 80097b2:	2100      	movs	r1, #0
 80097b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097b6:	f7ff fe01 	bl	80093bc <xTimerGenericCommand>
 80097ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d152      	bne.n	8009868 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	61bb      	str	r3, [r7, #24]
}
 80097d4:	bf00      	nop
 80097d6:	bf00      	nop
 80097d8:	e7fd      	b.n	80097d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097e0:	f023 0301 	bic.w	r3, r3, #1
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80097ec:	e03d      	b.n	800986a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097f4:	f043 0301 	orr.w	r3, r3, #1
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009804:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10b      	bne.n	8009826 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	617b      	str	r3, [r7, #20]
}
 8009820:	bf00      	nop
 8009822:	bf00      	nop
 8009824:	e7fd      	b.n	8009822 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009828:	699a      	ldr	r2, [r3, #24]
 800982a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982c:	18d1      	adds	r1, r2, r3
 800982e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009832:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009834:	f7ff ff04 	bl	8009640 <prvInsertTimerInActiveList>
					break;
 8009838:	e017      	b.n	800986a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800983a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009840:	f003 0302 	and.w	r3, r3, #2
 8009844:	2b00      	cmp	r3, #0
 8009846:	d103      	bne.n	8009850 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009848:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800984a:	f000 fbe5 	bl	800a018 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800984e:	e00c      	b.n	800986a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009852:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009856:	f023 0301 	bic.w	r3, r3, #1
 800985a:	b2da      	uxtb	r2, r3
 800985c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800985e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009862:	e002      	b.n	800986a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009864:	bf00      	nop
 8009866:	e000      	b.n	800986a <prvProcessReceivedCommands+0x1a6>
					break;
 8009868:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800986a:	4b08      	ldr	r3, [pc, #32]	@ (800988c <prvProcessReceivedCommands+0x1c8>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	1d39      	adds	r1, r7, #4
 8009870:	2200      	movs	r2, #0
 8009872:	4618      	mov	r0, r3
 8009874:	f7fe fbce 	bl	8008014 <xQueueReceive>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	f47f af26 	bne.w	80096cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009880:	bf00      	nop
 8009882:	bf00      	nop
 8009884:	3730      	adds	r7, #48	@ 0x30
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	20001264 	.word	0x20001264

08009890 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009896:	e049      	b.n	800992c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009898:	4b2e      	ldr	r3, [pc, #184]	@ (8009954 <prvSwitchTimerLists+0xc4>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098a2:	4b2c      	ldr	r3, [pc, #176]	@ (8009954 <prvSwitchTimerLists+0xc4>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3304      	adds	r3, #4
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fe f8db 	bl	8007a6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6a1b      	ldr	r3, [r3, #32]
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098c4:	f003 0304 	and.w	r3, r3, #4
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d02f      	beq.n	800992c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	4413      	add	r3, r2
 80098d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d90e      	bls.n	80098fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009954 <prvSwitchTimerLists+0xc4>)
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3304      	adds	r3, #4
 80098f2:	4619      	mov	r1, r3
 80098f4:	4610      	mov	r0, r2
 80098f6:	f7fe f880 	bl	80079fa <vListInsert>
 80098fa:	e017      	b.n	800992c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098fc:	2300      	movs	r3, #0
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	2300      	movs	r3, #0
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	2100      	movs	r1, #0
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f7ff fd58 	bl	80093bc <xTimerGenericCommand>
 800990c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10b      	bne.n	800992c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	603b      	str	r3, [r7, #0]
}
 8009926:	bf00      	nop
 8009928:	bf00      	nop
 800992a:	e7fd      	b.n	8009928 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800992c:	4b09      	ldr	r3, [pc, #36]	@ (8009954 <prvSwitchTimerLists+0xc4>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1b0      	bne.n	8009898 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009936:	4b07      	ldr	r3, [pc, #28]	@ (8009954 <prvSwitchTimerLists+0xc4>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800993c:	4b06      	ldr	r3, [pc, #24]	@ (8009958 <prvSwitchTimerLists+0xc8>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a04      	ldr	r2, [pc, #16]	@ (8009954 <prvSwitchTimerLists+0xc4>)
 8009942:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009944:	4a04      	ldr	r2, [pc, #16]	@ (8009958 <prvSwitchTimerLists+0xc8>)
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	6013      	str	r3, [r2, #0]
}
 800994a:	bf00      	nop
 800994c:	3718      	adds	r7, #24
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	2000125c 	.word	0x2000125c
 8009958:	20001260 	.word	0x20001260

0800995c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009962:	f000 f969 	bl	8009c38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009966:	4b15      	ldr	r3, [pc, #84]	@ (80099bc <prvCheckForValidListAndQueue+0x60>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d120      	bne.n	80099b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800996e:	4814      	ldr	r0, [pc, #80]	@ (80099c0 <prvCheckForValidListAndQueue+0x64>)
 8009970:	f7fd fff2 	bl	8007958 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009974:	4813      	ldr	r0, [pc, #76]	@ (80099c4 <prvCheckForValidListAndQueue+0x68>)
 8009976:	f7fd ffef 	bl	8007958 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800997a:	4b13      	ldr	r3, [pc, #76]	@ (80099c8 <prvCheckForValidListAndQueue+0x6c>)
 800997c:	4a10      	ldr	r2, [pc, #64]	@ (80099c0 <prvCheckForValidListAndQueue+0x64>)
 800997e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009980:	4b12      	ldr	r3, [pc, #72]	@ (80099cc <prvCheckForValidListAndQueue+0x70>)
 8009982:	4a10      	ldr	r2, [pc, #64]	@ (80099c4 <prvCheckForValidListAndQueue+0x68>)
 8009984:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009986:	2300      	movs	r3, #0
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	4b11      	ldr	r3, [pc, #68]	@ (80099d0 <prvCheckForValidListAndQueue+0x74>)
 800998c:	4a11      	ldr	r2, [pc, #68]	@ (80099d4 <prvCheckForValidListAndQueue+0x78>)
 800998e:	2110      	movs	r1, #16
 8009990:	200a      	movs	r0, #10
 8009992:	f7fe f8ff 	bl	8007b94 <xQueueGenericCreateStatic>
 8009996:	4603      	mov	r3, r0
 8009998:	4a08      	ldr	r2, [pc, #32]	@ (80099bc <prvCheckForValidListAndQueue+0x60>)
 800999a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800999c:	4b07      	ldr	r3, [pc, #28]	@ (80099bc <prvCheckForValidListAndQueue+0x60>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d005      	beq.n	80099b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80099a4:	4b05      	ldr	r3, [pc, #20]	@ (80099bc <prvCheckForValidListAndQueue+0x60>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	490b      	ldr	r1, [pc, #44]	@ (80099d8 <prvCheckForValidListAndQueue+0x7c>)
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe fd24 	bl	80083f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099b0:	f000 f974 	bl	8009c9c <vPortExitCritical>
}
 80099b4:	bf00      	nop
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	20001264 	.word	0x20001264
 80099c0:	20001234 	.word	0x20001234
 80099c4:	20001248 	.word	0x20001248
 80099c8:	2000125c 	.word	0x2000125c
 80099cc:	20001260 	.word	0x20001260
 80099d0:	20001310 	.word	0x20001310
 80099d4:	20001270 	.word	0x20001270
 80099d8:	0800b1fc 	.word	0x0800b1fc

080099dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	3b04      	subs	r3, #4
 80099ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80099f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	3b04      	subs	r3, #4
 80099fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	f023 0201 	bic.w	r2, r3, #1
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3b04      	subs	r3, #4
 8009a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8009a40 <pxPortInitialiseStack+0x64>)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	3b14      	subs	r3, #20
 8009a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3b04      	subs	r3, #4
 8009a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f06f 0202 	mvn.w	r2, #2
 8009a2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	3b20      	subs	r3, #32
 8009a30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a32:	68fb      	ldr	r3, [r7, #12]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	08009a45 	.word	0x08009a45

08009a44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a4e:	4b13      	ldr	r3, [pc, #76]	@ (8009a9c <prvTaskExitError+0x58>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a56:	d00b      	beq.n	8009a70 <prvTaskExitError+0x2c>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	60fb      	str	r3, [r7, #12]
}
 8009a6a:	bf00      	nop
 8009a6c:	bf00      	nop
 8009a6e:	e7fd      	b.n	8009a6c <prvTaskExitError+0x28>
	__asm volatile
 8009a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	60bb      	str	r3, [r7, #8]
}
 8009a82:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a84:	bf00      	nop
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d0fc      	beq.n	8009a86 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a8c:	bf00      	nop
 8009a8e:	bf00      	nop
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	20000010 	.word	0x20000010

08009aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009aa0:	4b07      	ldr	r3, [pc, #28]	@ (8009ac0 <pxCurrentTCBConst2>)
 8009aa2:	6819      	ldr	r1, [r3, #0]
 8009aa4:	6808      	ldr	r0, [r1, #0]
 8009aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aaa:	f380 8809 	msr	PSP, r0
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f04f 0000 	mov.w	r0, #0
 8009ab6:	f380 8811 	msr	BASEPRI, r0
 8009aba:	4770      	bx	lr
 8009abc:	f3af 8000 	nop.w

08009ac0 <pxCurrentTCBConst2>:
 8009ac0:	20000d34 	.word	0x20000d34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ac4:	bf00      	nop
 8009ac6:	bf00      	nop

08009ac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ac8:	4808      	ldr	r0, [pc, #32]	@ (8009aec <prvPortStartFirstTask+0x24>)
 8009aca:	6800      	ldr	r0, [r0, #0]
 8009acc:	6800      	ldr	r0, [r0, #0]
 8009ace:	f380 8808 	msr	MSP, r0
 8009ad2:	f04f 0000 	mov.w	r0, #0
 8009ad6:	f380 8814 	msr	CONTROL, r0
 8009ada:	b662      	cpsie	i
 8009adc:	b661      	cpsie	f
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	df00      	svc	0
 8009ae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009aea:	bf00      	nop
 8009aec:	e000ed08 	.word	0xe000ed08

08009af0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b086      	sub	sp, #24
 8009af4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009af6:	4b47      	ldr	r3, [pc, #284]	@ (8009c14 <xPortStartScheduler+0x124>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a47      	ldr	r2, [pc, #284]	@ (8009c18 <xPortStartScheduler+0x128>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d10b      	bne.n	8009b18 <xPortStartScheduler+0x28>
	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	613b      	str	r3, [r7, #16]
}
 8009b12:	bf00      	nop
 8009b14:	bf00      	nop
 8009b16:	e7fd      	b.n	8009b14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b18:	4b3e      	ldr	r3, [pc, #248]	@ (8009c14 <xPortStartScheduler+0x124>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a3f      	ldr	r2, [pc, #252]	@ (8009c1c <xPortStartScheduler+0x12c>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d10b      	bne.n	8009b3a <xPortStartScheduler+0x4a>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	60fb      	str	r3, [r7, #12]
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop
 8009b38:	e7fd      	b.n	8009b36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b3a:	4b39      	ldr	r3, [pc, #228]	@ (8009c20 <xPortStartScheduler+0x130>)
 8009b3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	22ff      	movs	r2, #255	@ 0xff
 8009b4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b54:	78fb      	ldrb	r3, [r7, #3]
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	4b31      	ldr	r3, [pc, #196]	@ (8009c24 <xPortStartScheduler+0x134>)
 8009b60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b62:	4b31      	ldr	r3, [pc, #196]	@ (8009c28 <xPortStartScheduler+0x138>)
 8009b64:	2207      	movs	r2, #7
 8009b66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b68:	e009      	b.n	8009b7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8009c28 <xPortStartScheduler+0x138>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	4a2d      	ldr	r2, [pc, #180]	@ (8009c28 <xPortStartScheduler+0x138>)
 8009b72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b74:	78fb      	ldrb	r3, [r7, #3]
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	005b      	lsls	r3, r3, #1
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b7e:	78fb      	ldrb	r3, [r7, #3]
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b86:	2b80      	cmp	r3, #128	@ 0x80
 8009b88:	d0ef      	beq.n	8009b6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b8a:	4b27      	ldr	r3, [pc, #156]	@ (8009c28 <xPortStartScheduler+0x138>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f1c3 0307 	rsb	r3, r3, #7
 8009b92:	2b04      	cmp	r3, #4
 8009b94:	d00b      	beq.n	8009bae <xPortStartScheduler+0xbe>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	60bb      	str	r3, [r7, #8]
}
 8009ba8:	bf00      	nop
 8009baa:	bf00      	nop
 8009bac:	e7fd      	b.n	8009baa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009bae:	4b1e      	ldr	r3, [pc, #120]	@ (8009c28 <xPortStartScheduler+0x138>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	021b      	lsls	r3, r3, #8
 8009bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8009c28 <xPortStartScheduler+0x138>)
 8009bb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8009c28 <xPortStartScheduler+0x138>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009bc0:	4a19      	ldr	r2, [pc, #100]	@ (8009c28 <xPortStartScheduler+0x138>)
 8009bc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009bcc:	4b17      	ldr	r3, [pc, #92]	@ (8009c2c <xPortStartScheduler+0x13c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a16      	ldr	r2, [pc, #88]	@ (8009c2c <xPortStartScheduler+0x13c>)
 8009bd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009bd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009bd8:	4b14      	ldr	r3, [pc, #80]	@ (8009c2c <xPortStartScheduler+0x13c>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a13      	ldr	r2, [pc, #76]	@ (8009c2c <xPortStartScheduler+0x13c>)
 8009bde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009be2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009be4:	f000 f8da 	bl	8009d9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009be8:	4b11      	ldr	r3, [pc, #68]	@ (8009c30 <xPortStartScheduler+0x140>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009bee:	f000 f8f9 	bl	8009de4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009bf2:	4b10      	ldr	r3, [pc, #64]	@ (8009c34 <xPortStartScheduler+0x144>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8009c34 <xPortStartScheduler+0x144>)
 8009bf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009bfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009bfe:	f7ff ff63 	bl	8009ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c02:	f7ff f831 	bl	8008c68 <vTaskSwitchContext>
	prvTaskExitError();
 8009c06:	f7ff ff1d 	bl	8009a44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	e000ed00 	.word	0xe000ed00
 8009c18:	410fc271 	.word	0x410fc271
 8009c1c:	410fc270 	.word	0x410fc270
 8009c20:	e000e400 	.word	0xe000e400
 8009c24:	20001360 	.word	0x20001360
 8009c28:	20001364 	.word	0x20001364
 8009c2c:	e000ed20 	.word	0xe000ed20
 8009c30:	20000010 	.word	0x20000010
 8009c34:	e000ef34 	.word	0xe000ef34

08009c38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	607b      	str	r3, [r7, #4]
}
 8009c50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c52:	4b10      	ldr	r3, [pc, #64]	@ (8009c94 <vPortEnterCritical+0x5c>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	3301      	adds	r3, #1
 8009c58:	4a0e      	ldr	r2, [pc, #56]	@ (8009c94 <vPortEnterCritical+0x5c>)
 8009c5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009c94 <vPortEnterCritical+0x5c>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d110      	bne.n	8009c86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c64:	4b0c      	ldr	r3, [pc, #48]	@ (8009c98 <vPortEnterCritical+0x60>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00b      	beq.n	8009c86 <vPortEnterCritical+0x4e>
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	603b      	str	r3, [r7, #0]
}
 8009c80:	bf00      	nop
 8009c82:	bf00      	nop
 8009c84:	e7fd      	b.n	8009c82 <vPortEnterCritical+0x4a>
	}
}
 8009c86:	bf00      	nop
 8009c88:	370c      	adds	r7, #12
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	20000010 	.word	0x20000010
 8009c98:	e000ed04 	.word	0xe000ed04

08009c9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ca2:	4b12      	ldr	r3, [pc, #72]	@ (8009cec <vPortExitCritical+0x50>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10b      	bne.n	8009cc2 <vPortExitCritical+0x26>
	__asm volatile
 8009caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cae:	f383 8811 	msr	BASEPRI, r3
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	607b      	str	r3, [r7, #4]
}
 8009cbc:	bf00      	nop
 8009cbe:	bf00      	nop
 8009cc0:	e7fd      	b.n	8009cbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8009cec <vPortExitCritical+0x50>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	4a08      	ldr	r2, [pc, #32]	@ (8009cec <vPortExitCritical+0x50>)
 8009cca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ccc:	4b07      	ldr	r3, [pc, #28]	@ (8009cec <vPortExitCritical+0x50>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d105      	bne.n	8009ce0 <vPortExitCritical+0x44>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	f383 8811 	msr	BASEPRI, r3
}
 8009cde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	20000010 	.word	0x20000010

08009cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009cf0:	f3ef 8009 	mrs	r0, PSP
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	4b15      	ldr	r3, [pc, #84]	@ (8009d50 <pxCurrentTCBConst>)
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	f01e 0f10 	tst.w	lr, #16
 8009d00:	bf08      	it	eq
 8009d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0a:	6010      	str	r0, [r2, #0]
 8009d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009d14:	f380 8811 	msr	BASEPRI, r0
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f7fe ffa2 	bl	8008c68 <vTaskSwitchContext>
 8009d24:	f04f 0000 	mov.w	r0, #0
 8009d28:	f380 8811 	msr	BASEPRI, r0
 8009d2c:	bc09      	pop	{r0, r3}
 8009d2e:	6819      	ldr	r1, [r3, #0]
 8009d30:	6808      	ldr	r0, [r1, #0]
 8009d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d36:	f01e 0f10 	tst.w	lr, #16
 8009d3a:	bf08      	it	eq
 8009d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d40:	f380 8809 	msr	PSP, r0
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	f3af 8000 	nop.w

08009d50 <pxCurrentTCBConst>:
 8009d50:	20000d34 	.word	0x20000d34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d54:	bf00      	nop
 8009d56:	bf00      	nop

08009d58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d62:	f383 8811 	msr	BASEPRI, r3
 8009d66:	f3bf 8f6f 	isb	sy
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	607b      	str	r3, [r7, #4]
}
 8009d70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d72:	f7fe febf 	bl	8008af4 <xTaskIncrementTick>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d003      	beq.n	8009d84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d7c:	4b06      	ldr	r3, [pc, #24]	@ (8009d98 <xPortSysTickHandler+0x40>)
 8009d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	2300      	movs	r3, #0
 8009d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	f383 8811 	msr	BASEPRI, r3
}
 8009d8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	e000ed04 	.word	0xe000ed04

08009d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009da0:	4b0b      	ldr	r3, [pc, #44]	@ (8009dd0 <vPortSetupTimerInterrupt+0x34>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009da6:	4b0b      	ldr	r3, [pc, #44]	@ (8009dd4 <vPortSetupTimerInterrupt+0x38>)
 8009da8:	2200      	movs	r2, #0
 8009daa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009dac:	4b0a      	ldr	r3, [pc, #40]	@ (8009dd8 <vPortSetupTimerInterrupt+0x3c>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a0a      	ldr	r2, [pc, #40]	@ (8009ddc <vPortSetupTimerInterrupt+0x40>)
 8009db2:	fba2 2303 	umull	r2, r3, r2, r3
 8009db6:	099b      	lsrs	r3, r3, #6
 8009db8:	4a09      	ldr	r2, [pc, #36]	@ (8009de0 <vPortSetupTimerInterrupt+0x44>)
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009dbe:	4b04      	ldr	r3, [pc, #16]	@ (8009dd0 <vPortSetupTimerInterrupt+0x34>)
 8009dc0:	2207      	movs	r2, #7
 8009dc2:	601a      	str	r2, [r3, #0]
}
 8009dc4:	bf00      	nop
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	e000e010 	.word	0xe000e010
 8009dd4:	e000e018 	.word	0xe000e018
 8009dd8:	20000004 	.word	0x20000004
 8009ddc:	10624dd3 	.word	0x10624dd3
 8009de0:	e000e014 	.word	0xe000e014

08009de4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009de4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009df4 <vPortEnableVFP+0x10>
 8009de8:	6801      	ldr	r1, [r0, #0]
 8009dea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009dee:	6001      	str	r1, [r0, #0]
 8009df0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009df2:	bf00      	nop
 8009df4:	e000ed88 	.word	0xe000ed88

08009df8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009dfe:	f3ef 8305 	mrs	r3, IPSR
 8009e02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2b0f      	cmp	r3, #15
 8009e08:	d915      	bls.n	8009e36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e0a:	4a18      	ldr	r2, [pc, #96]	@ (8009e6c <vPortValidateInterruptPriority+0x74>)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	4413      	add	r3, r2
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e14:	4b16      	ldr	r3, [pc, #88]	@ (8009e70 <vPortValidateInterruptPriority+0x78>)
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	7afa      	ldrb	r2, [r7, #11]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d20b      	bcs.n	8009e36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	607b      	str	r3, [r7, #4]
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	e7fd      	b.n	8009e32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e36:	4b0f      	ldr	r3, [pc, #60]	@ (8009e74 <vPortValidateInterruptPriority+0x7c>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8009e78 <vPortValidateInterruptPriority+0x80>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d90b      	bls.n	8009e5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e4a:	f383 8811 	msr	BASEPRI, r3
 8009e4e:	f3bf 8f6f 	isb	sy
 8009e52:	f3bf 8f4f 	dsb	sy
 8009e56:	603b      	str	r3, [r7, #0]
}
 8009e58:	bf00      	nop
 8009e5a:	bf00      	nop
 8009e5c:	e7fd      	b.n	8009e5a <vPortValidateInterruptPriority+0x62>
	}
 8009e5e:	bf00      	nop
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	e000e3f0 	.word	0xe000e3f0
 8009e70:	20001360 	.word	0x20001360
 8009e74:	e000ed0c 	.word	0xe000ed0c
 8009e78:	20001364 	.word	0x20001364

08009e7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b08a      	sub	sp, #40	@ 0x28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e84:	2300      	movs	r3, #0
 8009e86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e88:	f7fe fd78 	bl	800897c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009e8c:	4b5c      	ldr	r3, [pc, #368]	@ (800a000 <pvPortMalloc+0x184>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e94:	f000 f924 	bl	800a0e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e98:	4b5a      	ldr	r3, [pc, #360]	@ (800a004 <pvPortMalloc+0x188>)
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f040 8095 	bne.w	8009fd0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d01e      	beq.n	8009eea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009eac:	2208      	movs	r2, #8
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f003 0307 	and.w	r3, r3, #7
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d015      	beq.n	8009eea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f023 0307 	bic.w	r3, r3, #7
 8009ec4:	3308      	adds	r3, #8
 8009ec6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f003 0307 	and.w	r3, r3, #7
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00b      	beq.n	8009eea <pvPortMalloc+0x6e>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	617b      	str	r3, [r7, #20]
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop
 8009ee8:	e7fd      	b.n	8009ee6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d06f      	beq.n	8009fd0 <pvPortMalloc+0x154>
 8009ef0:	4b45      	ldr	r3, [pc, #276]	@ (800a008 <pvPortMalloc+0x18c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d86a      	bhi.n	8009fd0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009efa:	4b44      	ldr	r3, [pc, #272]	@ (800a00c <pvPortMalloc+0x190>)
 8009efc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009efe:	4b43      	ldr	r3, [pc, #268]	@ (800a00c <pvPortMalloc+0x190>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f04:	e004      	b.n	8009f10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d903      	bls.n	8009f22 <pvPortMalloc+0xa6>
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1f1      	bne.n	8009f06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f22:	4b37      	ldr	r3, [pc, #220]	@ (800a000 <pvPortMalloc+0x184>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d051      	beq.n	8009fd0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f2c:	6a3b      	ldr	r3, [r7, #32]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2208      	movs	r2, #8
 8009f32:	4413      	add	r3, r2
 8009f34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f40:	685a      	ldr	r2, [r3, #4]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	1ad2      	subs	r2, r2, r3
 8009f46:	2308      	movs	r3, #8
 8009f48:	005b      	lsls	r3, r3, #1
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d920      	bls.n	8009f90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4413      	add	r3, r2
 8009f54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	f003 0307 	and.w	r3, r3, #7
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00b      	beq.n	8009f78 <pvPortMalloc+0xfc>
	__asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	613b      	str	r3, [r7, #16]
}
 8009f72:	bf00      	nop
 8009f74:	bf00      	nop
 8009f76:	e7fd      	b.n	8009f74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	1ad2      	subs	r2, r2, r3
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f8a:	69b8      	ldr	r0, [r7, #24]
 8009f8c:	f000 f90a 	bl	800a1a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f90:	4b1d      	ldr	r3, [pc, #116]	@ (800a008 <pvPortMalloc+0x18c>)
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	4a1b      	ldr	r2, [pc, #108]	@ (800a008 <pvPortMalloc+0x18c>)
 8009f9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f9e:	4b1a      	ldr	r3, [pc, #104]	@ (800a008 <pvPortMalloc+0x18c>)
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	4b1b      	ldr	r3, [pc, #108]	@ (800a010 <pvPortMalloc+0x194>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d203      	bcs.n	8009fb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009faa:	4b17      	ldr	r3, [pc, #92]	@ (800a008 <pvPortMalloc+0x18c>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a18      	ldr	r2, [pc, #96]	@ (800a010 <pvPortMalloc+0x194>)
 8009fb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	4b13      	ldr	r3, [pc, #76]	@ (800a004 <pvPortMalloc+0x188>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	431a      	orrs	r2, r3
 8009fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009fc6:	4b13      	ldr	r3, [pc, #76]	@ (800a014 <pvPortMalloc+0x198>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	4a11      	ldr	r2, [pc, #68]	@ (800a014 <pvPortMalloc+0x198>)
 8009fce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009fd0:	f7fe fce2 	bl	8008998 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	f003 0307 	and.w	r3, r3, #7
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00b      	beq.n	8009ff6 <pvPortMalloc+0x17a>
	__asm volatile
 8009fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	60fb      	str	r3, [r7, #12]
}
 8009ff0:	bf00      	nop
 8009ff2:	bf00      	nop
 8009ff4:	e7fd      	b.n	8009ff2 <pvPortMalloc+0x176>
	return pvReturn;
 8009ff6:	69fb      	ldr	r3, [r7, #28]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3728      	adds	r7, #40	@ 0x28
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	20004f70 	.word	0x20004f70
 800a004:	20004f84 	.word	0x20004f84
 800a008:	20004f74 	.word	0x20004f74
 800a00c:	20004f68 	.word	0x20004f68
 800a010:	20004f78 	.word	0x20004f78
 800a014:	20004f7c 	.word	0x20004f7c

0800a018 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b086      	sub	sp, #24
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d04f      	beq.n	800a0ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a02a:	2308      	movs	r3, #8
 800a02c:	425b      	negs	r3, r3
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	4413      	add	r3, r2
 800a032:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	4b25      	ldr	r3, [pc, #148]	@ (800a0d4 <vPortFree+0xbc>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4013      	ands	r3, r2
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10b      	bne.n	800a05e <vPortFree+0x46>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	60fb      	str	r3, [r7, #12]
}
 800a058:	bf00      	nop
 800a05a:	bf00      	nop
 800a05c:	e7fd      	b.n	800a05a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00b      	beq.n	800a07e <vPortFree+0x66>
	__asm volatile
 800a066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a06a:	f383 8811 	msr	BASEPRI, r3
 800a06e:	f3bf 8f6f 	isb	sy
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	60bb      	str	r3, [r7, #8]
}
 800a078:	bf00      	nop
 800a07a:	bf00      	nop
 800a07c:	e7fd      	b.n	800a07a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	685a      	ldr	r2, [r3, #4]
 800a082:	4b14      	ldr	r3, [pc, #80]	@ (800a0d4 <vPortFree+0xbc>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4013      	ands	r3, r2
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d01e      	beq.n	800a0ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d11a      	bne.n	800a0ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	685a      	ldr	r2, [r3, #4]
 800a098:	4b0e      	ldr	r3, [pc, #56]	@ (800a0d4 <vPortFree+0xbc>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	43db      	mvns	r3, r3
 800a09e:	401a      	ands	r2, r3
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a0a4:	f7fe fc6a 	bl	800897c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a0d8 <vPortFree+0xc0>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	4a09      	ldr	r2, [pc, #36]	@ (800a0d8 <vPortFree+0xc0>)
 800a0b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0b6:	6938      	ldr	r0, [r7, #16]
 800a0b8:	f000 f874 	bl	800a1a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a0bc:	4b07      	ldr	r3, [pc, #28]	@ (800a0dc <vPortFree+0xc4>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	4a06      	ldr	r2, [pc, #24]	@ (800a0dc <vPortFree+0xc4>)
 800a0c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a0c6:	f7fe fc67 	bl	8008998 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a0ca:	bf00      	nop
 800a0cc:	3718      	adds	r7, #24
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	20004f84 	.word	0x20004f84
 800a0d8:	20004f74 	.word	0x20004f74
 800a0dc:	20004f80 	.word	0x20004f80

0800a0e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a0e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a0ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a0ec:	4b27      	ldr	r3, [pc, #156]	@ (800a18c <prvHeapInit+0xac>)
 800a0ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f003 0307 	and.w	r3, r3, #7
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00c      	beq.n	800a114 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	3307      	adds	r3, #7
 800a0fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f023 0307 	bic.w	r3, r3, #7
 800a106:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	4a1f      	ldr	r2, [pc, #124]	@ (800a18c <prvHeapInit+0xac>)
 800a110:	4413      	add	r3, r2
 800a112:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a118:	4a1d      	ldr	r2, [pc, #116]	@ (800a190 <prvHeapInit+0xb0>)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a11e:	4b1c      	ldr	r3, [pc, #112]	@ (800a190 <prvHeapInit+0xb0>)
 800a120:	2200      	movs	r2, #0
 800a122:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	4413      	add	r3, r2
 800a12a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a12c:	2208      	movs	r2, #8
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	1a9b      	subs	r3, r3, r2
 800a132:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f023 0307 	bic.w	r3, r3, #7
 800a13a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	4a15      	ldr	r2, [pc, #84]	@ (800a194 <prvHeapInit+0xb4>)
 800a140:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a142:	4b14      	ldr	r3, [pc, #80]	@ (800a194 <prvHeapInit+0xb4>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2200      	movs	r2, #0
 800a148:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a14a:	4b12      	ldr	r3, [pc, #72]	@ (800a194 <prvHeapInit+0xb4>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2200      	movs	r2, #0
 800a150:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	1ad2      	subs	r2, r2, r3
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a160:	4b0c      	ldr	r3, [pc, #48]	@ (800a194 <prvHeapInit+0xb4>)
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	4a0a      	ldr	r2, [pc, #40]	@ (800a198 <prvHeapInit+0xb8>)
 800a16e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	4a09      	ldr	r2, [pc, #36]	@ (800a19c <prvHeapInit+0xbc>)
 800a176:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a178:	4b09      	ldr	r3, [pc, #36]	@ (800a1a0 <prvHeapInit+0xc0>)
 800a17a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a17e:	601a      	str	r2, [r3, #0]
}
 800a180:	bf00      	nop
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr
 800a18c:	20001368 	.word	0x20001368
 800a190:	20004f68 	.word	0x20004f68
 800a194:	20004f70 	.word	0x20004f70
 800a198:	20004f78 	.word	0x20004f78
 800a19c:	20004f74 	.word	0x20004f74
 800a1a0:	20004f84 	.word	0x20004f84

0800a1a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a1ac:	4b28      	ldr	r3, [pc, #160]	@ (800a250 <prvInsertBlockIntoFreeList+0xac>)
 800a1ae:	60fb      	str	r3, [r7, #12]
 800a1b0:	e002      	b.n	800a1b8 <prvInsertBlockIntoFreeList+0x14>
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	60fb      	str	r3, [r7, #12]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d8f7      	bhi.n	800a1b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d108      	bne.n	800a1e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	441a      	add	r2, r3
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	441a      	add	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d118      	bne.n	800a22c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	4b15      	ldr	r3, [pc, #84]	@ (800a254 <prvInsertBlockIntoFreeList+0xb0>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	429a      	cmp	r2, r3
 800a204:	d00d      	beq.n	800a222 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	685a      	ldr	r2, [r3, #4]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	441a      	add	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	601a      	str	r2, [r3, #0]
 800a220:	e008      	b.n	800a234 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a222:	4b0c      	ldr	r3, [pc, #48]	@ (800a254 <prvInsertBlockIntoFreeList+0xb0>)
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	e003      	b.n	800a234 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d002      	beq.n	800a242 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a242:	bf00      	nop
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	20004f68 	.word	0x20004f68
 800a254:	20004f70 	.word	0x20004f70

0800a258 <std>:
 800a258:	2300      	movs	r3, #0
 800a25a:	b510      	push	{r4, lr}
 800a25c:	4604      	mov	r4, r0
 800a25e:	e9c0 3300 	strd	r3, r3, [r0]
 800a262:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a266:	6083      	str	r3, [r0, #8]
 800a268:	8181      	strh	r1, [r0, #12]
 800a26a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a26c:	81c2      	strh	r2, [r0, #14]
 800a26e:	6183      	str	r3, [r0, #24]
 800a270:	4619      	mov	r1, r3
 800a272:	2208      	movs	r2, #8
 800a274:	305c      	adds	r0, #92	@ 0x5c
 800a276:	f000 f906 	bl	800a486 <memset>
 800a27a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b0 <std+0x58>)
 800a27c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a27e:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b4 <std+0x5c>)
 800a280:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a282:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b8 <std+0x60>)
 800a284:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a286:	4b0d      	ldr	r3, [pc, #52]	@ (800a2bc <std+0x64>)
 800a288:	6323      	str	r3, [r4, #48]	@ 0x30
 800a28a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c0 <std+0x68>)
 800a28c:	6224      	str	r4, [r4, #32]
 800a28e:	429c      	cmp	r4, r3
 800a290:	d006      	beq.n	800a2a0 <std+0x48>
 800a292:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a296:	4294      	cmp	r4, r2
 800a298:	d002      	beq.n	800a2a0 <std+0x48>
 800a29a:	33d0      	adds	r3, #208	@ 0xd0
 800a29c:	429c      	cmp	r4, r3
 800a29e:	d105      	bne.n	800a2ac <std+0x54>
 800a2a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2a8:	f000 b9bc 	b.w	800a624 <__retarget_lock_init_recursive>
 800a2ac:	bd10      	pop	{r4, pc}
 800a2ae:	bf00      	nop
 800a2b0:	0800a401 	.word	0x0800a401
 800a2b4:	0800a423 	.word	0x0800a423
 800a2b8:	0800a45b 	.word	0x0800a45b
 800a2bc:	0800a47f 	.word	0x0800a47f
 800a2c0:	20004f88 	.word	0x20004f88

0800a2c4 <stdio_exit_handler>:
 800a2c4:	4a02      	ldr	r2, [pc, #8]	@ (800a2d0 <stdio_exit_handler+0xc>)
 800a2c6:	4903      	ldr	r1, [pc, #12]	@ (800a2d4 <stdio_exit_handler+0x10>)
 800a2c8:	4803      	ldr	r0, [pc, #12]	@ (800a2d8 <stdio_exit_handler+0x14>)
 800a2ca:	f000 b869 	b.w	800a3a0 <_fwalk_sglue>
 800a2ce:	bf00      	nop
 800a2d0:	20000014 	.word	0x20000014
 800a2d4:	0800aee1 	.word	0x0800aee1
 800a2d8:	20000024 	.word	0x20000024

0800a2dc <cleanup_stdio>:
 800a2dc:	6841      	ldr	r1, [r0, #4]
 800a2de:	4b0c      	ldr	r3, [pc, #48]	@ (800a310 <cleanup_stdio+0x34>)
 800a2e0:	4299      	cmp	r1, r3
 800a2e2:	b510      	push	{r4, lr}
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	d001      	beq.n	800a2ec <cleanup_stdio+0x10>
 800a2e8:	f000 fdfa 	bl	800aee0 <_fflush_r>
 800a2ec:	68a1      	ldr	r1, [r4, #8]
 800a2ee:	4b09      	ldr	r3, [pc, #36]	@ (800a314 <cleanup_stdio+0x38>)
 800a2f0:	4299      	cmp	r1, r3
 800a2f2:	d002      	beq.n	800a2fa <cleanup_stdio+0x1e>
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f000 fdf3 	bl	800aee0 <_fflush_r>
 800a2fa:	68e1      	ldr	r1, [r4, #12]
 800a2fc:	4b06      	ldr	r3, [pc, #24]	@ (800a318 <cleanup_stdio+0x3c>)
 800a2fe:	4299      	cmp	r1, r3
 800a300:	d004      	beq.n	800a30c <cleanup_stdio+0x30>
 800a302:	4620      	mov	r0, r4
 800a304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a308:	f000 bdea 	b.w	800aee0 <_fflush_r>
 800a30c:	bd10      	pop	{r4, pc}
 800a30e:	bf00      	nop
 800a310:	20004f88 	.word	0x20004f88
 800a314:	20004ff0 	.word	0x20004ff0
 800a318:	20005058 	.word	0x20005058

0800a31c <global_stdio_init.part.0>:
 800a31c:	b510      	push	{r4, lr}
 800a31e:	4b0b      	ldr	r3, [pc, #44]	@ (800a34c <global_stdio_init.part.0+0x30>)
 800a320:	4c0b      	ldr	r4, [pc, #44]	@ (800a350 <global_stdio_init.part.0+0x34>)
 800a322:	4a0c      	ldr	r2, [pc, #48]	@ (800a354 <global_stdio_init.part.0+0x38>)
 800a324:	601a      	str	r2, [r3, #0]
 800a326:	4620      	mov	r0, r4
 800a328:	2200      	movs	r2, #0
 800a32a:	2104      	movs	r1, #4
 800a32c:	f7ff ff94 	bl	800a258 <std>
 800a330:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a334:	2201      	movs	r2, #1
 800a336:	2109      	movs	r1, #9
 800a338:	f7ff ff8e 	bl	800a258 <std>
 800a33c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a340:	2202      	movs	r2, #2
 800a342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a346:	2112      	movs	r1, #18
 800a348:	f7ff bf86 	b.w	800a258 <std>
 800a34c:	200050c0 	.word	0x200050c0
 800a350:	20004f88 	.word	0x20004f88
 800a354:	0800a2c5 	.word	0x0800a2c5

0800a358 <__sfp_lock_acquire>:
 800a358:	4801      	ldr	r0, [pc, #4]	@ (800a360 <__sfp_lock_acquire+0x8>)
 800a35a:	f000 b964 	b.w	800a626 <__retarget_lock_acquire_recursive>
 800a35e:	bf00      	nop
 800a360:	200050c9 	.word	0x200050c9

0800a364 <__sfp_lock_release>:
 800a364:	4801      	ldr	r0, [pc, #4]	@ (800a36c <__sfp_lock_release+0x8>)
 800a366:	f000 b95f 	b.w	800a628 <__retarget_lock_release_recursive>
 800a36a:	bf00      	nop
 800a36c:	200050c9 	.word	0x200050c9

0800a370 <__sinit>:
 800a370:	b510      	push	{r4, lr}
 800a372:	4604      	mov	r4, r0
 800a374:	f7ff fff0 	bl	800a358 <__sfp_lock_acquire>
 800a378:	6a23      	ldr	r3, [r4, #32]
 800a37a:	b11b      	cbz	r3, 800a384 <__sinit+0x14>
 800a37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a380:	f7ff bff0 	b.w	800a364 <__sfp_lock_release>
 800a384:	4b04      	ldr	r3, [pc, #16]	@ (800a398 <__sinit+0x28>)
 800a386:	6223      	str	r3, [r4, #32]
 800a388:	4b04      	ldr	r3, [pc, #16]	@ (800a39c <__sinit+0x2c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1f5      	bne.n	800a37c <__sinit+0xc>
 800a390:	f7ff ffc4 	bl	800a31c <global_stdio_init.part.0>
 800a394:	e7f2      	b.n	800a37c <__sinit+0xc>
 800a396:	bf00      	nop
 800a398:	0800a2dd 	.word	0x0800a2dd
 800a39c:	200050c0 	.word	0x200050c0

0800a3a0 <_fwalk_sglue>:
 800a3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3a4:	4607      	mov	r7, r0
 800a3a6:	4688      	mov	r8, r1
 800a3a8:	4614      	mov	r4, r2
 800a3aa:	2600      	movs	r6, #0
 800a3ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3b0:	f1b9 0901 	subs.w	r9, r9, #1
 800a3b4:	d505      	bpl.n	800a3c2 <_fwalk_sglue+0x22>
 800a3b6:	6824      	ldr	r4, [r4, #0]
 800a3b8:	2c00      	cmp	r4, #0
 800a3ba:	d1f7      	bne.n	800a3ac <_fwalk_sglue+0xc>
 800a3bc:	4630      	mov	r0, r6
 800a3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3c2:	89ab      	ldrh	r3, [r5, #12]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d907      	bls.n	800a3d8 <_fwalk_sglue+0x38>
 800a3c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	d003      	beq.n	800a3d8 <_fwalk_sglue+0x38>
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	47c0      	blx	r8
 800a3d6:	4306      	orrs	r6, r0
 800a3d8:	3568      	adds	r5, #104	@ 0x68
 800a3da:	e7e9      	b.n	800a3b0 <_fwalk_sglue+0x10>

0800a3dc <iprintf>:
 800a3dc:	b40f      	push	{r0, r1, r2, r3}
 800a3de:	b507      	push	{r0, r1, r2, lr}
 800a3e0:	4906      	ldr	r1, [pc, #24]	@ (800a3fc <iprintf+0x20>)
 800a3e2:	ab04      	add	r3, sp, #16
 800a3e4:	6808      	ldr	r0, [r1, #0]
 800a3e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ea:	6881      	ldr	r1, [r0, #8]
 800a3ec:	9301      	str	r3, [sp, #4]
 800a3ee:	f000 fa4d 	bl	800a88c <_vfiprintf_r>
 800a3f2:	b003      	add	sp, #12
 800a3f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3f8:	b004      	add	sp, #16
 800a3fa:	4770      	bx	lr
 800a3fc:	20000020 	.word	0x20000020

0800a400 <__sread>:
 800a400:	b510      	push	{r4, lr}
 800a402:	460c      	mov	r4, r1
 800a404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a408:	f000 f8be 	bl	800a588 <_read_r>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	bfab      	itete	ge
 800a410:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a412:	89a3      	ldrhlt	r3, [r4, #12]
 800a414:	181b      	addge	r3, r3, r0
 800a416:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a41a:	bfac      	ite	ge
 800a41c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a41e:	81a3      	strhlt	r3, [r4, #12]
 800a420:	bd10      	pop	{r4, pc}

0800a422 <__swrite>:
 800a422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a426:	461f      	mov	r7, r3
 800a428:	898b      	ldrh	r3, [r1, #12]
 800a42a:	05db      	lsls	r3, r3, #23
 800a42c:	4605      	mov	r5, r0
 800a42e:	460c      	mov	r4, r1
 800a430:	4616      	mov	r6, r2
 800a432:	d505      	bpl.n	800a440 <__swrite+0x1e>
 800a434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a438:	2302      	movs	r3, #2
 800a43a:	2200      	movs	r2, #0
 800a43c:	f000 f892 	bl	800a564 <_lseek_r>
 800a440:	89a3      	ldrh	r3, [r4, #12]
 800a442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a446:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a44a:	81a3      	strh	r3, [r4, #12]
 800a44c:	4632      	mov	r2, r6
 800a44e:	463b      	mov	r3, r7
 800a450:	4628      	mov	r0, r5
 800a452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a456:	f000 b8a9 	b.w	800a5ac <_write_r>

0800a45a <__sseek>:
 800a45a:	b510      	push	{r4, lr}
 800a45c:	460c      	mov	r4, r1
 800a45e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a462:	f000 f87f 	bl	800a564 <_lseek_r>
 800a466:	1c43      	adds	r3, r0, #1
 800a468:	89a3      	ldrh	r3, [r4, #12]
 800a46a:	bf15      	itete	ne
 800a46c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a46e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a472:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a476:	81a3      	strheq	r3, [r4, #12]
 800a478:	bf18      	it	ne
 800a47a:	81a3      	strhne	r3, [r4, #12]
 800a47c:	bd10      	pop	{r4, pc}

0800a47e <__sclose>:
 800a47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a482:	f000 b809 	b.w	800a498 <_close_r>

0800a486 <memset>:
 800a486:	4402      	add	r2, r0
 800a488:	4603      	mov	r3, r0
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d100      	bne.n	800a490 <memset+0xa>
 800a48e:	4770      	bx	lr
 800a490:	f803 1b01 	strb.w	r1, [r3], #1
 800a494:	e7f9      	b.n	800a48a <memset+0x4>
	...

0800a498 <_close_r>:
 800a498:	b538      	push	{r3, r4, r5, lr}
 800a49a:	4d06      	ldr	r5, [pc, #24]	@ (800a4b4 <_close_r+0x1c>)
 800a49c:	2300      	movs	r3, #0
 800a49e:	4604      	mov	r4, r0
 800a4a0:	4608      	mov	r0, r1
 800a4a2:	602b      	str	r3, [r5, #0]
 800a4a4:	f7f7 ff6b 	bl	800237e <_close>
 800a4a8:	1c43      	adds	r3, r0, #1
 800a4aa:	d102      	bne.n	800a4b2 <_close_r+0x1a>
 800a4ac:	682b      	ldr	r3, [r5, #0]
 800a4ae:	b103      	cbz	r3, 800a4b2 <_close_r+0x1a>
 800a4b0:	6023      	str	r3, [r4, #0]
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
 800a4b4:	200050c4 	.word	0x200050c4

0800a4b8 <_reclaim_reent>:
 800a4b8:	4b29      	ldr	r3, [pc, #164]	@ (800a560 <_reclaim_reent+0xa8>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4283      	cmp	r3, r0
 800a4be:	b570      	push	{r4, r5, r6, lr}
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	d04b      	beq.n	800a55c <_reclaim_reent+0xa4>
 800a4c4:	69c3      	ldr	r3, [r0, #28]
 800a4c6:	b1ab      	cbz	r3, 800a4f4 <_reclaim_reent+0x3c>
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	b16b      	cbz	r3, 800a4e8 <_reclaim_reent+0x30>
 800a4cc:	2500      	movs	r5, #0
 800a4ce:	69e3      	ldr	r3, [r4, #28]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	5959      	ldr	r1, [r3, r5]
 800a4d4:	2900      	cmp	r1, #0
 800a4d6:	d13b      	bne.n	800a550 <_reclaim_reent+0x98>
 800a4d8:	3504      	adds	r5, #4
 800a4da:	2d80      	cmp	r5, #128	@ 0x80
 800a4dc:	d1f7      	bne.n	800a4ce <_reclaim_reent+0x16>
 800a4de:	69e3      	ldr	r3, [r4, #28]
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	68d9      	ldr	r1, [r3, #12]
 800a4e4:	f000 f8b0 	bl	800a648 <_free_r>
 800a4e8:	69e3      	ldr	r3, [r4, #28]
 800a4ea:	6819      	ldr	r1, [r3, #0]
 800a4ec:	b111      	cbz	r1, 800a4f4 <_reclaim_reent+0x3c>
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f000 f8aa 	bl	800a648 <_free_r>
 800a4f4:	6961      	ldr	r1, [r4, #20]
 800a4f6:	b111      	cbz	r1, 800a4fe <_reclaim_reent+0x46>
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f000 f8a5 	bl	800a648 <_free_r>
 800a4fe:	69e1      	ldr	r1, [r4, #28]
 800a500:	b111      	cbz	r1, 800a508 <_reclaim_reent+0x50>
 800a502:	4620      	mov	r0, r4
 800a504:	f000 f8a0 	bl	800a648 <_free_r>
 800a508:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a50a:	b111      	cbz	r1, 800a512 <_reclaim_reent+0x5a>
 800a50c:	4620      	mov	r0, r4
 800a50e:	f000 f89b 	bl	800a648 <_free_r>
 800a512:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a514:	b111      	cbz	r1, 800a51c <_reclaim_reent+0x64>
 800a516:	4620      	mov	r0, r4
 800a518:	f000 f896 	bl	800a648 <_free_r>
 800a51c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a51e:	b111      	cbz	r1, 800a526 <_reclaim_reent+0x6e>
 800a520:	4620      	mov	r0, r4
 800a522:	f000 f891 	bl	800a648 <_free_r>
 800a526:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a528:	b111      	cbz	r1, 800a530 <_reclaim_reent+0x78>
 800a52a:	4620      	mov	r0, r4
 800a52c:	f000 f88c 	bl	800a648 <_free_r>
 800a530:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a532:	b111      	cbz	r1, 800a53a <_reclaim_reent+0x82>
 800a534:	4620      	mov	r0, r4
 800a536:	f000 f887 	bl	800a648 <_free_r>
 800a53a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a53c:	b111      	cbz	r1, 800a544 <_reclaim_reent+0x8c>
 800a53e:	4620      	mov	r0, r4
 800a540:	f000 f882 	bl	800a648 <_free_r>
 800a544:	6a23      	ldr	r3, [r4, #32]
 800a546:	b14b      	cbz	r3, 800a55c <_reclaim_reent+0xa4>
 800a548:	4620      	mov	r0, r4
 800a54a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a54e:	4718      	bx	r3
 800a550:	680e      	ldr	r6, [r1, #0]
 800a552:	4620      	mov	r0, r4
 800a554:	f000 f878 	bl	800a648 <_free_r>
 800a558:	4631      	mov	r1, r6
 800a55a:	e7bb      	b.n	800a4d4 <_reclaim_reent+0x1c>
 800a55c:	bd70      	pop	{r4, r5, r6, pc}
 800a55e:	bf00      	nop
 800a560:	20000020 	.word	0x20000020

0800a564 <_lseek_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d07      	ldr	r5, [pc, #28]	@ (800a584 <_lseek_r+0x20>)
 800a568:	4604      	mov	r4, r0
 800a56a:	4608      	mov	r0, r1
 800a56c:	4611      	mov	r1, r2
 800a56e:	2200      	movs	r2, #0
 800a570:	602a      	str	r2, [r5, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	f7f7 ff2a 	bl	80023cc <_lseek>
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	d102      	bne.n	800a582 <_lseek_r+0x1e>
 800a57c:	682b      	ldr	r3, [r5, #0]
 800a57e:	b103      	cbz	r3, 800a582 <_lseek_r+0x1e>
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	200050c4 	.word	0x200050c4

0800a588 <_read_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4d07      	ldr	r5, [pc, #28]	@ (800a5a8 <_read_r+0x20>)
 800a58c:	4604      	mov	r4, r0
 800a58e:	4608      	mov	r0, r1
 800a590:	4611      	mov	r1, r2
 800a592:	2200      	movs	r2, #0
 800a594:	602a      	str	r2, [r5, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	f7f7 feb8 	bl	800230c <_read>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_read_r+0x1e>
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_read_r+0x1e>
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	200050c4 	.word	0x200050c4

0800a5ac <_write_r>:
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	4d07      	ldr	r5, [pc, #28]	@ (800a5cc <_write_r+0x20>)
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	4608      	mov	r0, r1
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	602a      	str	r2, [r5, #0]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	f7f7 fec3 	bl	8002346 <_write>
 800a5c0:	1c43      	adds	r3, r0, #1
 800a5c2:	d102      	bne.n	800a5ca <_write_r+0x1e>
 800a5c4:	682b      	ldr	r3, [r5, #0]
 800a5c6:	b103      	cbz	r3, 800a5ca <_write_r+0x1e>
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	bd38      	pop	{r3, r4, r5, pc}
 800a5cc:	200050c4 	.word	0x200050c4

0800a5d0 <__errno>:
 800a5d0:	4b01      	ldr	r3, [pc, #4]	@ (800a5d8 <__errno+0x8>)
 800a5d2:	6818      	ldr	r0, [r3, #0]
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	20000020 	.word	0x20000020

0800a5dc <__libc_init_array>:
 800a5dc:	b570      	push	{r4, r5, r6, lr}
 800a5de:	4d0d      	ldr	r5, [pc, #52]	@ (800a614 <__libc_init_array+0x38>)
 800a5e0:	4c0d      	ldr	r4, [pc, #52]	@ (800a618 <__libc_init_array+0x3c>)
 800a5e2:	1b64      	subs	r4, r4, r5
 800a5e4:	10a4      	asrs	r4, r4, #2
 800a5e6:	2600      	movs	r6, #0
 800a5e8:	42a6      	cmp	r6, r4
 800a5ea:	d109      	bne.n	800a600 <__libc_init_array+0x24>
 800a5ec:	4d0b      	ldr	r5, [pc, #44]	@ (800a61c <__libc_init_array+0x40>)
 800a5ee:	4c0c      	ldr	r4, [pc, #48]	@ (800a620 <__libc_init_array+0x44>)
 800a5f0:	f000 fdc6 	bl	800b180 <_init>
 800a5f4:	1b64      	subs	r4, r4, r5
 800a5f6:	10a4      	asrs	r4, r4, #2
 800a5f8:	2600      	movs	r6, #0
 800a5fa:	42a6      	cmp	r6, r4
 800a5fc:	d105      	bne.n	800a60a <__libc_init_array+0x2e>
 800a5fe:	bd70      	pop	{r4, r5, r6, pc}
 800a600:	f855 3b04 	ldr.w	r3, [r5], #4
 800a604:	4798      	blx	r3
 800a606:	3601      	adds	r6, #1
 800a608:	e7ee      	b.n	800a5e8 <__libc_init_array+0xc>
 800a60a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a60e:	4798      	blx	r3
 800a610:	3601      	adds	r6, #1
 800a612:	e7f2      	b.n	800a5fa <__libc_init_array+0x1e>
 800a614:	0800b2cc 	.word	0x0800b2cc
 800a618:	0800b2cc 	.word	0x0800b2cc
 800a61c:	0800b2cc 	.word	0x0800b2cc
 800a620:	0800b2d0 	.word	0x0800b2d0

0800a624 <__retarget_lock_init_recursive>:
 800a624:	4770      	bx	lr

0800a626 <__retarget_lock_acquire_recursive>:
 800a626:	4770      	bx	lr

0800a628 <__retarget_lock_release_recursive>:
 800a628:	4770      	bx	lr

0800a62a <memcpy>:
 800a62a:	440a      	add	r2, r1
 800a62c:	4291      	cmp	r1, r2
 800a62e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a632:	d100      	bne.n	800a636 <memcpy+0xc>
 800a634:	4770      	bx	lr
 800a636:	b510      	push	{r4, lr}
 800a638:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a63c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a640:	4291      	cmp	r1, r2
 800a642:	d1f9      	bne.n	800a638 <memcpy+0xe>
 800a644:	bd10      	pop	{r4, pc}
	...

0800a648 <_free_r>:
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	4605      	mov	r5, r0
 800a64c:	2900      	cmp	r1, #0
 800a64e:	d041      	beq.n	800a6d4 <_free_r+0x8c>
 800a650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a654:	1f0c      	subs	r4, r1, #4
 800a656:	2b00      	cmp	r3, #0
 800a658:	bfb8      	it	lt
 800a65a:	18e4      	addlt	r4, r4, r3
 800a65c:	f000 f8e0 	bl	800a820 <__malloc_lock>
 800a660:	4a1d      	ldr	r2, [pc, #116]	@ (800a6d8 <_free_r+0x90>)
 800a662:	6813      	ldr	r3, [r2, #0]
 800a664:	b933      	cbnz	r3, 800a674 <_free_r+0x2c>
 800a666:	6063      	str	r3, [r4, #4]
 800a668:	6014      	str	r4, [r2, #0]
 800a66a:	4628      	mov	r0, r5
 800a66c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a670:	f000 b8dc 	b.w	800a82c <__malloc_unlock>
 800a674:	42a3      	cmp	r3, r4
 800a676:	d908      	bls.n	800a68a <_free_r+0x42>
 800a678:	6820      	ldr	r0, [r4, #0]
 800a67a:	1821      	adds	r1, r4, r0
 800a67c:	428b      	cmp	r3, r1
 800a67e:	bf01      	itttt	eq
 800a680:	6819      	ldreq	r1, [r3, #0]
 800a682:	685b      	ldreq	r3, [r3, #4]
 800a684:	1809      	addeq	r1, r1, r0
 800a686:	6021      	streq	r1, [r4, #0]
 800a688:	e7ed      	b.n	800a666 <_free_r+0x1e>
 800a68a:	461a      	mov	r2, r3
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	b10b      	cbz	r3, 800a694 <_free_r+0x4c>
 800a690:	42a3      	cmp	r3, r4
 800a692:	d9fa      	bls.n	800a68a <_free_r+0x42>
 800a694:	6811      	ldr	r1, [r2, #0]
 800a696:	1850      	adds	r0, r2, r1
 800a698:	42a0      	cmp	r0, r4
 800a69a:	d10b      	bne.n	800a6b4 <_free_r+0x6c>
 800a69c:	6820      	ldr	r0, [r4, #0]
 800a69e:	4401      	add	r1, r0
 800a6a0:	1850      	adds	r0, r2, r1
 800a6a2:	4283      	cmp	r3, r0
 800a6a4:	6011      	str	r1, [r2, #0]
 800a6a6:	d1e0      	bne.n	800a66a <_free_r+0x22>
 800a6a8:	6818      	ldr	r0, [r3, #0]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	6053      	str	r3, [r2, #4]
 800a6ae:	4408      	add	r0, r1
 800a6b0:	6010      	str	r0, [r2, #0]
 800a6b2:	e7da      	b.n	800a66a <_free_r+0x22>
 800a6b4:	d902      	bls.n	800a6bc <_free_r+0x74>
 800a6b6:	230c      	movs	r3, #12
 800a6b8:	602b      	str	r3, [r5, #0]
 800a6ba:	e7d6      	b.n	800a66a <_free_r+0x22>
 800a6bc:	6820      	ldr	r0, [r4, #0]
 800a6be:	1821      	adds	r1, r4, r0
 800a6c0:	428b      	cmp	r3, r1
 800a6c2:	bf04      	itt	eq
 800a6c4:	6819      	ldreq	r1, [r3, #0]
 800a6c6:	685b      	ldreq	r3, [r3, #4]
 800a6c8:	6063      	str	r3, [r4, #4]
 800a6ca:	bf04      	itt	eq
 800a6cc:	1809      	addeq	r1, r1, r0
 800a6ce:	6021      	streq	r1, [r4, #0]
 800a6d0:	6054      	str	r4, [r2, #4]
 800a6d2:	e7ca      	b.n	800a66a <_free_r+0x22>
 800a6d4:	bd38      	pop	{r3, r4, r5, pc}
 800a6d6:	bf00      	nop
 800a6d8:	200050d0 	.word	0x200050d0

0800a6dc <sbrk_aligned>:
 800a6dc:	b570      	push	{r4, r5, r6, lr}
 800a6de:	4e0f      	ldr	r6, [pc, #60]	@ (800a71c <sbrk_aligned+0x40>)
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	6831      	ldr	r1, [r6, #0]
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	b911      	cbnz	r1, 800a6ee <sbrk_aligned+0x12>
 800a6e8:	f000 fcb6 	bl	800b058 <_sbrk_r>
 800a6ec:	6030      	str	r0, [r6, #0]
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	f000 fcb1 	bl	800b058 <_sbrk_r>
 800a6f6:	1c43      	adds	r3, r0, #1
 800a6f8:	d103      	bne.n	800a702 <sbrk_aligned+0x26>
 800a6fa:	f04f 34ff 	mov.w	r4, #4294967295
 800a6fe:	4620      	mov	r0, r4
 800a700:	bd70      	pop	{r4, r5, r6, pc}
 800a702:	1cc4      	adds	r4, r0, #3
 800a704:	f024 0403 	bic.w	r4, r4, #3
 800a708:	42a0      	cmp	r0, r4
 800a70a:	d0f8      	beq.n	800a6fe <sbrk_aligned+0x22>
 800a70c:	1a21      	subs	r1, r4, r0
 800a70e:	4628      	mov	r0, r5
 800a710:	f000 fca2 	bl	800b058 <_sbrk_r>
 800a714:	3001      	adds	r0, #1
 800a716:	d1f2      	bne.n	800a6fe <sbrk_aligned+0x22>
 800a718:	e7ef      	b.n	800a6fa <sbrk_aligned+0x1e>
 800a71a:	bf00      	nop
 800a71c:	200050cc 	.word	0x200050cc

0800a720 <_malloc_r>:
 800a720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a724:	1ccd      	adds	r5, r1, #3
 800a726:	f025 0503 	bic.w	r5, r5, #3
 800a72a:	3508      	adds	r5, #8
 800a72c:	2d0c      	cmp	r5, #12
 800a72e:	bf38      	it	cc
 800a730:	250c      	movcc	r5, #12
 800a732:	2d00      	cmp	r5, #0
 800a734:	4606      	mov	r6, r0
 800a736:	db01      	blt.n	800a73c <_malloc_r+0x1c>
 800a738:	42a9      	cmp	r1, r5
 800a73a:	d904      	bls.n	800a746 <_malloc_r+0x26>
 800a73c:	230c      	movs	r3, #12
 800a73e:	6033      	str	r3, [r6, #0]
 800a740:	2000      	movs	r0, #0
 800a742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a81c <_malloc_r+0xfc>
 800a74a:	f000 f869 	bl	800a820 <__malloc_lock>
 800a74e:	f8d8 3000 	ldr.w	r3, [r8]
 800a752:	461c      	mov	r4, r3
 800a754:	bb44      	cbnz	r4, 800a7a8 <_malloc_r+0x88>
 800a756:	4629      	mov	r1, r5
 800a758:	4630      	mov	r0, r6
 800a75a:	f7ff ffbf 	bl	800a6dc <sbrk_aligned>
 800a75e:	1c43      	adds	r3, r0, #1
 800a760:	4604      	mov	r4, r0
 800a762:	d158      	bne.n	800a816 <_malloc_r+0xf6>
 800a764:	f8d8 4000 	ldr.w	r4, [r8]
 800a768:	4627      	mov	r7, r4
 800a76a:	2f00      	cmp	r7, #0
 800a76c:	d143      	bne.n	800a7f6 <_malloc_r+0xd6>
 800a76e:	2c00      	cmp	r4, #0
 800a770:	d04b      	beq.n	800a80a <_malloc_r+0xea>
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	4639      	mov	r1, r7
 800a776:	4630      	mov	r0, r6
 800a778:	eb04 0903 	add.w	r9, r4, r3
 800a77c:	f000 fc6c 	bl	800b058 <_sbrk_r>
 800a780:	4581      	cmp	r9, r0
 800a782:	d142      	bne.n	800a80a <_malloc_r+0xea>
 800a784:	6821      	ldr	r1, [r4, #0]
 800a786:	1a6d      	subs	r5, r5, r1
 800a788:	4629      	mov	r1, r5
 800a78a:	4630      	mov	r0, r6
 800a78c:	f7ff ffa6 	bl	800a6dc <sbrk_aligned>
 800a790:	3001      	adds	r0, #1
 800a792:	d03a      	beq.n	800a80a <_malloc_r+0xea>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	442b      	add	r3, r5
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	f8d8 3000 	ldr.w	r3, [r8]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	bb62      	cbnz	r2, 800a7fc <_malloc_r+0xdc>
 800a7a2:	f8c8 7000 	str.w	r7, [r8]
 800a7a6:	e00f      	b.n	800a7c8 <_malloc_r+0xa8>
 800a7a8:	6822      	ldr	r2, [r4, #0]
 800a7aa:	1b52      	subs	r2, r2, r5
 800a7ac:	d420      	bmi.n	800a7f0 <_malloc_r+0xd0>
 800a7ae:	2a0b      	cmp	r2, #11
 800a7b0:	d917      	bls.n	800a7e2 <_malloc_r+0xc2>
 800a7b2:	1961      	adds	r1, r4, r5
 800a7b4:	42a3      	cmp	r3, r4
 800a7b6:	6025      	str	r5, [r4, #0]
 800a7b8:	bf18      	it	ne
 800a7ba:	6059      	strne	r1, [r3, #4]
 800a7bc:	6863      	ldr	r3, [r4, #4]
 800a7be:	bf08      	it	eq
 800a7c0:	f8c8 1000 	streq.w	r1, [r8]
 800a7c4:	5162      	str	r2, [r4, r5]
 800a7c6:	604b      	str	r3, [r1, #4]
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	f000 f82f 	bl	800a82c <__malloc_unlock>
 800a7ce:	f104 000b 	add.w	r0, r4, #11
 800a7d2:	1d23      	adds	r3, r4, #4
 800a7d4:	f020 0007 	bic.w	r0, r0, #7
 800a7d8:	1ac2      	subs	r2, r0, r3
 800a7da:	bf1c      	itt	ne
 800a7dc:	1a1b      	subne	r3, r3, r0
 800a7de:	50a3      	strne	r3, [r4, r2]
 800a7e0:	e7af      	b.n	800a742 <_malloc_r+0x22>
 800a7e2:	6862      	ldr	r2, [r4, #4]
 800a7e4:	42a3      	cmp	r3, r4
 800a7e6:	bf0c      	ite	eq
 800a7e8:	f8c8 2000 	streq.w	r2, [r8]
 800a7ec:	605a      	strne	r2, [r3, #4]
 800a7ee:	e7eb      	b.n	800a7c8 <_malloc_r+0xa8>
 800a7f0:	4623      	mov	r3, r4
 800a7f2:	6864      	ldr	r4, [r4, #4]
 800a7f4:	e7ae      	b.n	800a754 <_malloc_r+0x34>
 800a7f6:	463c      	mov	r4, r7
 800a7f8:	687f      	ldr	r7, [r7, #4]
 800a7fa:	e7b6      	b.n	800a76a <_malloc_r+0x4a>
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	42a3      	cmp	r3, r4
 800a802:	d1fb      	bne.n	800a7fc <_malloc_r+0xdc>
 800a804:	2300      	movs	r3, #0
 800a806:	6053      	str	r3, [r2, #4]
 800a808:	e7de      	b.n	800a7c8 <_malloc_r+0xa8>
 800a80a:	230c      	movs	r3, #12
 800a80c:	6033      	str	r3, [r6, #0]
 800a80e:	4630      	mov	r0, r6
 800a810:	f000 f80c 	bl	800a82c <__malloc_unlock>
 800a814:	e794      	b.n	800a740 <_malloc_r+0x20>
 800a816:	6005      	str	r5, [r0, #0]
 800a818:	e7d6      	b.n	800a7c8 <_malloc_r+0xa8>
 800a81a:	bf00      	nop
 800a81c:	200050d0 	.word	0x200050d0

0800a820 <__malloc_lock>:
 800a820:	4801      	ldr	r0, [pc, #4]	@ (800a828 <__malloc_lock+0x8>)
 800a822:	f7ff bf00 	b.w	800a626 <__retarget_lock_acquire_recursive>
 800a826:	bf00      	nop
 800a828:	200050c8 	.word	0x200050c8

0800a82c <__malloc_unlock>:
 800a82c:	4801      	ldr	r0, [pc, #4]	@ (800a834 <__malloc_unlock+0x8>)
 800a82e:	f7ff befb 	b.w	800a628 <__retarget_lock_release_recursive>
 800a832:	bf00      	nop
 800a834:	200050c8 	.word	0x200050c8

0800a838 <__sfputc_r>:
 800a838:	6893      	ldr	r3, [r2, #8]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	b410      	push	{r4}
 800a840:	6093      	str	r3, [r2, #8]
 800a842:	da08      	bge.n	800a856 <__sfputc_r+0x1e>
 800a844:	6994      	ldr	r4, [r2, #24]
 800a846:	42a3      	cmp	r3, r4
 800a848:	db01      	blt.n	800a84e <__sfputc_r+0x16>
 800a84a:	290a      	cmp	r1, #10
 800a84c:	d103      	bne.n	800a856 <__sfputc_r+0x1e>
 800a84e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a852:	f000 bb6d 	b.w	800af30 <__swbuf_r>
 800a856:	6813      	ldr	r3, [r2, #0]
 800a858:	1c58      	adds	r0, r3, #1
 800a85a:	6010      	str	r0, [r2, #0]
 800a85c:	7019      	strb	r1, [r3, #0]
 800a85e:	4608      	mov	r0, r1
 800a860:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <__sfputs_r>:
 800a866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a868:	4606      	mov	r6, r0
 800a86a:	460f      	mov	r7, r1
 800a86c:	4614      	mov	r4, r2
 800a86e:	18d5      	adds	r5, r2, r3
 800a870:	42ac      	cmp	r4, r5
 800a872:	d101      	bne.n	800a878 <__sfputs_r+0x12>
 800a874:	2000      	movs	r0, #0
 800a876:	e007      	b.n	800a888 <__sfputs_r+0x22>
 800a878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a87c:	463a      	mov	r2, r7
 800a87e:	4630      	mov	r0, r6
 800a880:	f7ff ffda 	bl	800a838 <__sfputc_r>
 800a884:	1c43      	adds	r3, r0, #1
 800a886:	d1f3      	bne.n	800a870 <__sfputs_r+0xa>
 800a888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a88c <_vfiprintf_r>:
 800a88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a890:	460d      	mov	r5, r1
 800a892:	b09d      	sub	sp, #116	@ 0x74
 800a894:	4614      	mov	r4, r2
 800a896:	4698      	mov	r8, r3
 800a898:	4606      	mov	r6, r0
 800a89a:	b118      	cbz	r0, 800a8a4 <_vfiprintf_r+0x18>
 800a89c:	6a03      	ldr	r3, [r0, #32]
 800a89e:	b90b      	cbnz	r3, 800a8a4 <_vfiprintf_r+0x18>
 800a8a0:	f7ff fd66 	bl	800a370 <__sinit>
 800a8a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8a6:	07d9      	lsls	r1, r3, #31
 800a8a8:	d405      	bmi.n	800a8b6 <_vfiprintf_r+0x2a>
 800a8aa:	89ab      	ldrh	r3, [r5, #12]
 800a8ac:	059a      	lsls	r2, r3, #22
 800a8ae:	d402      	bmi.n	800a8b6 <_vfiprintf_r+0x2a>
 800a8b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8b2:	f7ff feb8 	bl	800a626 <__retarget_lock_acquire_recursive>
 800a8b6:	89ab      	ldrh	r3, [r5, #12]
 800a8b8:	071b      	lsls	r3, r3, #28
 800a8ba:	d501      	bpl.n	800a8c0 <_vfiprintf_r+0x34>
 800a8bc:	692b      	ldr	r3, [r5, #16]
 800a8be:	b99b      	cbnz	r3, 800a8e8 <_vfiprintf_r+0x5c>
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	f000 fb72 	bl	800afac <__swsetup_r>
 800a8c8:	b170      	cbz	r0, 800a8e8 <_vfiprintf_r+0x5c>
 800a8ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8cc:	07dc      	lsls	r4, r3, #31
 800a8ce:	d504      	bpl.n	800a8da <_vfiprintf_r+0x4e>
 800a8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d4:	b01d      	add	sp, #116	@ 0x74
 800a8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8da:	89ab      	ldrh	r3, [r5, #12]
 800a8dc:	0598      	lsls	r0, r3, #22
 800a8de:	d4f7      	bmi.n	800a8d0 <_vfiprintf_r+0x44>
 800a8e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8e2:	f7ff fea1 	bl	800a628 <__retarget_lock_release_recursive>
 800a8e6:	e7f3      	b.n	800a8d0 <_vfiprintf_r+0x44>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8ec:	2320      	movs	r3, #32
 800a8ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8f6:	2330      	movs	r3, #48	@ 0x30
 800a8f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aaa8 <_vfiprintf_r+0x21c>
 800a8fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a900:	f04f 0901 	mov.w	r9, #1
 800a904:	4623      	mov	r3, r4
 800a906:	469a      	mov	sl, r3
 800a908:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a90c:	b10a      	cbz	r2, 800a912 <_vfiprintf_r+0x86>
 800a90e:	2a25      	cmp	r2, #37	@ 0x25
 800a910:	d1f9      	bne.n	800a906 <_vfiprintf_r+0x7a>
 800a912:	ebba 0b04 	subs.w	fp, sl, r4
 800a916:	d00b      	beq.n	800a930 <_vfiprintf_r+0xa4>
 800a918:	465b      	mov	r3, fp
 800a91a:	4622      	mov	r2, r4
 800a91c:	4629      	mov	r1, r5
 800a91e:	4630      	mov	r0, r6
 800a920:	f7ff ffa1 	bl	800a866 <__sfputs_r>
 800a924:	3001      	adds	r0, #1
 800a926:	f000 80a7 	beq.w	800aa78 <_vfiprintf_r+0x1ec>
 800a92a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a92c:	445a      	add	r2, fp
 800a92e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a930:	f89a 3000 	ldrb.w	r3, [sl]
 800a934:	2b00      	cmp	r3, #0
 800a936:	f000 809f 	beq.w	800aa78 <_vfiprintf_r+0x1ec>
 800a93a:	2300      	movs	r3, #0
 800a93c:	f04f 32ff 	mov.w	r2, #4294967295
 800a940:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a944:	f10a 0a01 	add.w	sl, sl, #1
 800a948:	9304      	str	r3, [sp, #16]
 800a94a:	9307      	str	r3, [sp, #28]
 800a94c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a950:	931a      	str	r3, [sp, #104]	@ 0x68
 800a952:	4654      	mov	r4, sl
 800a954:	2205      	movs	r2, #5
 800a956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a95a:	4853      	ldr	r0, [pc, #332]	@ (800aaa8 <_vfiprintf_r+0x21c>)
 800a95c:	f7f5 fc40 	bl	80001e0 <memchr>
 800a960:	9a04      	ldr	r2, [sp, #16]
 800a962:	b9d8      	cbnz	r0, 800a99c <_vfiprintf_r+0x110>
 800a964:	06d1      	lsls	r1, r2, #27
 800a966:	bf44      	itt	mi
 800a968:	2320      	movmi	r3, #32
 800a96a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a96e:	0713      	lsls	r3, r2, #28
 800a970:	bf44      	itt	mi
 800a972:	232b      	movmi	r3, #43	@ 0x2b
 800a974:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a978:	f89a 3000 	ldrb.w	r3, [sl]
 800a97c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a97e:	d015      	beq.n	800a9ac <_vfiprintf_r+0x120>
 800a980:	9a07      	ldr	r2, [sp, #28]
 800a982:	4654      	mov	r4, sl
 800a984:	2000      	movs	r0, #0
 800a986:	f04f 0c0a 	mov.w	ip, #10
 800a98a:	4621      	mov	r1, r4
 800a98c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a990:	3b30      	subs	r3, #48	@ 0x30
 800a992:	2b09      	cmp	r3, #9
 800a994:	d94b      	bls.n	800aa2e <_vfiprintf_r+0x1a2>
 800a996:	b1b0      	cbz	r0, 800a9c6 <_vfiprintf_r+0x13a>
 800a998:	9207      	str	r2, [sp, #28]
 800a99a:	e014      	b.n	800a9c6 <_vfiprintf_r+0x13a>
 800a99c:	eba0 0308 	sub.w	r3, r0, r8
 800a9a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	9304      	str	r3, [sp, #16]
 800a9a8:	46a2      	mov	sl, r4
 800a9aa:	e7d2      	b.n	800a952 <_vfiprintf_r+0xc6>
 800a9ac:	9b03      	ldr	r3, [sp, #12]
 800a9ae:	1d19      	adds	r1, r3, #4
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	9103      	str	r1, [sp, #12]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	bfbb      	ittet	lt
 800a9b8:	425b      	neglt	r3, r3
 800a9ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a9be:	9307      	strge	r3, [sp, #28]
 800a9c0:	9307      	strlt	r3, [sp, #28]
 800a9c2:	bfb8      	it	lt
 800a9c4:	9204      	strlt	r2, [sp, #16]
 800a9c6:	7823      	ldrb	r3, [r4, #0]
 800a9c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9ca:	d10a      	bne.n	800a9e2 <_vfiprintf_r+0x156>
 800a9cc:	7863      	ldrb	r3, [r4, #1]
 800a9ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9d0:	d132      	bne.n	800aa38 <_vfiprintf_r+0x1ac>
 800a9d2:	9b03      	ldr	r3, [sp, #12]
 800a9d4:	1d1a      	adds	r2, r3, #4
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	9203      	str	r2, [sp, #12]
 800a9da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9de:	3402      	adds	r4, #2
 800a9e0:	9305      	str	r3, [sp, #20]
 800a9e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aab8 <_vfiprintf_r+0x22c>
 800a9e6:	7821      	ldrb	r1, [r4, #0]
 800a9e8:	2203      	movs	r2, #3
 800a9ea:	4650      	mov	r0, sl
 800a9ec:	f7f5 fbf8 	bl	80001e0 <memchr>
 800a9f0:	b138      	cbz	r0, 800aa02 <_vfiprintf_r+0x176>
 800a9f2:	9b04      	ldr	r3, [sp, #16]
 800a9f4:	eba0 000a 	sub.w	r0, r0, sl
 800a9f8:	2240      	movs	r2, #64	@ 0x40
 800a9fa:	4082      	lsls	r2, r0
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	3401      	adds	r4, #1
 800aa00:	9304      	str	r3, [sp, #16]
 800aa02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa06:	4829      	ldr	r0, [pc, #164]	@ (800aaac <_vfiprintf_r+0x220>)
 800aa08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa0c:	2206      	movs	r2, #6
 800aa0e:	f7f5 fbe7 	bl	80001e0 <memchr>
 800aa12:	2800      	cmp	r0, #0
 800aa14:	d03f      	beq.n	800aa96 <_vfiprintf_r+0x20a>
 800aa16:	4b26      	ldr	r3, [pc, #152]	@ (800aab0 <_vfiprintf_r+0x224>)
 800aa18:	bb1b      	cbnz	r3, 800aa62 <_vfiprintf_r+0x1d6>
 800aa1a:	9b03      	ldr	r3, [sp, #12]
 800aa1c:	3307      	adds	r3, #7
 800aa1e:	f023 0307 	bic.w	r3, r3, #7
 800aa22:	3308      	adds	r3, #8
 800aa24:	9303      	str	r3, [sp, #12]
 800aa26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa28:	443b      	add	r3, r7
 800aa2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa2c:	e76a      	b.n	800a904 <_vfiprintf_r+0x78>
 800aa2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa32:	460c      	mov	r4, r1
 800aa34:	2001      	movs	r0, #1
 800aa36:	e7a8      	b.n	800a98a <_vfiprintf_r+0xfe>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	3401      	adds	r4, #1
 800aa3c:	9305      	str	r3, [sp, #20]
 800aa3e:	4619      	mov	r1, r3
 800aa40:	f04f 0c0a 	mov.w	ip, #10
 800aa44:	4620      	mov	r0, r4
 800aa46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa4a:	3a30      	subs	r2, #48	@ 0x30
 800aa4c:	2a09      	cmp	r2, #9
 800aa4e:	d903      	bls.n	800aa58 <_vfiprintf_r+0x1cc>
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d0c6      	beq.n	800a9e2 <_vfiprintf_r+0x156>
 800aa54:	9105      	str	r1, [sp, #20]
 800aa56:	e7c4      	b.n	800a9e2 <_vfiprintf_r+0x156>
 800aa58:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa5c:	4604      	mov	r4, r0
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e7f0      	b.n	800aa44 <_vfiprintf_r+0x1b8>
 800aa62:	ab03      	add	r3, sp, #12
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	462a      	mov	r2, r5
 800aa68:	4b12      	ldr	r3, [pc, #72]	@ (800aab4 <_vfiprintf_r+0x228>)
 800aa6a:	a904      	add	r1, sp, #16
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	f3af 8000 	nop.w
 800aa72:	4607      	mov	r7, r0
 800aa74:	1c78      	adds	r0, r7, #1
 800aa76:	d1d6      	bne.n	800aa26 <_vfiprintf_r+0x19a>
 800aa78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa7a:	07d9      	lsls	r1, r3, #31
 800aa7c:	d405      	bmi.n	800aa8a <_vfiprintf_r+0x1fe>
 800aa7e:	89ab      	ldrh	r3, [r5, #12]
 800aa80:	059a      	lsls	r2, r3, #22
 800aa82:	d402      	bmi.n	800aa8a <_vfiprintf_r+0x1fe>
 800aa84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa86:	f7ff fdcf 	bl	800a628 <__retarget_lock_release_recursive>
 800aa8a:	89ab      	ldrh	r3, [r5, #12]
 800aa8c:	065b      	lsls	r3, r3, #25
 800aa8e:	f53f af1f 	bmi.w	800a8d0 <_vfiprintf_r+0x44>
 800aa92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa94:	e71e      	b.n	800a8d4 <_vfiprintf_r+0x48>
 800aa96:	ab03      	add	r3, sp, #12
 800aa98:	9300      	str	r3, [sp, #0]
 800aa9a:	462a      	mov	r2, r5
 800aa9c:	4b05      	ldr	r3, [pc, #20]	@ (800aab4 <_vfiprintf_r+0x228>)
 800aa9e:	a904      	add	r1, sp, #16
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	f000 f879 	bl	800ab98 <_printf_i>
 800aaa6:	e7e4      	b.n	800aa72 <_vfiprintf_r+0x1e6>
 800aaa8:	0800b290 	.word	0x0800b290
 800aaac:	0800b29a 	.word	0x0800b29a
 800aab0:	00000000 	.word	0x00000000
 800aab4:	0800a867 	.word	0x0800a867
 800aab8:	0800b296 	.word	0x0800b296

0800aabc <_printf_common>:
 800aabc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aac0:	4616      	mov	r6, r2
 800aac2:	4698      	mov	r8, r3
 800aac4:	688a      	ldr	r2, [r1, #8]
 800aac6:	690b      	ldr	r3, [r1, #16]
 800aac8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aacc:	4293      	cmp	r3, r2
 800aace:	bfb8      	it	lt
 800aad0:	4613      	movlt	r3, r2
 800aad2:	6033      	str	r3, [r6, #0]
 800aad4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aad8:	4607      	mov	r7, r0
 800aada:	460c      	mov	r4, r1
 800aadc:	b10a      	cbz	r2, 800aae2 <_printf_common+0x26>
 800aade:	3301      	adds	r3, #1
 800aae0:	6033      	str	r3, [r6, #0]
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	0699      	lsls	r1, r3, #26
 800aae6:	bf42      	ittt	mi
 800aae8:	6833      	ldrmi	r3, [r6, #0]
 800aaea:	3302      	addmi	r3, #2
 800aaec:	6033      	strmi	r3, [r6, #0]
 800aaee:	6825      	ldr	r5, [r4, #0]
 800aaf0:	f015 0506 	ands.w	r5, r5, #6
 800aaf4:	d106      	bne.n	800ab04 <_printf_common+0x48>
 800aaf6:	f104 0a19 	add.w	sl, r4, #25
 800aafa:	68e3      	ldr	r3, [r4, #12]
 800aafc:	6832      	ldr	r2, [r6, #0]
 800aafe:	1a9b      	subs	r3, r3, r2
 800ab00:	42ab      	cmp	r3, r5
 800ab02:	dc26      	bgt.n	800ab52 <_printf_common+0x96>
 800ab04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab08:	6822      	ldr	r2, [r4, #0]
 800ab0a:	3b00      	subs	r3, #0
 800ab0c:	bf18      	it	ne
 800ab0e:	2301      	movne	r3, #1
 800ab10:	0692      	lsls	r2, r2, #26
 800ab12:	d42b      	bmi.n	800ab6c <_printf_common+0xb0>
 800ab14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab18:	4641      	mov	r1, r8
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	47c8      	blx	r9
 800ab1e:	3001      	adds	r0, #1
 800ab20:	d01e      	beq.n	800ab60 <_printf_common+0xa4>
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	6922      	ldr	r2, [r4, #16]
 800ab26:	f003 0306 	and.w	r3, r3, #6
 800ab2a:	2b04      	cmp	r3, #4
 800ab2c:	bf02      	ittt	eq
 800ab2e:	68e5      	ldreq	r5, [r4, #12]
 800ab30:	6833      	ldreq	r3, [r6, #0]
 800ab32:	1aed      	subeq	r5, r5, r3
 800ab34:	68a3      	ldr	r3, [r4, #8]
 800ab36:	bf0c      	ite	eq
 800ab38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab3c:	2500      	movne	r5, #0
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	bfc4      	itt	gt
 800ab42:	1a9b      	subgt	r3, r3, r2
 800ab44:	18ed      	addgt	r5, r5, r3
 800ab46:	2600      	movs	r6, #0
 800ab48:	341a      	adds	r4, #26
 800ab4a:	42b5      	cmp	r5, r6
 800ab4c:	d11a      	bne.n	800ab84 <_printf_common+0xc8>
 800ab4e:	2000      	movs	r0, #0
 800ab50:	e008      	b.n	800ab64 <_printf_common+0xa8>
 800ab52:	2301      	movs	r3, #1
 800ab54:	4652      	mov	r2, sl
 800ab56:	4641      	mov	r1, r8
 800ab58:	4638      	mov	r0, r7
 800ab5a:	47c8      	blx	r9
 800ab5c:	3001      	adds	r0, #1
 800ab5e:	d103      	bne.n	800ab68 <_printf_common+0xac>
 800ab60:	f04f 30ff 	mov.w	r0, #4294967295
 800ab64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab68:	3501      	adds	r5, #1
 800ab6a:	e7c6      	b.n	800aafa <_printf_common+0x3e>
 800ab6c:	18e1      	adds	r1, r4, r3
 800ab6e:	1c5a      	adds	r2, r3, #1
 800ab70:	2030      	movs	r0, #48	@ 0x30
 800ab72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ab76:	4422      	add	r2, r4
 800ab78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ab7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ab80:	3302      	adds	r3, #2
 800ab82:	e7c7      	b.n	800ab14 <_printf_common+0x58>
 800ab84:	2301      	movs	r3, #1
 800ab86:	4622      	mov	r2, r4
 800ab88:	4641      	mov	r1, r8
 800ab8a:	4638      	mov	r0, r7
 800ab8c:	47c8      	blx	r9
 800ab8e:	3001      	adds	r0, #1
 800ab90:	d0e6      	beq.n	800ab60 <_printf_common+0xa4>
 800ab92:	3601      	adds	r6, #1
 800ab94:	e7d9      	b.n	800ab4a <_printf_common+0x8e>
	...

0800ab98 <_printf_i>:
 800ab98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab9c:	7e0f      	ldrb	r7, [r1, #24]
 800ab9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aba0:	2f78      	cmp	r7, #120	@ 0x78
 800aba2:	4691      	mov	r9, r2
 800aba4:	4680      	mov	r8, r0
 800aba6:	460c      	mov	r4, r1
 800aba8:	469a      	mov	sl, r3
 800abaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800abae:	d807      	bhi.n	800abc0 <_printf_i+0x28>
 800abb0:	2f62      	cmp	r7, #98	@ 0x62
 800abb2:	d80a      	bhi.n	800abca <_printf_i+0x32>
 800abb4:	2f00      	cmp	r7, #0
 800abb6:	f000 80d2 	beq.w	800ad5e <_printf_i+0x1c6>
 800abba:	2f58      	cmp	r7, #88	@ 0x58
 800abbc:	f000 80b9 	beq.w	800ad32 <_printf_i+0x19a>
 800abc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800abc8:	e03a      	b.n	800ac40 <_printf_i+0xa8>
 800abca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800abce:	2b15      	cmp	r3, #21
 800abd0:	d8f6      	bhi.n	800abc0 <_printf_i+0x28>
 800abd2:	a101      	add	r1, pc, #4	@ (adr r1, 800abd8 <_printf_i+0x40>)
 800abd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abd8:	0800ac31 	.word	0x0800ac31
 800abdc:	0800ac45 	.word	0x0800ac45
 800abe0:	0800abc1 	.word	0x0800abc1
 800abe4:	0800abc1 	.word	0x0800abc1
 800abe8:	0800abc1 	.word	0x0800abc1
 800abec:	0800abc1 	.word	0x0800abc1
 800abf0:	0800ac45 	.word	0x0800ac45
 800abf4:	0800abc1 	.word	0x0800abc1
 800abf8:	0800abc1 	.word	0x0800abc1
 800abfc:	0800abc1 	.word	0x0800abc1
 800ac00:	0800abc1 	.word	0x0800abc1
 800ac04:	0800ad45 	.word	0x0800ad45
 800ac08:	0800ac6f 	.word	0x0800ac6f
 800ac0c:	0800acff 	.word	0x0800acff
 800ac10:	0800abc1 	.word	0x0800abc1
 800ac14:	0800abc1 	.word	0x0800abc1
 800ac18:	0800ad67 	.word	0x0800ad67
 800ac1c:	0800abc1 	.word	0x0800abc1
 800ac20:	0800ac6f 	.word	0x0800ac6f
 800ac24:	0800abc1 	.word	0x0800abc1
 800ac28:	0800abc1 	.word	0x0800abc1
 800ac2c:	0800ad07 	.word	0x0800ad07
 800ac30:	6833      	ldr	r3, [r6, #0]
 800ac32:	1d1a      	adds	r2, r3, #4
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	6032      	str	r2, [r6, #0]
 800ac38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac40:	2301      	movs	r3, #1
 800ac42:	e09d      	b.n	800ad80 <_printf_i+0x1e8>
 800ac44:	6833      	ldr	r3, [r6, #0]
 800ac46:	6820      	ldr	r0, [r4, #0]
 800ac48:	1d19      	adds	r1, r3, #4
 800ac4a:	6031      	str	r1, [r6, #0]
 800ac4c:	0606      	lsls	r6, r0, #24
 800ac4e:	d501      	bpl.n	800ac54 <_printf_i+0xbc>
 800ac50:	681d      	ldr	r5, [r3, #0]
 800ac52:	e003      	b.n	800ac5c <_printf_i+0xc4>
 800ac54:	0645      	lsls	r5, r0, #25
 800ac56:	d5fb      	bpl.n	800ac50 <_printf_i+0xb8>
 800ac58:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac5c:	2d00      	cmp	r5, #0
 800ac5e:	da03      	bge.n	800ac68 <_printf_i+0xd0>
 800ac60:	232d      	movs	r3, #45	@ 0x2d
 800ac62:	426d      	negs	r5, r5
 800ac64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac68:	4859      	ldr	r0, [pc, #356]	@ (800add0 <_printf_i+0x238>)
 800ac6a:	230a      	movs	r3, #10
 800ac6c:	e011      	b.n	800ac92 <_printf_i+0xfa>
 800ac6e:	6821      	ldr	r1, [r4, #0]
 800ac70:	6833      	ldr	r3, [r6, #0]
 800ac72:	0608      	lsls	r0, r1, #24
 800ac74:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac78:	d402      	bmi.n	800ac80 <_printf_i+0xe8>
 800ac7a:	0649      	lsls	r1, r1, #25
 800ac7c:	bf48      	it	mi
 800ac7e:	b2ad      	uxthmi	r5, r5
 800ac80:	2f6f      	cmp	r7, #111	@ 0x6f
 800ac82:	4853      	ldr	r0, [pc, #332]	@ (800add0 <_printf_i+0x238>)
 800ac84:	6033      	str	r3, [r6, #0]
 800ac86:	bf14      	ite	ne
 800ac88:	230a      	movne	r3, #10
 800ac8a:	2308      	moveq	r3, #8
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac92:	6866      	ldr	r6, [r4, #4]
 800ac94:	60a6      	str	r6, [r4, #8]
 800ac96:	2e00      	cmp	r6, #0
 800ac98:	bfa2      	ittt	ge
 800ac9a:	6821      	ldrge	r1, [r4, #0]
 800ac9c:	f021 0104 	bicge.w	r1, r1, #4
 800aca0:	6021      	strge	r1, [r4, #0]
 800aca2:	b90d      	cbnz	r5, 800aca8 <_printf_i+0x110>
 800aca4:	2e00      	cmp	r6, #0
 800aca6:	d04b      	beq.n	800ad40 <_printf_i+0x1a8>
 800aca8:	4616      	mov	r6, r2
 800acaa:	fbb5 f1f3 	udiv	r1, r5, r3
 800acae:	fb03 5711 	mls	r7, r3, r1, r5
 800acb2:	5dc7      	ldrb	r7, [r0, r7]
 800acb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800acb8:	462f      	mov	r7, r5
 800acba:	42bb      	cmp	r3, r7
 800acbc:	460d      	mov	r5, r1
 800acbe:	d9f4      	bls.n	800acaa <_printf_i+0x112>
 800acc0:	2b08      	cmp	r3, #8
 800acc2:	d10b      	bne.n	800acdc <_printf_i+0x144>
 800acc4:	6823      	ldr	r3, [r4, #0]
 800acc6:	07df      	lsls	r7, r3, #31
 800acc8:	d508      	bpl.n	800acdc <_printf_i+0x144>
 800acca:	6923      	ldr	r3, [r4, #16]
 800accc:	6861      	ldr	r1, [r4, #4]
 800acce:	4299      	cmp	r1, r3
 800acd0:	bfde      	ittt	le
 800acd2:	2330      	movle	r3, #48	@ 0x30
 800acd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800acd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800acdc:	1b92      	subs	r2, r2, r6
 800acde:	6122      	str	r2, [r4, #16]
 800ace0:	f8cd a000 	str.w	sl, [sp]
 800ace4:	464b      	mov	r3, r9
 800ace6:	aa03      	add	r2, sp, #12
 800ace8:	4621      	mov	r1, r4
 800acea:	4640      	mov	r0, r8
 800acec:	f7ff fee6 	bl	800aabc <_printf_common>
 800acf0:	3001      	adds	r0, #1
 800acf2:	d14a      	bne.n	800ad8a <_printf_i+0x1f2>
 800acf4:	f04f 30ff 	mov.w	r0, #4294967295
 800acf8:	b004      	add	sp, #16
 800acfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acfe:	6823      	ldr	r3, [r4, #0]
 800ad00:	f043 0320 	orr.w	r3, r3, #32
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	4833      	ldr	r0, [pc, #204]	@ (800add4 <_printf_i+0x23c>)
 800ad08:	2778      	movs	r7, #120	@ 0x78
 800ad0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	6831      	ldr	r1, [r6, #0]
 800ad12:	061f      	lsls	r7, r3, #24
 800ad14:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad18:	d402      	bmi.n	800ad20 <_printf_i+0x188>
 800ad1a:	065f      	lsls	r7, r3, #25
 800ad1c:	bf48      	it	mi
 800ad1e:	b2ad      	uxthmi	r5, r5
 800ad20:	6031      	str	r1, [r6, #0]
 800ad22:	07d9      	lsls	r1, r3, #31
 800ad24:	bf44      	itt	mi
 800ad26:	f043 0320 	orrmi.w	r3, r3, #32
 800ad2a:	6023      	strmi	r3, [r4, #0]
 800ad2c:	b11d      	cbz	r5, 800ad36 <_printf_i+0x19e>
 800ad2e:	2310      	movs	r3, #16
 800ad30:	e7ac      	b.n	800ac8c <_printf_i+0xf4>
 800ad32:	4827      	ldr	r0, [pc, #156]	@ (800add0 <_printf_i+0x238>)
 800ad34:	e7e9      	b.n	800ad0a <_printf_i+0x172>
 800ad36:	6823      	ldr	r3, [r4, #0]
 800ad38:	f023 0320 	bic.w	r3, r3, #32
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	e7f6      	b.n	800ad2e <_printf_i+0x196>
 800ad40:	4616      	mov	r6, r2
 800ad42:	e7bd      	b.n	800acc0 <_printf_i+0x128>
 800ad44:	6833      	ldr	r3, [r6, #0]
 800ad46:	6825      	ldr	r5, [r4, #0]
 800ad48:	6961      	ldr	r1, [r4, #20]
 800ad4a:	1d18      	adds	r0, r3, #4
 800ad4c:	6030      	str	r0, [r6, #0]
 800ad4e:	062e      	lsls	r6, r5, #24
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	d501      	bpl.n	800ad58 <_printf_i+0x1c0>
 800ad54:	6019      	str	r1, [r3, #0]
 800ad56:	e002      	b.n	800ad5e <_printf_i+0x1c6>
 800ad58:	0668      	lsls	r0, r5, #25
 800ad5a:	d5fb      	bpl.n	800ad54 <_printf_i+0x1bc>
 800ad5c:	8019      	strh	r1, [r3, #0]
 800ad5e:	2300      	movs	r3, #0
 800ad60:	6123      	str	r3, [r4, #16]
 800ad62:	4616      	mov	r6, r2
 800ad64:	e7bc      	b.n	800ace0 <_printf_i+0x148>
 800ad66:	6833      	ldr	r3, [r6, #0]
 800ad68:	1d1a      	adds	r2, r3, #4
 800ad6a:	6032      	str	r2, [r6, #0]
 800ad6c:	681e      	ldr	r6, [r3, #0]
 800ad6e:	6862      	ldr	r2, [r4, #4]
 800ad70:	2100      	movs	r1, #0
 800ad72:	4630      	mov	r0, r6
 800ad74:	f7f5 fa34 	bl	80001e0 <memchr>
 800ad78:	b108      	cbz	r0, 800ad7e <_printf_i+0x1e6>
 800ad7a:	1b80      	subs	r0, r0, r6
 800ad7c:	6060      	str	r0, [r4, #4]
 800ad7e:	6863      	ldr	r3, [r4, #4]
 800ad80:	6123      	str	r3, [r4, #16]
 800ad82:	2300      	movs	r3, #0
 800ad84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad88:	e7aa      	b.n	800ace0 <_printf_i+0x148>
 800ad8a:	6923      	ldr	r3, [r4, #16]
 800ad8c:	4632      	mov	r2, r6
 800ad8e:	4649      	mov	r1, r9
 800ad90:	4640      	mov	r0, r8
 800ad92:	47d0      	blx	sl
 800ad94:	3001      	adds	r0, #1
 800ad96:	d0ad      	beq.n	800acf4 <_printf_i+0x15c>
 800ad98:	6823      	ldr	r3, [r4, #0]
 800ad9a:	079b      	lsls	r3, r3, #30
 800ad9c:	d413      	bmi.n	800adc6 <_printf_i+0x22e>
 800ad9e:	68e0      	ldr	r0, [r4, #12]
 800ada0:	9b03      	ldr	r3, [sp, #12]
 800ada2:	4298      	cmp	r0, r3
 800ada4:	bfb8      	it	lt
 800ada6:	4618      	movlt	r0, r3
 800ada8:	e7a6      	b.n	800acf8 <_printf_i+0x160>
 800adaa:	2301      	movs	r3, #1
 800adac:	4632      	mov	r2, r6
 800adae:	4649      	mov	r1, r9
 800adb0:	4640      	mov	r0, r8
 800adb2:	47d0      	blx	sl
 800adb4:	3001      	adds	r0, #1
 800adb6:	d09d      	beq.n	800acf4 <_printf_i+0x15c>
 800adb8:	3501      	adds	r5, #1
 800adba:	68e3      	ldr	r3, [r4, #12]
 800adbc:	9903      	ldr	r1, [sp, #12]
 800adbe:	1a5b      	subs	r3, r3, r1
 800adc0:	42ab      	cmp	r3, r5
 800adc2:	dcf2      	bgt.n	800adaa <_printf_i+0x212>
 800adc4:	e7eb      	b.n	800ad9e <_printf_i+0x206>
 800adc6:	2500      	movs	r5, #0
 800adc8:	f104 0619 	add.w	r6, r4, #25
 800adcc:	e7f5      	b.n	800adba <_printf_i+0x222>
 800adce:	bf00      	nop
 800add0:	0800b2a1 	.word	0x0800b2a1
 800add4:	0800b2b2 	.word	0x0800b2b2

0800add8 <__sflush_r>:
 800add8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800addc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade0:	0716      	lsls	r6, r2, #28
 800ade2:	4605      	mov	r5, r0
 800ade4:	460c      	mov	r4, r1
 800ade6:	d454      	bmi.n	800ae92 <__sflush_r+0xba>
 800ade8:	684b      	ldr	r3, [r1, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	dc02      	bgt.n	800adf4 <__sflush_r+0x1c>
 800adee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	dd48      	ble.n	800ae86 <__sflush_r+0xae>
 800adf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800adf6:	2e00      	cmp	r6, #0
 800adf8:	d045      	beq.n	800ae86 <__sflush_r+0xae>
 800adfa:	2300      	movs	r3, #0
 800adfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae00:	682f      	ldr	r7, [r5, #0]
 800ae02:	6a21      	ldr	r1, [r4, #32]
 800ae04:	602b      	str	r3, [r5, #0]
 800ae06:	d030      	beq.n	800ae6a <__sflush_r+0x92>
 800ae08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae0a:	89a3      	ldrh	r3, [r4, #12]
 800ae0c:	0759      	lsls	r1, r3, #29
 800ae0e:	d505      	bpl.n	800ae1c <__sflush_r+0x44>
 800ae10:	6863      	ldr	r3, [r4, #4]
 800ae12:	1ad2      	subs	r2, r2, r3
 800ae14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae16:	b10b      	cbz	r3, 800ae1c <__sflush_r+0x44>
 800ae18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae1a:	1ad2      	subs	r2, r2, r3
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae20:	6a21      	ldr	r1, [r4, #32]
 800ae22:	4628      	mov	r0, r5
 800ae24:	47b0      	blx	r6
 800ae26:	1c43      	adds	r3, r0, #1
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	d106      	bne.n	800ae3a <__sflush_r+0x62>
 800ae2c:	6829      	ldr	r1, [r5, #0]
 800ae2e:	291d      	cmp	r1, #29
 800ae30:	d82b      	bhi.n	800ae8a <__sflush_r+0xb2>
 800ae32:	4a2a      	ldr	r2, [pc, #168]	@ (800aedc <__sflush_r+0x104>)
 800ae34:	410a      	asrs	r2, r1
 800ae36:	07d6      	lsls	r6, r2, #31
 800ae38:	d427      	bmi.n	800ae8a <__sflush_r+0xb2>
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	6062      	str	r2, [r4, #4]
 800ae3e:	04d9      	lsls	r1, r3, #19
 800ae40:	6922      	ldr	r2, [r4, #16]
 800ae42:	6022      	str	r2, [r4, #0]
 800ae44:	d504      	bpl.n	800ae50 <__sflush_r+0x78>
 800ae46:	1c42      	adds	r2, r0, #1
 800ae48:	d101      	bne.n	800ae4e <__sflush_r+0x76>
 800ae4a:	682b      	ldr	r3, [r5, #0]
 800ae4c:	b903      	cbnz	r3, 800ae50 <__sflush_r+0x78>
 800ae4e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ae50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae52:	602f      	str	r7, [r5, #0]
 800ae54:	b1b9      	cbz	r1, 800ae86 <__sflush_r+0xae>
 800ae56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae5a:	4299      	cmp	r1, r3
 800ae5c:	d002      	beq.n	800ae64 <__sflush_r+0x8c>
 800ae5e:	4628      	mov	r0, r5
 800ae60:	f7ff fbf2 	bl	800a648 <_free_r>
 800ae64:	2300      	movs	r3, #0
 800ae66:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae68:	e00d      	b.n	800ae86 <__sflush_r+0xae>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	47b0      	blx	r6
 800ae70:	4602      	mov	r2, r0
 800ae72:	1c50      	adds	r0, r2, #1
 800ae74:	d1c9      	bne.n	800ae0a <__sflush_r+0x32>
 800ae76:	682b      	ldr	r3, [r5, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d0c6      	beq.n	800ae0a <__sflush_r+0x32>
 800ae7c:	2b1d      	cmp	r3, #29
 800ae7e:	d001      	beq.n	800ae84 <__sflush_r+0xac>
 800ae80:	2b16      	cmp	r3, #22
 800ae82:	d11e      	bne.n	800aec2 <__sflush_r+0xea>
 800ae84:	602f      	str	r7, [r5, #0]
 800ae86:	2000      	movs	r0, #0
 800ae88:	e022      	b.n	800aed0 <__sflush_r+0xf8>
 800ae8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae8e:	b21b      	sxth	r3, r3
 800ae90:	e01b      	b.n	800aeca <__sflush_r+0xf2>
 800ae92:	690f      	ldr	r7, [r1, #16]
 800ae94:	2f00      	cmp	r7, #0
 800ae96:	d0f6      	beq.n	800ae86 <__sflush_r+0xae>
 800ae98:	0793      	lsls	r3, r2, #30
 800ae9a:	680e      	ldr	r6, [r1, #0]
 800ae9c:	bf08      	it	eq
 800ae9e:	694b      	ldreq	r3, [r1, #20]
 800aea0:	600f      	str	r7, [r1, #0]
 800aea2:	bf18      	it	ne
 800aea4:	2300      	movne	r3, #0
 800aea6:	eba6 0807 	sub.w	r8, r6, r7
 800aeaa:	608b      	str	r3, [r1, #8]
 800aeac:	f1b8 0f00 	cmp.w	r8, #0
 800aeb0:	dde9      	ble.n	800ae86 <__sflush_r+0xae>
 800aeb2:	6a21      	ldr	r1, [r4, #32]
 800aeb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aeb6:	4643      	mov	r3, r8
 800aeb8:	463a      	mov	r2, r7
 800aeba:	4628      	mov	r0, r5
 800aebc:	47b0      	blx	r6
 800aebe:	2800      	cmp	r0, #0
 800aec0:	dc08      	bgt.n	800aed4 <__sflush_r+0xfc>
 800aec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeca:	81a3      	strh	r3, [r4, #12]
 800aecc:	f04f 30ff 	mov.w	r0, #4294967295
 800aed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed4:	4407      	add	r7, r0
 800aed6:	eba8 0800 	sub.w	r8, r8, r0
 800aeda:	e7e7      	b.n	800aeac <__sflush_r+0xd4>
 800aedc:	dfbffffe 	.word	0xdfbffffe

0800aee0 <_fflush_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	690b      	ldr	r3, [r1, #16]
 800aee4:	4605      	mov	r5, r0
 800aee6:	460c      	mov	r4, r1
 800aee8:	b913      	cbnz	r3, 800aef0 <_fflush_r+0x10>
 800aeea:	2500      	movs	r5, #0
 800aeec:	4628      	mov	r0, r5
 800aeee:	bd38      	pop	{r3, r4, r5, pc}
 800aef0:	b118      	cbz	r0, 800aefa <_fflush_r+0x1a>
 800aef2:	6a03      	ldr	r3, [r0, #32]
 800aef4:	b90b      	cbnz	r3, 800aefa <_fflush_r+0x1a>
 800aef6:	f7ff fa3b 	bl	800a370 <__sinit>
 800aefa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d0f3      	beq.n	800aeea <_fflush_r+0xa>
 800af02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af04:	07d0      	lsls	r0, r2, #31
 800af06:	d404      	bmi.n	800af12 <_fflush_r+0x32>
 800af08:	0599      	lsls	r1, r3, #22
 800af0a:	d402      	bmi.n	800af12 <_fflush_r+0x32>
 800af0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af0e:	f7ff fb8a 	bl	800a626 <__retarget_lock_acquire_recursive>
 800af12:	4628      	mov	r0, r5
 800af14:	4621      	mov	r1, r4
 800af16:	f7ff ff5f 	bl	800add8 <__sflush_r>
 800af1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af1c:	07da      	lsls	r2, r3, #31
 800af1e:	4605      	mov	r5, r0
 800af20:	d4e4      	bmi.n	800aeec <_fflush_r+0xc>
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	059b      	lsls	r3, r3, #22
 800af26:	d4e1      	bmi.n	800aeec <_fflush_r+0xc>
 800af28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af2a:	f7ff fb7d 	bl	800a628 <__retarget_lock_release_recursive>
 800af2e:	e7dd      	b.n	800aeec <_fflush_r+0xc>

0800af30 <__swbuf_r>:
 800af30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af32:	460e      	mov	r6, r1
 800af34:	4614      	mov	r4, r2
 800af36:	4605      	mov	r5, r0
 800af38:	b118      	cbz	r0, 800af42 <__swbuf_r+0x12>
 800af3a:	6a03      	ldr	r3, [r0, #32]
 800af3c:	b90b      	cbnz	r3, 800af42 <__swbuf_r+0x12>
 800af3e:	f7ff fa17 	bl	800a370 <__sinit>
 800af42:	69a3      	ldr	r3, [r4, #24]
 800af44:	60a3      	str	r3, [r4, #8]
 800af46:	89a3      	ldrh	r3, [r4, #12]
 800af48:	071a      	lsls	r2, r3, #28
 800af4a:	d501      	bpl.n	800af50 <__swbuf_r+0x20>
 800af4c:	6923      	ldr	r3, [r4, #16]
 800af4e:	b943      	cbnz	r3, 800af62 <__swbuf_r+0x32>
 800af50:	4621      	mov	r1, r4
 800af52:	4628      	mov	r0, r5
 800af54:	f000 f82a 	bl	800afac <__swsetup_r>
 800af58:	b118      	cbz	r0, 800af62 <__swbuf_r+0x32>
 800af5a:	f04f 37ff 	mov.w	r7, #4294967295
 800af5e:	4638      	mov	r0, r7
 800af60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af62:	6823      	ldr	r3, [r4, #0]
 800af64:	6922      	ldr	r2, [r4, #16]
 800af66:	1a98      	subs	r0, r3, r2
 800af68:	6963      	ldr	r3, [r4, #20]
 800af6a:	b2f6      	uxtb	r6, r6
 800af6c:	4283      	cmp	r3, r0
 800af6e:	4637      	mov	r7, r6
 800af70:	dc05      	bgt.n	800af7e <__swbuf_r+0x4e>
 800af72:	4621      	mov	r1, r4
 800af74:	4628      	mov	r0, r5
 800af76:	f7ff ffb3 	bl	800aee0 <_fflush_r>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d1ed      	bne.n	800af5a <__swbuf_r+0x2a>
 800af7e:	68a3      	ldr	r3, [r4, #8]
 800af80:	3b01      	subs	r3, #1
 800af82:	60a3      	str	r3, [r4, #8]
 800af84:	6823      	ldr	r3, [r4, #0]
 800af86:	1c5a      	adds	r2, r3, #1
 800af88:	6022      	str	r2, [r4, #0]
 800af8a:	701e      	strb	r6, [r3, #0]
 800af8c:	6962      	ldr	r2, [r4, #20]
 800af8e:	1c43      	adds	r3, r0, #1
 800af90:	429a      	cmp	r2, r3
 800af92:	d004      	beq.n	800af9e <__swbuf_r+0x6e>
 800af94:	89a3      	ldrh	r3, [r4, #12]
 800af96:	07db      	lsls	r3, r3, #31
 800af98:	d5e1      	bpl.n	800af5e <__swbuf_r+0x2e>
 800af9a:	2e0a      	cmp	r6, #10
 800af9c:	d1df      	bne.n	800af5e <__swbuf_r+0x2e>
 800af9e:	4621      	mov	r1, r4
 800afa0:	4628      	mov	r0, r5
 800afa2:	f7ff ff9d 	bl	800aee0 <_fflush_r>
 800afa6:	2800      	cmp	r0, #0
 800afa8:	d0d9      	beq.n	800af5e <__swbuf_r+0x2e>
 800afaa:	e7d6      	b.n	800af5a <__swbuf_r+0x2a>

0800afac <__swsetup_r>:
 800afac:	b538      	push	{r3, r4, r5, lr}
 800afae:	4b29      	ldr	r3, [pc, #164]	@ (800b054 <__swsetup_r+0xa8>)
 800afb0:	4605      	mov	r5, r0
 800afb2:	6818      	ldr	r0, [r3, #0]
 800afb4:	460c      	mov	r4, r1
 800afb6:	b118      	cbz	r0, 800afc0 <__swsetup_r+0x14>
 800afb8:	6a03      	ldr	r3, [r0, #32]
 800afba:	b90b      	cbnz	r3, 800afc0 <__swsetup_r+0x14>
 800afbc:	f7ff f9d8 	bl	800a370 <__sinit>
 800afc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afc4:	0719      	lsls	r1, r3, #28
 800afc6:	d422      	bmi.n	800b00e <__swsetup_r+0x62>
 800afc8:	06da      	lsls	r2, r3, #27
 800afca:	d407      	bmi.n	800afdc <__swsetup_r+0x30>
 800afcc:	2209      	movs	r2, #9
 800afce:	602a      	str	r2, [r5, #0]
 800afd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afd4:	81a3      	strh	r3, [r4, #12]
 800afd6:	f04f 30ff 	mov.w	r0, #4294967295
 800afda:	e033      	b.n	800b044 <__swsetup_r+0x98>
 800afdc:	0758      	lsls	r0, r3, #29
 800afde:	d512      	bpl.n	800b006 <__swsetup_r+0x5a>
 800afe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afe2:	b141      	cbz	r1, 800aff6 <__swsetup_r+0x4a>
 800afe4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afe8:	4299      	cmp	r1, r3
 800afea:	d002      	beq.n	800aff2 <__swsetup_r+0x46>
 800afec:	4628      	mov	r0, r5
 800afee:	f7ff fb2b 	bl	800a648 <_free_r>
 800aff2:	2300      	movs	r3, #0
 800aff4:	6363      	str	r3, [r4, #52]	@ 0x34
 800aff6:	89a3      	ldrh	r3, [r4, #12]
 800aff8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800affc:	81a3      	strh	r3, [r4, #12]
 800affe:	2300      	movs	r3, #0
 800b000:	6063      	str	r3, [r4, #4]
 800b002:	6923      	ldr	r3, [r4, #16]
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	89a3      	ldrh	r3, [r4, #12]
 800b008:	f043 0308 	orr.w	r3, r3, #8
 800b00c:	81a3      	strh	r3, [r4, #12]
 800b00e:	6923      	ldr	r3, [r4, #16]
 800b010:	b94b      	cbnz	r3, 800b026 <__swsetup_r+0x7a>
 800b012:	89a3      	ldrh	r3, [r4, #12]
 800b014:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b01c:	d003      	beq.n	800b026 <__swsetup_r+0x7a>
 800b01e:	4621      	mov	r1, r4
 800b020:	4628      	mov	r0, r5
 800b022:	f000 f84f 	bl	800b0c4 <__smakebuf_r>
 800b026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b02a:	f013 0201 	ands.w	r2, r3, #1
 800b02e:	d00a      	beq.n	800b046 <__swsetup_r+0x9a>
 800b030:	2200      	movs	r2, #0
 800b032:	60a2      	str	r2, [r4, #8]
 800b034:	6962      	ldr	r2, [r4, #20]
 800b036:	4252      	negs	r2, r2
 800b038:	61a2      	str	r2, [r4, #24]
 800b03a:	6922      	ldr	r2, [r4, #16]
 800b03c:	b942      	cbnz	r2, 800b050 <__swsetup_r+0xa4>
 800b03e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b042:	d1c5      	bne.n	800afd0 <__swsetup_r+0x24>
 800b044:	bd38      	pop	{r3, r4, r5, pc}
 800b046:	0799      	lsls	r1, r3, #30
 800b048:	bf58      	it	pl
 800b04a:	6962      	ldrpl	r2, [r4, #20]
 800b04c:	60a2      	str	r2, [r4, #8]
 800b04e:	e7f4      	b.n	800b03a <__swsetup_r+0x8e>
 800b050:	2000      	movs	r0, #0
 800b052:	e7f7      	b.n	800b044 <__swsetup_r+0x98>
 800b054:	20000020 	.word	0x20000020

0800b058 <_sbrk_r>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	4d06      	ldr	r5, [pc, #24]	@ (800b074 <_sbrk_r+0x1c>)
 800b05c:	2300      	movs	r3, #0
 800b05e:	4604      	mov	r4, r0
 800b060:	4608      	mov	r0, r1
 800b062:	602b      	str	r3, [r5, #0]
 800b064:	f7f7 f9c0 	bl	80023e8 <_sbrk>
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	d102      	bne.n	800b072 <_sbrk_r+0x1a>
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	b103      	cbz	r3, 800b072 <_sbrk_r+0x1a>
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	bd38      	pop	{r3, r4, r5, pc}
 800b074:	200050c4 	.word	0x200050c4

0800b078 <__swhatbuf_r>:
 800b078:	b570      	push	{r4, r5, r6, lr}
 800b07a:	460c      	mov	r4, r1
 800b07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b080:	2900      	cmp	r1, #0
 800b082:	b096      	sub	sp, #88	@ 0x58
 800b084:	4615      	mov	r5, r2
 800b086:	461e      	mov	r6, r3
 800b088:	da0d      	bge.n	800b0a6 <__swhatbuf_r+0x2e>
 800b08a:	89a3      	ldrh	r3, [r4, #12]
 800b08c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b090:	f04f 0100 	mov.w	r1, #0
 800b094:	bf14      	ite	ne
 800b096:	2340      	movne	r3, #64	@ 0x40
 800b098:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b09c:	2000      	movs	r0, #0
 800b09e:	6031      	str	r1, [r6, #0]
 800b0a0:	602b      	str	r3, [r5, #0]
 800b0a2:	b016      	add	sp, #88	@ 0x58
 800b0a4:	bd70      	pop	{r4, r5, r6, pc}
 800b0a6:	466a      	mov	r2, sp
 800b0a8:	f000 f848 	bl	800b13c <_fstat_r>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	dbec      	blt.n	800b08a <__swhatbuf_r+0x12>
 800b0b0:	9901      	ldr	r1, [sp, #4]
 800b0b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b0b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b0ba:	4259      	negs	r1, r3
 800b0bc:	4159      	adcs	r1, r3
 800b0be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0c2:	e7eb      	b.n	800b09c <__swhatbuf_r+0x24>

0800b0c4 <__smakebuf_r>:
 800b0c4:	898b      	ldrh	r3, [r1, #12]
 800b0c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0c8:	079d      	lsls	r5, r3, #30
 800b0ca:	4606      	mov	r6, r0
 800b0cc:	460c      	mov	r4, r1
 800b0ce:	d507      	bpl.n	800b0e0 <__smakebuf_r+0x1c>
 800b0d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	6123      	str	r3, [r4, #16]
 800b0d8:	2301      	movs	r3, #1
 800b0da:	6163      	str	r3, [r4, #20]
 800b0dc:	b003      	add	sp, #12
 800b0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0e0:	ab01      	add	r3, sp, #4
 800b0e2:	466a      	mov	r2, sp
 800b0e4:	f7ff ffc8 	bl	800b078 <__swhatbuf_r>
 800b0e8:	9f00      	ldr	r7, [sp, #0]
 800b0ea:	4605      	mov	r5, r0
 800b0ec:	4639      	mov	r1, r7
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f7ff fb16 	bl	800a720 <_malloc_r>
 800b0f4:	b948      	cbnz	r0, 800b10a <__smakebuf_r+0x46>
 800b0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0fa:	059a      	lsls	r2, r3, #22
 800b0fc:	d4ee      	bmi.n	800b0dc <__smakebuf_r+0x18>
 800b0fe:	f023 0303 	bic.w	r3, r3, #3
 800b102:	f043 0302 	orr.w	r3, r3, #2
 800b106:	81a3      	strh	r3, [r4, #12]
 800b108:	e7e2      	b.n	800b0d0 <__smakebuf_r+0xc>
 800b10a:	89a3      	ldrh	r3, [r4, #12]
 800b10c:	6020      	str	r0, [r4, #0]
 800b10e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b112:	81a3      	strh	r3, [r4, #12]
 800b114:	9b01      	ldr	r3, [sp, #4]
 800b116:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b11a:	b15b      	cbz	r3, 800b134 <__smakebuf_r+0x70>
 800b11c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b120:	4630      	mov	r0, r6
 800b122:	f000 f81d 	bl	800b160 <_isatty_r>
 800b126:	b128      	cbz	r0, 800b134 <__smakebuf_r+0x70>
 800b128:	89a3      	ldrh	r3, [r4, #12]
 800b12a:	f023 0303 	bic.w	r3, r3, #3
 800b12e:	f043 0301 	orr.w	r3, r3, #1
 800b132:	81a3      	strh	r3, [r4, #12]
 800b134:	89a3      	ldrh	r3, [r4, #12]
 800b136:	431d      	orrs	r5, r3
 800b138:	81a5      	strh	r5, [r4, #12]
 800b13a:	e7cf      	b.n	800b0dc <__smakebuf_r+0x18>

0800b13c <_fstat_r>:
 800b13c:	b538      	push	{r3, r4, r5, lr}
 800b13e:	4d07      	ldr	r5, [pc, #28]	@ (800b15c <_fstat_r+0x20>)
 800b140:	2300      	movs	r3, #0
 800b142:	4604      	mov	r4, r0
 800b144:	4608      	mov	r0, r1
 800b146:	4611      	mov	r1, r2
 800b148:	602b      	str	r3, [r5, #0]
 800b14a:	f7f7 f924 	bl	8002396 <_fstat>
 800b14e:	1c43      	adds	r3, r0, #1
 800b150:	d102      	bne.n	800b158 <_fstat_r+0x1c>
 800b152:	682b      	ldr	r3, [r5, #0]
 800b154:	b103      	cbz	r3, 800b158 <_fstat_r+0x1c>
 800b156:	6023      	str	r3, [r4, #0]
 800b158:	bd38      	pop	{r3, r4, r5, pc}
 800b15a:	bf00      	nop
 800b15c:	200050c4 	.word	0x200050c4

0800b160 <_isatty_r>:
 800b160:	b538      	push	{r3, r4, r5, lr}
 800b162:	4d06      	ldr	r5, [pc, #24]	@ (800b17c <_isatty_r+0x1c>)
 800b164:	2300      	movs	r3, #0
 800b166:	4604      	mov	r4, r0
 800b168:	4608      	mov	r0, r1
 800b16a:	602b      	str	r3, [r5, #0]
 800b16c:	f7f7 f923 	bl	80023b6 <_isatty>
 800b170:	1c43      	adds	r3, r0, #1
 800b172:	d102      	bne.n	800b17a <_isatty_r+0x1a>
 800b174:	682b      	ldr	r3, [r5, #0]
 800b176:	b103      	cbz	r3, 800b17a <_isatty_r+0x1a>
 800b178:	6023      	str	r3, [r4, #0]
 800b17a:	bd38      	pop	{r3, r4, r5, pc}
 800b17c:	200050c4 	.word	0x200050c4

0800b180 <_init>:
 800b180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b182:	bf00      	nop
 800b184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b186:	bc08      	pop	{r3}
 800b188:	469e      	mov	lr, r3
 800b18a:	4770      	bx	lr

0800b18c <_fini>:
 800b18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18e:	bf00      	nop
 800b190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b192:	bc08      	pop	{r3}
 800b194:	469e      	mov	lr, r3
 800b196:	4770      	bx	lr
