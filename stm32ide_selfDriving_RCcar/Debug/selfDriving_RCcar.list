
selfDriving_RCcar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08009888  08009888  0000a888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099c8  080099c8  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  080099c8  080099c8  0000a9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099d0  080099d0  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099d0  080099d0  0000a9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099d4  080099d4  0000a9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080099d8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dec  2000006c  08009a44  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e58  08009a44  0000be58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c189  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004255  00000000  00000000  00027225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  0002b480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001187  00000000  00000000  0002cb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aec0  00000000  00000000  0002dccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001beb7  00000000  00000000  00048b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b2f1  00000000  00000000  00064a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ffd37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000651c  00000000  00000000  000ffd7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00106298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009870 	.word	0x08009870

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08009870 	.word	0x08009870

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <delay_us>:
 */

#include "delay.h"

void delay_us(uint16_t us)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <delay_us+0x30>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2200      	movs	r2, #0
 8000580:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim10) < us);
 8000582:	bf00      	nop
 8000584:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <delay_us+0x30>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	429a      	cmp	r2, r3
 800058e:	d3f9      	bcc.n	8000584 <delay_us+0x14>
}
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	200001c8 	.word	0x200001c8

080005a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <MX_DMA_Init+0x3c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a0b      	ldr	r2, [pc, #44]	@ (80005e0 <MX_DMA_Init+0x3c>)
 80005b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <MX_DMA_Init+0x3c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2105      	movs	r1, #5
 80005ca:	203a      	movs	r0, #58	@ 0x3a
 80005cc:	f001 fbdc 	bl	8001d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005d0:	203a      	movs	r0, #58	@ 0x3a
 80005d2:	f001 fbf5 	bl	8001dc0 <HAL_NVIC_EnableIRQ>

}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800

080005e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ultsnc_left */
  ultsnc_leftHandle = osThreadNew(StartTask_ultsnc_left, NULL, &ultsnc_left_attributes);
 80005e8:	4a10      	ldr	r2, [pc, #64]	@ (800062c <MX_FREERTOS_Init+0x48>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	4810      	ldr	r0, [pc, #64]	@ (8000630 <MX_FREERTOS_Init+0x4c>)
 80005ee:	f005 fc45 	bl	8005e7c <osThreadNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000634 <MX_FREERTOS_Init+0x50>)
 80005f6:	6013      	str	r3, [r2, #0]

  /* creation of ultsnc_center */
  ultsnc_centerHandle = osThreadNew(StartTask_ultsnc_center, NULL, &ultsnc_center_attributes);
 80005f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000638 <MX_FREERTOS_Init+0x54>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	480f      	ldr	r0, [pc, #60]	@ (800063c <MX_FREERTOS_Init+0x58>)
 80005fe:	f005 fc3d 	bl	8005e7c <osThreadNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a0e      	ldr	r2, [pc, #56]	@ (8000640 <MX_FREERTOS_Init+0x5c>)
 8000606:	6013      	str	r3, [r2, #0]

  /* creation of ultsnc_right */
  ultsnc_rightHandle = osThreadNew(StartTask_ultsnc_right, NULL, &ultsnc_right_attributes);
 8000608:	4a0e      	ldr	r2, [pc, #56]	@ (8000644 <MX_FREERTOS_Init+0x60>)
 800060a:	2100      	movs	r1, #0
 800060c:	480e      	ldr	r0, [pc, #56]	@ (8000648 <MX_FREERTOS_Init+0x64>)
 800060e:	f005 fc35 	bl	8005e7c <osThreadNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a0d      	ldr	r2, [pc, #52]	@ (800064c <MX_FREERTOS_Init+0x68>)
 8000616:	6013      	str	r3, [r2, #0]

  /* creation of auto_drive */
  auto_driveHandle = osThreadNew(StartTask_auto_drive, NULL, &auto_drive_attributes);
 8000618:	4a0d      	ldr	r2, [pc, #52]	@ (8000650 <MX_FREERTOS_Init+0x6c>)
 800061a:	2100      	movs	r1, #0
 800061c:	480d      	ldr	r0, [pc, #52]	@ (8000654 <MX_FREERTOS_Init+0x70>)
 800061e:	f005 fc2d 	bl	8005e7c <osThreadNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a0c      	ldr	r2, [pc, #48]	@ (8000658 <MX_FREERTOS_Init+0x74>)
 8000626:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	080098e4 	.word	0x080098e4
 8000630:	0800065d 	.word	0x0800065d
 8000634:	20000088 	.word	0x20000088
 8000638:	08009908 	.word	0x08009908
 800063c:	080006ad 	.word	0x080006ad
 8000640:	2000008c 	.word	0x2000008c
 8000644:	0800992c 	.word	0x0800992c
 8000648:	080006fd 	.word	0x080006fd
 800064c:	20000090 	.word	0x20000090
 8000650:	08009950 	.word	0x08009950
 8000654:	0800074d 	.word	0x0800074d
 8000658:	20000094 	.word	0x20000094

0800065c <StartTask_ultsnc_left>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask_ultsnc_left */
void StartTask_ultsnc_left(void *argument)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_ultsnc_left */
  /* Infinite loop */
  for(;;)
  {
	  if (mode_auto_manu)
 8000664:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <StartTask_ultsnc_left+0x44>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0fb      	beq.n	8000664 <StartTask_ultsnc_left+0x8>
	  {
		  HAL_GPIO_WritePin(TRIG_LEFT_GPIO_Port, TRIG_LEFT_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2101      	movs	r1, #1
 8000670:	480c      	ldr	r0, [pc, #48]	@ (80006a4 <StartTask_ultsnc_left+0x48>)
 8000672:	f002 f939 	bl	80028e8 <HAL_GPIO_WritePin>
		  delay_us(10);
 8000676:	200a      	movs	r0, #10
 8000678:	f7ff ff7a 	bl	8000570 <delay_us>
		  HAL_GPIO_WritePin(TRIG_LEFT_GPIO_Port, TRIG_LEFT_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2101      	movs	r1, #1
 8000680:	4808      	ldr	r0, [pc, #32]	@ (80006a4 <StartTask_ultsnc_left+0x48>)
 8000682:	f002 f931 	bl	80028e8 <HAL_GPIO_WritePin>
		  __HAL_TIM_ENABLE_IT(&htim_echoMeasure, TIM_IT_CC1);
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <StartTask_ultsnc_left+0x4c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	68da      	ldr	r2, [r3, #12]
 800068c:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <StartTask_ultsnc_left+0x4c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f042 0202 	orr.w	r2, r2, #2
 8000694:	60da      	str	r2, [r3, #12]
		  osDelay(100);
 8000696:	2064      	movs	r0, #100	@ 0x64
 8000698:	f005 fc82 	bl	8005fa0 <osDelay>
	  if (mode_auto_manu)
 800069c:	e7e2      	b.n	8000664 <StartTask_ultsnc_left+0x8>
 800069e:	bf00      	nop
 80006a0:	200000a8 	.word	0x200000a8
 80006a4:	40020800 	.word	0x40020800
 80006a8:	20000180 	.word	0x20000180

080006ac <StartTask_ultsnc_center>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_ultsnc_center */
void StartTask_ultsnc_center(void *argument)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_ultsnc_center */
  /* Infinite loop */
  for(;;)
  {
	  if (mode_auto_manu)
 80006b4:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <StartTask_ultsnc_center+0x44>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0fb      	beq.n	80006b4 <StartTask_ultsnc_center+0x8>
	  {
		  HAL_GPIO_WritePin(TRIG_CENTER_GPIO_Port, TRIG_CENTER_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2102      	movs	r1, #2
 80006c0:	480c      	ldr	r0, [pc, #48]	@ (80006f4 <StartTask_ultsnc_center+0x48>)
 80006c2:	f002 f911 	bl	80028e8 <HAL_GPIO_WritePin>
		  delay_us(10);
 80006c6:	200a      	movs	r0, #10
 80006c8:	f7ff ff52 	bl	8000570 <delay_us>
		  HAL_GPIO_WritePin(TRIG_CENTER_GPIO_Port, TRIG_CENTER_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2102      	movs	r1, #2
 80006d0:	4808      	ldr	r0, [pc, #32]	@ (80006f4 <StartTask_ultsnc_center+0x48>)
 80006d2:	f002 f909 	bl	80028e8 <HAL_GPIO_WritePin>
		  __HAL_TIM_ENABLE_IT(&htim_echoMeasure, TIM_IT_CC2);
 80006d6:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <StartTask_ultsnc_center+0x4c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	68da      	ldr	r2, [r3, #12]
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <StartTask_ultsnc_center+0x4c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f042 0204 	orr.w	r2, r2, #4
 80006e4:	60da      	str	r2, [r3, #12]
		  osDelay(100);
 80006e6:	2064      	movs	r0, #100	@ 0x64
 80006e8:	f005 fc5a 	bl	8005fa0 <osDelay>
	  if (mode_auto_manu)
 80006ec:	e7e2      	b.n	80006b4 <StartTask_ultsnc_center+0x8>
 80006ee:	bf00      	nop
 80006f0:	200000a8 	.word	0x200000a8
 80006f4:	40020800 	.word	0x40020800
 80006f8:	20000180 	.word	0x20000180

080006fc <StartTask_ultsnc_right>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_ultsnc_right */
void StartTask_ultsnc_right(void *argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_ultsnc_right */
  /* Infinite loop */
  for(;;)
  {
	  if (mode_auto_manu)
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <StartTask_ultsnc_right+0x44>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d0fb      	beq.n	8000704 <StartTask_ultsnc_right+0x8>
	  {
		  HAL_GPIO_WritePin(TRIG_RIGHT_GPIO_Port, TRIG_RIGHT_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2101      	movs	r1, #1
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <StartTask_ultsnc_right+0x48>)
 8000712:	f002 f8e9 	bl	80028e8 <HAL_GPIO_WritePin>
		  delay_us(10);
 8000716:	200a      	movs	r0, #10
 8000718:	f7ff ff2a 	bl	8000570 <delay_us>
		  HAL_GPIO_WritePin(TRIG_RIGHT_GPIO_Port, TRIG_RIGHT_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2101      	movs	r1, #1
 8000720:	4808      	ldr	r0, [pc, #32]	@ (8000744 <StartTask_ultsnc_right+0x48>)
 8000722:	f002 f8e1 	bl	80028e8 <HAL_GPIO_WritePin>
		  __HAL_TIM_ENABLE_IT(&htim_echoMeasure, TIM_IT_CC3);
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <StartTask_ultsnc_right+0x4c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	68da      	ldr	r2, [r3, #12]
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <StartTask_ultsnc_right+0x4c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f042 0208 	orr.w	r2, r2, #8
 8000734:	60da      	str	r2, [r3, #12]
		  osDelay(100);
 8000736:	2064      	movs	r0, #100	@ 0x64
 8000738:	f005 fc32 	bl	8005fa0 <osDelay>
	  if (mode_auto_manu)
 800073c:	e7e2      	b.n	8000704 <StartTask_ultsnc_right+0x8>
 800073e:	bf00      	nop
 8000740:	200000a8 	.word	0x200000a8
 8000744:	40020400 	.word	0x40020400
 8000748:	20000180 	.word	0x20000180

0800074c <StartTask_auto_drive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_auto_drive */
void StartTask_auto_drive(void *argument)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_auto_drive */
  /* Infinite loop */
  for(;;)
  {
	if (mode_auto_manu)
 8000754:	4b2d      	ldr	r3, [pc, #180]	@ (800080c <StartTask_auto_drive+0xc0>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0fb      	beq.n	8000754 <StartTask_auto_drive+0x8>
	{
		for (uint8_t j=0; j<3; ++j)
 800075c:	2300      	movs	r3, #0
 800075e:	75fb      	strb	r3, [r7, #23]
 8000760:	e024      	b.n	80007ac <StartTask_auto_drive+0x60>
		{
			uint32_t sum_tmp = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
			for (uint8_t i=0; i<10; ++i)
 8000766:	2300      	movs	r3, #0
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	e010      	b.n	800078e <StartTask_auto_drive+0x42>
			{
				sum_tmp +=echo_time_queue[j][i];
 800076c:	7dfa      	ldrb	r2, [r7, #23]
 800076e:	7bf9      	ldrb	r1, [r7, #15]
 8000770:	4827      	ldr	r0, [pc, #156]	@ (8000810 <StartTask_auto_drive+0xc4>)
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	440b      	add	r3, r1
 800077c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000780:	461a      	mov	r2, r3
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	4413      	add	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
			for (uint8_t i=0; i<10; ++i)
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	3301      	adds	r3, #1
 800078c:	73fb      	strb	r3, [r7, #15]
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	2b09      	cmp	r3, #9
 8000792:	d9eb      	bls.n	800076c <StartTask_auto_drive+0x20>
			}
			echo_time_us[j] = sum_tmp / 10;
 8000794:	7dfb      	ldrb	r3, [r7, #23]
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	491e      	ldr	r1, [pc, #120]	@ (8000814 <StartTask_auto_drive+0xc8>)
 800079a:	fba1 1202 	umull	r1, r2, r1, r2
 800079e:	08d2      	lsrs	r2, r2, #3
 80007a0:	491d      	ldr	r1, [pc, #116]	@ (8000818 <StartTask_auto_drive+0xcc>)
 80007a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (uint8_t j=0; j<3; ++j)
 80007a6:	7dfb      	ldrb	r3, [r7, #23]
 80007a8:	3301      	adds	r3, #1
 80007aa:	75fb      	strb	r3, [r7, #23]
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d9d7      	bls.n	8000762 <StartTask_auto_drive+0x16>
		}
		printf("%u\t%u\t%u\n",echo_time_us[0], echo_time_us[1], echo_time_us[2]);
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <StartTask_auto_drive+0xcc>)
 80007b4:	6819      	ldr	r1, [r3, #0]
 80007b6:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <StartTask_auto_drive+0xcc>)
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <StartTask_auto_drive+0xcc>)
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	4817      	ldr	r0, [pc, #92]	@ (800081c <StartTask_auto_drive+0xd0>)
 80007c0:	f008 f984 	bl	8008acc <iprintf>
		if (echo_time_us[1] > 1500) RCcar_go_forward(40);
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <StartTask_auto_drive+0xcc>)
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d903      	bls.n	80007d8 <StartTask_auto_drive+0x8c>
 80007d0:	2028      	movs	r0, #40	@ 0x28
 80007d2:	f000 fa19 	bl	8000c08 <RCcar_go_forward>
 80007d6:	e015      	b.n	8000804 <StartTask_auto_drive+0xb8>
		else if (echo_time_us[1] < 1000) RCcar_go_backward(40);
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <StartTask_auto_drive+0xcc>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007e0:	d203      	bcs.n	80007ea <StartTask_auto_drive+0x9e>
 80007e2:	2028      	movs	r0, #40	@ 0x28
 80007e4:	f000 faa4 	bl	8000d30 <RCcar_go_backward>
 80007e8:	e00c      	b.n	8000804 <StartTask_auto_drive+0xb8>
		else if (echo_time_us[2] < echo_time_us[0]) RCcar_go_soft_left(40);
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <StartTask_auto_drive+0xcc>)
 80007ec:	689a      	ldr	r2, [r3, #8]
 80007ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <StartTask_auto_drive+0xcc>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d203      	bcs.n	80007fe <StartTask_auto_drive+0xb2>
 80007f6:	2028      	movs	r0, #40	@ 0x28
 80007f8:	f000 fa36 	bl	8000c68 <RCcar_go_soft_left>
 80007fc:	e002      	b.n	8000804 <StartTask_auto_drive+0xb8>
		else RCcar_go_soft_right(40);
 80007fe:	2028      	movs	r0, #40	@ 0x28
 8000800:	f000 fa64 	bl	8000ccc <RCcar_go_soft_right>
	    osDelay(100);
 8000804:	2064      	movs	r0, #100	@ 0x64
 8000806:	f005 fbcb 	bl	8005fa0 <osDelay>
	if (mode_auto_manu)
 800080a:	e7a3      	b.n	8000754 <StartTask_auto_drive+0x8>
 800080c:	200000a8 	.word	0x200000a8
 8000810:	200000ac 	.word	0x200000ac
 8000814:	cccccccd 	.word	0xcccccccd
 8000818:	2000009c 	.word	0x2000009c
 800081c:	080098c0 	.word	0x080098c0

08000820 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b3b      	ldr	r3, [pc, #236]	@ (8000928 <MX_GPIO_Init+0x108>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a3a      	ldr	r2, [pc, #232]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b38      	ldr	r3, [pc, #224]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b34      	ldr	r3, [pc, #208]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a33      	ldr	r2, [pc, #204]	@ (8000928 <MX_GPIO_Init+0x108>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b31      	ldr	r3, [pc, #196]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a2c      	ldr	r2, [pc, #176]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b2a      	ldr	r3, [pc, #168]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a25      	ldr	r2, [pc, #148]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b23      	ldr	r3, [pc, #140]	@ (8000928 <MX_GPIO_Init+0x108>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIG_LEFT_Pin|TRIG_CENTER_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2103      	movs	r1, #3
 80008aa:	4820      	ldr	r0, [pc, #128]	@ (800092c <MX_GPIO_Init+0x10c>)
 80008ac:	f002 f81c 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG_RIGHT_Pin|GPIO_motorDriver_IN2_Pin|GPIO_motorDriver_IN3_Pin|GPIO_motorDriver_IN4_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f240 4131 	movw	r1, #1073	@ 0x431
 80008b6:	481e      	ldr	r0, [pc, #120]	@ (8000930 <MX_GPIO_Init+0x110>)
 80008b8:	f002 f816 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_motorDriver_IN1_GPIO_Port, GPIO_motorDriver_IN1_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008c2:	481c      	ldr	r0, [pc, #112]	@ (8000934 <MX_GPIO_Init+0x114>)
 80008c4:	f002 f810 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TRIG_LEFT_Pin|TRIG_CENTER_Pin;
 80008c8:	2303      	movs	r3, #3
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	4813      	ldr	r0, [pc, #76]	@ (800092c <MX_GPIO_Init+0x10c>)
 80008e0:	f001 fe7e 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRIG_RIGHT_Pin|GPIO_motorDriver_IN2_Pin|GPIO_motorDriver_IN3_Pin|GPIO_motorDriver_IN4_Pin;
 80008e4:	f240 4331 	movw	r3, #1073	@ 0x431
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	480c      	ldr	r0, [pc, #48]	@ (8000930 <MX_GPIO_Init+0x110>)
 80008fe:	f001 fe6f 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_motorDriver_IN1_Pin;
 8000902:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_motorDriver_IN1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	@ (8000934 <MX_GPIO_Init+0x114>)
 800091c:	f001 fe60 	bl	80025e0 <HAL_GPIO_Init>

}
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	@ 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40020800 	.word	0x40020800
 8000930:	40020400 	.word	0x40020400
 8000934:	40020000 	.word	0x40020000

08000938 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8000940:	1d39      	adds	r1, r7, #4
 8000942:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000946:	2201      	movs	r2, #1
 8000948:	4803      	ldr	r0, [pc, #12]	@ (8000958 <__io_putchar+0x20>)
 800094a:	f004 f871 	bl	8004a30 <HAL_UART_Transmit>

  return ch;
 800094e:	687b      	ldr	r3, [r7, #4]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000278 	.word	0x20000278

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000960:	f001 f918 	bl	8001b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000964:	f000 f83c 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000968:	f7ff ff5a 	bl	8000820 <MX_GPIO_Init>
  MX_DMA_Init();
 800096c:	f7ff fe1a 	bl	80005a4 <MX_DMA_Init>
  MX_TIM3_Init();
 8000970:	f000 fd62 	bl	8001438 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000974:	f000 ffd0 	bl	8001918 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000978:	f000 fff8 	bl	800196c <MX_USART2_UART_Init>
  MX_TIM10_Init();
 800097c:	f000 fe48 	bl	8001610 <MX_TIM10_Init>
  MX_TIM4_Init();
 8000980:	f000 fddc 	bl	800153c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  pwmMotor_init(&htim_pwmMotor, CHANNEL_MOTOR_A);
 8000984:	2100      	movs	r1, #0
 8000986:	4811      	ldr	r0, [pc, #68]	@ (80009cc <main+0x70>)
 8000988:	f000 f8aa 	bl	8000ae0 <pwmMotor_init>
  pwmMotor_init(&htim_pwmMotor, CHANNEL_MOTOR_B);
 800098c:	2104      	movs	r1, #4
 800098e:	480f      	ldr	r0, [pc, #60]	@ (80009cc <main+0x70>)
 8000990:	f000 f8a6 	bl	8000ae0 <pwmMotor_init>
  HAL_UART_Receive_DMA(&huart_bluetooth, &rxChar, 1);
 8000994:	2201      	movs	r2, #1
 8000996:	490e      	ldr	r1, [pc, #56]	@ (80009d0 <main+0x74>)
 8000998:	480e      	ldr	r0, [pc, #56]	@ (80009d4 <main+0x78>)
 800099a:	f004 f8d4 	bl	8004b46 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start(&htim10);
 800099e:	480e      	ldr	r0, [pc, #56]	@ (80009d8 <main+0x7c>)
 80009a0:	f002 fcd6 	bl	8003350 <HAL_TIM_Base_Start>

  HAL_TIM_IC_Start_IT(&htim_echoMeasure, CHANNEL_ECHO_LEFT);
 80009a4:	2100      	movs	r1, #0
 80009a6:	480d      	ldr	r0, [pc, #52]	@ (80009dc <main+0x80>)
 80009a8:	f002 fee8 	bl	800377c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim_echoMeasure, CHANNEL_ECHO_CENTER);
 80009ac:	2104      	movs	r1, #4
 80009ae:	480b      	ldr	r0, [pc, #44]	@ (80009dc <main+0x80>)
 80009b0:	f002 fee4 	bl	800377c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim_echoMeasure, CHANNEL_ECHO_RIGHT);
 80009b4:	2108      	movs	r1, #8
 80009b6:	4809      	ldr	r0, [pc, #36]	@ (80009dc <main+0x80>)
 80009b8:	f002 fee0 	bl	800377c <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009bc:	f005 fa14 	bl	8005de8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80009c0:	f7ff fe10 	bl	80005e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009c4:	f005 fa34 	bl	8005e30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <main+0x6c>
 80009cc:	20000138 	.word	0x20000138
 80009d0:	20000098 	.word	0x20000098
 80009d4:	20000230 	.word	0x20000230
 80009d8:	200001c8 	.word	0x200001c8
 80009dc:	20000180 	.word	0x20000180

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	@ 0x50
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	2230      	movs	r2, #48	@ 0x30
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f008 f8c1 	bl	8008b76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	4b27      	ldr	r3, [pc, #156]	@ (8000aa8 <SystemClock_Config+0xc8>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	4a26      	ldr	r2, [pc, #152]	@ (8000aa8 <SystemClock_Config+0xc8>)
 8000a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a14:	4b24      	ldr	r3, [pc, #144]	@ (8000aa8 <SystemClock_Config+0xc8>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	4b21      	ldr	r3, [pc, #132]	@ (8000aac <SystemClock_Config+0xcc>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a20      	ldr	r2, [pc, #128]	@ (8000aac <SystemClock_Config+0xcc>)
 8000a2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b1e      	ldr	r3, [pc, #120]	@ (8000aac <SystemClock_Config+0xcc>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	2302      	movs	r3, #2
 8000a48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a50:	2304      	movs	r3, #4
 8000a52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a54:	2364      	movs	r3, #100	@ 0x64
 8000a56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a60:	f107 0320 	add.w	r3, r7, #32
 8000a64:	4618      	mov	r0, r3
 8000a66:	f001 ff59 	bl	800291c <HAL_RCC_OscConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a70:	f000 f830 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a74:	230f      	movs	r3, #15
 8000a76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	2103      	movs	r1, #3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 f9bb 	bl	8002e0c <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a9c:	f000 f81a 	bl	8000ad4 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3750      	adds	r7, #80	@ 0x50
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000

08000ab0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d101      	bne.n	8000ac6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ac2:	f001 f889 	bl	8001bd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40014800 	.word	0x40014800

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <Error_Handler+0x8>

08000ae0 <pwmMotor_init>:
#include "pwmMotor.h"

static uint16_t max_duty;

void pwmMotor_init(TIM_HandleTypeDef *htim, uint32_t motor_channel)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim, motor_channel);
 8000aea:	6839      	ldr	r1, [r7, #0]
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f002 fd45 	bl	800357c <HAL_TIM_PWM_Start>
	max_duty = htim->Instance->ARR - 1;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	3b01      	subs	r3, #1
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <pwmMotor_init+0x2c>)
 8000b00:	801a      	strh	r2, [r3, #0]
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000e8 	.word	0x200000e8

08000b10 <pwmMotor_setDuty>:
void pwmMotor_setDuty(TIM_HandleTypeDef *htim, uint32_t motor_channel, uint16_t duty)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim, motor_channel, duty);
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d104      	bne.n	8000b2e <pwmMotor_setDuty+0x1e>
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	88fa      	ldrh	r2, [r7, #6]
 8000b2a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000b2c:	e013      	b.n	8000b56 <pwmMotor_setDuty+0x46>
	__HAL_TIM_SET_COMPARE(htim, motor_channel, duty);
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	2b04      	cmp	r3, #4
 8000b32:	d104      	bne.n	8000b3e <pwmMotor_setDuty+0x2e>
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000b3c:	e00b      	b.n	8000b56 <pwmMotor_setDuty+0x46>
	__HAL_TIM_SET_COMPARE(htim, motor_channel, duty);
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	d104      	bne.n	8000b4e <pwmMotor_setDuty+0x3e>
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000b4c:	e003      	b.n	8000b56 <pwmMotor_setDuty+0x46>
	__HAL_TIM_SET_COMPARE(htim, motor_channel, duty);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <pwmMotor_directionShift>:
{
	HAL_TIM_PWM_Stop(htim, motor_channel);
}

void pwmMotor_directionShift (uint32_t motor_channel, pwmMotor_direction dir)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	70fb      	strb	r3, [r7, #3]
	GPIO_PinState GPIO_PinState_IN_1st;
	GPIO_PinState GPIO_PinState_IN_2nd;
	switch (dir)
 8000b70:	78fb      	ldrb	r3, [r7, #3]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d81e      	bhi.n	8000bb4 <pwmMotor_directionShift+0x50>
 8000b76:	a201      	add	r2, pc, #4	@ (adr r2, 8000b7c <pwmMotor_directionShift+0x18>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000b8d 	.word	0x08000b8d
 8000b80:	08000b97 	.word	0x08000b97
 8000b84:	08000ba1 	.word	0x08000ba1
 8000b88:	08000bab 	.word	0x08000bab
	{
	case NEUTRAL:
		GPIO_PinState_IN_1st = GPIO_PIN_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]
		GPIO_PinState_IN_2nd = GPIO_PIN_RESET;
 8000b90:	2300      	movs	r3, #0
 8000b92:	73bb      	strb	r3, [r7, #14]
		break;
 8000b94:	e00e      	b.n	8000bb4 <pwmMotor_directionShift+0x50>
	case FORWARD:
		GPIO_PinState_IN_1st = GPIO_PIN_SET;
 8000b96:	2301      	movs	r3, #1
 8000b98:	73fb      	strb	r3, [r7, #15]
		GPIO_PinState_IN_2nd = GPIO_PIN_RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73bb      	strb	r3, [r7, #14]
		break;
 8000b9e:	e009      	b.n	8000bb4 <pwmMotor_directionShift+0x50>
	case BACKWARD:
		GPIO_PinState_IN_1st = GPIO_PIN_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
		GPIO_PinState_IN_2nd = GPIO_PIN_SET;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	73bb      	strb	r3, [r7, #14]
		break;
 8000ba8:	e004      	b.n	8000bb4 <pwmMotor_directionShift+0x50>
	case BREAK:
		GPIO_PinState_IN_1st = GPIO_PIN_SET;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
		GPIO_PinState_IN_2nd = GPIO_PIN_SET;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73bb      	strb	r3, [r7, #14]
		break;
 8000bb2:	bf00      	nop
	}

	if (motor_channel == CHANNEL_MOTOR_A)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d10e      	bne.n	8000bd8 <pwmMotor_directionShift+0x74>
	{
		HAL_GPIO_WritePin(GPIO_motorDriver_IN1_GPIO_Port, GPIO_motorDriver_IN1_Pin, GPIO_PinState_IN_1st);
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bc2:	480f      	ldr	r0, [pc, #60]	@ (8000c00 <pwmMotor_directionShift+0x9c>)
 8000bc4:	f001 fe90 	bl	80028e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_motorDriver_IN2_GPIO_Port, GPIO_motorDriver_IN2_Pin, GPIO_PinState_IN_2nd);
 8000bc8:	7bbb      	ldrb	r3, [r7, #14]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <pwmMotor_directionShift+0xa0>)
 8000bd2:	f001 fe89 	bl	80028e8 <HAL_GPIO_WritePin>
	else if (motor_channel == CHANNEL_MOTOR_B)
	{
		HAL_GPIO_WritePin(GPIO_motorDriver_IN3_GPIO_Port, GPIO_motorDriver_IN3_Pin, GPIO_PinState_IN_1st);
		HAL_GPIO_WritePin(GPIO_motorDriver_IN4_GPIO_Port, GPIO_motorDriver_IN4_Pin, GPIO_PinState_IN_2nd);
	}
}
 8000bd6:	e00e      	b.n	8000bf6 <pwmMotor_directionShift+0x92>
	else if (motor_channel == CHANNEL_MOTOR_B)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	d10b      	bne.n	8000bf6 <pwmMotor_directionShift+0x92>
		HAL_GPIO_WritePin(GPIO_motorDriver_IN3_GPIO_Port, GPIO_motorDriver_IN3_Pin, GPIO_PinState_IN_1st);
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	461a      	mov	r2, r3
 8000be2:	2110      	movs	r1, #16
 8000be4:	4807      	ldr	r0, [pc, #28]	@ (8000c04 <pwmMotor_directionShift+0xa0>)
 8000be6:	f001 fe7f 	bl	80028e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_motorDriver_IN4_GPIO_Port, GPIO_motorDriver_IN4_Pin, GPIO_PinState_IN_2nd);
 8000bea:	7bbb      	ldrb	r3, [r7, #14]
 8000bec:	461a      	mov	r2, r3
 8000bee:	2120      	movs	r1, #32
 8000bf0:	4804      	ldr	r0, [pc, #16]	@ (8000c04 <pwmMotor_directionShift+0xa0>)
 8000bf2:	f001 fe79 	bl	80028e8 <HAL_GPIO_WritePin>
}
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40020000 	.word	0x40020000
 8000c04:	40020400 	.word	0x40020400

08000c08 <RCcar_go_forward>:

void RCcar_go_forward(uint8_t speed_percent)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	uint16_t duty = speed_percent * max_duty / 100;
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	4a11      	ldr	r2, [pc, #68]	@ (8000c5c <RCcar_go_forward+0x54>)
 8000c16:	8812      	ldrh	r2, [r2, #0]
 8000c18:	fb02 f303 	mul.w	r3, r2, r3
 8000c1c:	4a10      	ldr	r2, [pc, #64]	@ (8000c60 <RCcar_go_forward+0x58>)
 8000c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c22:	1152      	asrs	r2, r2, #5
 8000c24:	17db      	asrs	r3, r3, #31
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	81fb      	strh	r3, [r7, #14]
	pwmMotor_directionShift (CHANNEL_MOTOR_A, FORWARD);
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff ff99 	bl	8000b64 <pwmMotor_directionShift>
	pwmMotor_directionShift (CHANNEL_MOTOR_B, FORWARD);
 8000c32:	2101      	movs	r1, #1
 8000c34:	2004      	movs	r0, #4
 8000c36:	f7ff ff95 	bl	8000b64 <pwmMotor_directionShift>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_A, duty);
 8000c3a:	89fb      	ldrh	r3, [r7, #14]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4808      	ldr	r0, [pc, #32]	@ (8000c64 <RCcar_go_forward+0x5c>)
 8000c42:	f7ff ff65 	bl	8000b10 <pwmMotor_setDuty>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, duty);
 8000c46:	89fb      	ldrh	r3, [r7, #14]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	2104      	movs	r1, #4
 8000c4c:	4805      	ldr	r0, [pc, #20]	@ (8000c64 <RCcar_go_forward+0x5c>)
 8000c4e:	f7ff ff5f 	bl	8000b10 <pwmMotor_setDuty>

}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000e8 	.word	0x200000e8
 8000c60:	51eb851f 	.word	0x51eb851f
 8000c64:	20000138 	.word	0x20000138

08000c68 <RCcar_go_soft_left>:

void RCcar_go_soft_left(uint8_t speed_percent)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
	uint16_t duty = speed_percent * max_duty / 100;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <RCcar_go_soft_left+0x58>)
 8000c76:	8812      	ldrh	r2, [r2, #0]
 8000c78:	fb02 f303 	mul.w	r3, r2, r3
 8000c7c:	4a11      	ldr	r2, [pc, #68]	@ (8000cc4 <RCcar_go_soft_left+0x5c>)
 8000c7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c82:	1152      	asrs	r2, r2, #5
 8000c84:	17db      	asrs	r3, r3, #31
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	81fb      	strh	r3, [r7, #14]
	pwmMotor_directionShift (CHANNEL_MOTOR_A, FORWARD);
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff ff69 	bl	8000b64 <pwmMotor_directionShift>
	pwmMotor_directionShift (CHANNEL_MOTOR_B, FORWARD);
 8000c92:	2101      	movs	r1, #1
 8000c94:	2004      	movs	r0, #4
 8000c96:	f7ff ff65 	bl	8000b64 <pwmMotor_directionShift>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_A, duty / 8);
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	08db      	lsrs	r3, r3, #3
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4808      	ldr	r0, [pc, #32]	@ (8000cc8 <RCcar_go_soft_left+0x60>)
 8000ca6:	f7ff ff33 	bl	8000b10 <pwmMotor_setDuty>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, duty);
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	461a      	mov	r2, r3
 8000cae:	2104      	movs	r1, #4
 8000cb0:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <RCcar_go_soft_left+0x60>)
 8000cb2:	f7ff ff2d 	bl	8000b10 <pwmMotor_setDuty>
}
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000e8 	.word	0x200000e8
 8000cc4:	51eb851f 	.word	0x51eb851f
 8000cc8:	20000138 	.word	0x20000138

08000ccc <RCcar_go_soft_right>:

void RCcar_go_soft_right(uint8_t speed_percent)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
	uint16_t duty = speed_percent * max_duty / 100;
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	4a12      	ldr	r2, [pc, #72]	@ (8000d24 <RCcar_go_soft_right+0x58>)
 8000cda:	8812      	ldrh	r2, [r2, #0]
 8000cdc:	fb02 f303 	mul.w	r3, r2, r3
 8000ce0:	4a11      	ldr	r2, [pc, #68]	@ (8000d28 <RCcar_go_soft_right+0x5c>)
 8000ce2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce6:	1152      	asrs	r2, r2, #5
 8000ce8:	17db      	asrs	r3, r3, #31
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	81fb      	strh	r3, [r7, #14]
	pwmMotor_directionShift (CHANNEL_MOTOR_A, FORWARD);
 8000cee:	2101      	movs	r1, #1
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f7ff ff37 	bl	8000b64 <pwmMotor_directionShift>
	pwmMotor_directionShift (CHANNEL_MOTOR_B, FORWARD);
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	2004      	movs	r0, #4
 8000cfa:	f7ff ff33 	bl	8000b64 <pwmMotor_directionShift>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_A, duty);
 8000cfe:	89fb      	ldrh	r3, [r7, #14]
 8000d00:	461a      	mov	r2, r3
 8000d02:	2100      	movs	r1, #0
 8000d04:	4809      	ldr	r0, [pc, #36]	@ (8000d2c <RCcar_go_soft_right+0x60>)
 8000d06:	f7ff ff03 	bl	8000b10 <pwmMotor_setDuty>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, duty / 8);
 8000d0a:	89fb      	ldrh	r3, [r7, #14]
 8000d0c:	08db      	lsrs	r3, r3, #3
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	461a      	mov	r2, r3
 8000d12:	2104      	movs	r1, #4
 8000d14:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <RCcar_go_soft_right+0x60>)
 8000d16:	f7ff fefb 	bl	8000b10 <pwmMotor_setDuty>
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200000e8 	.word	0x200000e8
 8000d28:	51eb851f 	.word	0x51eb851f
 8000d2c:	20000138 	.word	0x20000138

08000d30 <RCcar_go_backward>:

void RCcar_go_backward(uint8_t speed_percent)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
	uint16_t duty = speed_percent * max_duty / 100;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	4a11      	ldr	r2, [pc, #68]	@ (8000d84 <RCcar_go_backward+0x54>)
 8000d3e:	8812      	ldrh	r2, [r2, #0]
 8000d40:	fb02 f303 	mul.w	r3, r2, r3
 8000d44:	4a10      	ldr	r2, [pc, #64]	@ (8000d88 <RCcar_go_backward+0x58>)
 8000d46:	fb82 1203 	smull	r1, r2, r2, r3
 8000d4a:	1152      	asrs	r2, r2, #5
 8000d4c:	17db      	asrs	r3, r3, #31
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	81fb      	strh	r3, [r7, #14]
	pwmMotor_directionShift (CHANNEL_MOTOR_A, BACKWARD);
 8000d52:	2102      	movs	r1, #2
 8000d54:	2000      	movs	r0, #0
 8000d56:	f7ff ff05 	bl	8000b64 <pwmMotor_directionShift>
	pwmMotor_directionShift (CHANNEL_MOTOR_B, BACKWARD);
 8000d5a:	2102      	movs	r1, #2
 8000d5c:	2004      	movs	r0, #4
 8000d5e:	f7ff ff01 	bl	8000b64 <pwmMotor_directionShift>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_A, duty);
 8000d62:	89fb      	ldrh	r3, [r7, #14]
 8000d64:	461a      	mov	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	4808      	ldr	r0, [pc, #32]	@ (8000d8c <RCcar_go_backward+0x5c>)
 8000d6a:	f7ff fed1 	bl	8000b10 <pwmMotor_setDuty>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, duty);
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	461a      	mov	r2, r3
 8000d72:	2104      	movs	r1, #4
 8000d74:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <RCcar_go_backward+0x5c>)
 8000d76:	f7ff fecb 	bl	8000b10 <pwmMotor_setDuty>
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000e8 	.word	0x200000e8
 8000d88:	51eb851f 	.word	0x51eb851f
 8000d8c:	20000138 	.word	0x20000138

08000d90 <RCcar_stop>:

void RCcar_stop()
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	pwmMotor_directionShift (CHANNEL_MOTOR_A, BREAK);
 8000d94:	2103      	movs	r1, #3
 8000d96:	2000      	movs	r0, #0
 8000d98:	f7ff fee4 	bl	8000b64 <pwmMotor_directionShift>
	pwmMotor_directionShift (CHANNEL_MOTOR_B, BREAK);
 8000d9c:	2103      	movs	r1, #3
 8000d9e:	2004      	movs	r0, #4
 8000da0:	f7ff fee0 	bl	8000b64 <pwmMotor_directionShift>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_A, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	4804      	ldr	r0, [pc, #16]	@ (8000dbc <RCcar_stop+0x2c>)
 8000daa:	f7ff feb1 	bl	8000b10 <pwmMotor_setDuty>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2104      	movs	r1, #4
 8000db2:	4802      	ldr	r0, [pc, #8]	@ (8000dbc <RCcar_stop+0x2c>)
 8000db4:	f7ff feac 	bl	8000b10 <pwmMotor_setDuty>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000138 	.word	0x20000138

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <HAL_MspInit+0x54>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	4a11      	ldr	r2, [pc, #68]	@ (8000e14 <HAL_MspInit+0x54>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <HAL_MspInit+0x54>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <HAL_MspInit+0x54>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <HAL_MspInit+0x54>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df2:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <HAL_MspInit+0x54>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	210f      	movs	r1, #15
 8000e02:	f06f 0001 	mvn.w	r0, #1
 8000e06:	f000 ffbf 	bl	8001d88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	@ 0x30
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee8 <HAL_InitTick+0xd0>)
 8000e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e30:	4a2d      	ldr	r2, [pc, #180]	@ (8000ee8 <HAL_InitTick+0xd0>)
 8000e32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e36:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e38:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee8 <HAL_InitTick+0xd0>)
 8000e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e44:	f107 020c 	add.w	r2, r7, #12
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 f9fc 	bl	800324c <HAL_RCC_GetClockConfig>
  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e54:	f002 f9e6 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 8000e58:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e5c:	4a23      	ldr	r2, [pc, #140]	@ (8000eec <HAL_InitTick+0xd4>)
 8000e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e62:	0c9b      	lsrs	r3, r3, #18
 8000e64:	3b01      	subs	r3, #1
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000e68:	4b21      	ldr	r3, [pc, #132]	@ (8000ef0 <HAL_InitTick+0xd8>)
 8000e6a:	4a22      	ldr	r2, [pc, #136]	@ (8000ef4 <HAL_InitTick+0xdc>)
 8000e6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000e6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ef0 <HAL_InitTick+0xd8>)
 8000e70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e74:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000e76:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef0 <HAL_InitTick+0xd8>)
 8000e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <HAL_InitTick+0xd8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e82:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <HAL_InitTick+0xd8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e88:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <HAL_InitTick+0xd8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000e8e:	4818      	ldr	r0, [pc, #96]	@ (8000ef0 <HAL_InitTick+0xd8>)
 8000e90:	f002 fa0e 	bl	80032b0 <HAL_TIM_Base_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d11b      	bne.n	8000eda <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000ea2:	4813      	ldr	r0, [pc, #76]	@ (8000ef0 <HAL_InitTick+0xd8>)
 8000ea4:	f002 faae 	bl	8003404 <HAL_TIM_Base_Start_IT>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000eae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d111      	bne.n	8000eda <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000eb6:	201a      	movs	r0, #26
 8000eb8:	f000 ff82 	bl	8001dc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b0f      	cmp	r3, #15
 8000ec0:	d808      	bhi.n	8000ed4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	201a      	movs	r0, #26
 8000ec8:	f000 ff5e 	bl	8001d88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <HAL_InitTick+0xe0>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e002      	b.n	8000eda <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000eda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3730      	adds	r7, #48	@ 0x30
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	431bde83 	.word	0x431bde83
 8000ef0:	200000ec 	.word	0x200000ec
 8000ef4:	40014800 	.word	0x40014800
 8000ef8:	20000004 	.word	0x20000004

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <NMI_Handler+0x4>

08000f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <MemManage_Handler+0x4>

08000f14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000f38:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000f3a:	f002 fd39 	bl	80039b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000ec 	.word	0x200000ec

08000f48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f4c:	4802      	ldr	r0, [pc, #8]	@ (8000f58 <TIM4_IRQHandler+0x10>)
 8000f4e:	f002 fd2f 	bl	80039b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000180 	.word	0x20000180

08000f5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f60:	4802      	ldr	r0, [pc, #8]	@ (8000f6c <USART1_IRQHandler+0x10>)
 8000f62:	f003 fe15 	bl	8004b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000230 	.word	0x20000230

08000f70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <USART2_IRQHandler+0x10>)
 8000f76:	f003 fe0b 	bl	8004b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000278 	.word	0x20000278

08000f84 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f88:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <DMA2_Stream2_IRQHandler+0x10>)
 8000f8a:	f001 f8bf 	bl	800210c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200002c0 	.word	0x200002c0

08000f98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	e00a      	b.n	8000fc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000faa:	f3af 8000 	nop.w
 8000fae:	4601      	mov	r1, r0
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	60ba      	str	r2, [r7, #8]
 8000fb6:	b2ca      	uxtb	r2, r1
 8000fb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbf0      	blt.n	8000faa <_read+0x12>
  }

  return len;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	e009      	b.n	8000ff8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	60ba      	str	r2, [r7, #8]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fca3 	bl	8000938 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf1      	blt.n	8000fe4 <_write+0x12>
  }
  return len;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_close>:

int _close(int file)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001032:	605a      	str	r2, [r3, #4]
  return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <_isatty>:

int _isatty(int file)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800107c:	4a14      	ldr	r2, [pc, #80]	@ (80010d0 <_sbrk+0x5c>)
 800107e:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <_sbrk+0x60>)
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001088:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <_sbrk+0x64>)
 8001092:	4a12      	ldr	r2, [pc, #72]	@ (80010dc <_sbrk+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001096:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d207      	bcs.n	80010b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a4:	f007 fe0c 	bl	8008cc0 <__errno>
 80010a8:	4603      	mov	r3, r0
 80010aa:	220c      	movs	r2, #12
 80010ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e009      	b.n	80010c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b4:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a05      	ldr	r2, [pc, #20]	@ (80010d8 <_sbrk+0x64>)
 80010c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20020000 	.word	0x20020000
 80010d4:	00000400 	.word	0x00000400
 80010d8:	20000134 	.word	0x20000134
 80010dc:	20004e58 	.word	0x20004e58

080010e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <SystemInit+0x20>)
 80010e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ea:	4a05      	ldr	r2, [pc, #20]	@ (8001100 <SystemInit+0x20>)
 80010ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 0 */
#define ULTRASONIC_LEFT_BIT 0b1
#define ULTRASONIC_CENTER_BIT 0b10
#define ULTRASONIC_RIGHT_BIT 0b100
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	static uint8_t capture_flag = 0;
	static uint32_t echo_high_time_us[3], echo_low_time_us[3];
	if (htim->Channel == ACTIVE_CHANNEL_ECHO_LEFT)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7f1b      	ldrb	r3, [r3, #28]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d178      	bne.n	8001206 <HAL_TIM_IC_CaptureCallback+0x102>
	{
		if ( !(capture_flag & ULTRASONIC_LEFT_BIT) )
 8001114:	4b8f      	ldr	r3, [pc, #572]	@ (8001354 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d11e      	bne.n	800115e <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			echo_high_time_us[0] = HAL_TIM_ReadCapturedValue(&htim_echoMeasure, CHANNEL_ECHO_LEFT);
 8001120:	2100      	movs	r1, #0
 8001122:	488d      	ldr	r0, [pc, #564]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001124:	f002 ff5a 	bl	8003fdc <HAL_TIM_ReadCapturedValue>
 8001128:	4603      	mov	r3, r0
 800112a:	4a8c      	ldr	r2, [pc, #560]	@ (800135c <HAL_TIM_IC_CaptureCallback+0x258>)
 800112c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim_echoMeasure, CHANNEL_ECHO_LEFT, TIM_INPUTCHANNELPOLARITY_FALLING);
 800112e:	4b8a      	ldr	r3, [pc, #552]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6a1a      	ldr	r2, [r3, #32]
 8001134:	4b88      	ldr	r3, [pc, #544]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 020a 	bic.w	r2, r2, #10
 800113c:	621a      	str	r2, [r3, #32]
 800113e:	4b86      	ldr	r3, [pc, #536]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6a1a      	ldr	r2, [r3, #32]
 8001144:	4b84      	ldr	r3, [pc, #528]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f042 0202 	orr.w	r2, r2, #2
 800114c:	621a      	str	r2, [r3, #32]
			capture_flag |= ULTRASONIC_LEFT_BIT;
 800114e:	4b81      	ldr	r3, [pc, #516]	@ (8001354 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b7e      	ldr	r3, [pc, #504]	@ (8001354 <HAL_TIM_IC_CaptureCallback+0x250>)
 800115a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim_echoMeasure, CHANNEL_ECHO_RIGHT, TIM_INPUTCHANNELPOLARITY_RISING);
			capture_flag &= ~ULTRASONIC_RIGHT_BIT;
			__HAL_TIM_DISABLE_IT(&htim_echoMeasure, TIM_IT_CC3);
		}
	}
}
 800115c:	e15b      	b.n	8001416 <HAL_TIM_IC_CaptureCallback+0x312>
			echo_low_time_us[0] = HAL_TIM_ReadCapturedValue(&htim_echoMeasure, CHANNEL_ECHO_LEFT);
 800115e:	2100      	movs	r1, #0
 8001160:	487d      	ldr	r0, [pc, #500]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001162:	f002 ff3b 	bl	8003fdc <HAL_TIM_ReadCapturedValue>
 8001166:	4603      	mov	r3, r0
 8001168:	4a7d      	ldr	r2, [pc, #500]	@ (8001360 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800116a:	6013      	str	r3, [r2, #0]
			if (echo_low_time_us[0] > echo_high_time_us[0])
 800116c:	4b7c      	ldr	r3, [pc, #496]	@ (8001360 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b7a      	ldr	r3, [pc, #488]	@ (800135c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d908      	bls.n	800118a <HAL_TIM_IC_CaptureCallback+0x86>
				echo_time_tmp = echo_low_time_us[0] - echo_high_time_us[0];
 8001178:	4b79      	ldr	r3, [pc, #484]	@ (8001360 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	b29a      	uxth	r2, r3
 800117e:	4b77      	ldr	r3, [pc, #476]	@ (800135c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	b29b      	uxth	r3, r3
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	81fb      	strh	r3, [r7, #14]
 8001188:	e009      	b.n	800119e <HAL_TIM_IC_CaptureCallback+0x9a>
				echo_time_tmp = (0xffff - echo_high_time_us[0]) + echo_low_time_us[0];
 800118a:	4b75      	ldr	r3, [pc, #468]	@ (8001360 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b72      	ldr	r3, [pc, #456]	@ (800135c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	b29b      	uxth	r3, r3
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	b29b      	uxth	r3, r3
 800119a:	3b01      	subs	r3, #1
 800119c:	81fb      	strh	r3, [r7, #14]
			if (echo_time_tmp < 2000) echo_time_queue[0][echo_time_left_index++] = echo_time_tmp;
 800119e:	89fb      	ldrh	r3, [r7, #14]
 80011a0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80011a4:	d20a      	bcs.n	80011bc <HAL_TIM_IC_CaptureCallback+0xb8>
 80011a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001364 <HAL_TIM_IC_CaptureCallback+0x260>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	b2d1      	uxtb	r1, r2
 80011ae:	4a6d      	ldr	r2, [pc, #436]	@ (8001364 <HAL_TIM_IC_CaptureCallback+0x260>)
 80011b0:	7011      	strb	r1, [r2, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	4a6c      	ldr	r2, [pc, #432]	@ (8001368 <HAL_TIM_IC_CaptureCallback+0x264>)
 80011b6:	89fb      	ldrh	r3, [r7, #14]
 80011b8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			if (echo_time_left_index >= 10) echo_time_left_index = 0;
 80011bc:	4b69      	ldr	r3, [pc, #420]	@ (8001364 <HAL_TIM_IC_CaptureCallback+0x260>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b09      	cmp	r3, #9
 80011c2:	d902      	bls.n	80011ca <HAL_TIM_IC_CaptureCallback+0xc6>
 80011c4:	4b67      	ldr	r3, [pc, #412]	@ (8001364 <HAL_TIM_IC_CaptureCallback+0x260>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim_echoMeasure, CHANNEL_ECHO_LEFT, TIM_INPUTCHANNELPOLARITY_RISING);
 80011ca:	4b63      	ldr	r3, [pc, #396]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6a1a      	ldr	r2, [r3, #32]
 80011d0:	4b61      	ldr	r3, [pc, #388]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 020a 	bic.w	r2, r2, #10
 80011d8:	621a      	str	r2, [r3, #32]
 80011da:	4b5f      	ldr	r3, [pc, #380]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b5e      	ldr	r3, [pc, #376]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6a12      	ldr	r2, [r2, #32]
 80011e4:	621a      	str	r2, [r3, #32]
			capture_flag &= ~ULTRASONIC_LEFT_BIT;
 80011e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001354 <HAL_TIM_IC_CaptureCallback+0x250>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	f023 0301 	bic.w	r3, r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b58      	ldr	r3, [pc, #352]	@ (8001354 <HAL_TIM_IC_CaptureCallback+0x250>)
 80011f2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_DISABLE_IT(&htim_echoMeasure, TIM_IT_CC1);
 80011f4:	4b58      	ldr	r3, [pc, #352]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	4b57      	ldr	r3, [pc, #348]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0202 	bic.w	r2, r2, #2
 8001202:	60da      	str	r2, [r3, #12]
}
 8001204:	e107      	b.n	8001416 <HAL_TIM_IC_CaptureCallback+0x312>
	else if (htim->Channel == ACTIVE_CHANNEL_ECHO_CENTER)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7f1b      	ldrb	r3, [r3, #28]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d178      	bne.n	8001300 <HAL_TIM_IC_CaptureCallback+0x1fc>
		if ( !(capture_flag & ULTRASONIC_CENTER_BIT) )
 800120e:	4b51      	ldr	r3, [pc, #324]	@ (8001354 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d11e      	bne.n	8001258 <HAL_TIM_IC_CaptureCallback+0x154>
			echo_high_time_us[1] = HAL_TIM_ReadCapturedValue(&htim_echoMeasure, CHANNEL_ECHO_CENTER);
 800121a:	2104      	movs	r1, #4
 800121c:	484e      	ldr	r0, [pc, #312]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 800121e:	f002 fedd 	bl	8003fdc <HAL_TIM_ReadCapturedValue>
 8001222:	4603      	mov	r3, r0
 8001224:	4a4d      	ldr	r2, [pc, #308]	@ (800135c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001226:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim_echoMeasure, CHANNEL_ECHO_CENTER, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001228:	4b4b      	ldr	r3, [pc, #300]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6a1a      	ldr	r2, [r3, #32]
 800122e:	4b4a      	ldr	r3, [pc, #296]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001236:	621a      	str	r2, [r3, #32]
 8001238:	4b47      	ldr	r3, [pc, #284]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6a1a      	ldr	r2, [r3, #32]
 800123e:	4b46      	ldr	r3, [pc, #280]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0220 	orr.w	r2, r2, #32
 8001246:	621a      	str	r2, [r3, #32]
			capture_flag |= ULTRASONIC_CENTER_BIT;
 8001248:	4b42      	ldr	r3, [pc, #264]	@ (8001354 <HAL_TIM_IC_CaptureCallback+0x250>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b40      	ldr	r3, [pc, #256]	@ (8001354 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001254:	701a      	strb	r2, [r3, #0]
}
 8001256:	e0de      	b.n	8001416 <HAL_TIM_IC_CaptureCallback+0x312>
			echo_low_time_us[1] = HAL_TIM_ReadCapturedValue(&htim_echoMeasure, CHANNEL_ECHO_CENTER);
 8001258:	2104      	movs	r1, #4
 800125a:	483f      	ldr	r0, [pc, #252]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 800125c:	f002 febe 	bl	8003fdc <HAL_TIM_ReadCapturedValue>
 8001260:	4603      	mov	r3, r0
 8001262:	4a3f      	ldr	r2, [pc, #252]	@ (8001360 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001264:	6053      	str	r3, [r2, #4]
			if (echo_low_time_us[1] > echo_high_time_us[1])
 8001266:	4b3e      	ldr	r3, [pc, #248]	@ (8001360 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	4b3c      	ldr	r3, [pc, #240]	@ (800135c <HAL_TIM_IC_CaptureCallback+0x258>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	429a      	cmp	r2, r3
 8001270:	d908      	bls.n	8001284 <HAL_TIM_IC_CaptureCallback+0x180>
				echo_time_tmp = echo_low_time_us[1] - echo_high_time_us[1];
 8001272:	4b3b      	ldr	r3, [pc, #236]	@ (8001360 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b38      	ldr	r3, [pc, #224]	@ (800135c <HAL_TIM_IC_CaptureCallback+0x258>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	b29b      	uxth	r3, r3
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	81bb      	strh	r3, [r7, #12]
 8001282:	e009      	b.n	8001298 <HAL_TIM_IC_CaptureCallback+0x194>
				echo_time_tmp = (0xffff - echo_high_time_us[1]) + echo_low_time_us[1];
 8001284:	4b36      	ldr	r3, [pc, #216]	@ (8001360 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	b29a      	uxth	r2, r3
 800128a:	4b34      	ldr	r3, [pc, #208]	@ (800135c <HAL_TIM_IC_CaptureCallback+0x258>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	b29b      	uxth	r3, r3
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	b29b      	uxth	r3, r3
 8001294:	3b01      	subs	r3, #1
 8001296:	81bb      	strh	r3, [r7, #12]
			if (echo_time_tmp < 2000) echo_time_queue[1][echo_time_center_index++] = echo_time_tmp;
 8001298:	89bb      	ldrh	r3, [r7, #12]
 800129a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800129e:	d20a      	bcs.n	80012b6 <HAL_TIM_IC_CaptureCallback+0x1b2>
 80012a0:	4b32      	ldr	r3, [pc, #200]	@ (800136c <HAL_TIM_IC_CaptureCallback+0x268>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	b2d1      	uxtb	r1, r2
 80012a8:	4a30      	ldr	r2, [pc, #192]	@ (800136c <HAL_TIM_IC_CaptureCallback+0x268>)
 80012aa:	7011      	strb	r1, [r2, #0]
 80012ac:	492e      	ldr	r1, [pc, #184]	@ (8001368 <HAL_TIM_IC_CaptureCallback+0x264>)
 80012ae:	330a      	adds	r3, #10
 80012b0:	89ba      	ldrh	r2, [r7, #12]
 80012b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			if (echo_time_center_index >= 10) echo_time_center_index = 0;
 80012b6:	4b2d      	ldr	r3, [pc, #180]	@ (800136c <HAL_TIM_IC_CaptureCallback+0x268>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b09      	cmp	r3, #9
 80012bc:	d902      	bls.n	80012c4 <HAL_TIM_IC_CaptureCallback+0x1c0>
 80012be:	4b2b      	ldr	r3, [pc, #172]	@ (800136c <HAL_TIM_IC_CaptureCallback+0x268>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim_echoMeasure, CHANNEL_ECHO_CENTER, TIM_INPUTCHANNELPOLARITY_RISING);
 80012c4:	4b24      	ldr	r3, [pc, #144]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6a1a      	ldr	r2, [r3, #32]
 80012ca:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80012d2:	621a      	str	r2, [r3, #32]
 80012d4:	4b20      	ldr	r3, [pc, #128]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6a12      	ldr	r2, [r2, #32]
 80012de:	621a      	str	r2, [r3, #32]
			capture_flag &= ~ULTRASONIC_CENTER_BIT;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	f023 0302 	bic.w	r3, r3, #2
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012ec:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_DISABLE_IT(&htim_echoMeasure, TIM_IT_CC2);
 80012ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0204 	bic.w	r2, r2, #4
 80012fc:	60da      	str	r2, [r3, #12]
}
 80012fe:	e08a      	b.n	8001416 <HAL_TIM_IC_CaptureCallback+0x312>
	else if (htim->Channel == ACTIVE_CHANNEL_ECHO_RIGHT)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	7f1b      	ldrb	r3, [r3, #28]
 8001304:	2b04      	cmp	r3, #4
 8001306:	f040 8086 	bne.w	8001416 <HAL_TIM_IC_CaptureCallback+0x312>
		if ( !(capture_flag & ULTRASONIC_RIGHT_BIT) )
 800130a:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <HAL_TIM_IC_CaptureCallback+0x250>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	2b00      	cmp	r3, #0
 8001314:	d12c      	bne.n	8001370 <HAL_TIM_IC_CaptureCallback+0x26c>
			echo_high_time_us[2] = HAL_TIM_ReadCapturedValue(&htim_echoMeasure, CHANNEL_ECHO_RIGHT);
 8001316:	2108      	movs	r1, #8
 8001318:	480f      	ldr	r0, [pc, #60]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 800131a:	f002 fe5f 	bl	8003fdc <HAL_TIM_ReadCapturedValue>
 800131e:	4603      	mov	r3, r0
 8001320:	4a0e      	ldr	r2, [pc, #56]	@ (800135c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001322:	6093      	str	r3, [r2, #8]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim_echoMeasure, CHANNEL_ECHO_RIGHT, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6a1a      	ldr	r2, [r3, #32]
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8001332:	621a      	str	r2, [r3, #32]
 8001334:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6a1a      	ldr	r2, [r3, #32]
 800133a:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <HAL_TIM_IC_CaptureCallback+0x254>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001342:	621a      	str	r2, [r3, #32]
			capture_flag |= ULTRASONIC_RIGHT_BIT;
 8001344:	4b03      	ldr	r3, [pc, #12]	@ (8001354 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b01      	ldr	r3, [pc, #4]	@ (8001354 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001350:	701a      	strb	r2, [r3, #0]
}
 8001352:	e060      	b.n	8001416 <HAL_TIM_IC_CaptureCallback+0x312>
 8001354:	20000210 	.word	0x20000210
 8001358:	20000180 	.word	0x20000180
 800135c:	20000214 	.word	0x20000214
 8001360:	20000220 	.word	0x20000220
 8001364:	2000022c 	.word	0x2000022c
 8001368:	200000ac 	.word	0x200000ac
 800136c:	2000022d 	.word	0x2000022d
			echo_low_time_us[2] = HAL_TIM_ReadCapturedValue(&htim_echoMeasure, CHANNEL_ECHO_RIGHT);
 8001370:	2108      	movs	r1, #8
 8001372:	482b      	ldr	r0, [pc, #172]	@ (8001420 <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001374:	f002 fe32 	bl	8003fdc <HAL_TIM_ReadCapturedValue>
 8001378:	4603      	mov	r3, r0
 800137a:	4a2a      	ldr	r2, [pc, #168]	@ (8001424 <HAL_TIM_IC_CaptureCallback+0x320>)
 800137c:	6093      	str	r3, [r2, #8]
			if (echo_low_time_us[2] > echo_high_time_us[2])
 800137e:	4b29      	ldr	r3, [pc, #164]	@ (8001424 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	4b29      	ldr	r3, [pc, #164]	@ (8001428 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	429a      	cmp	r2, r3
 8001388:	d908      	bls.n	800139c <HAL_TIM_IC_CaptureCallback+0x298>
				echo_time_tmp = echo_low_time_us[2] - echo_high_time_us[2];
 800138a:	4b26      	ldr	r3, [pc, #152]	@ (8001424 <HAL_TIM_IC_CaptureCallback+0x320>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	b29a      	uxth	r2, r3
 8001390:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	b29b      	uxth	r3, r3
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	817b      	strh	r3, [r7, #10]
 800139a:	e009      	b.n	80013b0 <HAL_TIM_IC_CaptureCallback+0x2ac>
				echo_time_tmp = (0xffff - echo_high_time_us[2]) + echo_low_time_us[2];
 800139c:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <HAL_TIM_IC_CaptureCallback+0x320>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <HAL_TIM_IC_CaptureCallback+0x324>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	3b01      	subs	r3, #1
 80013ae:	817b      	strh	r3, [r7, #10]
			if (echo_time_tmp < 2000) echo_time_queue[2][echo_time_right_index++] = echo_time_tmp;
 80013b0:	897b      	ldrh	r3, [r7, #10]
 80013b2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80013b6:	d20a      	bcs.n	80013ce <HAL_TIM_IC_CaptureCallback+0x2ca>
 80013b8:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <HAL_TIM_IC_CaptureCallback+0x328>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	b2d1      	uxtb	r1, r2
 80013c0:	4a1a      	ldr	r2, [pc, #104]	@ (800142c <HAL_TIM_IC_CaptureCallback+0x328>)
 80013c2:	7011      	strb	r1, [r2, #0]
 80013c4:	491a      	ldr	r1, [pc, #104]	@ (8001430 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80013c6:	3314      	adds	r3, #20
 80013c8:	897a      	ldrh	r2, [r7, #10]
 80013ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			if (echo_time_right_index >= 10) echo_time_right_index = 0;
 80013ce:	4b17      	ldr	r3, [pc, #92]	@ (800142c <HAL_TIM_IC_CaptureCallback+0x328>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b09      	cmp	r3, #9
 80013d4:	d902      	bls.n	80013dc <HAL_TIM_IC_CaptureCallback+0x2d8>
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_TIM_IC_CaptureCallback+0x328>)
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim_echoMeasure, CHANNEL_ECHO_RIGHT, TIM_INPUTCHANNELPOLARITY_RISING);
 80013dc:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <HAL_TIM_IC_CaptureCallback+0x31c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6a1a      	ldr	r2, [r3, #32]
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <HAL_TIM_IC_CaptureCallback+0x31c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 80013ea:	621a      	str	r2, [r3, #32]
 80013ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <HAL_TIM_IC_CaptureCallback+0x31c>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001420 <HAL_TIM_IC_CaptureCallback+0x31c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6a12      	ldr	r2, [r2, #32]
 80013f6:	621a      	str	r2, [r3, #32]
			capture_flag &= ~ULTRASONIC_RIGHT_BIT;
 80013f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <HAL_TIM_IC_CaptureCallback+0x330>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	f023 0304 	bic.w	r3, r3, #4
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <HAL_TIM_IC_CaptureCallback+0x330>)
 8001404:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_DISABLE_IT(&htim_echoMeasure, TIM_IT_CC3);
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <HAL_TIM_IC_CaptureCallback+0x31c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0208 	bic.w	r2, r2, #8
 8001414:	60da      	str	r2, [r3, #12]
}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000180 	.word	0x20000180
 8001424:	20000220 	.word	0x20000220
 8001428:	20000214 	.word	0x20000214
 800142c:	2000022e 	.word	0x2000022e
 8001430:	200000ac 	.word	0x200000ac
 8001434:	20000210 	.word	0x20000210

08001438 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	@ 0x38
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	f107 0320 	add.w	r3, r7, #32
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
 8001464:	615a      	str	r2, [r3, #20]
 8001466:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001468:	4b32      	ldr	r3, [pc, #200]	@ (8001534 <MX_TIM3_Init+0xfc>)
 800146a:	4a33      	ldr	r2, [pc, #204]	@ (8001538 <MX_TIM3_Init+0x100>)
 800146c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 800146e:	4b31      	ldr	r3, [pc, #196]	@ (8001534 <MX_TIM3_Init+0xfc>)
 8001470:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001474:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b2f      	ldr	r3, [pc, #188]	@ (8001534 <MX_TIM3_Init+0xfc>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800147c:	4b2d      	ldr	r3, [pc, #180]	@ (8001534 <MX_TIM3_Init+0xfc>)
 800147e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001482:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001484:	4b2b      	ldr	r3, [pc, #172]	@ (8001534 <MX_TIM3_Init+0xfc>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <MX_TIM3_Init+0xfc>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001490:	4828      	ldr	r0, [pc, #160]	@ (8001534 <MX_TIM3_Init+0xfc>)
 8001492:	f001 ff0d 	bl	80032b0 <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800149c:	f7ff fb1a 	bl	8000ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014aa:	4619      	mov	r1, r3
 80014ac:	4821      	ldr	r0, [pc, #132]	@ (8001534 <MX_TIM3_Init+0xfc>)
 80014ae:	f002 fccd 	bl	8003e4c <HAL_TIM_ConfigClockSource>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80014b8:	f7ff fb0c 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014bc:	481d      	ldr	r0, [pc, #116]	@ (8001534 <MX_TIM3_Init+0xfc>)
 80014be:	f002 f803 	bl	80034c8 <HAL_TIM_PWM_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80014c8:	f7ff fb04 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d4:	f107 0320 	add.w	r3, r7, #32
 80014d8:	4619      	mov	r1, r3
 80014da:	4816      	ldr	r0, [pc, #88]	@ (8001534 <MX_TIM3_Init+0xfc>)
 80014dc:	f003 f9d6 	bl	800488c <HAL_TIMEx_MasterConfigSynchronization>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014e6:	f7ff faf5 	bl	8000ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ea:	2360      	movs	r3, #96	@ 0x60
 80014ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2200      	movs	r2, #0
 80014fe:	4619      	mov	r1, r3
 8001500:	480c      	ldr	r0, [pc, #48]	@ (8001534 <MX_TIM3_Init+0xfc>)
 8001502:	f002 fbe1 	bl	8003cc8 <HAL_TIM_PWM_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800150c:	f7ff fae2 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2204      	movs	r2, #4
 8001514:	4619      	mov	r1, r3
 8001516:	4807      	ldr	r0, [pc, #28]	@ (8001534 <MX_TIM3_Init+0xfc>)
 8001518:	f002 fbd6 	bl	8003cc8 <HAL_TIM_PWM_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001522:	f7ff fad7 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001526:	4803      	ldr	r0, [pc, #12]	@ (8001534 <MX_TIM3_Init+0xfc>)
 8001528:	f000 f91e 	bl	8001768 <HAL_TIM_MspPostInit>

}
 800152c:	bf00      	nop
 800152e:	3738      	adds	r7, #56	@ 0x38
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000138 	.word	0x20000138
 8001538:	40000400 	.word	0x40000400

0800153c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800154c:	463b      	mov	r3, r7
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001558:	4b2b      	ldr	r3, [pc, #172]	@ (8001608 <MX_TIM4_Init+0xcc>)
 800155a:	4a2c      	ldr	r2, [pc, #176]	@ (800160c <MX_TIM4_Init+0xd0>)
 800155c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 800155e:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <MX_TIM4_Init+0xcc>)
 8001560:	2263      	movs	r2, #99	@ 0x63
 8001562:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <MX_TIM4_Init+0xcc>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800156a:	4b27      	ldr	r3, [pc, #156]	@ (8001608 <MX_TIM4_Init+0xcc>)
 800156c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001570:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <MX_TIM4_Init+0xcc>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b23      	ldr	r3, [pc, #140]	@ (8001608 <MX_TIM4_Init+0xcc>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800157e:	4822      	ldr	r0, [pc, #136]	@ (8001608 <MX_TIM4_Init+0xcc>)
 8001580:	f002 f8ac 	bl	80036dc <HAL_TIM_IC_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800158a:	f7ff faa3 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001596:	f107 0310 	add.w	r3, r7, #16
 800159a:	4619      	mov	r1, r3
 800159c:	481a      	ldr	r0, [pc, #104]	@ (8001608 <MX_TIM4_Init+0xcc>)
 800159e:	f003 f975 	bl	800488c <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80015a8:	f7ff fa94 	bl	8000ad4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015ac:	2300      	movs	r3, #0
 80015ae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015b0:	2301      	movs	r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 10;
 80015b8:	230a      	movs	r3, #10
 80015ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	4811      	ldr	r0, [pc, #68]	@ (8001608 <MX_TIM4_Init+0xcc>)
 80015c4:	f002 fae4 	bl	8003b90 <HAL_TIM_IC_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80015ce:	f7ff fa81 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015d2:	463b      	mov	r3, r7
 80015d4:	2204      	movs	r2, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	480b      	ldr	r0, [pc, #44]	@ (8001608 <MX_TIM4_Init+0xcc>)
 80015da:	f002 fad9 	bl	8003b90 <HAL_TIM_IC_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80015e4:	f7ff fa76 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80015e8:	463b      	mov	r3, r7
 80015ea:	2208      	movs	r2, #8
 80015ec:	4619      	mov	r1, r3
 80015ee:	4806      	ldr	r0, [pc, #24]	@ (8001608 <MX_TIM4_Init+0xcc>)
 80015f0:	f002 face 	bl	8003b90 <HAL_TIM_IC_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 80015fa:	f7ff fa6b 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000180 	.word	0x20000180
 800160c:	40000800 	.word	0x40000800

08001610 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001614:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <MX_TIM10_Init+0x40>)
 8001616:	4a0f      	ldr	r2, [pc, #60]	@ (8001654 <MX_TIM10_Init+0x44>)
 8001618:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 800161a:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <MX_TIM10_Init+0x40>)
 800161c:	2263      	movs	r2, #99	@ 0x63
 800161e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001620:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <MX_TIM10_Init+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001626:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <MX_TIM10_Init+0x40>)
 8001628:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800162c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162e:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <MX_TIM10_Init+0x40>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <MX_TIM10_Init+0x40>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	@ (8001650 <MX_TIM10_Init+0x40>)
 800163c:	f001 fe38 	bl	80032b0 <HAL_TIM_Base_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001646:	f7ff fa45 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200001c8 	.word	0x200001c8
 8001654:	40014400 	.word	0x40014400

08001658 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a15      	ldr	r2, [pc, #84]	@ (80016bc <HAL_TIM_Base_MspInit+0x64>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d10e      	bne.n	8001688 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <HAL_TIM_Base_MspInit+0x68>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	4a13      	ldr	r2, [pc, #76]	@ (80016c0 <HAL_TIM_Base_MspInit+0x68>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	6413      	str	r3, [r2, #64]	@ 0x40
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <HAL_TIM_Base_MspInit+0x68>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001686:	e012      	b.n	80016ae <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM10)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <HAL_TIM_Base_MspInit+0x6c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d10d      	bne.n	80016ae <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <HAL_TIM_Base_MspInit+0x68>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	4a09      	ldr	r2, [pc, #36]	@ (80016c0 <HAL_TIM_Base_MspInit+0x68>)
 800169c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016a2:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <HAL_TIM_Base_MspInit+0x68>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40000400 	.word	0x40000400
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40014400 	.word	0x40014400

080016c8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	@ 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a1d      	ldr	r2, [pc, #116]	@ (800175c <HAL_TIM_IC_MspInit+0x94>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d134      	bne.n	8001754 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <HAL_TIM_IC_MspInit+0x98>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001760 <HAL_TIM_IC_MspInit+0x98>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <HAL_TIM_IC_MspInit+0x98>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <HAL_TIM_IC_MspInit+0x98>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a14      	ldr	r2, [pc, #80]	@ (8001760 <HAL_TIM_IC_MspInit+0x98>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <HAL_TIM_IC_MspInit+0x98>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = ECHO_LEFT_Pin|ECHO_CENTER_Pin|ECHO_RIGHT_Pin;
 8001722:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001734:	2302      	movs	r3, #2
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	4809      	ldr	r0, [pc, #36]	@ (8001764 <HAL_TIM_IC_MspInit+0x9c>)
 8001740:	f000 ff4e 	bl	80025e0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2105      	movs	r1, #5
 8001748:	201e      	movs	r0, #30
 800174a:	f000 fb1d 	bl	8001d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800174e:	201e      	movs	r0, #30
 8001750:	f000 fb36 	bl	8001dc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	@ 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40000800 	.word	0x40000800
 8001760:	40023800 	.word	0x40023800
 8001764:	40020400 	.word	0x40020400

08001768 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a12      	ldr	r2, [pc, #72]	@ (80017d0 <HAL_TIM_MspPostInit+0x68>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d11d      	bne.n	80017c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <HAL_TIM_MspPostInit+0x6c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a10      	ldr	r2, [pc, #64]	@ (80017d4 <HAL_TIM_MspPostInit+0x6c>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <HAL_TIM_MspPostInit+0x6c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = out_pwmMotor_A_Pin|out_pwmMotor_B_Pin;
 80017a6:	23c0      	movs	r3, #192	@ 0xc0
 80017a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <HAL_TIM_MspPostInit+0x70>)
 80017c2:	f000 ff0d 	bl	80025e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40000400 	.word	0x40000400
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020000 	.word	0x40020000

080017dc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 0 */
extern void RCcar_analogStick(uint8_t x, uint8_t y);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	// Android arduino bluetooth controller app
	if (huart == &huart_bluetooth)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a49      	ldr	r2, [pc, #292]	@ (800190c <HAL_UART_RxCpltCallback+0x130>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	f040 808a 	bne.w	8001902 <HAL_UART_RxCpltCallback+0x126>
	{
		switch (rxChar)
 80017ee:	4b48      	ldr	r3, [pc, #288]	@ (8001910 <HAL_UART_RxCpltCallback+0x134>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	3b30      	subs	r3, #48	@ 0x30
 80017f4:	2b22      	cmp	r3, #34	@ 0x22
 80017f6:	f200 8084 	bhi.w	8001902 <HAL_UART_RxCpltCallback+0x126>
 80017fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001800 <HAL_UART_RxCpltCallback+0x24>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	080018e3 	.word	0x080018e3
 8001804:	08001903 	.word	0x08001903
 8001808:	08001903 	.word	0x08001903
 800180c:	08001903 	.word	0x08001903
 8001810:	08001903 	.word	0x08001903
 8001814:	08001903 	.word	0x08001903
 8001818:	08001903 	.word	0x08001903
 800181c:	08001903 	.word	0x08001903
 8001820:	08001903 	.word	0x08001903
 8001824:	08001903 	.word	0x08001903
 8001828:	08001903 	.word	0x08001903
 800182c:	08001903 	.word	0x08001903
 8001830:	08001903 	.word	0x08001903
 8001834:	08001903 	.word	0x08001903
 8001838:	08001903 	.word	0x08001903
 800183c:	08001903 	.word	0x08001903
 8001840:	08001903 	.word	0x08001903
 8001844:	080018cd 	.word	0x080018cd
 8001848:	0800189d 	.word	0x0800189d
 800184c:	08001903 	.word	0x08001903
 8001850:	08001903 	.word	0x08001903
 8001854:	08001903 	.word	0x08001903
 8001858:	0800188d 	.word	0x0800188d
 800185c:	08001903 	.word	0x08001903
 8001860:	08001903 	.word	0x08001903
 8001864:	08001903 	.word	0x08001903
 8001868:	08001903 	.word	0x08001903
 800186c:	08001903 	.word	0x08001903
 8001870:	080018ad 	.word	0x080018ad
 8001874:	08001903 	.word	0x08001903
 8001878:	08001903 	.word	0x08001903
 800187c:	08001903 	.word	0x08001903
 8001880:	08001903 	.word	0x08001903
 8001884:	08001903 	.word	0x08001903
 8001888:	080018bd 	.word	0x080018bd
		{
		case 'F':
			if (!mode_auto_manu) RCcar_go_forward(100);
 800188c:	4b21      	ldr	r3, [pc, #132]	@ (8001914 <HAL_UART_RxCpltCallback+0x138>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d12d      	bne.n	80018f0 <HAL_UART_RxCpltCallback+0x114>
 8001894:	2064      	movs	r0, #100	@ 0x64
 8001896:	f7ff f9b7 	bl	8000c08 <RCcar_go_forward>
			break;
 800189a:	e029      	b.n	80018f0 <HAL_UART_RxCpltCallback+0x114>
		case 'B':
			if (!mode_auto_manu) RCcar_go_backward(100);
 800189c:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <HAL_UART_RxCpltCallback+0x138>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d127      	bne.n	80018f4 <HAL_UART_RxCpltCallback+0x118>
 80018a4:	2064      	movs	r0, #100	@ 0x64
 80018a6:	f7ff fa43 	bl	8000d30 <RCcar_go_backward>
			break;
 80018aa:	e023      	b.n	80018f4 <HAL_UART_RxCpltCallback+0x118>
		case 'L':
			if (!mode_auto_manu) RCcar_go_soft_left(100);
 80018ac:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <HAL_UART_RxCpltCallback+0x138>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d121      	bne.n	80018f8 <HAL_UART_RxCpltCallback+0x11c>
 80018b4:	2064      	movs	r0, #100	@ 0x64
 80018b6:	f7ff f9d7 	bl	8000c68 <RCcar_go_soft_left>
			break;
 80018ba:	e01d      	b.n	80018f8 <HAL_UART_RxCpltCallback+0x11c>
		case 'R':
			if (!mode_auto_manu) RCcar_go_soft_right(100);
 80018bc:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <HAL_UART_RxCpltCallback+0x138>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d11b      	bne.n	80018fc <HAL_UART_RxCpltCallback+0x120>
 80018c4:	2064      	movs	r0, #100	@ 0x64
 80018c6:	f7ff fa01 	bl	8000ccc <RCcar_go_soft_right>
			break;
 80018ca:	e017      	b.n	80018fc <HAL_UART_RxCpltCallback+0x120>
		case 'A':
			mode_auto_manu = !mode_auto_manu;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <HAL_UART_RxCpltCallback+0x138>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf0c      	ite	eq
 80018d4:	2301      	moveq	r3, #1
 80018d6:	2300      	movne	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001914 <HAL_UART_RxCpltCallback+0x138>)
 80018de:	701a      	strb	r2, [r3, #0]
			break;
 80018e0:	e00f      	b.n	8001902 <HAL_UART_RxCpltCallback+0x126>
		case '0':
			if (!mode_auto_manu) RCcar_stop();
 80018e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <HAL_UART_RxCpltCallback+0x138>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10a      	bne.n	8001900 <HAL_UART_RxCpltCallback+0x124>
 80018ea:	f7ff fa51 	bl	8000d90 <RCcar_stop>
			break;
 80018ee:	e007      	b.n	8001900 <HAL_UART_RxCpltCallback+0x124>
			break;
 80018f0:	bf00      	nop
 80018f2:	e006      	b.n	8001902 <HAL_UART_RxCpltCallback+0x126>
			break;
 80018f4:	bf00      	nop
 80018f6:	e004      	b.n	8001902 <HAL_UART_RxCpltCallback+0x126>
			break;
 80018f8:	bf00      	nop
 80018fa:	e002      	b.n	8001902 <HAL_UART_RxCpltCallback+0x126>
			break;
 80018fc:	bf00      	nop
 80018fe:	e000      	b.n	8001902 <HAL_UART_RxCpltCallback+0x126>
			break;
 8001900:	bf00      	nop
		}
	}

}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000230 	.word	0x20000230
 8001910:	20000098 	.word	0x20000098
 8001914:	200000a8 	.word	0x200000a8

08001918 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <MX_USART1_UART_Init+0x4c>)
 800191e:	4a12      	ldr	r2, [pc, #72]	@ (8001968 <MX_USART1_UART_Init+0x50>)
 8001920:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <MX_USART1_UART_Init+0x4c>)
 8001924:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001928:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <MX_USART1_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001930:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <MX_USART1_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001936:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <MX_USART1_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800193c:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <MX_USART1_UART_Init+0x4c>)
 800193e:	220c      	movs	r2, #12
 8001940:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001942:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <MX_USART1_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <MX_USART1_UART_Init+0x4c>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	@ (8001964 <MX_USART1_UART_Init+0x4c>)
 8001950:	f003 f81e 	bl	8004990 <HAL_UART_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800195a:	f7ff f8bb 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000230 	.word	0x20000230
 8001968:	40011000 	.word	0x40011000

0800196c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001970:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001972:	4a12      	ldr	r2, [pc, #72]	@ (80019bc <MX_USART2_UART_Init+0x50>)
 8001974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001976:	4b10      	ldr	r3, [pc, #64]	@ (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001978:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800197c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <MX_USART2_UART_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <MX_USART2_UART_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <MX_USART2_UART_Init+0x4c>)
 80019a4:	f002 fff4 	bl	8004990 <HAL_UART_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019ae:	f7ff f891 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000278 	.word	0x20000278
 80019bc:	40004400 	.word	0x40004400

080019c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	@ 0x30
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a52      	ldr	r2, [pc, #328]	@ (8001b28 <HAL_UART_MspInit+0x168>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d164      	bne.n	8001aac <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	4b51      	ldr	r3, [pc, #324]	@ (8001b2c <HAL_UART_MspInit+0x16c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	4a50      	ldr	r2, [pc, #320]	@ (8001b2c <HAL_UART_MspInit+0x16c>)
 80019ec:	f043 0310 	orr.w	r3, r3, #16
 80019f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019f2:	4b4e      	ldr	r3, [pc, #312]	@ (8001b2c <HAL_UART_MspInit+0x16c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	61bb      	str	r3, [r7, #24]
 80019fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	4b4a      	ldr	r3, [pc, #296]	@ (8001b2c <HAL_UART_MspInit+0x16c>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a49      	ldr	r2, [pc, #292]	@ (8001b2c <HAL_UART_MspInit+0x16c>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b47      	ldr	r3, [pc, #284]	@ (8001b2c <HAL_UART_MspInit+0x16c>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a1a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a2c:	2307      	movs	r3, #7
 8001a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a30:	f107 031c 	add.w	r3, r7, #28
 8001a34:	4619      	mov	r1, r3
 8001a36:	483e      	ldr	r0, [pc, #248]	@ (8001b30 <HAL_UART_MspInit+0x170>)
 8001a38:	f000 fdd2 	bl	80025e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b34 <HAL_UART_MspInit+0x174>)
 8001a3e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b38 <HAL_UART_MspInit+0x178>)
 8001a40:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001a42:	4b3c      	ldr	r3, [pc, #240]	@ (8001b34 <HAL_UART_MspInit+0x174>)
 8001a44:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a48:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b34 <HAL_UART_MspInit+0x174>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a50:	4b38      	ldr	r3, [pc, #224]	@ (8001b34 <HAL_UART_MspInit+0x174>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a56:	4b37      	ldr	r3, [pc, #220]	@ (8001b34 <HAL_UART_MspInit+0x174>)
 8001a58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a5c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a5e:	4b35      	ldr	r3, [pc, #212]	@ (8001b34 <HAL_UART_MspInit+0x174>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a64:	4b33      	ldr	r3, [pc, #204]	@ (8001b34 <HAL_UART_MspInit+0x174>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001a6a:	4b32      	ldr	r3, [pc, #200]	@ (8001b34 <HAL_UART_MspInit+0x174>)
 8001a6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a70:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a72:	4b30      	ldr	r3, [pc, #192]	@ (8001b34 <HAL_UART_MspInit+0x174>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a78:	4b2e      	ldr	r3, [pc, #184]	@ (8001b34 <HAL_UART_MspInit+0x174>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a7e:	482d      	ldr	r0, [pc, #180]	@ (8001b34 <HAL_UART_MspInit+0x174>)
 8001a80:	f000 f9ac 	bl	8001ddc <HAL_DMA_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001a8a:	f7ff f823 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a28      	ldr	r2, [pc, #160]	@ (8001b34 <HAL_UART_MspInit+0x174>)
 8001a92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a94:	4a27      	ldr	r2, [pc, #156]	@ (8001b34 <HAL_UART_MspInit+0x174>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2105      	movs	r1, #5
 8001a9e:	2025      	movs	r0, #37	@ 0x25
 8001aa0:	f000 f972 	bl	8001d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aa4:	2025      	movs	r0, #37	@ 0x25
 8001aa6:	f000 f98b 	bl	8001dc0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001aaa:	e038      	b.n	8001b1e <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a22      	ldr	r2, [pc, #136]	@ (8001b3c <HAL_UART_MspInit+0x17c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d133      	bne.n	8001b1e <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <HAL_UART_MspInit+0x16c>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	4a1b      	ldr	r2, [pc, #108]	@ (8001b2c <HAL_UART_MspInit+0x16c>)
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac6:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <HAL_UART_MspInit+0x16c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <HAL_UART_MspInit+0x16c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a14      	ldr	r2, [pc, #80]	@ (8001b2c <HAL_UART_MspInit+0x16c>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_UART_MspInit+0x16c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aee:	230c      	movs	r3, #12
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001afe:	2307      	movs	r3, #7
 8001b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	4809      	ldr	r0, [pc, #36]	@ (8001b30 <HAL_UART_MspInit+0x170>)
 8001b0a:	f000 fd69 	bl	80025e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2105      	movs	r1, #5
 8001b12:	2026      	movs	r0, #38	@ 0x26
 8001b14:	f000 f938 	bl	8001d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b18:	2026      	movs	r0, #38	@ 0x26
 8001b1a:	f000 f951 	bl	8001dc0 <HAL_NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3730      	adds	r7, #48	@ 0x30
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40011000 	.word	0x40011000
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020000 	.word	0x40020000
 8001b34:	200002c0 	.word	0x200002c0
 8001b38:	40026440 	.word	0x40026440
 8001b3c:	40004400 	.word	0x40004400

08001b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b44:	f7ff facc 	bl	80010e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b48:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b4a:	490d      	ldr	r1, [pc, #52]	@ (8001b80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b60:	4c0a      	ldr	r4, [pc, #40]	@ (8001b8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f007 f8ad 	bl	8008ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b72:	f7fe fef3 	bl	800095c <main>
  bx  lr    
 8001b76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b80:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001b84:	080099d8 	.word	0x080099d8
  ldr r2, =_sbss
 8001b88:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001b8c:	20004e58 	.word	0x20004e58

08001b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC_IRQHandler>
	...

08001b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b98:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd4 <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd4 <HAL_Init+0x40>)
 8001b9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <HAL_Init+0x40>)
 8001baa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb0:	4b08      	ldr	r3, [pc, #32]	@ (8001bd4 <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	@ (8001bd4 <HAL_Init+0x40>)
 8001bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	f000 f8d8 	bl	8001d72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc2:	200f      	movs	r0, #15
 8001bc4:	f7ff f928 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc8:	f7ff f8fa 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023c00 	.word	0x40023c00

08001bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_IncTick+0x20>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <HAL_IncTick+0x24>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a04      	ldr	r2, [pc, #16]	@ (8001bfc <HAL_IncTick+0x24>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	20000320 	.word	0x20000320

08001c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <HAL_GetTick+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000320 	.word	0x20000320

08001c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c28:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c34:	4013      	ands	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4a:	4a04      	ldr	r2, [pc, #16]	@ (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	60d3      	str	r3, [r2, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c64:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <__NVIC_GetPriorityGrouping+0x18>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	f003 0307 	and.w	r3, r3, #7
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	db0b      	blt.n	8001ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	4907      	ldr	r1, [pc, #28]	@ (8001cb4 <__NVIC_EnableIRQ+0x38>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db0a      	blt.n	8001ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	490c      	ldr	r1, [pc, #48]	@ (8001d04 <__NVIC_SetPriority+0x4c>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce0:	e00a      	b.n	8001cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4908      	ldr	r1, [pc, #32]	@ (8001d08 <__NVIC_SetPriority+0x50>)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3b04      	subs	r3, #4
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	761a      	strb	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	@ 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f1c3 0307 	rsb	r3, r3, #7
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	bf28      	it	cs
 8001d2a:	2304      	movcs	r3, #4
 8001d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3304      	adds	r3, #4
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d902      	bls.n	8001d3c <NVIC_EncodePriority+0x30>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3b03      	subs	r3, #3
 8001d3a:	e000      	b.n	8001d3e <NVIC_EncodePriority+0x32>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	401a      	ands	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	4313      	orrs	r3, r2
         );
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	@ 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ff4c 	bl	8001c18 <__NVIC_SetPriorityGrouping>
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d9a:	f7ff ff61 	bl	8001c60 <__NVIC_GetPriorityGrouping>
 8001d9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	68b9      	ldr	r1, [r7, #8]
 8001da4:	6978      	ldr	r0, [r7, #20]
 8001da6:	f7ff ffb1 	bl	8001d0c <NVIC_EncodePriority>
 8001daa:	4602      	mov	r2, r0
 8001dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ff80 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001db8:	bf00      	nop
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff54 	bl	8001c7c <__NVIC_EnableIRQ>
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff ff0a 	bl	8001c00 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e099      	b.n	8001f2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e18:	e00f      	b.n	8001e3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e1a:	f7ff fef1 	bl	8001c00 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d908      	bls.n	8001e3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2203      	movs	r2, #3
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e078      	b.n	8001f2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1e8      	bne.n	8001e1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4b38      	ldr	r3, [pc, #224]	@ (8001f34 <HAL_DMA_Init+0x158>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d107      	bne.n	8001ea4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f023 0307 	bic.w	r3, r3, #7
 8001eba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d117      	bne.n	8001efe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00e      	beq.n	8001efe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 fb01 	bl	80024e8 <DMA_CheckFifoParam>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2240      	movs	r2, #64	@ 0x40
 8001ef0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001efa:	2301      	movs	r3, #1
 8001efc:	e016      	b.n	8001f2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 fab8 	bl	800247c <DMA_CalcBaseAndBitshift>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f14:	223f      	movs	r2, #63	@ 0x3f
 8001f16:	409a      	lsls	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	f010803f 	.word	0xf010803f

08001f38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_DMA_Start_IT+0x26>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e040      	b.n	8001fe0 <HAL_DMA_Start_IT+0xa8>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d12f      	bne.n	8001fd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2202      	movs	r2, #2
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	68b9      	ldr	r1, [r7, #8]
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fa4a 	bl	8002420 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f90:	223f      	movs	r2, #63	@ 0x3f
 8001f92:	409a      	lsls	r2, r3
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0216 	orr.w	r2, r2, #22
 8001fa6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d007      	beq.n	8001fc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0208 	orr.w	r2, r2, #8
 8001fbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	e005      	b.n	8001fde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ff6:	f7ff fe03 	bl	8001c00 <HAL_GetTick>
 8001ffa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d008      	beq.n	800201a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2280      	movs	r2, #128	@ 0x80
 800200c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e052      	b.n	80020c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0216 	bic.w	r2, r2, #22
 8002028:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695a      	ldr	r2, [r3, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002038:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d103      	bne.n	800204a <HAL_DMA_Abort+0x62>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0208 	bic.w	r2, r2, #8
 8002058:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206a:	e013      	b.n	8002094 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800206c:	f7ff fdc8 	bl	8001c00 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b05      	cmp	r3, #5
 8002078:	d90c      	bls.n	8002094 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2220      	movs	r2, #32
 800207e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2203      	movs	r2, #3
 8002084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e015      	b.n	80020c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1e4      	bne.n	800206c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a6:	223f      	movs	r2, #63	@ 0x3f
 80020a8:	409a      	lsls	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d004      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2280      	movs	r2, #128	@ 0x80
 80020e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00c      	b.n	8002100 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2205      	movs	r2, #5
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0201 	bic.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002118:	4b8e      	ldr	r3, [pc, #568]	@ (8002354 <HAL_DMA_IRQHandler+0x248>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a8e      	ldr	r2, [pc, #568]	@ (8002358 <HAL_DMA_IRQHandler+0x24c>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	0a9b      	lsrs	r3, r3, #10
 8002124:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002136:	2208      	movs	r2, #8
 8002138:	409a      	lsls	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4013      	ands	r3, r2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d01a      	beq.n	8002178 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d013      	beq.n	8002178 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0204 	bic.w	r2, r2, #4
 800215e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002164:	2208      	movs	r2, #8
 8002166:	409a      	lsls	r2, r3
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217c:	2201      	movs	r2, #1
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d012      	beq.n	80021ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00b      	beq.n	80021ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219a:	2201      	movs	r2, #1
 800219c:	409a      	lsls	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a6:	f043 0202 	orr.w	r2, r3, #2
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b2:	2204      	movs	r2, #4
 80021b4:	409a      	lsls	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d012      	beq.n	80021e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00b      	beq.n	80021e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d0:	2204      	movs	r2, #4
 80021d2:	409a      	lsls	r2, r3
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021dc:	f043 0204 	orr.w	r2, r3, #4
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e8:	2210      	movs	r2, #16
 80021ea:	409a      	lsls	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d043      	beq.n	800227c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d03c      	beq.n	800227c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002206:	2210      	movs	r2, #16
 8002208:	409a      	lsls	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d018      	beq.n	800224e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d108      	bne.n	800223c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d024      	beq.n	800227c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	4798      	blx	r3
 800223a:	e01f      	b.n	800227c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01b      	beq.n	800227c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
 800224c:	e016      	b.n	800227c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d107      	bne.n	800226c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0208 	bic.w	r2, r2, #8
 800226a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002280:	2220      	movs	r2, #32
 8002282:	409a      	lsls	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 808f 	beq.w	80023ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0310 	and.w	r3, r3, #16
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 8087 	beq.w	80023ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a2:	2220      	movs	r2, #32
 80022a4:	409a      	lsls	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b05      	cmp	r3, #5
 80022b4:	d136      	bne.n	8002324 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0216 	bic.w	r2, r2, #22
 80022c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d103      	bne.n	80022e6 <HAL_DMA_IRQHandler+0x1da>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d007      	beq.n	80022f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0208 	bic.w	r2, r2, #8
 80022f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fa:	223f      	movs	r2, #63	@ 0x3f
 80022fc:	409a      	lsls	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002316:	2b00      	cmp	r3, #0
 8002318:	d07e      	beq.n	8002418 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
        }
        return;
 8002322:	e079      	b.n	8002418 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01d      	beq.n	800236e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10d      	bne.n	800235c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002344:	2b00      	cmp	r3, #0
 8002346:	d031      	beq.n	80023ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
 8002350:	e02c      	b.n	80023ac <HAL_DMA_IRQHandler+0x2a0>
 8002352:	bf00      	nop
 8002354:	20000000 	.word	0x20000000
 8002358:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d023      	beq.n	80023ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	4798      	blx	r3
 800236c:	e01e      	b.n	80023ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10f      	bne.n	800239c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0210 	bic.w	r2, r2, #16
 800238a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d032      	beq.n	800241a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d022      	beq.n	8002406 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2205      	movs	r2, #5
 80023c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	3301      	adds	r3, #1
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d307      	bcc.n	80023f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f2      	bne.n	80023d8 <HAL_DMA_IRQHandler+0x2cc>
 80023f2:	e000      	b.n	80023f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	4798      	blx	r3
 8002416:	e000      	b.n	800241a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002418:	bf00      	nop
    }
  }
}
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800243c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b40      	cmp	r3, #64	@ 0x40
 800244c:	d108      	bne.n	8002460 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800245e:	e007      	b.n	8002470 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	60da      	str	r2, [r3, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	3b10      	subs	r3, #16
 800248c:	4a14      	ldr	r2, [pc, #80]	@ (80024e0 <DMA_CalcBaseAndBitshift+0x64>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002496:	4a13      	ldr	r2, [pc, #76]	@ (80024e4 <DMA_CalcBaseAndBitshift+0x68>)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4413      	add	r3, r2
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d909      	bls.n	80024be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024b2:	f023 0303 	bic.w	r3, r3, #3
 80024b6:	1d1a      	adds	r2, r3, #4
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80024bc:	e007      	b.n	80024ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024c6:	f023 0303 	bic.w	r3, r3, #3
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	aaaaaaab 	.word	0xaaaaaaab
 80024e4:	0800998c 	.word	0x0800998c

080024e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d11f      	bne.n	8002542 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b03      	cmp	r3, #3
 8002506:	d856      	bhi.n	80025b6 <DMA_CheckFifoParam+0xce>
 8002508:	a201      	add	r2, pc, #4	@ (adr r2, 8002510 <DMA_CheckFifoParam+0x28>)
 800250a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250e:	bf00      	nop
 8002510:	08002521 	.word	0x08002521
 8002514:	08002533 	.word	0x08002533
 8002518:	08002521 	.word	0x08002521
 800251c:	080025b7 	.word	0x080025b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002524:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d046      	beq.n	80025ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002530:	e043      	b.n	80025ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002536:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800253a:	d140      	bne.n	80025be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002540:	e03d      	b.n	80025be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800254a:	d121      	bne.n	8002590 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b03      	cmp	r3, #3
 8002550:	d837      	bhi.n	80025c2 <DMA_CheckFifoParam+0xda>
 8002552:	a201      	add	r2, pc, #4	@ (adr r2, 8002558 <DMA_CheckFifoParam+0x70>)
 8002554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002558:	08002569 	.word	0x08002569
 800255c:	0800256f 	.word	0x0800256f
 8002560:	08002569 	.word	0x08002569
 8002564:	08002581 	.word	0x08002581
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
      break;
 800256c:	e030      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002572:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d025      	beq.n	80025c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800257e:	e022      	b.n	80025c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002584:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002588:	d11f      	bne.n	80025ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800258e:	e01c      	b.n	80025ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d903      	bls.n	800259e <DMA_CheckFifoParam+0xb6>
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d003      	beq.n	80025a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800259c:	e018      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
      break;
 80025a2:	e015      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00e      	beq.n	80025ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      break;
 80025b4:	e00b      	b.n	80025ce <DMA_CheckFifoParam+0xe6>
      break;
 80025b6:	bf00      	nop
 80025b8:	e00a      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ba:	bf00      	nop
 80025bc:	e008      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
      break;
 80025be:	bf00      	nop
 80025c0:	e006      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
      break;
 80025c2:	bf00      	nop
 80025c4:	e004      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
      break;
 80025c6:	bf00      	nop
 80025c8:	e002      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80025ca:	bf00      	nop
 80025cc:	e000      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ce:	bf00      	nop
    }
  } 
  
  return status; 
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop

080025e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	@ 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	e159      	b.n	80028b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025fc:	2201      	movs	r2, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	429a      	cmp	r2, r3
 8002616:	f040 8148 	bne.w	80028aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d005      	beq.n	8002632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262e:	2b02      	cmp	r3, #2
 8002630:	d130      	bne.n	8002694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	2203      	movs	r2, #3
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002668:	2201      	movs	r2, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 0201 	and.w	r2, r3, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b03      	cmp	r3, #3
 800269e:	d017      	beq.n	80026d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d123      	bne.n	8002724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	08da      	lsrs	r2, r3, #3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3208      	adds	r2, #8
 80026e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	220f      	movs	r2, #15
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	08da      	lsrs	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3208      	adds	r2, #8
 800271e:	69b9      	ldr	r1, [r7, #24]
 8002720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0203 	and.w	r2, r3, #3
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80a2 	beq.w	80028aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b57      	ldr	r3, [pc, #348]	@ (80028c8 <HAL_GPIO_Init+0x2e8>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	4a56      	ldr	r2, [pc, #344]	@ (80028c8 <HAL_GPIO_Init+0x2e8>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002774:	6453      	str	r3, [r2, #68]	@ 0x44
 8002776:	4b54      	ldr	r3, [pc, #336]	@ (80028c8 <HAL_GPIO_Init+0x2e8>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002782:	4a52      	ldr	r2, [pc, #328]	@ (80028cc <HAL_GPIO_Init+0x2ec>)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a49      	ldr	r2, [pc, #292]	@ (80028d0 <HAL_GPIO_Init+0x2f0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d019      	beq.n	80027e2 <HAL_GPIO_Init+0x202>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a48      	ldr	r2, [pc, #288]	@ (80028d4 <HAL_GPIO_Init+0x2f4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_GPIO_Init+0x1fe>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a47      	ldr	r2, [pc, #284]	@ (80028d8 <HAL_GPIO_Init+0x2f8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00d      	beq.n	80027da <HAL_GPIO_Init+0x1fa>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a46      	ldr	r2, [pc, #280]	@ (80028dc <HAL_GPIO_Init+0x2fc>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d007      	beq.n	80027d6 <HAL_GPIO_Init+0x1f6>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a45      	ldr	r2, [pc, #276]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <HAL_GPIO_Init+0x1f2>
 80027ce:	2304      	movs	r3, #4
 80027d0:	e008      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027d2:	2307      	movs	r3, #7
 80027d4:	e006      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027d6:	2303      	movs	r3, #3
 80027d8:	e004      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027da:	2302      	movs	r3, #2
 80027dc:	e002      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027e2:	2300      	movs	r3, #0
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	f002 0203 	and.w	r2, r2, #3
 80027ea:	0092      	lsls	r2, r2, #2
 80027ec:	4093      	lsls	r3, r2
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f4:	4935      	ldr	r1, [pc, #212]	@ (80028cc <HAL_GPIO_Init+0x2ec>)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	3302      	adds	r3, #2
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002802:	4b38      	ldr	r3, [pc, #224]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002826:	4a2f      	ldr	r2, [pc, #188]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800282c:	4b2d      	ldr	r3, [pc, #180]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002850:	4a24      	ldr	r2, [pc, #144]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002856:	4b23      	ldr	r3, [pc, #140]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800287a:	4a1a      	ldr	r2, [pc, #104]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002880:	4b18      	ldr	r3, [pc, #96]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a4:	4a0f      	ldr	r2, [pc, #60]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3301      	adds	r3, #1
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b0f      	cmp	r3, #15
 80028b4:	f67f aea2 	bls.w	80025fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3724      	adds	r7, #36	@ 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40013800 	.word	0x40013800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40020800 	.word	0x40020800
 80028dc:	40020c00 	.word	0x40020c00
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40013c00 	.word	0x40013c00

080028e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
 80028f4:	4613      	mov	r3, r2
 80028f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f8:	787b      	ldrb	r3, [r7, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002904:	e003      	b.n	800290e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	041a      	lsls	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	619a      	str	r2, [r3, #24]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e267      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d075      	beq.n	8002a26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800293a:	4b88      	ldr	r3, [pc, #544]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b04      	cmp	r3, #4
 8002944:	d00c      	beq.n	8002960 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002946:	4b85      	ldr	r3, [pc, #532]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800294e:	2b08      	cmp	r3, #8
 8002950:	d112      	bne.n	8002978 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002952:	4b82      	ldr	r3, [pc, #520]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800295a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800295e:	d10b      	bne.n	8002978 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002960:	4b7e      	ldr	r3, [pc, #504]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d05b      	beq.n	8002a24 <HAL_RCC_OscConfig+0x108>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d157      	bne.n	8002a24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e242      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002980:	d106      	bne.n	8002990 <HAL_RCC_OscConfig+0x74>
 8002982:	4b76      	ldr	r3, [pc, #472]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a75      	ldr	r2, [pc, #468]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e01d      	b.n	80029cc <HAL_RCC_OscConfig+0xb0>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x98>
 800299a:	4b70      	ldr	r3, [pc, #448]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a6f      	ldr	r2, [pc, #444]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 80029a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a6c      	ldr	r2, [pc, #432]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0xb0>
 80029b4:	4b69      	ldr	r3, [pc, #420]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a68      	ldr	r2, [pc, #416]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 80029ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b66      	ldr	r3, [pc, #408]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a65      	ldr	r2, [pc, #404]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 80029c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d013      	beq.n	80029fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7ff f914 	bl	8001c00 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029dc:	f7ff f910 	bl	8001c00 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	@ 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e207      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	4b5b      	ldr	r3, [pc, #364]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0xc0>
 80029fa:	e014      	b.n	8002a26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7ff f900 	bl	8001c00 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a04:	f7ff f8fc 	bl	8001c00 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	@ 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e1f3      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a16:	4b51      	ldr	r3, [pc, #324]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0xe8>
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d063      	beq.n	8002afa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a32:	4b4a      	ldr	r3, [pc, #296]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a3e:	4b47      	ldr	r3, [pc, #284]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d11c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4a:	4b44      	ldr	r3, [pc, #272]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d116      	bne.n	8002a84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a56:	4b41      	ldr	r3, [pc, #260]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_RCC_OscConfig+0x152>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e1c7      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4937      	ldr	r1, [pc, #220]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	e03a      	b.n	8002afa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8c:	4b34      	ldr	r3, [pc, #208]	@ (8002b60 <HAL_RCC_OscConfig+0x244>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a92:	f7ff f8b5 	bl	8001c00 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a9a:	f7ff f8b1 	bl	8001c00 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e1a8      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aac:	4b2b      	ldr	r3, [pc, #172]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab8:	4b28      	ldr	r3, [pc, #160]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4925      	ldr	r1, [pc, #148]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]
 8002acc:	e015      	b.n	8002afa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ace:	4b24      	ldr	r3, [pc, #144]	@ (8002b60 <HAL_RCC_OscConfig+0x244>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7ff f894 	bl	8001c00 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002adc:	f7ff f890 	bl	8001c00 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e187      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aee:	4b1b      	ldr	r3, [pc, #108]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d036      	beq.n	8002b74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d016      	beq.n	8002b3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b0e:	4b15      	ldr	r3, [pc, #84]	@ (8002b64 <HAL_RCC_OscConfig+0x248>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b14:	f7ff f874 	bl	8001c00 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b1c:	f7ff f870 	bl	8001c00 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e167      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x200>
 8002b3a:	e01b      	b.n	8002b74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b3c:	4b09      	ldr	r3, [pc, #36]	@ (8002b64 <HAL_RCC_OscConfig+0x248>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b42:	f7ff f85d 	bl	8001c00 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b48:	e00e      	b.n	8002b68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4a:	f7ff f859 	bl	8001c00 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d907      	bls.n	8002b68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e150      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	42470000 	.word	0x42470000
 8002b64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b68:	4b88      	ldr	r3, [pc, #544]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1ea      	bne.n	8002b4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 8097 	beq.w	8002cb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b86:	4b81      	ldr	r3, [pc, #516]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10f      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	4b7d      	ldr	r3, [pc, #500]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	4a7c      	ldr	r2, [pc, #496]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba2:	4b7a      	ldr	r3, [pc, #488]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb2:	4b77      	ldr	r3, [pc, #476]	@ (8002d90 <HAL_RCC_OscConfig+0x474>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d118      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bbe:	4b74      	ldr	r3, [pc, #464]	@ (8002d90 <HAL_RCC_OscConfig+0x474>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a73      	ldr	r2, [pc, #460]	@ (8002d90 <HAL_RCC_OscConfig+0x474>)
 8002bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bca:	f7ff f819 	bl	8001c00 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd2:	f7ff f815 	bl	8001c00 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e10c      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be4:	4b6a      	ldr	r3, [pc, #424]	@ (8002d90 <HAL_RCC_OscConfig+0x474>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d106      	bne.n	8002c06 <HAL_RCC_OscConfig+0x2ea>
 8002bf8:	4b64      	ldr	r3, [pc, #400]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfc:	4a63      	ldr	r2, [pc, #396]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c04:	e01c      	b.n	8002c40 <HAL_RCC_OscConfig+0x324>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b05      	cmp	r3, #5
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x30c>
 8002c0e:	4b5f      	ldr	r3, [pc, #380]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c12:	4a5e      	ldr	r2, [pc, #376]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c14:	f043 0304 	orr.w	r3, r3, #4
 8002c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c1a:	4b5c      	ldr	r3, [pc, #368]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1e:	4a5b      	ldr	r2, [pc, #364]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0x324>
 8002c28:	4b58      	ldr	r3, [pc, #352]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2c:	4a57      	ldr	r2, [pc, #348]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c34:	4b55      	ldr	r3, [pc, #340]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c38:	4a54      	ldr	r2, [pc, #336]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c3a:	f023 0304 	bic.w	r3, r3, #4
 8002c3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d015      	beq.n	8002c74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe ffda 	bl	8001c00 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c50:	f7fe ffd6 	bl	8001c00 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e0cb      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c66:	4b49      	ldr	r3, [pc, #292]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0ee      	beq.n	8002c50 <HAL_RCC_OscConfig+0x334>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7fe ffc4 	bl	8001c00 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7c:	f7fe ffc0 	bl	8001c00 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e0b5      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c92:	4b3e      	ldr	r3, [pc, #248]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1ee      	bne.n	8002c7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d105      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca4:	4b39      	ldr	r3, [pc, #228]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	4a38      	ldr	r2, [pc, #224]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002caa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80a1 	beq.w	8002dfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cba:	4b34      	ldr	r3, [pc, #208]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d05c      	beq.n	8002d80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d141      	bne.n	8002d52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cce:	4b31      	ldr	r3, [pc, #196]	@ (8002d94 <HAL_RCC_OscConfig+0x478>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7fe ff94 	bl	8001c00 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fe ff90 	bl	8001c00 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e087      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cee:	4b27      	ldr	r3, [pc, #156]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d08:	019b      	lsls	r3, r3, #6
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d10:	085b      	lsrs	r3, r3, #1
 8002d12:	3b01      	subs	r3, #1
 8002d14:	041b      	lsls	r3, r3, #16
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1c:	061b      	lsls	r3, r3, #24
 8002d1e:	491b      	ldr	r1, [pc, #108]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d24:	4b1b      	ldr	r3, [pc, #108]	@ (8002d94 <HAL_RCC_OscConfig+0x478>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7fe ff69 	bl	8001c00 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fe ff65 	bl	8001c00 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e05c      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d44:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x416>
 8002d50:	e054      	b.n	8002dfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d52:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <HAL_RCC_OscConfig+0x478>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7fe ff52 	bl	8001c00 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d60:	f7fe ff4e 	bl	8001c00 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e045      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d72:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x444>
 8002d7e:	e03d      	b.n	8002dfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e038      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40007000 	.word	0x40007000
 8002d94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d98:	4b1b      	ldr	r3, [pc, #108]	@ (8002e08 <HAL_RCC_OscConfig+0x4ec>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d028      	beq.n	8002df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d121      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d11a      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d111      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dde:	085b      	lsrs	r3, r3, #1
 8002de0:	3b01      	subs	r3, #1
 8002de2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800

08002e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0cc      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e20:	4b68      	ldr	r3, [pc, #416]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d90c      	bls.n	8002e48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2e:	4b65      	ldr	r3, [pc, #404]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b63      	ldr	r3, [pc, #396]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0b8      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d020      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e60:	4b59      	ldr	r3, [pc, #356]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4a58      	ldr	r2, [pc, #352]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e78:	4b53      	ldr	r3, [pc, #332]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	4a52      	ldr	r2, [pc, #328]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e84:	4b50      	ldr	r3, [pc, #320]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	494d      	ldr	r1, [pc, #308]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d044      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d107      	bne.n	8002eba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	4b47      	ldr	r3, [pc, #284]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d119      	bne.n	8002eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e07f      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d003      	beq.n	8002eca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d107      	bne.n	8002eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eca:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e06f      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eda:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e067      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eea:	4b37      	ldr	r3, [pc, #220]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f023 0203 	bic.w	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4934      	ldr	r1, [pc, #208]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002efc:	f7fe fe80 	bl	8001c00 <HAL_GetTick>
 8002f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f04:	f7fe fe7c 	bl	8001c00 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e04f      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 020c 	and.w	r2, r3, #12
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d1eb      	bne.n	8002f04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b25      	ldr	r3, [pc, #148]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d20c      	bcs.n	8002f54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b22      	ldr	r3, [pc, #136]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b20      	ldr	r3, [pc, #128]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e032      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f60:	4b19      	ldr	r3, [pc, #100]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4916      	ldr	r1, [pc, #88]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f7e:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	490e      	ldr	r1, [pc, #56]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f92:	f000 f821 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8002f96:	4602      	mov	r2, r0
 8002f98:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	490a      	ldr	r1, [pc, #40]	@ (8002fcc <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	5ccb      	ldrb	r3, [r1, r3]
 8002fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002faa:	4a09      	ldr	r2, [pc, #36]	@ (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002fae:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd ff30 	bl	8000e18 <HAL_InitTick>

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023c00 	.word	0x40023c00
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	08009974 	.word	0x08009974
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	20000004 	.word	0x20000004

08002fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fdc:	b094      	sub	sp, #80	@ 0x50
 8002fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ff0:	4b79      	ldr	r3, [pc, #484]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d00d      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0x40>
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	f200 80e1 	bhi.w	80031c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x34>
 8003006:	2b04      	cmp	r3, #4
 8003008:	d003      	beq.n	8003012 <HAL_RCC_GetSysClockFreq+0x3a>
 800300a:	e0db      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800300c:	4b73      	ldr	r3, [pc, #460]	@ (80031dc <HAL_RCC_GetSysClockFreq+0x204>)
 800300e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003010:	e0db      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003012:	4b73      	ldr	r3, [pc, #460]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003014:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003016:	e0d8      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003018:	4b6f      	ldr	r3, [pc, #444]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003020:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003022:	4b6d      	ldr	r3, [pc, #436]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d063      	beq.n	80030f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302e:	4b6a      	ldr	r3, [pc, #424]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	099b      	lsrs	r3, r3, #6
 8003034:	2200      	movs	r2, #0
 8003036:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003038:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800303a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800303c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003040:	633b      	str	r3, [r7, #48]	@ 0x30
 8003042:	2300      	movs	r3, #0
 8003044:	637b      	str	r3, [r7, #52]	@ 0x34
 8003046:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800304a:	4622      	mov	r2, r4
 800304c:	462b      	mov	r3, r5
 800304e:	f04f 0000 	mov.w	r0, #0
 8003052:	f04f 0100 	mov.w	r1, #0
 8003056:	0159      	lsls	r1, r3, #5
 8003058:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800305c:	0150      	lsls	r0, r2, #5
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4621      	mov	r1, r4
 8003064:	1a51      	subs	r1, r2, r1
 8003066:	6139      	str	r1, [r7, #16]
 8003068:	4629      	mov	r1, r5
 800306a:	eb63 0301 	sbc.w	r3, r3, r1
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800307c:	4659      	mov	r1, fp
 800307e:	018b      	lsls	r3, r1, #6
 8003080:	4651      	mov	r1, sl
 8003082:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003086:	4651      	mov	r1, sl
 8003088:	018a      	lsls	r2, r1, #6
 800308a:	4651      	mov	r1, sl
 800308c:	ebb2 0801 	subs.w	r8, r2, r1
 8003090:	4659      	mov	r1, fp
 8003092:	eb63 0901 	sbc.w	r9, r3, r1
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030aa:	4690      	mov	r8, r2
 80030ac:	4699      	mov	r9, r3
 80030ae:	4623      	mov	r3, r4
 80030b0:	eb18 0303 	adds.w	r3, r8, r3
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	462b      	mov	r3, r5
 80030b8:	eb49 0303 	adc.w	r3, r9, r3
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030ca:	4629      	mov	r1, r5
 80030cc:	024b      	lsls	r3, r1, #9
 80030ce:	4621      	mov	r1, r4
 80030d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030d4:	4621      	mov	r1, r4
 80030d6:	024a      	lsls	r2, r1, #9
 80030d8:	4610      	mov	r0, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030de:	2200      	movs	r2, #0
 80030e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030e8:	f7fd f8ca 	bl	8000280 <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4613      	mov	r3, r2
 80030f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030f4:	e058      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f6:	4b38      	ldr	r3, [pc, #224]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	099b      	lsrs	r3, r3, #6
 80030fc:	2200      	movs	r2, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	4611      	mov	r1, r2
 8003102:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003106:	623b      	str	r3, [r7, #32]
 8003108:	2300      	movs	r3, #0
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
 800310c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003110:	4642      	mov	r2, r8
 8003112:	464b      	mov	r3, r9
 8003114:	f04f 0000 	mov.w	r0, #0
 8003118:	f04f 0100 	mov.w	r1, #0
 800311c:	0159      	lsls	r1, r3, #5
 800311e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003122:	0150      	lsls	r0, r2, #5
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4641      	mov	r1, r8
 800312a:	ebb2 0a01 	subs.w	sl, r2, r1
 800312e:	4649      	mov	r1, r9
 8003130:	eb63 0b01 	sbc.w	fp, r3, r1
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003140:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003144:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003148:	ebb2 040a 	subs.w	r4, r2, sl
 800314c:	eb63 050b 	sbc.w	r5, r3, fp
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	00eb      	lsls	r3, r5, #3
 800315a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800315e:	00e2      	lsls	r2, r4, #3
 8003160:	4614      	mov	r4, r2
 8003162:	461d      	mov	r5, r3
 8003164:	4643      	mov	r3, r8
 8003166:	18e3      	adds	r3, r4, r3
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	464b      	mov	r3, r9
 800316c:	eb45 0303 	adc.w	r3, r5, r3
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800317e:	4629      	mov	r1, r5
 8003180:	028b      	lsls	r3, r1, #10
 8003182:	4621      	mov	r1, r4
 8003184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003188:	4621      	mov	r1, r4
 800318a:	028a      	lsls	r2, r1, #10
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003192:	2200      	movs	r2, #0
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	61fa      	str	r2, [r7, #28]
 8003198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800319c:	f7fd f870 	bl	8000280 <__aeabi_uldivmod>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4613      	mov	r3, r2
 80031a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80031a8:	4b0b      	ldr	r3, [pc, #44]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	3301      	adds	r3, #1
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80031b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031c2:	e002      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031c4:	4b05      	ldr	r3, [pc, #20]	@ (80031dc <HAL_RCC_GetSysClockFreq+0x204>)
 80031c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3750      	adds	r7, #80	@ 0x50
 80031d0:	46bd      	mov	sp, r7
 80031d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800
 80031dc:	00f42400 	.word	0x00f42400
 80031e0:	007a1200 	.word	0x007a1200

080031e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e8:	4b03      	ldr	r3, [pc, #12]	@ (80031f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000000 	.word	0x20000000

080031fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003200:	f7ff fff0 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003204:	4602      	mov	r2, r0
 8003206:	4b05      	ldr	r3, [pc, #20]	@ (800321c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	0a9b      	lsrs	r3, r3, #10
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4903      	ldr	r1, [pc, #12]	@ (8003220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003212:	5ccb      	ldrb	r3, [r1, r3]
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	08009984 	.word	0x08009984

08003224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003228:	f7ff ffdc 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 800322c:	4602      	mov	r2, r0
 800322e:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	0b5b      	lsrs	r3, r3, #13
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	4903      	ldr	r1, [pc, #12]	@ (8003248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800323a:	5ccb      	ldrb	r3, [r1, r3]
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40023800 	.word	0x40023800
 8003248:	08009984 	.word	0x08009984

0800324c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	220f      	movs	r2, #15
 800325a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800325c:	4b12      	ldr	r3, [pc, #72]	@ (80032a8 <HAL_RCC_GetClockConfig+0x5c>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 0203 	and.w	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003268:	4b0f      	ldr	r3, [pc, #60]	@ (80032a8 <HAL_RCC_GetClockConfig+0x5c>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003274:	4b0c      	ldr	r3, [pc, #48]	@ (80032a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003280:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	08db      	lsrs	r3, r3, #3
 8003286:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800328e:	4b07      	ldr	r3, [pc, #28]	@ (80032ac <HAL_RCC_GetClockConfig+0x60>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0207 	and.w	r2, r3, #7
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	601a      	str	r2, [r3, #0]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40023c00 	.word	0x40023c00

080032b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e041      	b.n	8003346 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fe f9be 	bl	8001658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	4619      	mov	r1, r3
 80032ee:	4610      	mov	r0, r2
 80032f0:	f000 fed6 	bl	80040a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	d001      	beq.n	8003368 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e03c      	b.n	80033e2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1e      	ldr	r2, [pc, #120]	@ (80033f0 <HAL_TIM_Base_Start+0xa0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d018      	beq.n	80033ac <HAL_TIM_Base_Start+0x5c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003382:	d013      	beq.n	80033ac <HAL_TIM_Base_Start+0x5c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1a      	ldr	r2, [pc, #104]	@ (80033f4 <HAL_TIM_Base_Start+0xa4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00e      	beq.n	80033ac <HAL_TIM_Base_Start+0x5c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a19      	ldr	r2, [pc, #100]	@ (80033f8 <HAL_TIM_Base_Start+0xa8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d009      	beq.n	80033ac <HAL_TIM_Base_Start+0x5c>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a17      	ldr	r2, [pc, #92]	@ (80033fc <HAL_TIM_Base_Start+0xac>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_TIM_Base_Start+0x5c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a16      	ldr	r2, [pc, #88]	@ (8003400 <HAL_TIM_Base_Start+0xb0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d111      	bne.n	80033d0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b06      	cmp	r3, #6
 80033bc:	d010      	beq.n	80033e0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ce:	e007      	b.n	80033e0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40010000 	.word	0x40010000
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000800 	.word	0x40000800
 80033fc:	40000c00 	.word	0x40000c00
 8003400:	40014000 	.word	0x40014000

08003404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	d001      	beq.n	800341c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e044      	b.n	80034a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1e      	ldr	r2, [pc, #120]	@ (80034b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d018      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x6c>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003446:	d013      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x6c>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1a      	ldr	r2, [pc, #104]	@ (80034b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00e      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x6c>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a19      	ldr	r2, [pc, #100]	@ (80034bc <HAL_TIM_Base_Start_IT+0xb8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d009      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x6c>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a17      	ldr	r2, [pc, #92]	@ (80034c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x6c>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a16      	ldr	r2, [pc, #88]	@ (80034c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d111      	bne.n	8003494 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b06      	cmp	r3, #6
 8003480:	d010      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003492:	e007      	b.n	80034a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40010000 	.word	0x40010000
 80034b8:	40000400 	.word	0x40000400
 80034bc:	40000800 	.word	0x40000800
 80034c0:	40000c00 	.word	0x40000c00
 80034c4:	40014000 	.word	0x40014000

080034c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e041      	b.n	800355e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f839 	bl	8003566 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f000 fdca 	bl	80040a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d109      	bne.n	80035a0 <HAL_TIM_PWM_Start+0x24>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	bf14      	ite	ne
 8003598:	2301      	movne	r3, #1
 800359a:	2300      	moveq	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e022      	b.n	80035e6 <HAL_TIM_PWM_Start+0x6a>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d109      	bne.n	80035ba <HAL_TIM_PWM_Start+0x3e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	bf14      	ite	ne
 80035b2:	2301      	movne	r3, #1
 80035b4:	2300      	moveq	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	e015      	b.n	80035e6 <HAL_TIM_PWM_Start+0x6a>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d109      	bne.n	80035d4 <HAL_TIM_PWM_Start+0x58>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	bf14      	ite	ne
 80035cc:	2301      	movne	r3, #1
 80035ce:	2300      	moveq	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e008      	b.n	80035e6 <HAL_TIM_PWM_Start+0x6a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e068      	b.n	80036c0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d104      	bne.n	80035fe <HAL_TIM_PWM_Start+0x82>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035fc:	e013      	b.n	8003626 <HAL_TIM_PWM_Start+0xaa>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b04      	cmp	r3, #4
 8003602:	d104      	bne.n	800360e <HAL_TIM_PWM_Start+0x92>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800360c:	e00b      	b.n	8003626 <HAL_TIM_PWM_Start+0xaa>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b08      	cmp	r3, #8
 8003612:	d104      	bne.n	800361e <HAL_TIM_PWM_Start+0xa2>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800361c:	e003      	b.n	8003626 <HAL_TIM_PWM_Start+0xaa>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2202      	movs	r2, #2
 8003622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2201      	movs	r2, #1
 800362c:	6839      	ldr	r1, [r7, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f001 f906 	bl	8004840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a23      	ldr	r2, [pc, #140]	@ (80036c8 <HAL_TIM_PWM_Start+0x14c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d107      	bne.n	800364e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800364c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1d      	ldr	r2, [pc, #116]	@ (80036c8 <HAL_TIM_PWM_Start+0x14c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d018      	beq.n	800368a <HAL_TIM_PWM_Start+0x10e>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003660:	d013      	beq.n	800368a <HAL_TIM_PWM_Start+0x10e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a19      	ldr	r2, [pc, #100]	@ (80036cc <HAL_TIM_PWM_Start+0x150>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00e      	beq.n	800368a <HAL_TIM_PWM_Start+0x10e>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a17      	ldr	r2, [pc, #92]	@ (80036d0 <HAL_TIM_PWM_Start+0x154>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d009      	beq.n	800368a <HAL_TIM_PWM_Start+0x10e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a16      	ldr	r2, [pc, #88]	@ (80036d4 <HAL_TIM_PWM_Start+0x158>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d004      	beq.n	800368a <HAL_TIM_PWM_Start+0x10e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a14      	ldr	r2, [pc, #80]	@ (80036d8 <HAL_TIM_PWM_Start+0x15c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d111      	bne.n	80036ae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b06      	cmp	r3, #6
 800369a:	d010      	beq.n	80036be <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ac:	e007      	b.n	80036be <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40010000 	.word	0x40010000
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40000800 	.word	0x40000800
 80036d4:	40000c00 	.word	0x40000c00
 80036d8:	40014000 	.word	0x40014000

080036dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e041      	b.n	8003772 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fd ffe0 	bl	80016c8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f000 fcc0 	bl	80040a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d104      	bne.n	800379a <HAL_TIM_IC_Start_IT+0x1e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003796:	b2db      	uxtb	r3, r3
 8003798:	e013      	b.n	80037c2 <HAL_TIM_IC_Start_IT+0x46>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b04      	cmp	r3, #4
 800379e:	d104      	bne.n	80037aa <HAL_TIM_IC_Start_IT+0x2e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	e00b      	b.n	80037c2 <HAL_TIM_IC_Start_IT+0x46>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d104      	bne.n	80037ba <HAL_TIM_IC_Start_IT+0x3e>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	e003      	b.n	80037c2 <HAL_TIM_IC_Start_IT+0x46>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d104      	bne.n	80037d4 <HAL_TIM_IC_Start_IT+0x58>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e013      	b.n	80037fc <HAL_TIM_IC_Start_IT+0x80>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d104      	bne.n	80037e4 <HAL_TIM_IC_Start_IT+0x68>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	e00b      	b.n	80037fc <HAL_TIM_IC_Start_IT+0x80>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d104      	bne.n	80037f4 <HAL_TIM_IC_Start_IT+0x78>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	e003      	b.n	80037fc <HAL_TIM_IC_Start_IT+0x80>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80037fe:	7bbb      	ldrb	r3, [r7, #14]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d102      	bne.n	800380a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003804:	7b7b      	ldrb	r3, [r7, #13]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d001      	beq.n	800380e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0c2      	b.n	8003994 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d104      	bne.n	800381e <HAL_TIM_IC_Start_IT+0xa2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800381c:	e013      	b.n	8003846 <HAL_TIM_IC_Start_IT+0xca>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b04      	cmp	r3, #4
 8003822:	d104      	bne.n	800382e <HAL_TIM_IC_Start_IT+0xb2>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800382c:	e00b      	b.n	8003846 <HAL_TIM_IC_Start_IT+0xca>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d104      	bne.n	800383e <HAL_TIM_IC_Start_IT+0xc2>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800383c:	e003      	b.n	8003846 <HAL_TIM_IC_Start_IT+0xca>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2202      	movs	r2, #2
 8003842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d104      	bne.n	8003856 <HAL_TIM_IC_Start_IT+0xda>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003854:	e013      	b.n	800387e <HAL_TIM_IC_Start_IT+0x102>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b04      	cmp	r3, #4
 800385a:	d104      	bne.n	8003866 <HAL_TIM_IC_Start_IT+0xea>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003864:	e00b      	b.n	800387e <HAL_TIM_IC_Start_IT+0x102>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d104      	bne.n	8003876 <HAL_TIM_IC_Start_IT+0xfa>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003874:	e003      	b.n	800387e <HAL_TIM_IC_Start_IT+0x102>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2202      	movs	r2, #2
 800387a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b0c      	cmp	r3, #12
 8003882:	d841      	bhi.n	8003908 <HAL_TIM_IC_Start_IT+0x18c>
 8003884:	a201      	add	r2, pc, #4	@ (adr r2, 800388c <HAL_TIM_IC_Start_IT+0x110>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	080038c1 	.word	0x080038c1
 8003890:	08003909 	.word	0x08003909
 8003894:	08003909 	.word	0x08003909
 8003898:	08003909 	.word	0x08003909
 800389c:	080038d3 	.word	0x080038d3
 80038a0:	08003909 	.word	0x08003909
 80038a4:	08003909 	.word	0x08003909
 80038a8:	08003909 	.word	0x08003909
 80038ac:	080038e5 	.word	0x080038e5
 80038b0:	08003909 	.word	0x08003909
 80038b4:	08003909 	.word	0x08003909
 80038b8:	08003909 	.word	0x08003909
 80038bc:	080038f7 	.word	0x080038f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0202 	orr.w	r2, r2, #2
 80038ce:	60da      	str	r2, [r3, #12]
      break;
 80038d0:	e01d      	b.n	800390e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0204 	orr.w	r2, r2, #4
 80038e0:	60da      	str	r2, [r3, #12]
      break;
 80038e2:	e014      	b.n	800390e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0208 	orr.w	r2, r2, #8
 80038f2:	60da      	str	r2, [r3, #12]
      break;
 80038f4:	e00b      	b.n	800390e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0210 	orr.w	r2, r2, #16
 8003904:	60da      	str	r2, [r3, #12]
      break;
 8003906:	e002      	b.n	800390e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
      break;
 800390c:	bf00      	nop
  }

  if (status == HAL_OK)
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d13e      	bne.n	8003992 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2201      	movs	r2, #1
 800391a:	6839      	ldr	r1, [r7, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 ff8f 	bl	8004840 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1d      	ldr	r2, [pc, #116]	@ (800399c <HAL_TIM_IC_Start_IT+0x220>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d018      	beq.n	800395e <HAL_TIM_IC_Start_IT+0x1e2>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003934:	d013      	beq.n	800395e <HAL_TIM_IC_Start_IT+0x1e2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a19      	ldr	r2, [pc, #100]	@ (80039a0 <HAL_TIM_IC_Start_IT+0x224>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00e      	beq.n	800395e <HAL_TIM_IC_Start_IT+0x1e2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a17      	ldr	r2, [pc, #92]	@ (80039a4 <HAL_TIM_IC_Start_IT+0x228>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d009      	beq.n	800395e <HAL_TIM_IC_Start_IT+0x1e2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a16      	ldr	r2, [pc, #88]	@ (80039a8 <HAL_TIM_IC_Start_IT+0x22c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d004      	beq.n	800395e <HAL_TIM_IC_Start_IT+0x1e2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a14      	ldr	r2, [pc, #80]	@ (80039ac <HAL_TIM_IC_Start_IT+0x230>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d111      	bne.n	8003982 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b06      	cmp	r3, #6
 800396e:	d010      	beq.n	8003992 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003980:	e007      	b.n	8003992 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0201 	orr.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003992:	7bfb      	ldrb	r3, [r7, #15]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40010000 	.word	0x40010000
 80039a0:	40000400 	.word	0x40000400
 80039a4:	40000800 	.word	0x40000800
 80039a8:	40000c00 	.word	0x40000c00
 80039ac:	40014000 	.word	0x40014000

080039b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d020      	beq.n	8003a14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01b      	beq.n	8003a14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0202 	mvn.w	r2, #2
 80039e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fd fb82 	bl	8001104 <HAL_TIM_IC_CaptureCallback>
 8003a00:	e005      	b.n	8003a0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 fb2e 	bl	8004064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fb35 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d020      	beq.n	8003a60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01b      	beq.n	8003a60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0204 	mvn.w	r2, #4
 8003a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fd fb5c 	bl	8001104 <HAL_TIM_IC_CaptureCallback>
 8003a4c:	e005      	b.n	8003a5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fb08 	bl	8004064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fb0f 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d020      	beq.n	8003aac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01b      	beq.n	8003aac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0208 	mvn.w	r2, #8
 8003a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2204      	movs	r2, #4
 8003a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd fb36 	bl	8001104 <HAL_TIM_IC_CaptureCallback>
 8003a98:	e005      	b.n	8003aa6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fae2 	bl	8004064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fae9 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f003 0310 	and.w	r3, r3, #16
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d020      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01b      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f06f 0210 	mvn.w	r2, #16
 8003ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2208      	movs	r2, #8
 8003ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fd fb10 	bl	8001104 <HAL_TIM_IC_CaptureCallback>
 8003ae4:	e005      	b.n	8003af2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fabc 	bl	8004064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fac3 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00c      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0201 	mvn.w	r2, #1
 8003b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fc ffca 	bl	8000ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00c      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 ff1e 	bl	800497c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00c      	beq.n	8003b64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fa94 	bl	800408c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00c      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d007      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0220 	mvn.w	r2, #32
 8003b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fef0 	bl	8004968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_TIM_IC_ConfigChannel+0x1e>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e088      	b.n	8003cc0 <HAL_TIM_IC_ConfigChannel+0x130>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d11b      	bne.n	8003bf4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003bcc:	f000 fc80 	bl	80044d0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 020c 	bic.w	r2, r2, #12
 8003bde:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6999      	ldr	r1, [r3, #24]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	619a      	str	r2, [r3, #24]
 8003bf2:	e060      	b.n	8003cb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d11c      	bne.n	8003c34 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003c0a:	f000 fcf8 	bl	80045fe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6999      	ldr	r1, [r3, #24]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	021a      	lsls	r2, r3, #8
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	619a      	str	r2, [r3, #24]
 8003c32:	e040      	b.n	8003cb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d11b      	bne.n	8003c72 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003c4a:	f000 fd45 	bl	80046d8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69da      	ldr	r2, [r3, #28]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 020c 	bic.w	r2, r2, #12
 8003c5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69d9      	ldr	r1, [r3, #28]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	61da      	str	r2, [r3, #28]
 8003c70:	e021      	b.n	8003cb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b0c      	cmp	r3, #12
 8003c76:	d11c      	bne.n	8003cb2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003c88:	f000 fd62 	bl	8004750 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c9a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69d9      	ldr	r1, [r3, #28]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	021a      	lsls	r2, r3, #8
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	61da      	str	r2, [r3, #28]
 8003cb0:	e001      	b.n	8003cb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e0ae      	b.n	8003e44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b0c      	cmp	r3, #12
 8003cf2:	f200 809f 	bhi.w	8003e34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003e35 	.word	0x08003e35
 8003d04:	08003e35 	.word	0x08003e35
 8003d08:	08003e35 	.word	0x08003e35
 8003d0c:	08003d71 	.word	0x08003d71
 8003d10:	08003e35 	.word	0x08003e35
 8003d14:	08003e35 	.word	0x08003e35
 8003d18:	08003e35 	.word	0x08003e35
 8003d1c:	08003db3 	.word	0x08003db3
 8003d20:	08003e35 	.word	0x08003e35
 8003d24:	08003e35 	.word	0x08003e35
 8003d28:	08003e35 	.word	0x08003e35
 8003d2c:	08003df3 	.word	0x08003df3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fa3e 	bl	80041b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0208 	orr.w	r2, r2, #8
 8003d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0204 	bic.w	r2, r2, #4
 8003d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6999      	ldr	r1, [r3, #24]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	619a      	str	r2, [r3, #24]
      break;
 8003d6e:	e064      	b.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fa84 	bl	8004284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6999      	ldr	r1, [r3, #24]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	021a      	lsls	r2, r3, #8
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	619a      	str	r2, [r3, #24]
      break;
 8003db0:	e043      	b.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 facf 	bl	800435c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0208 	orr.w	r2, r2, #8
 8003dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0204 	bic.w	r2, r2, #4
 8003ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	61da      	str	r2, [r3, #28]
      break;
 8003df0:	e023      	b.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fb19 	bl	8004430 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69d9      	ldr	r1, [r3, #28]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	021a      	lsls	r2, r3, #8
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	61da      	str	r2, [r3, #28]
      break;
 8003e32:	e002      	b.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	75fb      	strb	r3, [r7, #23]
      break;
 8003e38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_TIM_ConfigClockSource+0x1c>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e0b4      	b.n	8003fd2 <HAL_TIM_ConfigClockSource+0x186>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ea0:	d03e      	beq.n	8003f20 <HAL_TIM_ConfigClockSource+0xd4>
 8003ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ea6:	f200 8087 	bhi.w	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eae:	f000 8086 	beq.w	8003fbe <HAL_TIM_ConfigClockSource+0x172>
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb6:	d87f      	bhi.n	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b70      	cmp	r3, #112	@ 0x70
 8003eba:	d01a      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0xa6>
 8003ebc:	2b70      	cmp	r3, #112	@ 0x70
 8003ebe:	d87b      	bhi.n	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b60      	cmp	r3, #96	@ 0x60
 8003ec2:	d050      	beq.n	8003f66 <HAL_TIM_ConfigClockSource+0x11a>
 8003ec4:	2b60      	cmp	r3, #96	@ 0x60
 8003ec6:	d877      	bhi.n	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec8:	2b50      	cmp	r3, #80	@ 0x50
 8003eca:	d03c      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0xfa>
 8003ecc:	2b50      	cmp	r3, #80	@ 0x50
 8003ece:	d873      	bhi.n	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed0:	2b40      	cmp	r3, #64	@ 0x40
 8003ed2:	d058      	beq.n	8003f86 <HAL_TIM_ConfigClockSource+0x13a>
 8003ed4:	2b40      	cmp	r3, #64	@ 0x40
 8003ed6:	d86f      	bhi.n	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed8:	2b30      	cmp	r3, #48	@ 0x30
 8003eda:	d064      	beq.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8003edc:	2b30      	cmp	r3, #48	@ 0x30
 8003ede:	d86b      	bhi.n	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d060      	beq.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	d867      	bhi.n	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d05c      	beq.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8003eec:	2b10      	cmp	r3, #16
 8003eee:	d05a      	beq.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ef0:	e062      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f02:	f000 fc7d 	bl	8004800 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	609a      	str	r2, [r3, #8]
      break;
 8003f1e:	e04f      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f30:	f000 fc66 	bl	8004800 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f42:	609a      	str	r2, [r3, #8]
      break;
 8003f44:	e03c      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f52:	461a      	mov	r2, r3
 8003f54:	f000 fb24 	bl	80045a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2150      	movs	r1, #80	@ 0x50
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fc33 	bl	80047ca <TIM_ITRx_SetConfig>
      break;
 8003f64:	e02c      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f72:	461a      	mov	r2, r3
 8003f74:	f000 fb80 	bl	8004678 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2160      	movs	r1, #96	@ 0x60
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fc23 	bl	80047ca <TIM_ITRx_SetConfig>
      break;
 8003f84:	e01c      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f92:	461a      	mov	r2, r3
 8003f94:	f000 fb04 	bl	80045a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2140      	movs	r1, #64	@ 0x40
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fc13 	bl	80047ca <TIM_ITRx_SetConfig>
      break;
 8003fa4:	e00c      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	f000 fc0a 	bl	80047ca <TIM_ITRx_SetConfig>
      break;
 8003fb6:	e003      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
      break;
 8003fbc:	e000      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b0c      	cmp	r3, #12
 8003fee:	d831      	bhi.n	8004054 <HAL_TIM_ReadCapturedValue+0x78>
 8003ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	0800402d 	.word	0x0800402d
 8003ffc:	08004055 	.word	0x08004055
 8004000:	08004055 	.word	0x08004055
 8004004:	08004055 	.word	0x08004055
 8004008:	08004037 	.word	0x08004037
 800400c:	08004055 	.word	0x08004055
 8004010:	08004055 	.word	0x08004055
 8004014:	08004055 	.word	0x08004055
 8004018:	08004041 	.word	0x08004041
 800401c:	08004055 	.word	0x08004055
 8004020:	08004055 	.word	0x08004055
 8004024:	08004055 	.word	0x08004055
 8004028:	0800404b 	.word	0x0800404b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004032:	60fb      	str	r3, [r7, #12]

      break;
 8004034:	e00f      	b.n	8004056 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403c:	60fb      	str	r3, [r7, #12]

      break;
 800403e:	e00a      	b.n	8004056 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004046:	60fb      	str	r3, [r7, #12]

      break;
 8004048:	e005      	b.n	8004056 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	60fb      	str	r3, [r7, #12]

      break;
 8004052:	e000      	b.n	8004056 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004054:	bf00      	nop
  }

  return tmpreg;
 8004056:	68fb      	ldr	r3, [r7, #12]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a3a      	ldr	r2, [pc, #232]	@ (800419c <TIM_Base_SetConfig+0xfc>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00f      	beq.n	80040d8 <TIM_Base_SetConfig+0x38>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040be:	d00b      	beq.n	80040d8 <TIM_Base_SetConfig+0x38>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a37      	ldr	r2, [pc, #220]	@ (80041a0 <TIM_Base_SetConfig+0x100>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d007      	beq.n	80040d8 <TIM_Base_SetConfig+0x38>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a36      	ldr	r2, [pc, #216]	@ (80041a4 <TIM_Base_SetConfig+0x104>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d003      	beq.n	80040d8 <TIM_Base_SetConfig+0x38>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a35      	ldr	r2, [pc, #212]	@ (80041a8 <TIM_Base_SetConfig+0x108>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d108      	bne.n	80040ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a2b      	ldr	r2, [pc, #172]	@ (800419c <TIM_Base_SetConfig+0xfc>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d01b      	beq.n	800412a <TIM_Base_SetConfig+0x8a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f8:	d017      	beq.n	800412a <TIM_Base_SetConfig+0x8a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a28      	ldr	r2, [pc, #160]	@ (80041a0 <TIM_Base_SetConfig+0x100>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d013      	beq.n	800412a <TIM_Base_SetConfig+0x8a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a27      	ldr	r2, [pc, #156]	@ (80041a4 <TIM_Base_SetConfig+0x104>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00f      	beq.n	800412a <TIM_Base_SetConfig+0x8a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a26      	ldr	r2, [pc, #152]	@ (80041a8 <TIM_Base_SetConfig+0x108>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00b      	beq.n	800412a <TIM_Base_SetConfig+0x8a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a25      	ldr	r2, [pc, #148]	@ (80041ac <TIM_Base_SetConfig+0x10c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d007      	beq.n	800412a <TIM_Base_SetConfig+0x8a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a24      	ldr	r2, [pc, #144]	@ (80041b0 <TIM_Base_SetConfig+0x110>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d003      	beq.n	800412a <TIM_Base_SetConfig+0x8a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a23      	ldr	r2, [pc, #140]	@ (80041b4 <TIM_Base_SetConfig+0x114>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d108      	bne.n	800413c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a0e      	ldr	r2, [pc, #56]	@ (800419c <TIM_Base_SetConfig+0xfc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d103      	bne.n	8004170 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d105      	bne.n	800418e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f023 0201 	bic.w	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	611a      	str	r2, [r3, #16]
  }
}
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40010000 	.word	0x40010000
 80041a0:	40000400 	.word	0x40000400
 80041a4:	40000800 	.word	0x40000800
 80041a8:	40000c00 	.word	0x40000c00
 80041ac:	40014000 	.word	0x40014000
 80041b0:	40014400 	.word	0x40014400
 80041b4:	40014800 	.word	0x40014800

080041b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f023 0201 	bic.w	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f023 0302 	bic.w	r3, r3, #2
 8004200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a1c      	ldr	r2, [pc, #112]	@ (8004280 <TIM_OC1_SetConfig+0xc8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d10c      	bne.n	800422e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f023 0308 	bic.w	r3, r3, #8
 800421a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f023 0304 	bic.w	r3, r3, #4
 800422c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a13      	ldr	r2, [pc, #76]	@ (8004280 <TIM_OC1_SetConfig+0xc8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d111      	bne.n	800425a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800423c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	621a      	str	r2, [r3, #32]
}
 8004274:	bf00      	nop
 8004276:	371c      	adds	r7, #28
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	40010000 	.word	0x40010000

08004284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	f023 0210 	bic.w	r2, r3, #16
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f023 0320 	bic.w	r3, r3, #32
 80042ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a1e      	ldr	r2, [pc, #120]	@ (8004358 <TIM_OC2_SetConfig+0xd4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d10d      	bne.n	8004300 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a15      	ldr	r2, [pc, #84]	@ (8004358 <TIM_OC2_SetConfig+0xd4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d113      	bne.n	8004330 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800430e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	621a      	str	r2, [r3, #32]
}
 800434a:	bf00      	nop
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40010000 	.word	0x40010000

0800435c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800438a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0303 	bic.w	r3, r3, #3
 8004392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a1d      	ldr	r2, [pc, #116]	@ (800442c <TIM_OC3_SetConfig+0xd0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10d      	bne.n	80043d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a14      	ldr	r2, [pc, #80]	@ (800442c <TIM_OC3_SetConfig+0xd0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d113      	bne.n	8004406 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	621a      	str	r2, [r3, #32]
}
 8004420:	bf00      	nop
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	40010000 	.word	0x40010000

08004430 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800445e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4313      	orrs	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800447a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	031b      	lsls	r3, r3, #12
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a10      	ldr	r2, [pc, #64]	@ (80044cc <TIM_OC4_SetConfig+0x9c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d109      	bne.n	80044a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004496:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	019b      	lsls	r3, r3, #6
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	621a      	str	r2, [r3, #32]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40010000 	.word	0x40010000

080044d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	f023 0201 	bic.w	r2, r3, #1
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4a24      	ldr	r2, [pc, #144]	@ (800458c <TIM_TI1_SetConfig+0xbc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d013      	beq.n	8004526 <TIM_TI1_SetConfig+0x56>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004504:	d00f      	beq.n	8004526 <TIM_TI1_SetConfig+0x56>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4a21      	ldr	r2, [pc, #132]	@ (8004590 <TIM_TI1_SetConfig+0xc0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00b      	beq.n	8004526 <TIM_TI1_SetConfig+0x56>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4a20      	ldr	r2, [pc, #128]	@ (8004594 <TIM_TI1_SetConfig+0xc4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d007      	beq.n	8004526 <TIM_TI1_SetConfig+0x56>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4a1f      	ldr	r2, [pc, #124]	@ (8004598 <TIM_TI1_SetConfig+0xc8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d003      	beq.n	8004526 <TIM_TI1_SetConfig+0x56>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4a1e      	ldr	r2, [pc, #120]	@ (800459c <TIM_TI1_SetConfig+0xcc>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d101      	bne.n	800452a <TIM_TI1_SetConfig+0x5a>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <TIM_TI1_SetConfig+0x5c>
 800452a:	2300      	movs	r3, #0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f023 0303 	bic.w	r3, r3, #3
 8004536:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	e003      	b.n	800454a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004550:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	b2db      	uxtb	r3, r3
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f023 030a 	bic.w	r3, r3, #10
 8004564:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f003 030a 	and.w	r3, r3, #10
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	621a      	str	r2, [r3, #32]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40010000 	.word	0x40010000
 8004590:	40000400 	.word	0x40000400
 8004594:	40000800 	.word	0x40000800
 8004598:	40000c00 	.word	0x40000c00
 800459c:	40014000 	.word	0x40014000

080045a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	f023 0201 	bic.w	r2, r3, #1
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f023 030a 	bic.w	r3, r3, #10
 80045dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	621a      	str	r2, [r3, #32]
}
 80045f2:	bf00      	nop
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045fe:	b480      	push	{r7}
 8004600:	b087      	sub	sp, #28
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	607a      	str	r2, [r7, #4]
 800460a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f023 0210 	bic.w	r2, r3, #16
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800462a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800463c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	031b      	lsls	r3, r3, #12
 8004642:	b29b      	uxth	r3, r3
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004650:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	621a      	str	r2, [r3, #32]
}
 800466c:	bf00      	nop
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f023 0210 	bic.w	r2, r3, #16
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	031b      	lsls	r3, r3, #12
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	621a      	str	r2, [r3, #32]
}
 80046cc:	bf00      	nop
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f023 0303 	bic.w	r3, r3, #3
 8004704:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004714:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	b2db      	uxtb	r3, r3
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004728:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	621a      	str	r2, [r3, #32]
}
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800477c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800478e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	031b      	lsls	r3, r3, #12
 8004794:	b29b      	uxth	r3, r3
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80047a2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	031b      	lsls	r3, r3, #12
 80047a8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b085      	sub	sp, #20
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f043 0307 	orr.w	r3, r3, #7
 80047ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	609a      	str	r2, [r3, #8]
}
 80047f4:	bf00      	nop
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800481a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	021a      	lsls	r2, r3, #8
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	431a      	orrs	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4313      	orrs	r3, r2
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	609a      	str	r2, [r3, #8]
}
 8004834:	bf00      	nop
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	2201      	movs	r2, #1
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a1a      	ldr	r2, [r3, #32]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	43db      	mvns	r3, r3
 8004862:	401a      	ands	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a1a      	ldr	r2, [r3, #32]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f003 031f 	and.w	r3, r3, #31
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	fa01 f303 	lsl.w	r3, r1, r3
 8004878:	431a      	orrs	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e050      	b.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d018      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f0:	d013      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a18      	ldr	r2, [pc, #96]	@ (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00e      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a16      	ldr	r2, [pc, #88]	@ (800495c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a15      	ldr	r2, [pc, #84]	@ (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d004      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a13      	ldr	r2, [pc, #76]	@ (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d10c      	bne.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004920:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	4313      	orrs	r3, r2
 800492a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	40014000 	.word	0x40014000

08004968 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e042      	b.n	8004a28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fd f802 	bl	80019c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2224      	movs	r2, #36	@ 0x24
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 ff4f 	bl	8005878 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695a      	ldr	r2, [r3, #20]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08a      	sub	sp, #40	@ 0x28
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d175      	bne.n	8004b3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_UART_Transmit+0x2c>
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e06e      	b.n	8004b3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2221      	movs	r2, #33	@ 0x21
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a6e:	f7fd f8c7 	bl	8001c00 <HAL_GetTick>
 8004a72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	88fa      	ldrh	r2, [r7, #6]
 8004a78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	88fa      	ldrh	r2, [r7, #6]
 8004a7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a88:	d108      	bne.n	8004a9c <HAL_UART_Transmit+0x6c>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d104      	bne.n	8004a9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	e003      	b.n	8004aa4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004aa4:	e02e      	b.n	8004b04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2180      	movs	r1, #128	@ 0x80
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 fc27 	bl	8005304 <UART_WaitOnFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e03a      	b.n	8004b3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10b      	bne.n	8004ae6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004adc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	3302      	adds	r3, #2
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	e007      	b.n	8004af6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	781a      	ldrb	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	3301      	adds	r3, #1
 8004af4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1cb      	bne.n	8004aa6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2140      	movs	r1, #64	@ 0x40
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fbf3 	bl	8005304 <UART_WaitOnFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e006      	b.n	8004b3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e000      	b.n	8004b3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
  }
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	4613      	mov	r3, r2
 8004b52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d112      	bne.n	8004b86 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <HAL_UART_Receive_DMA+0x26>
 8004b66:	88fb      	ldrh	r3, [r7, #6]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e00b      	b.n	8004b88 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 fc1b 	bl	80053b8 <UART_Start_Receive_DMA>
 8004b82:	4603      	mov	r3, r0
 8004b84:	e000      	b.n	8004b88 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
  }
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b0ba      	sub	sp, #232	@ 0xe8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10f      	bne.n	8004bf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x66>
 8004be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fd83 	bl	80056fa <UART_Receive_IT>
      return;
 8004bf4:	e25b      	b.n	80050ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 80de 	beq.w	8004dbc <HAL_UART_IRQHandler+0x22c>
 8004c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d106      	bne.n	8004c1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c10:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80d1 	beq.w	8004dbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <HAL_UART_IRQHandler+0xae>
 8004c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c36:	f043 0201 	orr.w	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <HAL_UART_IRQHandler+0xd2>
 8004c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d005      	beq.n	8004c62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5a:	f043 0202 	orr.w	r2, r3, #2
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00b      	beq.n	8004c86 <HAL_UART_IRQHandler+0xf6>
 8004c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7e:	f043 0204 	orr.w	r2, r3, #4
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d011      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x126>
 8004c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d105      	bne.n	8004caa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cae:	f043 0208 	orr.w	r2, r3, #8
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 81f2 	beq.w	80050a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <HAL_UART_IRQHandler+0x14e>
 8004ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd0:	f003 0320 	and.w	r3, r3, #32
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fd0e 	bl	80056fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce8:	2b40      	cmp	r3, #64	@ 0x40
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d103      	bne.n	8004d0a <HAL_UART_IRQHandler+0x17a>
 8004d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d04f      	beq.n	8004daa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fc16 	bl	800553c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d1a:	2b40      	cmp	r3, #64	@ 0x40
 8004d1c:	d141      	bne.n	8004da2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3314      	adds	r3, #20
 8004d24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3314      	adds	r3, #20
 8004d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1d9      	bne.n	8004d1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d013      	beq.n	8004d9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d76:	4a7e      	ldr	r2, [pc, #504]	@ (8004f70 <HAL_UART_IRQHandler+0x3e0>)
 8004d78:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fd f9a2 	bl	80020c8 <HAL_DMA_Abort_IT>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d016      	beq.n	8004db8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d94:	4610      	mov	r0, r2
 8004d96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d98:	e00e      	b.n	8004db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f99e 	bl	80050dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da0:	e00a      	b.n	8004db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f99a 	bl	80050dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da8:	e006      	b.n	8004db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f996 	bl	80050dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004db6:	e175      	b.n	80050a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db8:	bf00      	nop
    return;
 8004dba:	e173      	b.n	80050a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	f040 814f 	bne.w	8005064 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 8148 	beq.w	8005064 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd8:	f003 0310 	and.w	r3, r3, #16
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 8141 	beq.w	8005064 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004de2:	2300      	movs	r3, #0
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	60bb      	str	r3, [r7, #8]
 8004df6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e02:	2b40      	cmp	r3, #64	@ 0x40
 8004e04:	f040 80b6 	bne.w	8004f74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8145 	beq.w	80050a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e26:	429a      	cmp	r2, r3
 8004e28:	f080 813e 	bcs.w	80050a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e32:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e3e:	f000 8088 	beq.w	8004f52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004e6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004e7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1d9      	bne.n	8004e42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3314      	adds	r3, #20
 8004e94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004e9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3314      	adds	r3, #20
 8004eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004eb2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004eb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004eba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ec4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e1      	bne.n	8004e8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3314      	adds	r3, #20
 8004ed0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004eda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004edc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3314      	adds	r3, #20
 8004eea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004eee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ef0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ef4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004efc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e3      	bne.n	8004eca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330c      	adds	r3, #12
 8004f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f1a:	e853 3f00 	ldrex	r3, [r3]
 8004f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f22:	f023 0310 	bic.w	r3, r3, #16
 8004f26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004f34:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004f36:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e3      	bne.n	8004f10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fd f84b 	bl	8001fe8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2202      	movs	r2, #2
 8004f56:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	4619      	mov	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f8c1 	bl	80050f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f6e:	e09b      	b.n	80050a8 <HAL_UART_IRQHandler+0x518>
 8004f70:	08005603 	.word	0x08005603
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 808e 	beq.w	80050ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004f90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 8089 	beq.w	80050ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	330c      	adds	r3, #12
 8004fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	330c      	adds	r3, #12
 8004fba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004fbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004fc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e3      	bne.n	8004f9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3314      	adds	r3, #20
 8004fd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	623b      	str	r3, [r7, #32]
   return(result);
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	f023 0301 	bic.w	r3, r3, #1
 8004fe8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3314      	adds	r3, #20
 8004ff2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ff6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ffc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1e3      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	60fb      	str	r3, [r7, #12]
   return(result);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0310 	bic.w	r3, r3, #16
 800502e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800503c:	61fa      	str	r2, [r7, #28]
 800503e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	69b9      	ldr	r1, [r7, #24]
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	617b      	str	r3, [r7, #20]
   return(result);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e3      	bne.n	8005018 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005056:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800505a:	4619      	mov	r1, r3
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f847 	bl	80050f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005062:	e023      	b.n	80050ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800506c:	2b00      	cmp	r3, #0
 800506e:	d009      	beq.n	8005084 <HAL_UART_IRQHandler+0x4f4>
 8005070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fad4 	bl	800562a <UART_Transmit_IT>
    return;
 8005082:	e014      	b.n	80050ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00e      	beq.n	80050ae <HAL_UART_IRQHandler+0x51e>
 8005090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fb14 	bl	80056ca <UART_EndTransmit_IT>
    return;
 80050a2:	e004      	b.n	80050ae <HAL_UART_IRQHandler+0x51e>
    return;
 80050a4:	bf00      	nop
 80050a6:	e002      	b.n	80050ae <HAL_UART_IRQHandler+0x51e>
      return;
 80050a8:	bf00      	nop
 80050aa:	e000      	b.n	80050ae <HAL_UART_IRQHandler+0x51e>
      return;
 80050ac:	bf00      	nop
  }
}
 80050ae:	37e8      	adds	r7, #232	@ 0xe8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b09c      	sub	sp, #112	@ 0x70
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005114:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005120:	2b00      	cmp	r3, #0
 8005122:	d172      	bne.n	800520a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005124:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005126:	2200      	movs	r2, #0
 8005128:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800512a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	330c      	adds	r3, #12
 8005130:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800513a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800513c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005140:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800514a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800514c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005150:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005158:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e5      	bne.n	800512a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3314      	adds	r3, #20
 8005164:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800516e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	667b      	str	r3, [r7, #100]	@ 0x64
 8005176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3314      	adds	r3, #20
 800517c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800517e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005180:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005184:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800518c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e5      	bne.n	800515e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3314      	adds	r3, #20
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	623b      	str	r3, [r7, #32]
   return(result);
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80051aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3314      	adds	r3, #20
 80051b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80051b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80051b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1e5      	bne.n	8005192 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d119      	bne.n	800520a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f023 0310 	bic.w	r3, r3, #16
 80051ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	330c      	adds	r3, #12
 80051f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80051f6:	61fa      	str	r2, [r7, #28]
 80051f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	69b9      	ldr	r1, [r7, #24]
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	617b      	str	r3, [r7, #20]
   return(result);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e5      	bne.n	80051d6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800520a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800520c:	2200      	movs	r2, #0
 800520e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005214:	2b01      	cmp	r3, #1
 8005216:	d106      	bne.n	8005226 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800521a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800521c:	4619      	mov	r1, r3
 800521e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005220:	f7ff ff66 	bl	80050f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005224:	e002      	b.n	800522c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005226:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005228:	f7fc fad8 	bl	80017dc <HAL_UART_RxCpltCallback>
}
 800522c:	bf00      	nop
 800522e:	3770      	adds	r7, #112	@ 0x70
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524c:	2b01      	cmp	r3, #1
 800524e:	d108      	bne.n	8005262 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005254:	085b      	lsrs	r3, r3, #1
 8005256:	b29b      	uxth	r3, r3
 8005258:	4619      	mov	r1, r3
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f7ff ff48 	bl	80050f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005260:	e002      	b.n	8005268 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f7ff ff30 	bl	80050c8 <HAL_UART_RxHalfCpltCallback>
}
 8005268:	bf00      	nop
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005278:	2300      	movs	r3, #0
 800527a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005280:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800528c:	2b80      	cmp	r3, #128	@ 0x80
 800528e:	bf0c      	ite	eq
 8005290:	2301      	moveq	r3, #1
 8005292:	2300      	movne	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b21      	cmp	r3, #33	@ 0x21
 80052a2:	d108      	bne.n	80052b6 <UART_DMAError+0x46>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2200      	movs	r2, #0
 80052ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80052b0:	68b8      	ldr	r0, [r7, #8]
 80052b2:	f000 f91b 	bl	80054ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c0:	2b40      	cmp	r3, #64	@ 0x40
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b22      	cmp	r3, #34	@ 0x22
 80052d6:	d108      	bne.n	80052ea <UART_DMAError+0x7a>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2200      	movs	r2, #0
 80052e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80052e4:	68b8      	ldr	r0, [r7, #8]
 80052e6:	f000 f929 	bl	800553c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ee:	f043 0210 	orr.w	r2, r3, #16
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052f6:	68b8      	ldr	r0, [r7, #8]
 80052f8:	f7ff fef0 	bl	80050dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052fc:	bf00      	nop
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	4613      	mov	r3, r2
 8005312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005314:	e03b      	b.n	800538e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531c:	d037      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800531e:	f7fc fc6f 	bl	8001c00 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	6a3a      	ldr	r2, [r7, #32]
 800532a:	429a      	cmp	r2, r3
 800532c:	d302      	bcc.n	8005334 <UART_WaitOnFlagUntilTimeout+0x30>
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e03a      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b00      	cmp	r3, #0
 8005344:	d023      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b80      	cmp	r3, #128	@ 0x80
 800534a:	d020      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0x8a>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b40      	cmp	r3, #64	@ 0x40
 8005350:	d01d      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b08      	cmp	r3, #8
 800535e:	d116      	bne.n	800538e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f8e0 	bl	800553c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2208      	movs	r2, #8
 8005380:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e00f      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4013      	ands	r3, r2
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	429a      	cmp	r2, r3
 800539c:	bf0c      	ite	eq
 800539e:	2301      	moveq	r3, #1
 80053a0:	2300      	movne	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d0b4      	beq.n	8005316 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b098      	sub	sp, #96	@ 0x60
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	4613      	mov	r3, r2
 80053c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	88fa      	ldrh	r2, [r7, #6]
 80053d0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2222      	movs	r2, #34	@ 0x22
 80053dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e4:	4a3e      	ldr	r2, [pc, #248]	@ (80054e0 <UART_Start_Receive_DMA+0x128>)
 80053e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ec:	4a3d      	ldr	r2, [pc, #244]	@ (80054e4 <UART_Start_Receive_DMA+0x12c>)
 80053ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f4:	4a3c      	ldr	r2, [pc, #240]	@ (80054e8 <UART_Start_Receive_DMA+0x130>)
 80053f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fc:	2200      	movs	r2, #0
 80053fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005400:	f107 0308 	add.w	r3, r7, #8
 8005404:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	f7fc fd8e 	bl	8001f38 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800541c:	2300      	movs	r3, #0
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d019      	beq.n	800546e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	330c      	adds	r3, #12
 8005440:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800544a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800544c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005450:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	330c      	adds	r3, #12
 8005458:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800545a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800545c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005460:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e5      	bne.n	800543a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3314      	adds	r3, #20
 8005474:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800547e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	657b      	str	r3, [r7, #84]	@ 0x54
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3314      	adds	r3, #20
 800548c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800548e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005490:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005494:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e5      	bne.n	800546e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3314      	adds	r3, #20
 80054a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	617b      	str	r3, [r7, #20]
   return(result);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3314      	adds	r3, #20
 80054c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80054c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80054c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	6a39      	ldr	r1, [r7, #32]
 80054c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e5      	bne.n	80054a2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3760      	adds	r7, #96	@ 0x60
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	08005109 	.word	0x08005109
 80054e4:	08005235 	.word	0x08005235
 80054e8:	08005271 	.word	0x08005271

080054ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b089      	sub	sp, #36	@ 0x24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	330c      	adds	r3, #12
 80054fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	e853 3f00 	ldrex	r3, [r3]
 8005502:	60bb      	str	r3, [r7, #8]
   return(result);
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	69fa      	ldr	r2, [r7, #28]
 8005514:	61ba      	str	r2, [r7, #24]
 8005516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005518:	6979      	ldr	r1, [r7, #20]
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	e841 2300 	strex	r3, r2, [r1]
 8005520:	613b      	str	r3, [r7, #16]
   return(result);
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1e5      	bne.n	80054f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2220      	movs	r2, #32
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005530:	bf00      	nop
 8005532:	3724      	adds	r7, #36	@ 0x24
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800553c:	b480      	push	{r7}
 800553e:	b095      	sub	sp, #84	@ 0x54
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	330c      	adds	r3, #12
 800554a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005556:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800555a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005564:	643a      	str	r2, [r7, #64]	@ 0x40
 8005566:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800556a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e5      	bne.n	8005544 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3314      	adds	r3, #20
 800557e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	61fb      	str	r3, [r7, #28]
   return(result);
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f023 0301 	bic.w	r3, r3, #1
 800558e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3314      	adds	r3, #20
 8005596:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005598:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800559a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800559e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055a0:	e841 2300 	strex	r3, r2, [r1]
 80055a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e5      	bne.n	8005578 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d119      	bne.n	80055e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	330c      	adds	r3, #12
 80055ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f023 0310 	bic.w	r3, r3, #16
 80055ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	330c      	adds	r3, #12
 80055d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055d4:	61ba      	str	r2, [r7, #24]
 80055d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	6979      	ldr	r1, [r7, #20]
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	613b      	str	r3, [r7, #16]
   return(result);
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e5      	bne.n	80055b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055f6:	bf00      	nop
 80055f8:	3754      	adds	r7, #84	@ 0x54
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f7ff fd5d 	bl	80050dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005622:	bf00      	nop
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b21      	cmp	r3, #33	@ 0x21
 800563c:	d13e      	bne.n	80056bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005646:	d114      	bne.n	8005672 <UART_Transmit_IT+0x48>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d110      	bne.n	8005672 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005664:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	1c9a      	adds	r2, r3, #2
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	621a      	str	r2, [r3, #32]
 8005670:	e008      	b.n	8005684 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	1c59      	adds	r1, r3, #1
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6211      	str	r1, [r2, #32]
 800567c:	781a      	ldrb	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005688:	b29b      	uxth	r3, r3
 800568a:	3b01      	subs	r3, #1
 800568c:	b29b      	uxth	r3, r3
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	4619      	mov	r1, r3
 8005692:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10f      	bne.n	80056b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056b8:	2300      	movs	r3, #0
 80056ba:	e000      	b.n	80056be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056bc:	2302      	movs	r3, #2
  }
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff fce2 	bl	80050b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b08c      	sub	sp, #48	@ 0x30
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b22      	cmp	r3, #34	@ 0x22
 800570c:	f040 80ae 	bne.w	800586c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005718:	d117      	bne.n	800574a <UART_Receive_IT+0x50>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d113      	bne.n	800574a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005722:	2300      	movs	r3, #0
 8005724:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	b29b      	uxth	r3, r3
 8005734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005738:	b29a      	uxth	r2, r3
 800573a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005742:	1c9a      	adds	r2, r3, #2
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	629a      	str	r2, [r3, #40]	@ 0x28
 8005748:	e026      	b.n	8005798 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005750:	2300      	movs	r3, #0
 8005752:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800575c:	d007      	beq.n	800576e <UART_Receive_IT+0x74>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10a      	bne.n	800577c <UART_Receive_IT+0x82>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	b2da      	uxtb	r2, r3
 8005776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	e008      	b.n	800578e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005788:	b2da      	uxtb	r2, r3
 800578a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800579c:	b29b      	uxth	r3, r3
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4619      	mov	r1, r3
 80057a6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d15d      	bne.n	8005868 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0220 	bic.w	r2, r2, #32
 80057ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695a      	ldr	r2, [r3, #20]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0201 	bic.w	r2, r2, #1
 80057da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d135      	bne.n	800585e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	330c      	adds	r3, #12
 80057fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	613b      	str	r3, [r7, #16]
   return(result);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f023 0310 	bic.w	r3, r3, #16
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	330c      	adds	r3, #12
 8005816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005818:	623a      	str	r2, [r7, #32]
 800581a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	69f9      	ldr	r1, [r7, #28]
 800581e:	6a3a      	ldr	r2, [r7, #32]
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	61bb      	str	r3, [r7, #24]
   return(result);
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e5      	bne.n	80057f8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	2b10      	cmp	r3, #16
 8005838:	d10a      	bne.n	8005850 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005854:	4619      	mov	r1, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff fc4a 	bl	80050f0 <HAL_UARTEx_RxEventCallback>
 800585c:	e002      	b.n	8005864 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7fb ffbc 	bl	80017dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	e002      	b.n	800586e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	e000      	b.n	800586e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800586c:	2302      	movs	r3, #2
  }
}
 800586e:	4618      	mov	r0, r3
 8005870:	3730      	adds	r7, #48	@ 0x30
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800587c:	b0c0      	sub	sp, #256	@ 0x100
 800587e:	af00      	add	r7, sp, #0
 8005880:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005894:	68d9      	ldr	r1, [r3, #12]
 8005896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	ea40 0301 	orr.w	r3, r0, r1
 80058a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058d0:	f021 010c 	bic.w	r1, r1, #12
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058de:	430b      	orrs	r3, r1
 80058e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f2:	6999      	ldr	r1, [r3, #24]
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	ea40 0301 	orr.w	r3, r0, r1
 80058fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	4b8f      	ldr	r3, [pc, #572]	@ (8005b44 <UART_SetConfig+0x2cc>)
 8005908:	429a      	cmp	r2, r3
 800590a:	d005      	beq.n	8005918 <UART_SetConfig+0xa0>
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	4b8d      	ldr	r3, [pc, #564]	@ (8005b48 <UART_SetConfig+0x2d0>)
 8005914:	429a      	cmp	r2, r3
 8005916:	d104      	bne.n	8005922 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005918:	f7fd fc84 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 800591c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005920:	e003      	b.n	800592a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005922:	f7fd fc6b 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8005926:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005934:	f040 810c 	bne.w	8005b50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800593c:	2200      	movs	r2, #0
 800593e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005942:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005946:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800594a:	4622      	mov	r2, r4
 800594c:	462b      	mov	r3, r5
 800594e:	1891      	adds	r1, r2, r2
 8005950:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005952:	415b      	adcs	r3, r3
 8005954:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005956:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800595a:	4621      	mov	r1, r4
 800595c:	eb12 0801 	adds.w	r8, r2, r1
 8005960:	4629      	mov	r1, r5
 8005962:	eb43 0901 	adc.w	r9, r3, r1
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800597a:	4690      	mov	r8, r2
 800597c:	4699      	mov	r9, r3
 800597e:	4623      	mov	r3, r4
 8005980:	eb18 0303 	adds.w	r3, r8, r3
 8005984:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005988:	462b      	mov	r3, r5
 800598a:	eb49 0303 	adc.w	r3, r9, r3
 800598e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800599e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059a6:	460b      	mov	r3, r1
 80059a8:	18db      	adds	r3, r3, r3
 80059aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80059ac:	4613      	mov	r3, r2
 80059ae:	eb42 0303 	adc.w	r3, r2, r3
 80059b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80059b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059bc:	f7fa fc60 	bl	8000280 <__aeabi_uldivmod>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4b61      	ldr	r3, [pc, #388]	@ (8005b4c <UART_SetConfig+0x2d4>)
 80059c6:	fba3 2302 	umull	r2, r3, r3, r2
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	011c      	lsls	r4, r3, #4
 80059ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80059e0:	4642      	mov	r2, r8
 80059e2:	464b      	mov	r3, r9
 80059e4:	1891      	adds	r1, r2, r2
 80059e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059e8:	415b      	adcs	r3, r3
 80059ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059f0:	4641      	mov	r1, r8
 80059f2:	eb12 0a01 	adds.w	sl, r2, r1
 80059f6:	4649      	mov	r1, r9
 80059f8:	eb43 0b01 	adc.w	fp, r3, r1
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a10:	4692      	mov	sl, r2
 8005a12:	469b      	mov	fp, r3
 8005a14:	4643      	mov	r3, r8
 8005a16:	eb1a 0303 	adds.w	r3, sl, r3
 8005a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a1e:	464b      	mov	r3, r9
 8005a20:	eb4b 0303 	adc.w	r3, fp, r3
 8005a24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a34:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	18db      	adds	r3, r3, r3
 8005a40:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a42:	4613      	mov	r3, r2
 8005a44:	eb42 0303 	adc.w	r3, r2, r3
 8005a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a52:	f7fa fc15 	bl	8000280 <__aeabi_uldivmod>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8005b4c <UART_SetConfig+0x2d4>)
 8005a5e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	2264      	movs	r2, #100	@ 0x64
 8005a66:	fb02 f303 	mul.w	r3, r2, r3
 8005a6a:	1acb      	subs	r3, r1, r3
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a72:	4b36      	ldr	r3, [pc, #216]	@ (8005b4c <UART_SetConfig+0x2d4>)
 8005a74:	fba3 2302 	umull	r2, r3, r3, r2
 8005a78:	095b      	lsrs	r3, r3, #5
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a80:	441c      	add	r4, r3
 8005a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a8c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a94:	4642      	mov	r2, r8
 8005a96:	464b      	mov	r3, r9
 8005a98:	1891      	adds	r1, r2, r2
 8005a9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a9c:	415b      	adcs	r3, r3
 8005a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005aa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005aa4:	4641      	mov	r1, r8
 8005aa6:	1851      	adds	r1, r2, r1
 8005aa8:	6339      	str	r1, [r7, #48]	@ 0x30
 8005aaa:	4649      	mov	r1, r9
 8005aac:	414b      	adcs	r3, r1
 8005aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005abc:	4659      	mov	r1, fp
 8005abe:	00cb      	lsls	r3, r1, #3
 8005ac0:	4651      	mov	r1, sl
 8005ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ac6:	4651      	mov	r1, sl
 8005ac8:	00ca      	lsls	r2, r1, #3
 8005aca:	4610      	mov	r0, r2
 8005acc:	4619      	mov	r1, r3
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4642      	mov	r2, r8
 8005ad2:	189b      	adds	r3, r3, r2
 8005ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ad8:	464b      	mov	r3, r9
 8005ada:	460a      	mov	r2, r1
 8005adc:	eb42 0303 	adc.w	r3, r2, r3
 8005ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005af0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005af4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005af8:	460b      	mov	r3, r1
 8005afa:	18db      	adds	r3, r3, r3
 8005afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005afe:	4613      	mov	r3, r2
 8005b00:	eb42 0303 	adc.w	r3, r2, r3
 8005b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b0e:	f7fa fbb7 	bl	8000280 <__aeabi_uldivmod>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4b0d      	ldr	r3, [pc, #52]	@ (8005b4c <UART_SetConfig+0x2d4>)
 8005b18:	fba3 1302 	umull	r1, r3, r3, r2
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	2164      	movs	r1, #100	@ 0x64
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	3332      	adds	r3, #50	@ 0x32
 8005b2a:	4a08      	ldr	r2, [pc, #32]	@ (8005b4c <UART_SetConfig+0x2d4>)
 8005b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	f003 0207 	and.w	r2, r3, #7
 8005b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4422      	add	r2, r4
 8005b3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b40:	e106      	b.n	8005d50 <UART_SetConfig+0x4d8>
 8005b42:	bf00      	nop
 8005b44:	40011000 	.word	0x40011000
 8005b48:	40011400 	.word	0x40011400
 8005b4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b5a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b62:	4642      	mov	r2, r8
 8005b64:	464b      	mov	r3, r9
 8005b66:	1891      	adds	r1, r2, r2
 8005b68:	6239      	str	r1, [r7, #32]
 8005b6a:	415b      	adcs	r3, r3
 8005b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b72:	4641      	mov	r1, r8
 8005b74:	1854      	adds	r4, r2, r1
 8005b76:	4649      	mov	r1, r9
 8005b78:	eb43 0501 	adc.w	r5, r3, r1
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	00eb      	lsls	r3, r5, #3
 8005b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b8a:	00e2      	lsls	r2, r4, #3
 8005b8c:	4614      	mov	r4, r2
 8005b8e:	461d      	mov	r5, r3
 8005b90:	4643      	mov	r3, r8
 8005b92:	18e3      	adds	r3, r4, r3
 8005b94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b98:	464b      	mov	r3, r9
 8005b9a:	eb45 0303 	adc.w	r3, r5, r3
 8005b9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	008b      	lsls	r3, r1, #2
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc8:	4621      	mov	r1, r4
 8005bca:	008a      	lsls	r2, r1, #2
 8005bcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bd0:	f7fa fb56 	bl	8000280 <__aeabi_uldivmod>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4b60      	ldr	r3, [pc, #384]	@ (8005d5c <UART_SetConfig+0x4e4>)
 8005bda:	fba3 2302 	umull	r2, r3, r3, r2
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	011c      	lsls	r4, r3, #4
 8005be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bf0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	464b      	mov	r3, r9
 8005bf8:	1891      	adds	r1, r2, r2
 8005bfa:	61b9      	str	r1, [r7, #24]
 8005bfc:	415b      	adcs	r3, r3
 8005bfe:	61fb      	str	r3, [r7, #28]
 8005c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c04:	4641      	mov	r1, r8
 8005c06:	1851      	adds	r1, r2, r1
 8005c08:	6139      	str	r1, [r7, #16]
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	414b      	adcs	r3, r1
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c1c:	4659      	mov	r1, fp
 8005c1e:	00cb      	lsls	r3, r1, #3
 8005c20:	4651      	mov	r1, sl
 8005c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c26:	4651      	mov	r1, sl
 8005c28:	00ca      	lsls	r2, r1, #3
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4603      	mov	r3, r0
 8005c30:	4642      	mov	r2, r8
 8005c32:	189b      	adds	r3, r3, r2
 8005c34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c38:	464b      	mov	r3, r9
 8005c3a:	460a      	mov	r2, r1
 8005c3c:	eb42 0303 	adc.w	r3, r2, r3
 8005c40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	008b      	lsls	r3, r1, #2
 8005c60:	4641      	mov	r1, r8
 8005c62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c66:	4641      	mov	r1, r8
 8005c68:	008a      	lsls	r2, r1, #2
 8005c6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c6e:	f7fa fb07 	bl	8000280 <__aeabi_uldivmod>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4611      	mov	r1, r2
 8005c78:	4b38      	ldr	r3, [pc, #224]	@ (8005d5c <UART_SetConfig+0x4e4>)
 8005c7a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	2264      	movs	r2, #100	@ 0x64
 8005c82:	fb02 f303 	mul.w	r3, r2, r3
 8005c86:	1acb      	subs	r3, r1, r3
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	3332      	adds	r3, #50	@ 0x32
 8005c8c:	4a33      	ldr	r2, [pc, #204]	@ (8005d5c <UART_SetConfig+0x4e4>)
 8005c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c92:	095b      	lsrs	r3, r3, #5
 8005c94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c98:	441c      	add	r4, r3
 8005c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ca2:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ca4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ca8:	4642      	mov	r2, r8
 8005caa:	464b      	mov	r3, r9
 8005cac:	1891      	adds	r1, r2, r2
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	415b      	adcs	r3, r3
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cb8:	4641      	mov	r1, r8
 8005cba:	1851      	adds	r1, r2, r1
 8005cbc:	6039      	str	r1, [r7, #0]
 8005cbe:	4649      	mov	r1, r9
 8005cc0:	414b      	adcs	r3, r1
 8005cc2:	607b      	str	r3, [r7, #4]
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cd0:	4659      	mov	r1, fp
 8005cd2:	00cb      	lsls	r3, r1, #3
 8005cd4:	4651      	mov	r1, sl
 8005cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cda:	4651      	mov	r1, sl
 8005cdc:	00ca      	lsls	r2, r1, #3
 8005cde:	4610      	mov	r0, r2
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	189b      	adds	r3, r3, r2
 8005ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cea:	464b      	mov	r3, r9
 8005cec:	460a      	mov	r2, r1
 8005cee:	eb42 0303 	adc.w	r3, r2, r3
 8005cf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cfe:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d0c:	4649      	mov	r1, r9
 8005d0e:	008b      	lsls	r3, r1, #2
 8005d10:	4641      	mov	r1, r8
 8005d12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d16:	4641      	mov	r1, r8
 8005d18:	008a      	lsls	r2, r1, #2
 8005d1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d1e:	f7fa faaf 	bl	8000280 <__aeabi_uldivmod>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4b0d      	ldr	r3, [pc, #52]	@ (8005d5c <UART_SetConfig+0x4e4>)
 8005d28:	fba3 1302 	umull	r1, r3, r3, r2
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	2164      	movs	r1, #100	@ 0x64
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	3332      	adds	r3, #50	@ 0x32
 8005d3a:	4a08      	ldr	r2, [pc, #32]	@ (8005d5c <UART_SetConfig+0x4e4>)
 8005d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	f003 020f 	and.w	r2, r3, #15
 8005d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4422      	add	r2, r4
 8005d4e:	609a      	str	r2, [r3, #8]
}
 8005d50:	bf00      	nop
 8005d52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d56:	46bd      	mov	sp, r7
 8005d58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d5c:	51eb851f 	.word	0x51eb851f

08005d60 <__NVIC_SetPriority>:
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	6039      	str	r1, [r7, #0]
 8005d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	db0a      	blt.n	8005d8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	490c      	ldr	r1, [pc, #48]	@ (8005dac <__NVIC_SetPriority+0x4c>)
 8005d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d7e:	0112      	lsls	r2, r2, #4
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	440b      	add	r3, r1
 8005d84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005d88:	e00a      	b.n	8005da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	4908      	ldr	r1, [pc, #32]	@ (8005db0 <__NVIC_SetPriority+0x50>)
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	3b04      	subs	r3, #4
 8005d98:	0112      	lsls	r2, r2, #4
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	761a      	strb	r2, [r3, #24]
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	e000e100 	.word	0xe000e100
 8005db0:	e000ed00 	.word	0xe000ed00

08005db4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005db8:	4b05      	ldr	r3, [pc, #20]	@ (8005dd0 <SysTick_Handler+0x1c>)
 8005dba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005dbc:	f001 fd46 	bl	800784c <xTaskGetSchedulerState>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d001      	beq.n	8005dca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005dc6:	f002 fb3f 	bl	8008448 <xPortSysTickHandler>
  }
}
 8005dca:	bf00      	nop
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	e000e010 	.word	0xe000e010

08005dd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005dd8:	2100      	movs	r1, #0
 8005dda:	f06f 0004 	mvn.w	r0, #4
 8005dde:	f7ff ffbf 	bl	8005d60 <__NVIC_SetPriority>
#endif
}
 8005de2:	bf00      	nop
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dee:	f3ef 8305 	mrs	r3, IPSR
 8005df2:	603b      	str	r3, [r7, #0]
  return(result);
 8005df4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005dfa:	f06f 0305 	mvn.w	r3, #5
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	e00c      	b.n	8005e1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e02:	4b0a      	ldr	r3, [pc, #40]	@ (8005e2c <osKernelInitialize+0x44>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005e0a:	4b08      	ldr	r3, [pc, #32]	@ (8005e2c <osKernelInitialize+0x44>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	607b      	str	r3, [r7, #4]
 8005e14:	e002      	b.n	8005e1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005e16:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e1c:	687b      	ldr	r3, [r7, #4]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20000324 	.word	0x20000324

08005e30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e36:	f3ef 8305 	mrs	r3, IPSR
 8005e3a:	603b      	str	r3, [r7, #0]
  return(result);
 8005e3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005e42:	f06f 0305 	mvn.w	r3, #5
 8005e46:	607b      	str	r3, [r7, #4]
 8005e48:	e010      	b.n	8005e6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e78 <osKernelStart+0x48>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d109      	bne.n	8005e66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005e52:	f7ff ffbf 	bl	8005dd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005e56:	4b08      	ldr	r3, [pc, #32]	@ (8005e78 <osKernelStart+0x48>)
 8005e58:	2202      	movs	r2, #2
 8005e5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e5c:	f001 f892 	bl	8006f84 <vTaskStartScheduler>
      stat = osOK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	607b      	str	r3, [r7, #4]
 8005e64:	e002      	b.n	8005e6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e66:	f04f 33ff 	mov.w	r3, #4294967295
 8005e6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e6c:	687b      	ldr	r3, [r7, #4]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000324 	.word	0x20000324

08005e7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b08e      	sub	sp, #56	@ 0x38
 8005e80:	af04      	add	r7, sp, #16
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e8c:	f3ef 8305 	mrs	r3, IPSR
 8005e90:	617b      	str	r3, [r7, #20]
  return(result);
 8005e92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d17e      	bne.n	8005f96 <osThreadNew+0x11a>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d07b      	beq.n	8005f96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e9e:	2380      	movs	r3, #128	@ 0x80
 8005ea0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005ea2:	2318      	movs	r3, #24
 8005ea4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8005eae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d045      	beq.n	8005f42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <osThreadNew+0x48>
        name = attr->name;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d008      	beq.n	8005eea <osThreadNew+0x6e>
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	2b38      	cmp	r3, #56	@ 0x38
 8005edc:	d805      	bhi.n	8005eea <osThreadNew+0x6e>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <osThreadNew+0x72>
        return (NULL);
 8005eea:	2300      	movs	r3, #0
 8005eec:	e054      	b.n	8005f98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	089b      	lsrs	r3, r3, #2
 8005efc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00e      	beq.n	8005f24 <osThreadNew+0xa8>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	2ba7      	cmp	r3, #167	@ 0xa7
 8005f0c:	d90a      	bls.n	8005f24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d006      	beq.n	8005f24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <osThreadNew+0xa8>
        mem = 1;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	61bb      	str	r3, [r7, #24]
 8005f22:	e010      	b.n	8005f46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10c      	bne.n	8005f46 <osThreadNew+0xca>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d108      	bne.n	8005f46 <osThreadNew+0xca>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d104      	bne.n	8005f46 <osThreadNew+0xca>
          mem = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	e001      	b.n	8005f46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005f42:	2300      	movs	r3, #0
 8005f44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d110      	bne.n	8005f6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f54:	9202      	str	r2, [sp, #8]
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	6a3a      	ldr	r2, [r7, #32]
 8005f60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 fe1a 	bl	8006b9c <xTaskCreateStatic>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	613b      	str	r3, [r7, #16]
 8005f6c:	e013      	b.n	8005f96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d110      	bne.n	8005f96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	f107 0310 	add.w	r3, r7, #16
 8005f7c:	9301      	str	r3, [sp, #4]
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 fe68 	bl	8006c5c <xTaskCreate>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d001      	beq.n	8005f96 <osThreadNew+0x11a>
            hTask = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f96:	693b      	ldr	r3, [r7, #16]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3728      	adds	r7, #40	@ 0x28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fa8:	f3ef 8305 	mrs	r3, IPSR
 8005fac:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <osDelay+0x1c>
    stat = osErrorISR;
 8005fb4:	f06f 0305 	mvn.w	r3, #5
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	e007      	b.n	8005fcc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <osDelay+0x2c>
      vTaskDelay(ticks);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 ffa6 	bl	8006f18 <vTaskDelay>
    }
  }

  return (stat);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4a07      	ldr	r2, [pc, #28]	@ (8006004 <vApplicationGetIdleTaskMemory+0x2c>)
 8005fe8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	4a06      	ldr	r2, [pc, #24]	@ (8006008 <vApplicationGetIdleTaskMemory+0x30>)
 8005fee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2280      	movs	r2, #128	@ 0x80
 8005ff4:	601a      	str	r2, [r3, #0]
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000328 	.word	0x20000328
 8006008:	200003d0 	.word	0x200003d0

0800600c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4a07      	ldr	r2, [pc, #28]	@ (8006038 <vApplicationGetTimerTaskMemory+0x2c>)
 800601c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	4a06      	ldr	r2, [pc, #24]	@ (800603c <vApplicationGetTimerTaskMemory+0x30>)
 8006022:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800602a:	601a      	str	r2, [r3, #0]
}
 800602c:	bf00      	nop
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	200005d0 	.word	0x200005d0
 800603c:	20000678 	.word	0x20000678

08006040 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f103 0208 	add.w	r2, r3, #8
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f04f 32ff 	mov.w	r2, #4294967295
 8006058:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f103 0208 	add.w	r2, r3, #8
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f103 0208 	add.w	r2, r3, #8
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800609a:	b480      	push	{r7}
 800609c:	b085      	sub	sp, #20
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	601a      	str	r2, [r3, #0]
}
 80060d6:	bf00      	nop
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060e2:	b480      	push	{r7}
 80060e4:	b085      	sub	sp, #20
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d103      	bne.n	8006102 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	e00c      	b.n	800611c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3308      	adds	r3, #8
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	e002      	b.n	8006110 <vListInsert+0x2e>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	429a      	cmp	r2, r3
 800611a:	d2f6      	bcs.n	800610a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	601a      	str	r2, [r3, #0]
}
 8006148:	bf00      	nop
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6892      	ldr	r2, [r2, #8]
 800616a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6852      	ldr	r2, [r2, #4]
 8006174:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	429a      	cmp	r2, r3
 800617e:	d103      	bne.n	8006188 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	1e5a      	subs	r2, r3, #1
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10b      	bne.n	80061d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	e7fd      	b.n	80061d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80061d4:	f002 f8a8 	bl	8008328 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e0:	68f9      	ldr	r1, [r7, #12]
 80061e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061e4:	fb01 f303 	mul.w	r3, r1, r3
 80061e8:	441a      	add	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006204:	3b01      	subs	r3, #1
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800620a:	fb01 f303 	mul.w	r3, r1, r3
 800620e:	441a      	add	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	22ff      	movs	r2, #255	@ 0xff
 8006218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	22ff      	movs	r2, #255	@ 0xff
 8006220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d114      	bne.n	8006254 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d01a      	beq.n	8006268 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3310      	adds	r3, #16
 8006236:	4618      	mov	r0, r3
 8006238:	f001 f942 	bl	80074c0 <xTaskRemoveFromEventList>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d012      	beq.n	8006268 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006242:	4b0d      	ldr	r3, [pc, #52]	@ (8006278 <xQueueGenericReset+0xd0>)
 8006244:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	e009      	b.n	8006268 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3310      	adds	r3, #16
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff fef1 	bl	8006040 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3324      	adds	r3, #36	@ 0x24
 8006262:	4618      	mov	r0, r3
 8006264:	f7ff feec 	bl	8006040 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006268:	f002 f890 	bl	800838c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800626c:	2301      	movs	r3, #1
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08e      	sub	sp, #56	@ 0x38
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10b      	bne.n	80062a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80062a2:	bf00      	nop
 80062a4:	bf00      	nop
 80062a6:	e7fd      	b.n	80062a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10b      	bne.n	80062c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80062c0:	bf00      	nop
 80062c2:	bf00      	nop
 80062c4:	e7fd      	b.n	80062c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <xQueueGenericCreateStatic+0x56>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <xQueueGenericCreateStatic+0x5a>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <xQueueGenericCreateStatic+0x5c>
 80062d6:	2300      	movs	r3, #0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10b      	bne.n	80062f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	623b      	str	r3, [r7, #32]
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	e7fd      	b.n	80062f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d102      	bne.n	8006300 <xQueueGenericCreateStatic+0x84>
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <xQueueGenericCreateStatic+0x88>
 8006300:	2301      	movs	r3, #1
 8006302:	e000      	b.n	8006306 <xQueueGenericCreateStatic+0x8a>
 8006304:	2300      	movs	r3, #0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10b      	bne.n	8006322 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	61fb      	str	r3, [r7, #28]
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	e7fd      	b.n	800631e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006322:	2350      	movs	r3, #80	@ 0x50
 8006324:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b50      	cmp	r3, #80	@ 0x50
 800632a:	d00b      	beq.n	8006344 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	61bb      	str	r3, [r7, #24]
}
 800633e:	bf00      	nop
 8006340:	bf00      	nop
 8006342:	e7fd      	b.n	8006340 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006344:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800634a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00d      	beq.n	800636c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006358:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800635c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	4613      	mov	r3, r2
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	68b9      	ldr	r1, [r7, #8]
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 f805 	bl	8006376 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800636c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800636e:	4618      	mov	r0, r3
 8006370:	3730      	adds	r7, #48	@ 0x30
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	607a      	str	r2, [r7, #4]
 8006382:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d103      	bne.n	8006392 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	e002      	b.n	8006398 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063a4:	2101      	movs	r1, #1
 80063a6:	69b8      	ldr	r0, [r7, #24]
 80063a8:	f7ff fefe 	bl	80061a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	78fa      	ldrb	r2, [r7, #3]
 80063b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063b4:	bf00      	nop
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08e      	sub	sp, #56	@ 0x38
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063ca:	2300      	movs	r3, #0
 80063cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80063d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10b      	bne.n	80063f0 <xQueueGenericSend+0x34>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063ea:	bf00      	nop
 80063ec:	bf00      	nop
 80063ee:	e7fd      	b.n	80063ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d103      	bne.n	80063fe <xQueueGenericSend+0x42>
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <xQueueGenericSend+0x46>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <xQueueGenericSend+0x48>
 8006402:	2300      	movs	r3, #0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10b      	bne.n	8006420 <xQueueGenericSend+0x64>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800641a:	bf00      	nop
 800641c:	bf00      	nop
 800641e:	e7fd      	b.n	800641c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	2b02      	cmp	r3, #2
 8006424:	d103      	bne.n	800642e <xQueueGenericSend+0x72>
 8006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <xQueueGenericSend+0x76>
 800642e:	2301      	movs	r3, #1
 8006430:	e000      	b.n	8006434 <xQueueGenericSend+0x78>
 8006432:	2300      	movs	r3, #0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10b      	bne.n	8006450 <xQueueGenericSend+0x94>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	623b      	str	r3, [r7, #32]
}
 800644a:	bf00      	nop
 800644c:	bf00      	nop
 800644e:	e7fd      	b.n	800644c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006450:	f001 f9fc 	bl	800784c <xTaskGetSchedulerState>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d102      	bne.n	8006460 <xQueueGenericSend+0xa4>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <xQueueGenericSend+0xa8>
 8006460:	2301      	movs	r3, #1
 8006462:	e000      	b.n	8006466 <xQueueGenericSend+0xaa>
 8006464:	2300      	movs	r3, #0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10b      	bne.n	8006482 <xQueueGenericSend+0xc6>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	61fb      	str	r3, [r7, #28]
}
 800647c:	bf00      	nop
 800647e:	bf00      	nop
 8006480:	e7fd      	b.n	800647e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006482:	f001 ff51 	bl	8008328 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800648a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648e:	429a      	cmp	r2, r3
 8006490:	d302      	bcc.n	8006498 <xQueueGenericSend+0xdc>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b02      	cmp	r3, #2
 8006496:	d129      	bne.n	80064ec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	68b9      	ldr	r1, [r7, #8]
 800649c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800649e:	f000 fa0f 	bl	80068c0 <prvCopyDataToQueue>
 80064a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d010      	beq.n	80064ce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ae:	3324      	adds	r3, #36	@ 0x24
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 f805 	bl	80074c0 <xTaskRemoveFromEventList>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d013      	beq.n	80064e4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064bc:	4b3f      	ldr	r3, [pc, #252]	@ (80065bc <xQueueGenericSend+0x200>)
 80064be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	e00a      	b.n	80064e4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d007      	beq.n	80064e4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064d4:	4b39      	ldr	r3, [pc, #228]	@ (80065bc <xQueueGenericSend+0x200>)
 80064d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064e4:	f001 ff52 	bl	800838c <vPortExitCritical>
				return pdPASS;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e063      	b.n	80065b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d103      	bne.n	80064fa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064f2:	f001 ff4b 	bl	800838c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e05c      	b.n	80065b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d106      	bne.n	800650e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006500:	f107 0314 	add.w	r3, r7, #20
 8006504:	4618      	mov	r0, r3
 8006506:	f001 f83f 	bl	8007588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800650a:	2301      	movs	r3, #1
 800650c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800650e:	f001 ff3d 	bl	800838c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006512:	f000 fda7 	bl	8007064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006516:	f001 ff07 	bl	8008328 <vPortEnterCritical>
 800651a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006520:	b25b      	sxtb	r3, r3
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d103      	bne.n	8006530 <xQueueGenericSend+0x174>
 8006528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006532:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006536:	b25b      	sxtb	r3, r3
 8006538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653c:	d103      	bne.n	8006546 <xQueueGenericSend+0x18a>
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006546:	f001 ff21 	bl	800838c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800654a:	1d3a      	adds	r2, r7, #4
 800654c:	f107 0314 	add.w	r3, r7, #20
 8006550:	4611      	mov	r1, r2
 8006552:	4618      	mov	r0, r3
 8006554:	f001 f82e 	bl	80075b4 <xTaskCheckForTimeOut>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d124      	bne.n	80065a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800655e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006560:	f000 faa6 	bl	8006ab0 <prvIsQueueFull>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d018      	beq.n	800659c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656c:	3310      	adds	r3, #16
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	4611      	mov	r1, r2
 8006572:	4618      	mov	r0, r3
 8006574:	f000 ff52 	bl	800741c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006578:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800657a:	f000 fa31 	bl	80069e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800657e:	f000 fd7f 	bl	8007080 <xTaskResumeAll>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	f47f af7c 	bne.w	8006482 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800658a:	4b0c      	ldr	r3, [pc, #48]	@ (80065bc <xQueueGenericSend+0x200>)
 800658c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	e772      	b.n	8006482 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800659c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800659e:	f000 fa1f 	bl	80069e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065a2:	f000 fd6d 	bl	8007080 <xTaskResumeAll>
 80065a6:	e76c      	b.n	8006482 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065aa:	f000 fa19 	bl	80069e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065ae:	f000 fd67 	bl	8007080 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3738      	adds	r7, #56	@ 0x38
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b090      	sub	sp, #64	@ 0x40
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80065d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10b      	bne.n	80065f0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80065ea:	bf00      	nop
 80065ec:	bf00      	nop
 80065ee:	e7fd      	b.n	80065ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d103      	bne.n	80065fe <xQueueGenericSendFromISR+0x3e>
 80065f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <xQueueGenericSendFromISR+0x42>
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <xQueueGenericSendFromISR+0x44>
 8006602:	2300      	movs	r3, #0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10b      	bne.n	8006620 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800661a:	bf00      	nop
 800661c:	bf00      	nop
 800661e:	e7fd      	b.n	800661c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b02      	cmp	r3, #2
 8006624:	d103      	bne.n	800662e <xQueueGenericSendFromISR+0x6e>
 8006626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <xQueueGenericSendFromISR+0x72>
 800662e:	2301      	movs	r3, #1
 8006630:	e000      	b.n	8006634 <xQueueGenericSendFromISR+0x74>
 8006632:	2300      	movs	r3, #0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10b      	bne.n	8006650 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	623b      	str	r3, [r7, #32]
}
 800664a:	bf00      	nop
 800664c:	bf00      	nop
 800664e:	e7fd      	b.n	800664c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006650:	f001 ff4a 	bl	80084e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006654:	f3ef 8211 	mrs	r2, BASEPRI
 8006658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	61fa      	str	r2, [r7, #28]
 800666a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800666c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800666e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006678:	429a      	cmp	r2, r3
 800667a:	d302      	bcc.n	8006682 <xQueueGenericSendFromISR+0xc2>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b02      	cmp	r3, #2
 8006680:	d12f      	bne.n	80066e2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006684:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006688:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800668c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006690:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	68b9      	ldr	r1, [r7, #8]
 8006696:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006698:	f000 f912 	bl	80068c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800669c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80066a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a4:	d112      	bne.n	80066cc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d016      	beq.n	80066dc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b0:	3324      	adds	r3, #36	@ 0x24
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 ff04 	bl	80074c0 <xTaskRemoveFromEventList>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00e      	beq.n	80066dc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00b      	beq.n	80066dc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	e007      	b.n	80066dc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80066d0:	3301      	adds	r3, #1
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	b25a      	sxtb	r2, r3
 80066d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80066dc:	2301      	movs	r3, #1
 80066de:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80066e0:	e001      	b.n	80066e6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3740      	adds	r7, #64	@ 0x40
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08c      	sub	sp, #48	@ 0x30
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006708:	2300      	movs	r3, #0
 800670a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10b      	bne.n	800672e <xQueueReceive+0x32>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	623b      	str	r3, [r7, #32]
}
 8006728:	bf00      	nop
 800672a:	bf00      	nop
 800672c:	e7fd      	b.n	800672a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d103      	bne.n	800673c <xQueueReceive+0x40>
 8006734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <xQueueReceive+0x44>
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <xQueueReceive+0x46>
 8006740:	2300      	movs	r3, #0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10b      	bne.n	800675e <xQueueReceive+0x62>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	61fb      	str	r3, [r7, #28]
}
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	e7fd      	b.n	800675a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800675e:	f001 f875 	bl	800784c <xTaskGetSchedulerState>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d102      	bne.n	800676e <xQueueReceive+0x72>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <xQueueReceive+0x76>
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <xQueueReceive+0x78>
 8006772:	2300      	movs	r3, #0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10b      	bne.n	8006790 <xQueueReceive+0x94>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	61bb      	str	r3, [r7, #24]
}
 800678a:	bf00      	nop
 800678c:	bf00      	nop
 800678e:	e7fd      	b.n	800678c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006790:	f001 fdca 	bl	8008328 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006798:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01f      	beq.n	80067e0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067a4:	f000 f8f6 	bl	8006994 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067aa:	1e5a      	subs	r2, r3, #1
 80067ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00f      	beq.n	80067d8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ba:	3310      	adds	r3, #16
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fe7f 	bl	80074c0 <xTaskRemoveFromEventList>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d007      	beq.n	80067d8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80067c8:	4b3c      	ldr	r3, [pc, #240]	@ (80068bc <xQueueReceive+0x1c0>)
 80067ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067d8:	f001 fdd8 	bl	800838c <vPortExitCritical>
				return pdPASS;
 80067dc:	2301      	movs	r3, #1
 80067de:	e069      	b.n	80068b4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067e6:	f001 fdd1 	bl	800838c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e062      	b.n	80068b4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d106      	bne.n	8006802 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067f4:	f107 0310 	add.w	r3, r7, #16
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fec5 	bl	8007588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067fe:	2301      	movs	r3, #1
 8006800:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006802:	f001 fdc3 	bl	800838c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006806:	f000 fc2d 	bl	8007064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800680a:	f001 fd8d 	bl	8008328 <vPortEnterCritical>
 800680e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006810:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006814:	b25b      	sxtb	r3, r3
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d103      	bne.n	8006824 <xQueueReceive+0x128>
 800681c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006826:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800682a:	b25b      	sxtb	r3, r3
 800682c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006830:	d103      	bne.n	800683a <xQueueReceive+0x13e>
 8006832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800683a:	f001 fda7 	bl	800838c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800683e:	1d3a      	adds	r2, r7, #4
 8006840:	f107 0310 	add.w	r3, r7, #16
 8006844:	4611      	mov	r1, r2
 8006846:	4618      	mov	r0, r3
 8006848:	f000 feb4 	bl	80075b4 <xTaskCheckForTimeOut>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d123      	bne.n	800689a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006854:	f000 f916 	bl	8006a84 <prvIsQueueEmpty>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d017      	beq.n	800688e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800685e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006860:	3324      	adds	r3, #36	@ 0x24
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	4611      	mov	r1, r2
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fdd8 	bl	800741c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800686c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800686e:	f000 f8b7 	bl	80069e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006872:	f000 fc05 	bl	8007080 <xTaskResumeAll>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d189      	bne.n	8006790 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800687c:	4b0f      	ldr	r3, [pc, #60]	@ (80068bc <xQueueReceive+0x1c0>)
 800687e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	e780      	b.n	8006790 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800688e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006890:	f000 f8a6 	bl	80069e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006894:	f000 fbf4 	bl	8007080 <xTaskResumeAll>
 8006898:	e77a      	b.n	8006790 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800689a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800689c:	f000 f8a0 	bl	80069e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068a0:	f000 fbee 	bl	8007080 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068a6:	f000 f8ed 	bl	8006a84 <prvIsQueueEmpty>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f43f af6f 	beq.w	8006790 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3730      	adds	r7, #48	@ 0x30
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	e000ed04 	.word	0xe000ed04

080068c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068cc:	2300      	movs	r3, #0
 80068ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10d      	bne.n	80068fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d14d      	bne.n	8006982 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 ffcc 	bl	8007888 <xTaskPriorityDisinherit>
 80068f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	609a      	str	r2, [r3, #8]
 80068f8:	e043      	b.n	8006982 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d119      	bne.n	8006934 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6858      	ldr	r0, [r3, #4]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006908:	461a      	mov	r2, r3
 800690a:	68b9      	ldr	r1, [r7, #8]
 800690c:	f002 fa05 	bl	8008d1a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006918:	441a      	add	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	429a      	cmp	r2, r3
 8006928:	d32b      	bcc.n	8006982 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	605a      	str	r2, [r3, #4]
 8006932:	e026      	b.n	8006982 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	68d8      	ldr	r0, [r3, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693c:	461a      	mov	r2, r3
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	f002 f9eb 	bl	8008d1a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694c:	425b      	negs	r3, r3
 800694e:	441a      	add	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	429a      	cmp	r2, r3
 800695e:	d207      	bcs.n	8006970 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006968:	425b      	negs	r3, r3
 800696a:	441a      	add	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b02      	cmp	r3, #2
 8006974:	d105      	bne.n	8006982 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	3b01      	subs	r3, #1
 8006980:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800698a:	697b      	ldr	r3, [r7, #20]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d018      	beq.n	80069d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ae:	441a      	add	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68da      	ldr	r2, [r3, #12]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d303      	bcc.n	80069c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68d9      	ldr	r1, [r3, #12]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d0:	461a      	mov	r2, r3
 80069d2:	6838      	ldr	r0, [r7, #0]
 80069d4:	f002 f9a1 	bl	8008d1a <memcpy>
	}
}
 80069d8:	bf00      	nop
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069e8:	f001 fc9e 	bl	8008328 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069f4:	e011      	b.n	8006a1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d012      	beq.n	8006a24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3324      	adds	r3, #36	@ 0x24
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fd5c 	bl	80074c0 <xTaskRemoveFromEventList>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a0e:	f000 fe35 	bl	800767c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	dce9      	bgt.n	80069f6 <prvUnlockQueue+0x16>
 8006a22:	e000      	b.n	8006a26 <prvUnlockQueue+0x46>
					break;
 8006a24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	22ff      	movs	r2, #255	@ 0xff
 8006a2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006a2e:	f001 fcad 	bl	800838c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a32:	f001 fc79 	bl	8008328 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a3e:	e011      	b.n	8006a64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d012      	beq.n	8006a6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	3310      	adds	r3, #16
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 fd37 	bl	80074c0 <xTaskRemoveFromEventList>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a58:	f000 fe10 	bl	800767c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a5c:	7bbb      	ldrb	r3, [r7, #14]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	dce9      	bgt.n	8006a40 <prvUnlockQueue+0x60>
 8006a6c:	e000      	b.n	8006a70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	22ff      	movs	r2, #255	@ 0xff
 8006a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006a78:	f001 fc88 	bl	800838c <vPortExitCritical>
}
 8006a7c:	bf00      	nop
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a8c:	f001 fc4c 	bl	8008328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d102      	bne.n	8006a9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	e001      	b.n	8006aa2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aa2:	f001 fc73 	bl	800838c <vPortExitCritical>

	return xReturn;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ab8:	f001 fc36 	bl	8008328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d102      	bne.n	8006ace <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	e001      	b.n	8006ad2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ad2:	f001 fc5b 	bl	800838c <vPortExitCritical>

	return xReturn;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	e014      	b.n	8006b1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006af0:	4a0f      	ldr	r2, [pc, #60]	@ (8006b30 <vQueueAddToRegistry+0x50>)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10b      	bne.n	8006b14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006afc:	490c      	ldr	r1, [pc, #48]	@ (8006b30 <vQueueAddToRegistry+0x50>)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b06:	4a0a      	ldr	r2, [pc, #40]	@ (8006b30 <vQueueAddToRegistry+0x50>)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	4413      	add	r3, r2
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b12:	e006      	b.n	8006b22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	3301      	adds	r3, #1
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b07      	cmp	r3, #7
 8006b1e:	d9e7      	bls.n	8006af0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	20000a78 	.word	0x20000a78

08006b34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b44:	f001 fbf0 	bl	8008328 <vPortEnterCritical>
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b4e:	b25b      	sxtb	r3, r3
 8006b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b54:	d103      	bne.n	8006b5e <vQueueWaitForMessageRestricted+0x2a>
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b64:	b25b      	sxtb	r3, r3
 8006b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6a:	d103      	bne.n	8006b74 <vQueueWaitForMessageRestricted+0x40>
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b74:	f001 fc0a 	bl	800838c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d106      	bne.n	8006b8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	3324      	adds	r3, #36	@ 0x24
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	68b9      	ldr	r1, [r7, #8]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 fc6d 	bl	8007468 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b8e:	6978      	ldr	r0, [r7, #20]
 8006b90:	f7ff ff26 	bl	80069e0 <prvUnlockQueue>
	}
 8006b94:	bf00      	nop
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b08e      	sub	sp, #56	@ 0x38
 8006ba0:	af04      	add	r7, sp, #16
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
 8006ba8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10b      	bne.n	8006bc8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb4:	f383 8811 	msr	BASEPRI, r3
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	623b      	str	r3, [r7, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	bf00      	nop
 8006bc6:	e7fd      	b.n	8006bc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10b      	bne.n	8006be6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	61fb      	str	r3, [r7, #28]
}
 8006be0:	bf00      	nop
 8006be2:	bf00      	nop
 8006be4:	e7fd      	b.n	8006be2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006be6:	23a8      	movs	r3, #168	@ 0xa8
 8006be8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2ba8      	cmp	r3, #168	@ 0xa8
 8006bee:	d00b      	beq.n	8006c08 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	61bb      	str	r3, [r7, #24]
}
 8006c02:	bf00      	nop
 8006c04:	bf00      	nop
 8006c06:	e7fd      	b.n	8006c04 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01e      	beq.n	8006c4e <xTaskCreateStatic+0xb2>
 8006c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d01b      	beq.n	8006c4e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c18:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c1e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c28:	2300      	movs	r3, #0
 8006c2a:	9303      	str	r3, [sp, #12]
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2e:	9302      	str	r3, [sp, #8]
 8006c30:	f107 0314 	add.w	r3, r7, #20
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f851 	bl	8006ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c48:	f000 f8f6 	bl	8006e38 <prvAddNewTaskToReadyList>
 8006c4c:	e001      	b.n	8006c52 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c52:	697b      	ldr	r3, [r7, #20]
	}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3728      	adds	r7, #40	@ 0x28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08c      	sub	sp, #48	@ 0x30
 8006c60:	af04      	add	r7, sp, #16
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c6c:	88fb      	ldrh	r3, [r7, #6]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 fc7b 	bl	800856c <pvPortMalloc>
 8006c76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00e      	beq.n	8006c9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c7e:	20a8      	movs	r0, #168	@ 0xa8
 8006c80:	f001 fc74 	bl	800856c <pvPortMalloc>
 8006c84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c92:	e005      	b.n	8006ca0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c94:	6978      	ldr	r0, [r7, #20]
 8006c96:	f001 fd37 	bl	8008708 <vPortFree>
 8006c9a:	e001      	b.n	8006ca0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d017      	beq.n	8006cd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cae:	88fa      	ldrh	r2, [r7, #6]
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	9303      	str	r3, [sp, #12]
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	9302      	str	r3, [sp, #8]
 8006cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cba:	9301      	str	r3, [sp, #4]
 8006cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	68b9      	ldr	r1, [r7, #8]
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f000 f80f 	bl	8006ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cca:	69f8      	ldr	r0, [r7, #28]
 8006ccc:	f000 f8b4 	bl	8006e38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	61bb      	str	r3, [r7, #24]
 8006cd4:	e002      	b.n	8006cdc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cdc:	69bb      	ldr	r3, [r7, #24]
	}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3720      	adds	r7, #32
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	461a      	mov	r2, r3
 8006d00:	21a5      	movs	r1, #165	@ 0xa5
 8006d02:	f001 ff38 	bl	8008b76 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d10:	3b01      	subs	r3, #1
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	f023 0307 	bic.w	r3, r3, #7
 8006d1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00b      	beq.n	8006d42 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	617b      	str	r3, [r7, #20]
}
 8006d3c:	bf00      	nop
 8006d3e:	bf00      	nop
 8006d40:	e7fd      	b.n	8006d3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01f      	beq.n	8006d88 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d48:	2300      	movs	r3, #0
 8006d4a:	61fb      	str	r3, [r7, #28]
 8006d4c:	e012      	b.n	8006d74 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	4413      	add	r3, r2
 8006d54:	7819      	ldrb	r1, [r3, #0]
 8006d56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	3334      	adds	r3, #52	@ 0x34
 8006d5e:	460a      	mov	r2, r1
 8006d60:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d006      	beq.n	8006d7c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	3301      	adds	r3, #1
 8006d72:	61fb      	str	r3, [r7, #28]
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	2b0f      	cmp	r3, #15
 8006d78:	d9e9      	bls.n	8006d4e <prvInitialiseNewTask+0x66>
 8006d7a:	e000      	b.n	8006d7e <prvInitialiseNewTask+0x96>
			{
				break;
 8006d7c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d86:	e003      	b.n	8006d90 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d92:	2b37      	cmp	r3, #55	@ 0x37
 8006d94:	d901      	bls.n	8006d9a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d96:	2337      	movs	r3, #55	@ 0x37
 8006d98:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006da4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	2200      	movs	r2, #0
 8006daa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dae:	3304      	adds	r3, #4
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff f965 	bl	8006080 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db8:	3318      	adds	r3, #24
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff f960 	bl	8006080 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dc4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dd4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de8:	3354      	adds	r3, #84	@ 0x54
 8006dea:	224c      	movs	r2, #76	@ 0x4c
 8006dec:	2100      	movs	r1, #0
 8006dee:	4618      	mov	r0, r3
 8006df0:	f001 fec1 	bl	8008b76 <memset>
 8006df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df6:	4a0d      	ldr	r2, [pc, #52]	@ (8006e2c <prvInitialiseNewTask+0x144>)
 8006df8:	659a      	str	r2, [r3, #88]	@ 0x58
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfc:	4a0c      	ldr	r2, [pc, #48]	@ (8006e30 <prvInitialiseNewTask+0x148>)
 8006dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e02:	4a0c      	ldr	r2, [pc, #48]	@ (8006e34 <prvInitialiseNewTask+0x14c>)
 8006e04:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	68f9      	ldr	r1, [r7, #12]
 8006e0a:	69b8      	ldr	r0, [r7, #24]
 8006e0c:	f001 f95a 	bl	80080c4 <pxPortInitialiseStack>
 8006e10:	4602      	mov	r2, r0
 8006e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e22:	bf00      	nop
 8006e24:	3720      	adds	r7, #32
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20004d0c 	.word	0x20004d0c
 8006e30:	20004d74 	.word	0x20004d74
 8006e34:	20004ddc 	.word	0x20004ddc

08006e38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e40:	f001 fa72 	bl	8008328 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e44:	4b2d      	ldr	r3, [pc, #180]	@ (8006efc <prvAddNewTaskToReadyList+0xc4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	4a2c      	ldr	r2, [pc, #176]	@ (8006efc <prvAddNewTaskToReadyList+0xc4>)
 8006e4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8006f00 <prvAddNewTaskToReadyList+0xc8>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d109      	bne.n	8006e6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e56:	4a2a      	ldr	r2, [pc, #168]	@ (8006f00 <prvAddNewTaskToReadyList+0xc8>)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e5c:	4b27      	ldr	r3, [pc, #156]	@ (8006efc <prvAddNewTaskToReadyList+0xc4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d110      	bne.n	8006e86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e64:	f000 fc2e 	bl	80076c4 <prvInitialiseTaskLists>
 8006e68:	e00d      	b.n	8006e86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e6a:	4b26      	ldr	r3, [pc, #152]	@ (8006f04 <prvAddNewTaskToReadyList+0xcc>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d109      	bne.n	8006e86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e72:	4b23      	ldr	r3, [pc, #140]	@ (8006f00 <prvAddNewTaskToReadyList+0xc8>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d802      	bhi.n	8006e86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e80:	4a1f      	ldr	r2, [pc, #124]	@ (8006f00 <prvAddNewTaskToReadyList+0xc8>)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e86:	4b20      	ldr	r3, [pc, #128]	@ (8006f08 <prvAddNewTaskToReadyList+0xd0>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8006f08 <prvAddNewTaskToReadyList+0xd0>)
 8006e8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e90:	4b1d      	ldr	r3, [pc, #116]	@ (8006f08 <prvAddNewTaskToReadyList+0xd0>)
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8006f0c <prvAddNewTaskToReadyList+0xd4>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d903      	bls.n	8006eac <prvAddNewTaskToReadyList+0x74>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea8:	4a18      	ldr	r2, [pc, #96]	@ (8006f0c <prvAddNewTaskToReadyList+0xd4>)
 8006eaa:	6013      	str	r3, [r2, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4a15      	ldr	r2, [pc, #84]	@ (8006f10 <prvAddNewTaskToReadyList+0xd8>)
 8006eba:	441a      	add	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	3304      	adds	r3, #4
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	f7ff f8e9 	bl	800609a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ec8:	f001 fa60 	bl	800838c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8006f04 <prvAddNewTaskToReadyList+0xcc>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00e      	beq.n	8006ef2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8006f00 <prvAddNewTaskToReadyList+0xc8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d207      	bcs.n	8006ef2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f14 <prvAddNewTaskToReadyList+0xdc>)
 8006ee4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20000f8c 	.word	0x20000f8c
 8006f00:	20000ab8 	.word	0x20000ab8
 8006f04:	20000f98 	.word	0x20000f98
 8006f08:	20000fa8 	.word	0x20000fa8
 8006f0c:	20000f94 	.word	0x20000f94
 8006f10:	20000abc 	.word	0x20000abc
 8006f14:	e000ed04 	.word	0xe000ed04

08006f18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d018      	beq.n	8006f5c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f2a:	4b14      	ldr	r3, [pc, #80]	@ (8006f7c <vTaskDelay+0x64>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00b      	beq.n	8006f4a <vTaskDelay+0x32>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	60bb      	str	r3, [r7, #8]
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	e7fd      	b.n	8006f46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f4a:	f000 f88b 	bl	8007064 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f4e:	2100      	movs	r1, #0
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fd09 	bl	8007968 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f56:	f000 f893 	bl	8007080 <xTaskResumeAll>
 8006f5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d107      	bne.n	8006f72 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006f62:	4b07      	ldr	r3, [pc, #28]	@ (8006f80 <vTaskDelay+0x68>)
 8006f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f72:	bf00      	nop
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000fb4 	.word	0x20000fb4
 8006f80:	e000ed04 	.word	0xe000ed04

08006f84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08a      	sub	sp, #40	@ 0x28
 8006f88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f92:	463a      	mov	r2, r7
 8006f94:	1d39      	adds	r1, r7, #4
 8006f96:	f107 0308 	add.w	r3, r7, #8
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff f81c 	bl	8005fd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	9202      	str	r2, [sp, #8]
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	2300      	movs	r3, #0
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	460a      	mov	r2, r1
 8006fb2:	4924      	ldr	r1, [pc, #144]	@ (8007044 <vTaskStartScheduler+0xc0>)
 8006fb4:	4824      	ldr	r0, [pc, #144]	@ (8007048 <vTaskStartScheduler+0xc4>)
 8006fb6:	f7ff fdf1 	bl	8006b9c <xTaskCreateStatic>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4a23      	ldr	r2, [pc, #140]	@ (800704c <vTaskStartScheduler+0xc8>)
 8006fbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fc0:	4b22      	ldr	r3, [pc, #136]	@ (800704c <vTaskStartScheduler+0xc8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	e001      	b.n	8006fd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d102      	bne.n	8006fde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006fd8:	f000 fd1a 	bl	8007a10 <xTimerCreateTimerTask>
 8006fdc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d11b      	bne.n	800701c <vTaskStartScheduler+0x98>
	__asm volatile
 8006fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	613b      	str	r3, [r7, #16]
}
 8006ff6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ff8:	4b15      	ldr	r3, [pc, #84]	@ (8007050 <vTaskStartScheduler+0xcc>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3354      	adds	r3, #84	@ 0x54
 8006ffe:	4a15      	ldr	r2, [pc, #84]	@ (8007054 <vTaskStartScheduler+0xd0>)
 8007000:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007002:	4b15      	ldr	r3, [pc, #84]	@ (8007058 <vTaskStartScheduler+0xd4>)
 8007004:	f04f 32ff 	mov.w	r2, #4294967295
 8007008:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800700a:	4b14      	ldr	r3, [pc, #80]	@ (800705c <vTaskStartScheduler+0xd8>)
 800700c:	2201      	movs	r2, #1
 800700e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007010:	4b13      	ldr	r3, [pc, #76]	@ (8007060 <vTaskStartScheduler+0xdc>)
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007016:	f001 f8e3 	bl	80081e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800701a:	e00f      	b.n	800703c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007022:	d10b      	bne.n	800703c <vTaskStartScheduler+0xb8>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	60fb      	str	r3, [r7, #12]
}
 8007036:	bf00      	nop
 8007038:	bf00      	nop
 800703a:	e7fd      	b.n	8007038 <vTaskStartScheduler+0xb4>
}
 800703c:	bf00      	nop
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	080098cc 	.word	0x080098cc
 8007048:	08007695 	.word	0x08007695
 800704c:	20000fb0 	.word	0x20000fb0
 8007050:	20000ab8 	.word	0x20000ab8
 8007054:	2000001c 	.word	0x2000001c
 8007058:	20000fac 	.word	0x20000fac
 800705c:	20000f98 	.word	0x20000f98
 8007060:	20000f90 	.word	0x20000f90

08007064 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007064:	b480      	push	{r7}
 8007066:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007068:	4b04      	ldr	r3, [pc, #16]	@ (800707c <vTaskSuspendAll+0x18>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3301      	adds	r3, #1
 800706e:	4a03      	ldr	r2, [pc, #12]	@ (800707c <vTaskSuspendAll+0x18>)
 8007070:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007072:	bf00      	nop
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	20000fb4 	.word	0x20000fb4

08007080 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007086:	2300      	movs	r3, #0
 8007088:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800708a:	2300      	movs	r3, #0
 800708c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800708e:	4b42      	ldr	r3, [pc, #264]	@ (8007198 <xTaskResumeAll+0x118>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10b      	bne.n	80070ae <xTaskResumeAll+0x2e>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	603b      	str	r3, [r7, #0]
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	e7fd      	b.n	80070aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070ae:	f001 f93b 	bl	8008328 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070b2:	4b39      	ldr	r3, [pc, #228]	@ (8007198 <xTaskResumeAll+0x118>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3b01      	subs	r3, #1
 80070b8:	4a37      	ldr	r2, [pc, #220]	@ (8007198 <xTaskResumeAll+0x118>)
 80070ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070bc:	4b36      	ldr	r3, [pc, #216]	@ (8007198 <xTaskResumeAll+0x118>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d162      	bne.n	800718a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070c4:	4b35      	ldr	r3, [pc, #212]	@ (800719c <xTaskResumeAll+0x11c>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d05e      	beq.n	800718a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070cc:	e02f      	b.n	800712e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ce:	4b34      	ldr	r3, [pc, #208]	@ (80071a0 <xTaskResumeAll+0x120>)
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3318      	adds	r3, #24
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff f83a 	bl	8006154 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3304      	adds	r3, #4
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff f835 	bl	8006154 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ee:	4b2d      	ldr	r3, [pc, #180]	@ (80071a4 <xTaskResumeAll+0x124>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d903      	bls.n	80070fe <xTaskResumeAll+0x7e>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fa:	4a2a      	ldr	r2, [pc, #168]	@ (80071a4 <xTaskResumeAll+0x124>)
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4a27      	ldr	r2, [pc, #156]	@ (80071a8 <xTaskResumeAll+0x128>)
 800710c:	441a      	add	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3304      	adds	r3, #4
 8007112:	4619      	mov	r1, r3
 8007114:	4610      	mov	r0, r2
 8007116:	f7fe ffc0 	bl	800609a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800711e:	4b23      	ldr	r3, [pc, #140]	@ (80071ac <xTaskResumeAll+0x12c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007124:	429a      	cmp	r2, r3
 8007126:	d302      	bcc.n	800712e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007128:	4b21      	ldr	r3, [pc, #132]	@ (80071b0 <xTaskResumeAll+0x130>)
 800712a:	2201      	movs	r2, #1
 800712c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800712e:	4b1c      	ldr	r3, [pc, #112]	@ (80071a0 <xTaskResumeAll+0x120>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1cb      	bne.n	80070ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800713c:	f000 fb66 	bl	800780c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007140:	4b1c      	ldr	r3, [pc, #112]	@ (80071b4 <xTaskResumeAll+0x134>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d010      	beq.n	800716e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800714c:	f000 f846 	bl	80071dc <xTaskIncrementTick>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d002      	beq.n	800715c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007156:	4b16      	ldr	r3, [pc, #88]	@ (80071b0 <xTaskResumeAll+0x130>)
 8007158:	2201      	movs	r2, #1
 800715a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3b01      	subs	r3, #1
 8007160:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1f1      	bne.n	800714c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007168:	4b12      	ldr	r3, [pc, #72]	@ (80071b4 <xTaskResumeAll+0x134>)
 800716a:	2200      	movs	r2, #0
 800716c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800716e:	4b10      	ldr	r3, [pc, #64]	@ (80071b0 <xTaskResumeAll+0x130>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d009      	beq.n	800718a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007176:	2301      	movs	r3, #1
 8007178:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800717a:	4b0f      	ldr	r3, [pc, #60]	@ (80071b8 <xTaskResumeAll+0x138>)
 800717c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800718a:	f001 f8ff 	bl	800838c <vPortExitCritical>

	return xAlreadyYielded;
 800718e:	68bb      	ldr	r3, [r7, #8]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	20000fb4 	.word	0x20000fb4
 800719c:	20000f8c 	.word	0x20000f8c
 80071a0:	20000f4c 	.word	0x20000f4c
 80071a4:	20000f94 	.word	0x20000f94
 80071a8:	20000abc 	.word	0x20000abc
 80071ac:	20000ab8 	.word	0x20000ab8
 80071b0:	20000fa0 	.word	0x20000fa0
 80071b4:	20000f9c 	.word	0x20000f9c
 80071b8:	e000ed04 	.word	0xe000ed04

080071bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80071c2:	4b05      	ldr	r3, [pc, #20]	@ (80071d8 <xTaskGetTickCount+0x1c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071c8:	687b      	ldr	r3, [r7, #4]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	20000f90 	.word	0x20000f90

080071dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071e2:	2300      	movs	r3, #0
 80071e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071e6:	4b4f      	ldr	r3, [pc, #316]	@ (8007324 <xTaskIncrementTick+0x148>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f040 8090 	bne.w	8007310 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071f0:	4b4d      	ldr	r3, [pc, #308]	@ (8007328 <xTaskIncrementTick+0x14c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3301      	adds	r3, #1
 80071f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071f8:	4a4b      	ldr	r2, [pc, #300]	@ (8007328 <xTaskIncrementTick+0x14c>)
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d121      	bne.n	8007248 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007204:	4b49      	ldr	r3, [pc, #292]	@ (800732c <xTaskIncrementTick+0x150>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00b      	beq.n	8007226 <xTaskIncrementTick+0x4a>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	603b      	str	r3, [r7, #0]
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	e7fd      	b.n	8007222 <xTaskIncrementTick+0x46>
 8007226:	4b41      	ldr	r3, [pc, #260]	@ (800732c <xTaskIncrementTick+0x150>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	4b40      	ldr	r3, [pc, #256]	@ (8007330 <xTaskIncrementTick+0x154>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a3e      	ldr	r2, [pc, #248]	@ (800732c <xTaskIncrementTick+0x150>)
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	4a3e      	ldr	r2, [pc, #248]	@ (8007330 <xTaskIncrementTick+0x154>)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	4b3e      	ldr	r3, [pc, #248]	@ (8007334 <xTaskIncrementTick+0x158>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3301      	adds	r3, #1
 8007240:	4a3c      	ldr	r2, [pc, #240]	@ (8007334 <xTaskIncrementTick+0x158>)
 8007242:	6013      	str	r3, [r2, #0]
 8007244:	f000 fae2 	bl	800780c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007248:	4b3b      	ldr	r3, [pc, #236]	@ (8007338 <xTaskIncrementTick+0x15c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	429a      	cmp	r2, r3
 8007250:	d349      	bcc.n	80072e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007252:	4b36      	ldr	r3, [pc, #216]	@ (800732c <xTaskIncrementTick+0x150>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d104      	bne.n	8007266 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800725c:	4b36      	ldr	r3, [pc, #216]	@ (8007338 <xTaskIncrementTick+0x15c>)
 800725e:	f04f 32ff 	mov.w	r2, #4294967295
 8007262:	601a      	str	r2, [r3, #0]
					break;
 8007264:	e03f      	b.n	80072e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007266:	4b31      	ldr	r3, [pc, #196]	@ (800732c <xTaskIncrementTick+0x150>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	429a      	cmp	r2, r3
 800727c:	d203      	bcs.n	8007286 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800727e:	4a2e      	ldr	r2, [pc, #184]	@ (8007338 <xTaskIncrementTick+0x15c>)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007284:	e02f      	b.n	80072e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	3304      	adds	r3, #4
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe ff62 	bl	8006154 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007294:	2b00      	cmp	r3, #0
 8007296:	d004      	beq.n	80072a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	3318      	adds	r3, #24
 800729c:	4618      	mov	r0, r3
 800729e:	f7fe ff59 	bl	8006154 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072a6:	4b25      	ldr	r3, [pc, #148]	@ (800733c <xTaskIncrementTick+0x160>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d903      	bls.n	80072b6 <xTaskIncrementTick+0xda>
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b2:	4a22      	ldr	r2, [pc, #136]	@ (800733c <xTaskIncrementTick+0x160>)
 80072b4:	6013      	str	r3, [r2, #0]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ba:	4613      	mov	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007340 <xTaskIncrementTick+0x164>)
 80072c4:	441a      	add	r2, r3
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	3304      	adds	r3, #4
 80072ca:	4619      	mov	r1, r3
 80072cc:	4610      	mov	r0, r2
 80072ce:	f7fe fee4 	bl	800609a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072d6:	4b1b      	ldr	r3, [pc, #108]	@ (8007344 <xTaskIncrementTick+0x168>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072dc:	429a      	cmp	r2, r3
 80072de:	d3b8      	bcc.n	8007252 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80072e0:	2301      	movs	r3, #1
 80072e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072e4:	e7b5      	b.n	8007252 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072e6:	4b17      	ldr	r3, [pc, #92]	@ (8007344 <xTaskIncrementTick+0x168>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ec:	4914      	ldr	r1, [pc, #80]	@ (8007340 <xTaskIncrementTick+0x164>)
 80072ee:	4613      	mov	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	440b      	add	r3, r1
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d901      	bls.n	8007302 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80072fe:	2301      	movs	r3, #1
 8007300:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007302:	4b11      	ldr	r3, [pc, #68]	@ (8007348 <xTaskIncrementTick+0x16c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d007      	beq.n	800731a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800730a:	2301      	movs	r3, #1
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	e004      	b.n	800731a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007310:	4b0e      	ldr	r3, [pc, #56]	@ (800734c <xTaskIncrementTick+0x170>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3301      	adds	r3, #1
 8007316:	4a0d      	ldr	r2, [pc, #52]	@ (800734c <xTaskIncrementTick+0x170>)
 8007318:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800731a:	697b      	ldr	r3, [r7, #20]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	20000fb4 	.word	0x20000fb4
 8007328:	20000f90 	.word	0x20000f90
 800732c:	20000f44 	.word	0x20000f44
 8007330:	20000f48 	.word	0x20000f48
 8007334:	20000fa4 	.word	0x20000fa4
 8007338:	20000fac 	.word	0x20000fac
 800733c:	20000f94 	.word	0x20000f94
 8007340:	20000abc 	.word	0x20000abc
 8007344:	20000ab8 	.word	0x20000ab8
 8007348:	20000fa0 	.word	0x20000fa0
 800734c:	20000f9c 	.word	0x20000f9c

08007350 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007356:	4b2b      	ldr	r3, [pc, #172]	@ (8007404 <vTaskSwitchContext+0xb4>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800735e:	4b2a      	ldr	r3, [pc, #168]	@ (8007408 <vTaskSwitchContext+0xb8>)
 8007360:	2201      	movs	r2, #1
 8007362:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007364:	e047      	b.n	80073f6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007366:	4b28      	ldr	r3, [pc, #160]	@ (8007408 <vTaskSwitchContext+0xb8>)
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800736c:	4b27      	ldr	r3, [pc, #156]	@ (800740c <vTaskSwitchContext+0xbc>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	e011      	b.n	8007398 <vTaskSwitchContext+0x48>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10b      	bne.n	8007392 <vTaskSwitchContext+0x42>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	607b      	str	r3, [r7, #4]
}
 800738c:	bf00      	nop
 800738e:	bf00      	nop
 8007390:	e7fd      	b.n	800738e <vTaskSwitchContext+0x3e>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	3b01      	subs	r3, #1
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	491d      	ldr	r1, [pc, #116]	@ (8007410 <vTaskSwitchContext+0xc0>)
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4613      	mov	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	440b      	add	r3, r1
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d0e3      	beq.n	8007374 <vTaskSwitchContext+0x24>
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4613      	mov	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4a16      	ldr	r2, [pc, #88]	@ (8007410 <vTaskSwitchContext+0xc0>)
 80073b8:	4413      	add	r3, r2
 80073ba:	60bb      	str	r3, [r7, #8]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	605a      	str	r2, [r3, #4]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	3308      	adds	r3, #8
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d104      	bne.n	80073dc <vTaskSwitchContext+0x8c>
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	605a      	str	r2, [r3, #4]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007414 <vTaskSwitchContext+0xc4>)
 80073e4:	6013      	str	r3, [r2, #0]
 80073e6:	4a09      	ldr	r2, [pc, #36]	@ (800740c <vTaskSwitchContext+0xbc>)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80073ec:	4b09      	ldr	r3, [pc, #36]	@ (8007414 <vTaskSwitchContext+0xc4>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3354      	adds	r3, #84	@ 0x54
 80073f2:	4a09      	ldr	r2, [pc, #36]	@ (8007418 <vTaskSwitchContext+0xc8>)
 80073f4:	6013      	str	r3, [r2, #0]
}
 80073f6:	bf00      	nop
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	20000fb4 	.word	0x20000fb4
 8007408:	20000fa0 	.word	0x20000fa0
 800740c:	20000f94 	.word	0x20000f94
 8007410:	20000abc 	.word	0x20000abc
 8007414:	20000ab8 	.word	0x20000ab8
 8007418:	2000001c 	.word	0x2000001c

0800741c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10b      	bne.n	8007444 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	60fb      	str	r3, [r7, #12]
}
 800743e:	bf00      	nop
 8007440:	bf00      	nop
 8007442:	e7fd      	b.n	8007440 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007444:	4b07      	ldr	r3, [pc, #28]	@ (8007464 <vTaskPlaceOnEventList+0x48>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3318      	adds	r3, #24
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7fe fe48 	bl	80060e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007452:	2101      	movs	r1, #1
 8007454:	6838      	ldr	r0, [r7, #0]
 8007456:	f000 fa87 	bl	8007968 <prvAddCurrentTaskToDelayedList>
}
 800745a:	bf00      	nop
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	20000ab8 	.word	0x20000ab8

08007468 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10b      	bne.n	8007492 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	617b      	str	r3, [r7, #20]
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	e7fd      	b.n	800748e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007492:	4b0a      	ldr	r3, [pc, #40]	@ (80074bc <vTaskPlaceOnEventListRestricted+0x54>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3318      	adds	r3, #24
 8007498:	4619      	mov	r1, r3
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f7fe fdfd 	bl	800609a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80074a6:	f04f 33ff 	mov.w	r3, #4294967295
 80074aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80074ac:	6879      	ldr	r1, [r7, #4]
 80074ae:	68b8      	ldr	r0, [r7, #8]
 80074b0:	f000 fa5a 	bl	8007968 <prvAddCurrentTaskToDelayedList>
	}
 80074b4:	bf00      	nop
 80074b6:	3718      	adds	r7, #24
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	20000ab8 	.word	0x20000ab8

080074c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10b      	bne.n	80074ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	60fb      	str	r3, [r7, #12]
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop
 80074ec:	e7fd      	b.n	80074ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	3318      	adds	r3, #24
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe fe2e 	bl	8006154 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074f8:	4b1d      	ldr	r3, [pc, #116]	@ (8007570 <xTaskRemoveFromEventList+0xb0>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d11d      	bne.n	800753c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	3304      	adds	r3, #4
 8007504:	4618      	mov	r0, r3
 8007506:	f7fe fe25 	bl	8006154 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800750e:	4b19      	ldr	r3, [pc, #100]	@ (8007574 <xTaskRemoveFromEventList+0xb4>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d903      	bls.n	800751e <xTaskRemoveFromEventList+0x5e>
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751a:	4a16      	ldr	r2, [pc, #88]	@ (8007574 <xTaskRemoveFromEventList+0xb4>)
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4a13      	ldr	r2, [pc, #76]	@ (8007578 <xTaskRemoveFromEventList+0xb8>)
 800752c:	441a      	add	r2, r3
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	3304      	adds	r3, #4
 8007532:	4619      	mov	r1, r3
 8007534:	4610      	mov	r0, r2
 8007536:	f7fe fdb0 	bl	800609a <vListInsertEnd>
 800753a:	e005      	b.n	8007548 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	3318      	adds	r3, #24
 8007540:	4619      	mov	r1, r3
 8007542:	480e      	ldr	r0, [pc, #56]	@ (800757c <xTaskRemoveFromEventList+0xbc>)
 8007544:	f7fe fda9 	bl	800609a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800754c:	4b0c      	ldr	r3, [pc, #48]	@ (8007580 <xTaskRemoveFromEventList+0xc0>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007552:	429a      	cmp	r2, r3
 8007554:	d905      	bls.n	8007562 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007556:	2301      	movs	r3, #1
 8007558:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800755a:	4b0a      	ldr	r3, [pc, #40]	@ (8007584 <xTaskRemoveFromEventList+0xc4>)
 800755c:	2201      	movs	r2, #1
 800755e:	601a      	str	r2, [r3, #0]
 8007560:	e001      	b.n	8007566 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007562:	2300      	movs	r3, #0
 8007564:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007566:	697b      	ldr	r3, [r7, #20]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	20000fb4 	.word	0x20000fb4
 8007574:	20000f94 	.word	0x20000f94
 8007578:	20000abc 	.word	0x20000abc
 800757c:	20000f4c 	.word	0x20000f4c
 8007580:	20000ab8 	.word	0x20000ab8
 8007584:	20000fa0 	.word	0x20000fa0

08007588 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007590:	4b06      	ldr	r3, [pc, #24]	@ (80075ac <vTaskInternalSetTimeOutState+0x24>)
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007598:	4b05      	ldr	r3, [pc, #20]	@ (80075b0 <vTaskInternalSetTimeOutState+0x28>)
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	605a      	str	r2, [r3, #4]
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	20000fa4 	.word	0x20000fa4
 80075b0:	20000f90 	.word	0x20000f90

080075b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b088      	sub	sp, #32
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10b      	bne.n	80075dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	613b      	str	r3, [r7, #16]
}
 80075d6:	bf00      	nop
 80075d8:	bf00      	nop
 80075da:	e7fd      	b.n	80075d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10b      	bne.n	80075fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	60fb      	str	r3, [r7, #12]
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop
 80075f8:	e7fd      	b.n	80075f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80075fa:	f000 fe95 	bl	8008328 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80075fe:	4b1d      	ldr	r3, [pc, #116]	@ (8007674 <xTaskCheckForTimeOut+0xc0>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007616:	d102      	bne.n	800761e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007618:	2300      	movs	r3, #0
 800761a:	61fb      	str	r3, [r7, #28]
 800761c:	e023      	b.n	8007666 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	4b15      	ldr	r3, [pc, #84]	@ (8007678 <xTaskCheckForTimeOut+0xc4>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d007      	beq.n	800763a <xTaskCheckForTimeOut+0x86>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	69ba      	ldr	r2, [r7, #24]
 8007630:	429a      	cmp	r2, r3
 8007632:	d302      	bcc.n	800763a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007634:	2301      	movs	r3, #1
 8007636:	61fb      	str	r3, [r7, #28]
 8007638:	e015      	b.n	8007666 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	429a      	cmp	r2, r3
 8007642:	d20b      	bcs.n	800765c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	1ad2      	subs	r2, r2, r3
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7ff ff99 	bl	8007588 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007656:	2300      	movs	r3, #0
 8007658:	61fb      	str	r3, [r7, #28]
 800765a:	e004      	b.n	8007666 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	2200      	movs	r2, #0
 8007660:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007662:	2301      	movs	r3, #1
 8007664:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007666:	f000 fe91 	bl	800838c <vPortExitCritical>

	return xReturn;
 800766a:	69fb      	ldr	r3, [r7, #28]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3720      	adds	r7, #32
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	20000f90 	.word	0x20000f90
 8007678:	20000fa4 	.word	0x20000fa4

0800767c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007680:	4b03      	ldr	r3, [pc, #12]	@ (8007690 <vTaskMissedYield+0x14>)
 8007682:	2201      	movs	r2, #1
 8007684:	601a      	str	r2, [r3, #0]
}
 8007686:	bf00      	nop
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	20000fa0 	.word	0x20000fa0

08007694 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800769c:	f000 f852 	bl	8007744 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076a0:	4b06      	ldr	r3, [pc, #24]	@ (80076bc <prvIdleTask+0x28>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d9f9      	bls.n	800769c <prvIdleTask+0x8>
			{
				taskYIELD();
 80076a8:	4b05      	ldr	r3, [pc, #20]	@ (80076c0 <prvIdleTask+0x2c>)
 80076aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076b8:	e7f0      	b.n	800769c <prvIdleTask+0x8>
 80076ba:	bf00      	nop
 80076bc:	20000abc 	.word	0x20000abc
 80076c0:	e000ed04 	.word	0xe000ed04

080076c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076ca:	2300      	movs	r3, #0
 80076cc:	607b      	str	r3, [r7, #4]
 80076ce:	e00c      	b.n	80076ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	4613      	mov	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4a12      	ldr	r2, [pc, #72]	@ (8007724 <prvInitialiseTaskLists+0x60>)
 80076dc:	4413      	add	r3, r2
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fe fcae 	bl	8006040 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3301      	adds	r3, #1
 80076e8:	607b      	str	r3, [r7, #4]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b37      	cmp	r3, #55	@ 0x37
 80076ee:	d9ef      	bls.n	80076d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80076f0:	480d      	ldr	r0, [pc, #52]	@ (8007728 <prvInitialiseTaskLists+0x64>)
 80076f2:	f7fe fca5 	bl	8006040 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80076f6:	480d      	ldr	r0, [pc, #52]	@ (800772c <prvInitialiseTaskLists+0x68>)
 80076f8:	f7fe fca2 	bl	8006040 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80076fc:	480c      	ldr	r0, [pc, #48]	@ (8007730 <prvInitialiseTaskLists+0x6c>)
 80076fe:	f7fe fc9f 	bl	8006040 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007702:	480c      	ldr	r0, [pc, #48]	@ (8007734 <prvInitialiseTaskLists+0x70>)
 8007704:	f7fe fc9c 	bl	8006040 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007708:	480b      	ldr	r0, [pc, #44]	@ (8007738 <prvInitialiseTaskLists+0x74>)
 800770a:	f7fe fc99 	bl	8006040 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800770e:	4b0b      	ldr	r3, [pc, #44]	@ (800773c <prvInitialiseTaskLists+0x78>)
 8007710:	4a05      	ldr	r2, [pc, #20]	@ (8007728 <prvInitialiseTaskLists+0x64>)
 8007712:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007714:	4b0a      	ldr	r3, [pc, #40]	@ (8007740 <prvInitialiseTaskLists+0x7c>)
 8007716:	4a05      	ldr	r2, [pc, #20]	@ (800772c <prvInitialiseTaskLists+0x68>)
 8007718:	601a      	str	r2, [r3, #0]
}
 800771a:	bf00      	nop
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	20000abc 	.word	0x20000abc
 8007728:	20000f1c 	.word	0x20000f1c
 800772c:	20000f30 	.word	0x20000f30
 8007730:	20000f4c 	.word	0x20000f4c
 8007734:	20000f60 	.word	0x20000f60
 8007738:	20000f78 	.word	0x20000f78
 800773c:	20000f44 	.word	0x20000f44
 8007740:	20000f48 	.word	0x20000f48

08007744 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800774a:	e019      	b.n	8007780 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800774c:	f000 fdec 	bl	8008328 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007750:	4b10      	ldr	r3, [pc, #64]	@ (8007794 <prvCheckTasksWaitingTermination+0x50>)
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3304      	adds	r3, #4
 800775c:	4618      	mov	r0, r3
 800775e:	f7fe fcf9 	bl	8006154 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007762:	4b0d      	ldr	r3, [pc, #52]	@ (8007798 <prvCheckTasksWaitingTermination+0x54>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3b01      	subs	r3, #1
 8007768:	4a0b      	ldr	r2, [pc, #44]	@ (8007798 <prvCheckTasksWaitingTermination+0x54>)
 800776a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800776c:	4b0b      	ldr	r3, [pc, #44]	@ (800779c <prvCheckTasksWaitingTermination+0x58>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3b01      	subs	r3, #1
 8007772:	4a0a      	ldr	r2, [pc, #40]	@ (800779c <prvCheckTasksWaitingTermination+0x58>)
 8007774:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007776:	f000 fe09 	bl	800838c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f810 	bl	80077a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007780:	4b06      	ldr	r3, [pc, #24]	@ (800779c <prvCheckTasksWaitingTermination+0x58>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1e1      	bne.n	800774c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007788:	bf00      	nop
 800778a:	bf00      	nop
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20000f60 	.word	0x20000f60
 8007798:	20000f8c 	.word	0x20000f8c
 800779c:	20000f74 	.word	0x20000f74

080077a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3354      	adds	r3, #84	@ 0x54
 80077ac:	4618      	mov	r0, r3
 80077ae:	f001 f9fb 	bl	8008ba8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d108      	bne.n	80077ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 ffa1 	bl	8008708 <vPortFree>
				vPortFree( pxTCB );
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 ff9e 	bl	8008708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077cc:	e019      	b.n	8007802 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d103      	bne.n	80077e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 ff95 	bl	8008708 <vPortFree>
	}
 80077de:	e010      	b.n	8007802 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d00b      	beq.n	8007802 <prvDeleteTCB+0x62>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	60fb      	str	r3, [r7, #12]
}
 80077fc:	bf00      	nop
 80077fe:	bf00      	nop
 8007800:	e7fd      	b.n	80077fe <prvDeleteTCB+0x5e>
	}
 8007802:	bf00      	nop
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
	...

0800780c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007812:	4b0c      	ldr	r3, [pc, #48]	@ (8007844 <prvResetNextTaskUnblockTime+0x38>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d104      	bne.n	8007826 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800781c:	4b0a      	ldr	r3, [pc, #40]	@ (8007848 <prvResetNextTaskUnblockTime+0x3c>)
 800781e:	f04f 32ff 	mov.w	r2, #4294967295
 8007822:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007824:	e008      	b.n	8007838 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007826:	4b07      	ldr	r3, [pc, #28]	@ (8007844 <prvResetNextTaskUnblockTime+0x38>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	4a04      	ldr	r2, [pc, #16]	@ (8007848 <prvResetNextTaskUnblockTime+0x3c>)
 8007836:	6013      	str	r3, [r2, #0]
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	20000f44 	.word	0x20000f44
 8007848:	20000fac 	.word	0x20000fac

0800784c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007852:	4b0b      	ldr	r3, [pc, #44]	@ (8007880 <xTaskGetSchedulerState+0x34>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d102      	bne.n	8007860 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800785a:	2301      	movs	r3, #1
 800785c:	607b      	str	r3, [r7, #4]
 800785e:	e008      	b.n	8007872 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007860:	4b08      	ldr	r3, [pc, #32]	@ (8007884 <xTaskGetSchedulerState+0x38>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d102      	bne.n	800786e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007868:	2302      	movs	r3, #2
 800786a:	607b      	str	r3, [r7, #4]
 800786c:	e001      	b.n	8007872 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800786e:	2300      	movs	r3, #0
 8007870:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007872:	687b      	ldr	r3, [r7, #4]
	}
 8007874:	4618      	mov	r0, r3
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	20000f98 	.word	0x20000f98
 8007884:	20000fb4 	.word	0x20000fb4

08007888 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d058      	beq.n	8007950 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800789e:	4b2f      	ldr	r3, [pc, #188]	@ (800795c <xTaskPriorityDisinherit+0xd4>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d00b      	beq.n	80078c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	60fb      	str	r3, [r7, #12]
}
 80078ba:	bf00      	nop
 80078bc:	bf00      	nop
 80078be:	e7fd      	b.n	80078bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10b      	bne.n	80078e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	60bb      	str	r3, [r7, #8]
}
 80078da:	bf00      	nop
 80078dc:	bf00      	nop
 80078de:	e7fd      	b.n	80078dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078e4:	1e5a      	subs	r2, r3, #1
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d02c      	beq.n	8007950 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d128      	bne.n	8007950 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	3304      	adds	r3, #4
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe fc26 	bl	8006154 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007914:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007920:	4b0f      	ldr	r3, [pc, #60]	@ (8007960 <xTaskPriorityDisinherit+0xd8>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	429a      	cmp	r2, r3
 8007926:	d903      	bls.n	8007930 <xTaskPriorityDisinherit+0xa8>
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800792c:	4a0c      	ldr	r2, [pc, #48]	@ (8007960 <xTaskPriorityDisinherit+0xd8>)
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007934:	4613      	mov	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4a09      	ldr	r2, [pc, #36]	@ (8007964 <xTaskPriorityDisinherit+0xdc>)
 800793e:	441a      	add	r2, r3
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	3304      	adds	r3, #4
 8007944:	4619      	mov	r1, r3
 8007946:	4610      	mov	r0, r2
 8007948:	f7fe fba7 	bl	800609a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800794c:	2301      	movs	r3, #1
 800794e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007950:	697b      	ldr	r3, [r7, #20]
	}
 8007952:	4618      	mov	r0, r3
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20000ab8 	.word	0x20000ab8
 8007960:	20000f94 	.word	0x20000f94
 8007964:	20000abc 	.word	0x20000abc

08007968 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007972:	4b21      	ldr	r3, [pc, #132]	@ (80079f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007978:	4b20      	ldr	r3, [pc, #128]	@ (80079fc <prvAddCurrentTaskToDelayedList+0x94>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3304      	adds	r3, #4
 800797e:	4618      	mov	r0, r3
 8007980:	f7fe fbe8 	bl	8006154 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798a:	d10a      	bne.n	80079a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007992:	4b1a      	ldr	r3, [pc, #104]	@ (80079fc <prvAddCurrentTaskToDelayedList+0x94>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3304      	adds	r3, #4
 8007998:	4619      	mov	r1, r3
 800799a:	4819      	ldr	r0, [pc, #100]	@ (8007a00 <prvAddCurrentTaskToDelayedList+0x98>)
 800799c:	f7fe fb7d 	bl	800609a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079a0:	e026      	b.n	80079f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4413      	add	r3, r2
 80079a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079aa:	4b14      	ldr	r3, [pc, #80]	@ (80079fc <prvAddCurrentTaskToDelayedList+0x94>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d209      	bcs.n	80079ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ba:	4b12      	ldr	r3, [pc, #72]	@ (8007a04 <prvAddCurrentTaskToDelayedList+0x9c>)
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	4b0f      	ldr	r3, [pc, #60]	@ (80079fc <prvAddCurrentTaskToDelayedList+0x94>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3304      	adds	r3, #4
 80079c4:	4619      	mov	r1, r3
 80079c6:	4610      	mov	r0, r2
 80079c8:	f7fe fb8b 	bl	80060e2 <vListInsert>
}
 80079cc:	e010      	b.n	80079f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007a08 <prvAddCurrentTaskToDelayedList+0xa0>)
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	4b0a      	ldr	r3, [pc, #40]	@ (80079fc <prvAddCurrentTaskToDelayedList+0x94>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3304      	adds	r3, #4
 80079d8:	4619      	mov	r1, r3
 80079da:	4610      	mov	r0, r2
 80079dc:	f7fe fb81 	bl	80060e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079e0:	4b0a      	ldr	r3, [pc, #40]	@ (8007a0c <prvAddCurrentTaskToDelayedList+0xa4>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d202      	bcs.n	80079f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80079ea:	4a08      	ldr	r2, [pc, #32]	@ (8007a0c <prvAddCurrentTaskToDelayedList+0xa4>)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	6013      	str	r3, [r2, #0]
}
 80079f0:	bf00      	nop
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	20000f90 	.word	0x20000f90
 80079fc:	20000ab8 	.word	0x20000ab8
 8007a00:	20000f78 	.word	0x20000f78
 8007a04:	20000f48 	.word	0x20000f48
 8007a08:	20000f44 	.word	0x20000f44
 8007a0c:	20000fac 	.word	0x20000fac

08007a10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b08a      	sub	sp, #40	@ 0x28
 8007a14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a16:	2300      	movs	r3, #0
 8007a18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a1a:	f000 fb13 	bl	8008044 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007a94 <xTimerCreateTimerTask+0x84>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d021      	beq.n	8007a6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a26:	2300      	movs	r3, #0
 8007a28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a2e:	1d3a      	adds	r2, r7, #4
 8007a30:	f107 0108 	add.w	r1, r7, #8
 8007a34:	f107 030c 	add.w	r3, r7, #12
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fe fae7 	bl	800600c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a3e:	6879      	ldr	r1, [r7, #4]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	9202      	str	r2, [sp, #8]
 8007a46:	9301      	str	r3, [sp, #4]
 8007a48:	2302      	movs	r3, #2
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	460a      	mov	r2, r1
 8007a50:	4911      	ldr	r1, [pc, #68]	@ (8007a98 <xTimerCreateTimerTask+0x88>)
 8007a52:	4812      	ldr	r0, [pc, #72]	@ (8007a9c <xTimerCreateTimerTask+0x8c>)
 8007a54:	f7ff f8a2 	bl	8006b9c <xTaskCreateStatic>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	4a11      	ldr	r2, [pc, #68]	@ (8007aa0 <xTimerCreateTimerTask+0x90>)
 8007a5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a5e:	4b10      	ldr	r3, [pc, #64]	@ (8007aa0 <xTimerCreateTimerTask+0x90>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a66:	2301      	movs	r3, #1
 8007a68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10b      	bne.n	8007a88 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	613b      	str	r3, [r7, #16]
}
 8007a82:	bf00      	nop
 8007a84:	bf00      	nop
 8007a86:	e7fd      	b.n	8007a84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007a88:	697b      	ldr	r3, [r7, #20]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3718      	adds	r7, #24
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	20000fe8 	.word	0x20000fe8
 8007a98:	080098d4 	.word	0x080098d4
 8007a9c:	08007bdd 	.word	0x08007bdd
 8007aa0:	20000fec 	.word	0x20000fec

08007aa4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b08a      	sub	sp, #40	@ 0x28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
 8007ab0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10b      	bne.n	8007ad4 <xTimerGenericCommand+0x30>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	623b      	str	r3, [r7, #32]
}
 8007ace:	bf00      	nop
 8007ad0:	bf00      	nop
 8007ad2:	e7fd      	b.n	8007ad0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ad4:	4b19      	ldr	r3, [pc, #100]	@ (8007b3c <xTimerGenericCommand+0x98>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d02a      	beq.n	8007b32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b05      	cmp	r3, #5
 8007aec:	dc18      	bgt.n	8007b20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007aee:	f7ff fead 	bl	800784c <xTaskGetSchedulerState>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d109      	bne.n	8007b0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007af8:	4b10      	ldr	r3, [pc, #64]	@ (8007b3c <xTimerGenericCommand+0x98>)
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	f107 0110 	add.w	r1, r7, #16
 8007b00:	2300      	movs	r3, #0
 8007b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b04:	f7fe fc5a 	bl	80063bc <xQueueGenericSend>
 8007b08:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b0a:	e012      	b.n	8007b32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b3c <xTimerGenericCommand+0x98>)
 8007b0e:	6818      	ldr	r0, [r3, #0]
 8007b10:	f107 0110 	add.w	r1, r7, #16
 8007b14:	2300      	movs	r3, #0
 8007b16:	2200      	movs	r2, #0
 8007b18:	f7fe fc50 	bl	80063bc <xQueueGenericSend>
 8007b1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b1e:	e008      	b.n	8007b32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b20:	4b06      	ldr	r3, [pc, #24]	@ (8007b3c <xTimerGenericCommand+0x98>)
 8007b22:	6818      	ldr	r0, [r3, #0]
 8007b24:	f107 0110 	add.w	r1, r7, #16
 8007b28:	2300      	movs	r3, #0
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	f7fe fd48 	bl	80065c0 <xQueueGenericSendFromISR>
 8007b30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3728      	adds	r7, #40	@ 0x28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	20000fe8 	.word	0x20000fe8

08007b40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b088      	sub	sp, #32
 8007b44:	af02      	add	r7, sp, #8
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b4a:	4b23      	ldr	r3, [pc, #140]	@ (8007bd8 <prvProcessExpiredTimer+0x98>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	3304      	adds	r3, #4
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fe fafb 	bl	8006154 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b64:	f003 0304 	and.w	r3, r3, #4
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d023      	beq.n	8007bb4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	699a      	ldr	r2, [r3, #24]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	18d1      	adds	r1, r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	6978      	ldr	r0, [r7, #20]
 8007b7a:	f000 f8d5 	bl	8007d28 <prvInsertTimerInActiveList>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d020      	beq.n	8007bc6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b84:	2300      	movs	r3, #0
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	2300      	movs	r3, #0
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	6978      	ldr	r0, [r7, #20]
 8007b90:	f7ff ff88 	bl	8007aa4 <xTimerGenericCommand>
 8007b94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d114      	bne.n	8007bc6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	60fb      	str	r3, [r7, #12]
}
 8007bae:	bf00      	nop
 8007bb0:	bf00      	nop
 8007bb2:	e7fd      	b.n	8007bb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bba:	f023 0301 	bic.w	r3, r3, #1
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	6978      	ldr	r0, [r7, #20]
 8007bcc:	4798      	blx	r3
}
 8007bce:	bf00      	nop
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20000fe0 	.word	0x20000fe0

08007bdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007be4:	f107 0308 	add.w	r3, r7, #8
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 f859 	bl	8007ca0 <prvGetNextExpireTime>
 8007bee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f805 	bl	8007c04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007bfa:	f000 f8d7 	bl	8007dac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bfe:	bf00      	nop
 8007c00:	e7f0      	b.n	8007be4 <prvTimerTask+0x8>
	...

08007c04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c0e:	f7ff fa29 	bl	8007064 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c12:	f107 0308 	add.w	r3, r7, #8
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 f866 	bl	8007ce8 <prvSampleTimeNow>
 8007c1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d130      	bne.n	8007c86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10a      	bne.n	8007c40 <prvProcessTimerOrBlockTask+0x3c>
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d806      	bhi.n	8007c40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c32:	f7ff fa25 	bl	8007080 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c36:	68f9      	ldr	r1, [r7, #12]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7ff ff81 	bl	8007b40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c3e:	e024      	b.n	8007c8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d008      	beq.n	8007c58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c46:	4b13      	ldr	r3, [pc, #76]	@ (8007c94 <prvProcessTimerOrBlockTask+0x90>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <prvProcessTimerOrBlockTask+0x50>
 8007c50:	2301      	movs	r3, #1
 8007c52:	e000      	b.n	8007c56 <prvProcessTimerOrBlockTask+0x52>
 8007c54:	2300      	movs	r3, #0
 8007c56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c58:	4b0f      	ldr	r3, [pc, #60]	@ (8007c98 <prvProcessTimerOrBlockTask+0x94>)
 8007c5a:	6818      	ldr	r0, [r3, #0]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	4619      	mov	r1, r3
 8007c66:	f7fe ff65 	bl	8006b34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c6a:	f7ff fa09 	bl	8007080 <xTaskResumeAll>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10a      	bne.n	8007c8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c74:	4b09      	ldr	r3, [pc, #36]	@ (8007c9c <prvProcessTimerOrBlockTask+0x98>)
 8007c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	f3bf 8f6f 	isb	sy
}
 8007c84:	e001      	b.n	8007c8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c86:	f7ff f9fb 	bl	8007080 <xTaskResumeAll>
}
 8007c8a:	bf00      	nop
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	20000fe4 	.word	0x20000fe4
 8007c98:	20000fe8 	.word	0x20000fe8
 8007c9c:	e000ed04 	.word	0xe000ed04

08007ca0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8007ce4 <prvGetNextExpireTime+0x44>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <prvGetNextExpireTime+0x16>
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	e000      	b.n	8007cb8 <prvGetNextExpireTime+0x18>
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d105      	bne.n	8007cd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cc4:	4b07      	ldr	r3, [pc, #28]	@ (8007ce4 <prvGetNextExpireTime+0x44>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	e001      	b.n	8007cd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	20000fe0 	.word	0x20000fe0

08007ce8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007cf0:	f7ff fa64 	bl	80071bc <xTaskGetTickCount>
 8007cf4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8007d24 <prvSampleTimeNow+0x3c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d205      	bcs.n	8007d0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d00:	f000 f93a 	bl	8007f78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	e002      	b.n	8007d12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d12:	4a04      	ldr	r2, [pc, #16]	@ (8007d24 <prvSampleTimeNow+0x3c>)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d18:	68fb      	ldr	r3, [r7, #12]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20000ff0 	.word	0x20000ff0

08007d28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
 8007d34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d36:	2300      	movs	r3, #0
 8007d38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d812      	bhi.n	8007d74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	1ad2      	subs	r2, r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d302      	bcc.n	8007d62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	617b      	str	r3, [r7, #20]
 8007d60:	e01b      	b.n	8007d9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d62:	4b10      	ldr	r3, [pc, #64]	@ (8007da4 <prvInsertTimerInActiveList+0x7c>)
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	f7fe f9b8 	bl	80060e2 <vListInsert>
 8007d72:	e012      	b.n	8007d9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d206      	bcs.n	8007d8a <prvInsertTimerInActiveList+0x62>
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d302      	bcc.n	8007d8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d84:	2301      	movs	r3, #1
 8007d86:	617b      	str	r3, [r7, #20]
 8007d88:	e007      	b.n	8007d9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d8a:	4b07      	ldr	r3, [pc, #28]	@ (8007da8 <prvInsertTimerInActiveList+0x80>)
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3304      	adds	r3, #4
 8007d92:	4619      	mov	r1, r3
 8007d94:	4610      	mov	r0, r2
 8007d96:	f7fe f9a4 	bl	80060e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d9a:	697b      	ldr	r3, [r7, #20]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3718      	adds	r7, #24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20000fe4 	.word	0x20000fe4
 8007da8:	20000fe0 	.word	0x20000fe0

08007dac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08e      	sub	sp, #56	@ 0x38
 8007db0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007db2:	e0ce      	b.n	8007f52 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	da19      	bge.n	8007dee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007dba:	1d3b      	adds	r3, r7, #4
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10b      	bne.n	8007dde <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	61fb      	str	r3, [r7, #28]
}
 8007dd8:	bf00      	nop
 8007dda:	bf00      	nop
 8007ddc:	e7fd      	b.n	8007dda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007de4:	6850      	ldr	r0, [r2, #4]
 8007de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007de8:	6892      	ldr	r2, [r2, #8]
 8007dea:	4611      	mov	r1, r2
 8007dec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f2c0 80ae 	blt.w	8007f52 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d004      	beq.n	8007e0c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e04:	3304      	adds	r3, #4
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fe f9a4 	bl	8006154 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e0c:	463b      	mov	r3, r7
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7ff ff6a 	bl	8007ce8 <prvSampleTimeNow>
 8007e14:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b09      	cmp	r3, #9
 8007e1a:	f200 8097 	bhi.w	8007f4c <prvProcessReceivedCommands+0x1a0>
 8007e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e24 <prvProcessReceivedCommands+0x78>)
 8007e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e24:	08007e4d 	.word	0x08007e4d
 8007e28:	08007e4d 	.word	0x08007e4d
 8007e2c:	08007e4d 	.word	0x08007e4d
 8007e30:	08007ec3 	.word	0x08007ec3
 8007e34:	08007ed7 	.word	0x08007ed7
 8007e38:	08007f23 	.word	0x08007f23
 8007e3c:	08007e4d 	.word	0x08007e4d
 8007e40:	08007e4d 	.word	0x08007e4d
 8007e44:	08007ec3 	.word	0x08007ec3
 8007e48:	08007ed7 	.word	0x08007ed7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e52:	f043 0301 	orr.w	r3, r3, #1
 8007e56:	b2da      	uxtb	r2, r3
 8007e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	18d1      	adds	r1, r2, r3
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e6c:	f7ff ff5c 	bl	8007d28 <prvInsertTimerInActiveList>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d06c      	beq.n	8007f50 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e84:	f003 0304 	and.w	r3, r3, #4
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d061      	beq.n	8007f50 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	441a      	add	r2, r3
 8007e94:	2300      	movs	r3, #0
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e9e:	f7ff fe01 	bl	8007aa4 <xTimerGenericCommand>
 8007ea2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d152      	bne.n	8007f50 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	61bb      	str	r3, [r7, #24]
}
 8007ebc:	bf00      	nop
 8007ebe:	bf00      	nop
 8007ec0:	e7fd      	b.n	8007ebe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ec8:	f023 0301 	bic.w	r3, r3, #1
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007ed4:	e03d      	b.n	8007f52 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007edc:	f043 0301 	orr.w	r3, r3, #1
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10b      	bne.n	8007f0e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	617b      	str	r3, [r7, #20]
}
 8007f08:	bf00      	nop
 8007f0a:	bf00      	nop
 8007f0c:	e7fd      	b.n	8007f0a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f10:	699a      	ldr	r2, [r3, #24]
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	18d1      	adds	r1, r2, r3
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f1c:	f7ff ff04 	bl	8007d28 <prvInsertTimerInActiveList>
					break;
 8007f20:	e017      	b.n	8007f52 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d103      	bne.n	8007f38 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007f30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f32:	f000 fbe9 	bl	8008708 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f36:	e00c      	b.n	8007f52 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f3e:	f023 0301 	bic.w	r3, r3, #1
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007f4a:	e002      	b.n	8007f52 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007f4c:	bf00      	nop
 8007f4e:	e000      	b.n	8007f52 <prvProcessReceivedCommands+0x1a6>
					break;
 8007f50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f52:	4b08      	ldr	r3, [pc, #32]	@ (8007f74 <prvProcessReceivedCommands+0x1c8>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	1d39      	adds	r1, r7, #4
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fe fbce 	bl	80066fc <xQueueReceive>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f47f af26 	bne.w	8007db4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007f68:	bf00      	nop
 8007f6a:	bf00      	nop
 8007f6c:	3730      	adds	r7, #48	@ 0x30
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20000fe8 	.word	0x20000fe8

08007f78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f7e:	e049      	b.n	8008014 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f80:	4b2e      	ldr	r3, [pc, #184]	@ (800803c <prvSwitchTimerLists+0xc4>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f8a:	4b2c      	ldr	r3, [pc, #176]	@ (800803c <prvSwitchTimerLists+0xc4>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	3304      	adds	r3, #4
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fe f8db 	bl	8006154 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d02f      	beq.n	8008014 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	4413      	add	r3, r2
 8007fbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d90e      	bls.n	8007fe4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800803c <prvSwitchTimerLists+0xc4>)
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	3304      	adds	r3, #4
 8007fda:	4619      	mov	r1, r3
 8007fdc:	4610      	mov	r0, r2
 8007fde:	f7fe f880 	bl	80060e2 <vListInsert>
 8007fe2:	e017      	b.n	8008014 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	2100      	movs	r1, #0
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f7ff fd58 	bl	8007aa4 <xTimerGenericCommand>
 8007ff4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10b      	bne.n	8008014 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008000:	f383 8811 	msr	BASEPRI, r3
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	603b      	str	r3, [r7, #0]
}
 800800e:	bf00      	nop
 8008010:	bf00      	nop
 8008012:	e7fd      	b.n	8008010 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008014:	4b09      	ldr	r3, [pc, #36]	@ (800803c <prvSwitchTimerLists+0xc4>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1b0      	bne.n	8007f80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800801e:	4b07      	ldr	r3, [pc, #28]	@ (800803c <prvSwitchTimerLists+0xc4>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008024:	4b06      	ldr	r3, [pc, #24]	@ (8008040 <prvSwitchTimerLists+0xc8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a04      	ldr	r2, [pc, #16]	@ (800803c <prvSwitchTimerLists+0xc4>)
 800802a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800802c:	4a04      	ldr	r2, [pc, #16]	@ (8008040 <prvSwitchTimerLists+0xc8>)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	6013      	str	r3, [r2, #0]
}
 8008032:	bf00      	nop
 8008034:	3718      	adds	r7, #24
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	20000fe0 	.word	0x20000fe0
 8008040:	20000fe4 	.word	0x20000fe4

08008044 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800804a:	f000 f96d 	bl	8008328 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800804e:	4b15      	ldr	r3, [pc, #84]	@ (80080a4 <prvCheckForValidListAndQueue+0x60>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d120      	bne.n	8008098 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008056:	4814      	ldr	r0, [pc, #80]	@ (80080a8 <prvCheckForValidListAndQueue+0x64>)
 8008058:	f7fd fff2 	bl	8006040 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800805c:	4813      	ldr	r0, [pc, #76]	@ (80080ac <prvCheckForValidListAndQueue+0x68>)
 800805e:	f7fd ffef 	bl	8006040 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008062:	4b13      	ldr	r3, [pc, #76]	@ (80080b0 <prvCheckForValidListAndQueue+0x6c>)
 8008064:	4a10      	ldr	r2, [pc, #64]	@ (80080a8 <prvCheckForValidListAndQueue+0x64>)
 8008066:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008068:	4b12      	ldr	r3, [pc, #72]	@ (80080b4 <prvCheckForValidListAndQueue+0x70>)
 800806a:	4a10      	ldr	r2, [pc, #64]	@ (80080ac <prvCheckForValidListAndQueue+0x68>)
 800806c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800806e:	2300      	movs	r3, #0
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	4b11      	ldr	r3, [pc, #68]	@ (80080b8 <prvCheckForValidListAndQueue+0x74>)
 8008074:	4a11      	ldr	r2, [pc, #68]	@ (80080bc <prvCheckForValidListAndQueue+0x78>)
 8008076:	2110      	movs	r1, #16
 8008078:	200a      	movs	r0, #10
 800807a:	f7fe f8ff 	bl	800627c <xQueueGenericCreateStatic>
 800807e:	4603      	mov	r3, r0
 8008080:	4a08      	ldr	r2, [pc, #32]	@ (80080a4 <prvCheckForValidListAndQueue+0x60>)
 8008082:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008084:	4b07      	ldr	r3, [pc, #28]	@ (80080a4 <prvCheckForValidListAndQueue+0x60>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d005      	beq.n	8008098 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800808c:	4b05      	ldr	r3, [pc, #20]	@ (80080a4 <prvCheckForValidListAndQueue+0x60>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	490b      	ldr	r1, [pc, #44]	@ (80080c0 <prvCheckForValidListAndQueue+0x7c>)
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fd24 	bl	8006ae0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008098:	f000 f978 	bl	800838c <vPortExitCritical>
}
 800809c:	bf00      	nop
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20000fe8 	.word	0x20000fe8
 80080a8:	20000fb8 	.word	0x20000fb8
 80080ac:	20000fcc 	.word	0x20000fcc
 80080b0:	20000fe0 	.word	0x20000fe0
 80080b4:	20000fe4 	.word	0x20000fe4
 80080b8:	20001094 	.word	0x20001094
 80080bc:	20000ff4 	.word	0x20000ff4
 80080c0:	080098dc 	.word	0x080098dc

080080c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3b04      	subs	r3, #4
 80080d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80080dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3b04      	subs	r3, #4
 80080e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	f023 0201 	bic.w	r2, r3, #1
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3b04      	subs	r3, #4
 80080f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080f4:	4a0c      	ldr	r2, [pc, #48]	@ (8008128 <pxPortInitialiseStack+0x64>)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	3b14      	subs	r3, #20
 80080fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3b04      	subs	r3, #4
 800810a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f06f 0202 	mvn.w	r2, #2
 8008112:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3b20      	subs	r3, #32
 8008118:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800811a:	68fb      	ldr	r3, [r7, #12]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	0800812d 	.word	0x0800812d

0800812c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008136:	4b13      	ldr	r3, [pc, #76]	@ (8008184 <prvTaskExitError+0x58>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813e:	d00b      	beq.n	8008158 <prvTaskExitError+0x2c>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	60fb      	str	r3, [r7, #12]
}
 8008152:	bf00      	nop
 8008154:	bf00      	nop
 8008156:	e7fd      	b.n	8008154 <prvTaskExitError+0x28>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	60bb      	str	r3, [r7, #8]
}
 800816a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800816c:	bf00      	nop
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d0fc      	beq.n	800816e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	2000000c 	.word	0x2000000c
	...

08008190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008190:	4b07      	ldr	r3, [pc, #28]	@ (80081b0 <pxCurrentTCBConst2>)
 8008192:	6819      	ldr	r1, [r3, #0]
 8008194:	6808      	ldr	r0, [r1, #0]
 8008196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819a:	f380 8809 	msr	PSP, r0
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f04f 0000 	mov.w	r0, #0
 80081a6:	f380 8811 	msr	BASEPRI, r0
 80081aa:	4770      	bx	lr
 80081ac:	f3af 8000 	nop.w

080081b0 <pxCurrentTCBConst2>:
 80081b0:	20000ab8 	.word	0x20000ab8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop

080081b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081b8:	4808      	ldr	r0, [pc, #32]	@ (80081dc <prvPortStartFirstTask+0x24>)
 80081ba:	6800      	ldr	r0, [r0, #0]
 80081bc:	6800      	ldr	r0, [r0, #0]
 80081be:	f380 8808 	msr	MSP, r0
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f380 8814 	msr	CONTROL, r0
 80081ca:	b662      	cpsie	i
 80081cc:	b661      	cpsie	f
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	df00      	svc	0
 80081d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081da:	bf00      	nop
 80081dc:	e000ed08 	.word	0xe000ed08

080081e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081e6:	4b47      	ldr	r3, [pc, #284]	@ (8008304 <xPortStartScheduler+0x124>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a47      	ldr	r2, [pc, #284]	@ (8008308 <xPortStartScheduler+0x128>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d10b      	bne.n	8008208 <xPortStartScheduler+0x28>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	613b      	str	r3, [r7, #16]
}
 8008202:	bf00      	nop
 8008204:	bf00      	nop
 8008206:	e7fd      	b.n	8008204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008208:	4b3e      	ldr	r3, [pc, #248]	@ (8008304 <xPortStartScheduler+0x124>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a3f      	ldr	r2, [pc, #252]	@ (800830c <xPortStartScheduler+0x12c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d10b      	bne.n	800822a <xPortStartScheduler+0x4a>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	60fb      	str	r3, [r7, #12]
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop
 8008228:	e7fd      	b.n	8008226 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800822a:	4b39      	ldr	r3, [pc, #228]	@ (8008310 <xPortStartScheduler+0x130>)
 800822c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	b2db      	uxtb	r3, r3
 8008234:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	22ff      	movs	r2, #255	@ 0xff
 800823a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	b2db      	uxtb	r3, r3
 8008242:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	b2db      	uxtb	r3, r3
 8008248:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800824c:	b2da      	uxtb	r2, r3
 800824e:	4b31      	ldr	r3, [pc, #196]	@ (8008314 <xPortStartScheduler+0x134>)
 8008250:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008252:	4b31      	ldr	r3, [pc, #196]	@ (8008318 <xPortStartScheduler+0x138>)
 8008254:	2207      	movs	r2, #7
 8008256:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008258:	e009      	b.n	800826e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800825a:	4b2f      	ldr	r3, [pc, #188]	@ (8008318 <xPortStartScheduler+0x138>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3b01      	subs	r3, #1
 8008260:	4a2d      	ldr	r2, [pc, #180]	@ (8008318 <xPortStartScheduler+0x138>)
 8008262:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	b2db      	uxtb	r3, r3
 800826c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800826e:	78fb      	ldrb	r3, [r7, #3]
 8008270:	b2db      	uxtb	r3, r3
 8008272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008276:	2b80      	cmp	r3, #128	@ 0x80
 8008278:	d0ef      	beq.n	800825a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800827a:	4b27      	ldr	r3, [pc, #156]	@ (8008318 <xPortStartScheduler+0x138>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f1c3 0307 	rsb	r3, r3, #7
 8008282:	2b04      	cmp	r3, #4
 8008284:	d00b      	beq.n	800829e <xPortStartScheduler+0xbe>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	60bb      	str	r3, [r7, #8]
}
 8008298:	bf00      	nop
 800829a:	bf00      	nop
 800829c:	e7fd      	b.n	800829a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800829e:	4b1e      	ldr	r3, [pc, #120]	@ (8008318 <xPortStartScheduler+0x138>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	021b      	lsls	r3, r3, #8
 80082a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008318 <xPortStartScheduler+0x138>)
 80082a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008318 <xPortStartScheduler+0x138>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80082b0:	4a19      	ldr	r2, [pc, #100]	@ (8008318 <xPortStartScheduler+0x138>)
 80082b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082bc:	4b17      	ldr	r3, [pc, #92]	@ (800831c <xPortStartScheduler+0x13c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a16      	ldr	r2, [pc, #88]	@ (800831c <xPortStartScheduler+0x13c>)
 80082c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80082c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082c8:	4b14      	ldr	r3, [pc, #80]	@ (800831c <xPortStartScheduler+0x13c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a13      	ldr	r2, [pc, #76]	@ (800831c <xPortStartScheduler+0x13c>)
 80082ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80082d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082d4:	f000 f8da 	bl	800848c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082d8:	4b11      	ldr	r3, [pc, #68]	@ (8008320 <xPortStartScheduler+0x140>)
 80082da:	2200      	movs	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082de:	f000 f8f9 	bl	80084d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082e2:	4b10      	ldr	r3, [pc, #64]	@ (8008324 <xPortStartScheduler+0x144>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a0f      	ldr	r2, [pc, #60]	@ (8008324 <xPortStartScheduler+0x144>)
 80082e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80082ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082ee:	f7ff ff63 	bl	80081b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082f2:	f7ff f82d 	bl	8007350 <vTaskSwitchContext>
	prvTaskExitError();
 80082f6:	f7ff ff19 	bl	800812c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	e000ed00 	.word	0xe000ed00
 8008308:	410fc271 	.word	0x410fc271
 800830c:	410fc270 	.word	0x410fc270
 8008310:	e000e400 	.word	0xe000e400
 8008314:	200010e4 	.word	0x200010e4
 8008318:	200010e8 	.word	0x200010e8
 800831c:	e000ed20 	.word	0xe000ed20
 8008320:	2000000c 	.word	0x2000000c
 8008324:	e000ef34 	.word	0xe000ef34

08008328 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	607b      	str	r3, [r7, #4]
}
 8008340:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008342:	4b10      	ldr	r3, [pc, #64]	@ (8008384 <vPortEnterCritical+0x5c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3301      	adds	r3, #1
 8008348:	4a0e      	ldr	r2, [pc, #56]	@ (8008384 <vPortEnterCritical+0x5c>)
 800834a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800834c:	4b0d      	ldr	r3, [pc, #52]	@ (8008384 <vPortEnterCritical+0x5c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d110      	bne.n	8008376 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008354:	4b0c      	ldr	r3, [pc, #48]	@ (8008388 <vPortEnterCritical+0x60>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00b      	beq.n	8008376 <vPortEnterCritical+0x4e>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	603b      	str	r3, [r7, #0]
}
 8008370:	bf00      	nop
 8008372:	bf00      	nop
 8008374:	e7fd      	b.n	8008372 <vPortEnterCritical+0x4a>
	}
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	2000000c 	.word	0x2000000c
 8008388:	e000ed04 	.word	0xe000ed04

0800838c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008392:	4b12      	ldr	r3, [pc, #72]	@ (80083dc <vPortExitCritical+0x50>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10b      	bne.n	80083b2 <vPortExitCritical+0x26>
	__asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	607b      	str	r3, [r7, #4]
}
 80083ac:	bf00      	nop
 80083ae:	bf00      	nop
 80083b0:	e7fd      	b.n	80083ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083b2:	4b0a      	ldr	r3, [pc, #40]	@ (80083dc <vPortExitCritical+0x50>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	4a08      	ldr	r2, [pc, #32]	@ (80083dc <vPortExitCritical+0x50>)
 80083ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083bc:	4b07      	ldr	r3, [pc, #28]	@ (80083dc <vPortExitCritical+0x50>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d105      	bne.n	80083d0 <vPortExitCritical+0x44>
 80083c4:	2300      	movs	r3, #0
 80083c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	f383 8811 	msr	BASEPRI, r3
}
 80083ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	2000000c 	.word	0x2000000c

080083e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083e0:	f3ef 8009 	mrs	r0, PSP
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	4b15      	ldr	r3, [pc, #84]	@ (8008440 <pxCurrentTCBConst>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	f01e 0f10 	tst.w	lr, #16
 80083f0:	bf08      	it	eq
 80083f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fa:	6010      	str	r0, [r2, #0]
 80083fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008400:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008404:	f380 8811 	msr	BASEPRI, r0
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f7fe ff9e 	bl	8007350 <vTaskSwitchContext>
 8008414:	f04f 0000 	mov.w	r0, #0
 8008418:	f380 8811 	msr	BASEPRI, r0
 800841c:	bc09      	pop	{r0, r3}
 800841e:	6819      	ldr	r1, [r3, #0]
 8008420:	6808      	ldr	r0, [r1, #0]
 8008422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008426:	f01e 0f10 	tst.w	lr, #16
 800842a:	bf08      	it	eq
 800842c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008430:	f380 8809 	msr	PSP, r0
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	f3af 8000 	nop.w

08008440 <pxCurrentTCBConst>:
 8008440:	20000ab8 	.word	0x20000ab8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop

08008448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	607b      	str	r3, [r7, #4]
}
 8008460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008462:	f7fe febb 	bl	80071dc <xTaskIncrementTick>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800846c:	4b06      	ldr	r3, [pc, #24]	@ (8008488 <xPortSysTickHandler+0x40>)
 800846e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	2300      	movs	r3, #0
 8008476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	f383 8811 	msr	BASEPRI, r3
}
 800847e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008480:	bf00      	nop
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	e000ed04 	.word	0xe000ed04

0800848c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008490:	4b0b      	ldr	r3, [pc, #44]	@ (80084c0 <vPortSetupTimerInterrupt+0x34>)
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008496:	4b0b      	ldr	r3, [pc, #44]	@ (80084c4 <vPortSetupTimerInterrupt+0x38>)
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800849c:	4b0a      	ldr	r3, [pc, #40]	@ (80084c8 <vPortSetupTimerInterrupt+0x3c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a0a      	ldr	r2, [pc, #40]	@ (80084cc <vPortSetupTimerInterrupt+0x40>)
 80084a2:	fba2 2303 	umull	r2, r3, r2, r3
 80084a6:	099b      	lsrs	r3, r3, #6
 80084a8:	4a09      	ldr	r2, [pc, #36]	@ (80084d0 <vPortSetupTimerInterrupt+0x44>)
 80084aa:	3b01      	subs	r3, #1
 80084ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084ae:	4b04      	ldr	r3, [pc, #16]	@ (80084c0 <vPortSetupTimerInterrupt+0x34>)
 80084b0:	2207      	movs	r2, #7
 80084b2:	601a      	str	r2, [r3, #0]
}
 80084b4:	bf00      	nop
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	e000e010 	.word	0xe000e010
 80084c4:	e000e018 	.word	0xe000e018
 80084c8:	20000000 	.word	0x20000000
 80084cc:	10624dd3 	.word	0x10624dd3
 80084d0:	e000e014 	.word	0xe000e014

080084d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80084e4 <vPortEnableVFP+0x10>
 80084d8:	6801      	ldr	r1, [r0, #0]
 80084da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80084de:	6001      	str	r1, [r0, #0]
 80084e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084e2:	bf00      	nop
 80084e4:	e000ed88 	.word	0xe000ed88

080084e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084ee:	f3ef 8305 	mrs	r3, IPSR
 80084f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b0f      	cmp	r3, #15
 80084f8:	d915      	bls.n	8008526 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084fa:	4a18      	ldr	r2, [pc, #96]	@ (800855c <vPortValidateInterruptPriority+0x74>)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008504:	4b16      	ldr	r3, [pc, #88]	@ (8008560 <vPortValidateInterruptPriority+0x78>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	7afa      	ldrb	r2, [r7, #11]
 800850a:	429a      	cmp	r2, r3
 800850c:	d20b      	bcs.n	8008526 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	607b      	str	r3, [r7, #4]
}
 8008520:	bf00      	nop
 8008522:	bf00      	nop
 8008524:	e7fd      	b.n	8008522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008526:	4b0f      	ldr	r3, [pc, #60]	@ (8008564 <vPortValidateInterruptPriority+0x7c>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800852e:	4b0e      	ldr	r3, [pc, #56]	@ (8008568 <vPortValidateInterruptPriority+0x80>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	429a      	cmp	r2, r3
 8008534:	d90b      	bls.n	800854e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	603b      	str	r3, [r7, #0]
}
 8008548:	bf00      	nop
 800854a:	bf00      	nop
 800854c:	e7fd      	b.n	800854a <vPortValidateInterruptPriority+0x62>
	}
 800854e:	bf00      	nop
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	e000e3f0 	.word	0xe000e3f0
 8008560:	200010e4 	.word	0x200010e4
 8008564:	e000ed0c 	.word	0xe000ed0c
 8008568:	200010e8 	.word	0x200010e8

0800856c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08a      	sub	sp, #40	@ 0x28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008574:	2300      	movs	r3, #0
 8008576:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008578:	f7fe fd74 	bl	8007064 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800857c:	4b5c      	ldr	r3, [pc, #368]	@ (80086f0 <pvPortMalloc+0x184>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008584:	f000 f924 	bl	80087d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008588:	4b5a      	ldr	r3, [pc, #360]	@ (80086f4 <pvPortMalloc+0x188>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4013      	ands	r3, r2
 8008590:	2b00      	cmp	r3, #0
 8008592:	f040 8095 	bne.w	80086c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01e      	beq.n	80085da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800859c:	2208      	movs	r2, #8
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4413      	add	r3, r2
 80085a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d015      	beq.n	80085da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f023 0307 	bic.w	r3, r3, #7
 80085b4:	3308      	adds	r3, #8
 80085b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f003 0307 	and.w	r3, r3, #7
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00b      	beq.n	80085da <pvPortMalloc+0x6e>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	617b      	str	r3, [r7, #20]
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop
 80085d8:	e7fd      	b.n	80085d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d06f      	beq.n	80086c0 <pvPortMalloc+0x154>
 80085e0:	4b45      	ldr	r3, [pc, #276]	@ (80086f8 <pvPortMalloc+0x18c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d86a      	bhi.n	80086c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085ea:	4b44      	ldr	r3, [pc, #272]	@ (80086fc <pvPortMalloc+0x190>)
 80085ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085ee:	4b43      	ldr	r3, [pc, #268]	@ (80086fc <pvPortMalloc+0x190>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085f4:	e004      	b.n	8008600 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	429a      	cmp	r2, r3
 8008608:	d903      	bls.n	8008612 <pvPortMalloc+0xa6>
 800860a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1f1      	bne.n	80085f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008612:	4b37      	ldr	r3, [pc, #220]	@ (80086f0 <pvPortMalloc+0x184>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008618:	429a      	cmp	r2, r3
 800861a:	d051      	beq.n	80086c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2208      	movs	r2, #8
 8008622:	4413      	add	r3, r2
 8008624:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800862e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	1ad2      	subs	r2, r2, r3
 8008636:	2308      	movs	r3, #8
 8008638:	005b      	lsls	r3, r3, #1
 800863a:	429a      	cmp	r2, r3
 800863c:	d920      	bls.n	8008680 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800863e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4413      	add	r3, r2
 8008644:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	f003 0307 	and.w	r3, r3, #7
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00b      	beq.n	8008668 <pvPortMalloc+0xfc>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	613b      	str	r3, [r7, #16]
}
 8008662:	bf00      	nop
 8008664:	bf00      	nop
 8008666:	e7fd      	b.n	8008664 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	1ad2      	subs	r2, r2, r3
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800867a:	69b8      	ldr	r0, [r7, #24]
 800867c:	f000 f90a 	bl	8008894 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008680:	4b1d      	ldr	r3, [pc, #116]	@ (80086f8 <pvPortMalloc+0x18c>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	4a1b      	ldr	r2, [pc, #108]	@ (80086f8 <pvPortMalloc+0x18c>)
 800868c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800868e:	4b1a      	ldr	r3, [pc, #104]	@ (80086f8 <pvPortMalloc+0x18c>)
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	4b1b      	ldr	r3, [pc, #108]	@ (8008700 <pvPortMalloc+0x194>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d203      	bcs.n	80086a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800869a:	4b17      	ldr	r3, [pc, #92]	@ (80086f8 <pvPortMalloc+0x18c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a18      	ldr	r2, [pc, #96]	@ (8008700 <pvPortMalloc+0x194>)
 80086a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	4b13      	ldr	r3, [pc, #76]	@ (80086f4 <pvPortMalloc+0x188>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	431a      	orrs	r2, r3
 80086ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80086b6:	4b13      	ldr	r3, [pc, #76]	@ (8008704 <pvPortMalloc+0x198>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3301      	adds	r3, #1
 80086bc:	4a11      	ldr	r2, [pc, #68]	@ (8008704 <pvPortMalloc+0x198>)
 80086be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086c0:	f7fe fcde 	bl	8007080 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00b      	beq.n	80086e6 <pvPortMalloc+0x17a>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	60fb      	str	r3, [r7, #12]
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	e7fd      	b.n	80086e2 <pvPortMalloc+0x176>
	return pvReturn;
 80086e6:	69fb      	ldr	r3, [r7, #28]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3728      	adds	r7, #40	@ 0x28
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	20004cf4 	.word	0x20004cf4
 80086f4:	20004d08 	.word	0x20004d08
 80086f8:	20004cf8 	.word	0x20004cf8
 80086fc:	20004cec 	.word	0x20004cec
 8008700:	20004cfc 	.word	0x20004cfc
 8008704:	20004d00 	.word	0x20004d00

08008708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d04f      	beq.n	80087ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800871a:	2308      	movs	r3, #8
 800871c:	425b      	negs	r3, r3
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4413      	add	r3, r2
 8008722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	4b25      	ldr	r3, [pc, #148]	@ (80087c4 <vPortFree+0xbc>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4013      	ands	r3, r2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10b      	bne.n	800874e <vPortFree+0x46>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	60fb      	str	r3, [r7, #12]
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	e7fd      	b.n	800874a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00b      	beq.n	800876e <vPortFree+0x66>
	__asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	60bb      	str	r3, [r7, #8]
}
 8008768:	bf00      	nop
 800876a:	bf00      	nop
 800876c:	e7fd      	b.n	800876a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	4b14      	ldr	r3, [pc, #80]	@ (80087c4 <vPortFree+0xbc>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4013      	ands	r3, r2
 8008778:	2b00      	cmp	r3, #0
 800877a:	d01e      	beq.n	80087ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d11a      	bne.n	80087ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	4b0e      	ldr	r3, [pc, #56]	@ (80087c4 <vPortFree+0xbc>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	43db      	mvns	r3, r3
 800878e:	401a      	ands	r2, r3
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008794:	f7fe fc66 	bl	8007064 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	4b0a      	ldr	r3, [pc, #40]	@ (80087c8 <vPortFree+0xc0>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4413      	add	r3, r2
 80087a2:	4a09      	ldr	r2, [pc, #36]	@ (80087c8 <vPortFree+0xc0>)
 80087a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087a6:	6938      	ldr	r0, [r7, #16]
 80087a8:	f000 f874 	bl	8008894 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80087ac:	4b07      	ldr	r3, [pc, #28]	@ (80087cc <vPortFree+0xc4>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3301      	adds	r3, #1
 80087b2:	4a06      	ldr	r2, [pc, #24]	@ (80087cc <vPortFree+0xc4>)
 80087b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80087b6:	f7fe fc63 	bl	8007080 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087ba:	bf00      	nop
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20004d08 	.word	0x20004d08
 80087c8:	20004cf8 	.word	0x20004cf8
 80087cc:	20004d04 	.word	0x20004d04

080087d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80087da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087dc:	4b27      	ldr	r3, [pc, #156]	@ (800887c <prvHeapInit+0xac>)
 80087de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f003 0307 	and.w	r3, r3, #7
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00c      	beq.n	8008804 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3307      	adds	r3, #7
 80087ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f023 0307 	bic.w	r3, r3, #7
 80087f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	4a1f      	ldr	r2, [pc, #124]	@ (800887c <prvHeapInit+0xac>)
 8008800:	4413      	add	r3, r2
 8008802:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008808:	4a1d      	ldr	r2, [pc, #116]	@ (8008880 <prvHeapInit+0xb0>)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800880e:	4b1c      	ldr	r3, [pc, #112]	@ (8008880 <prvHeapInit+0xb0>)
 8008810:	2200      	movs	r2, #0
 8008812:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	4413      	add	r3, r2
 800881a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800881c:	2208      	movs	r2, #8
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	1a9b      	subs	r3, r3, r2
 8008822:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f023 0307 	bic.w	r3, r3, #7
 800882a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4a15      	ldr	r2, [pc, #84]	@ (8008884 <prvHeapInit+0xb4>)
 8008830:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008832:	4b14      	ldr	r3, [pc, #80]	@ (8008884 <prvHeapInit+0xb4>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2200      	movs	r2, #0
 8008838:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800883a:	4b12      	ldr	r3, [pc, #72]	@ (8008884 <prvHeapInit+0xb4>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	1ad2      	subs	r2, r2, r3
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008850:	4b0c      	ldr	r3, [pc, #48]	@ (8008884 <prvHeapInit+0xb4>)
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	4a0a      	ldr	r2, [pc, #40]	@ (8008888 <prvHeapInit+0xb8>)
 800885e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	4a09      	ldr	r2, [pc, #36]	@ (800888c <prvHeapInit+0xbc>)
 8008866:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008868:	4b09      	ldr	r3, [pc, #36]	@ (8008890 <prvHeapInit+0xc0>)
 800886a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800886e:	601a      	str	r2, [r3, #0]
}
 8008870:	bf00      	nop
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	200010ec 	.word	0x200010ec
 8008880:	20004cec 	.word	0x20004cec
 8008884:	20004cf4 	.word	0x20004cf4
 8008888:	20004cfc 	.word	0x20004cfc
 800888c:	20004cf8 	.word	0x20004cf8
 8008890:	20004d08 	.word	0x20004d08

08008894 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800889c:	4b28      	ldr	r3, [pc, #160]	@ (8008940 <prvInsertBlockIntoFreeList+0xac>)
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	e002      	b.n	80088a8 <prvInsertBlockIntoFreeList+0x14>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d8f7      	bhi.n	80088a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	4413      	add	r3, r2
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d108      	bne.n	80088d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	441a      	add	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	441a      	add	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d118      	bne.n	800891c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	4b15      	ldr	r3, [pc, #84]	@ (8008944 <prvInsertBlockIntoFreeList+0xb0>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d00d      	beq.n	8008912 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	441a      	add	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	e008      	b.n	8008924 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008912:	4b0c      	ldr	r3, [pc, #48]	@ (8008944 <prvInsertBlockIntoFreeList+0xb0>)
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	e003      	b.n	8008924 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	429a      	cmp	r2, r3
 800892a:	d002      	beq.n	8008932 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008932:	bf00      	nop
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	20004cec 	.word	0x20004cec
 8008944:	20004cf4 	.word	0x20004cf4

08008948 <std>:
 8008948:	2300      	movs	r3, #0
 800894a:	b510      	push	{r4, lr}
 800894c:	4604      	mov	r4, r0
 800894e:	e9c0 3300 	strd	r3, r3, [r0]
 8008952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008956:	6083      	str	r3, [r0, #8]
 8008958:	8181      	strh	r1, [r0, #12]
 800895a:	6643      	str	r3, [r0, #100]	@ 0x64
 800895c:	81c2      	strh	r2, [r0, #14]
 800895e:	6183      	str	r3, [r0, #24]
 8008960:	4619      	mov	r1, r3
 8008962:	2208      	movs	r2, #8
 8008964:	305c      	adds	r0, #92	@ 0x5c
 8008966:	f000 f906 	bl	8008b76 <memset>
 800896a:	4b0d      	ldr	r3, [pc, #52]	@ (80089a0 <std+0x58>)
 800896c:	6263      	str	r3, [r4, #36]	@ 0x24
 800896e:	4b0d      	ldr	r3, [pc, #52]	@ (80089a4 <std+0x5c>)
 8008970:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008972:	4b0d      	ldr	r3, [pc, #52]	@ (80089a8 <std+0x60>)
 8008974:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008976:	4b0d      	ldr	r3, [pc, #52]	@ (80089ac <std+0x64>)
 8008978:	6323      	str	r3, [r4, #48]	@ 0x30
 800897a:	4b0d      	ldr	r3, [pc, #52]	@ (80089b0 <std+0x68>)
 800897c:	6224      	str	r4, [r4, #32]
 800897e:	429c      	cmp	r4, r3
 8008980:	d006      	beq.n	8008990 <std+0x48>
 8008982:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008986:	4294      	cmp	r4, r2
 8008988:	d002      	beq.n	8008990 <std+0x48>
 800898a:	33d0      	adds	r3, #208	@ 0xd0
 800898c:	429c      	cmp	r4, r3
 800898e:	d105      	bne.n	800899c <std+0x54>
 8008990:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008998:	f000 b9bc 	b.w	8008d14 <__retarget_lock_init_recursive>
 800899c:	bd10      	pop	{r4, pc}
 800899e:	bf00      	nop
 80089a0:	08008af1 	.word	0x08008af1
 80089a4:	08008b13 	.word	0x08008b13
 80089a8:	08008b4b 	.word	0x08008b4b
 80089ac:	08008b6f 	.word	0x08008b6f
 80089b0:	20004d0c 	.word	0x20004d0c

080089b4 <stdio_exit_handler>:
 80089b4:	4a02      	ldr	r2, [pc, #8]	@ (80089c0 <stdio_exit_handler+0xc>)
 80089b6:	4903      	ldr	r1, [pc, #12]	@ (80089c4 <stdio_exit_handler+0x10>)
 80089b8:	4803      	ldr	r0, [pc, #12]	@ (80089c8 <stdio_exit_handler+0x14>)
 80089ba:	f000 b869 	b.w	8008a90 <_fwalk_sglue>
 80089be:	bf00      	nop
 80089c0:	20000010 	.word	0x20000010
 80089c4:	080095d1 	.word	0x080095d1
 80089c8:	20000020 	.word	0x20000020

080089cc <cleanup_stdio>:
 80089cc:	6841      	ldr	r1, [r0, #4]
 80089ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008a00 <cleanup_stdio+0x34>)
 80089d0:	4299      	cmp	r1, r3
 80089d2:	b510      	push	{r4, lr}
 80089d4:	4604      	mov	r4, r0
 80089d6:	d001      	beq.n	80089dc <cleanup_stdio+0x10>
 80089d8:	f000 fdfa 	bl	80095d0 <_fflush_r>
 80089dc:	68a1      	ldr	r1, [r4, #8]
 80089de:	4b09      	ldr	r3, [pc, #36]	@ (8008a04 <cleanup_stdio+0x38>)
 80089e0:	4299      	cmp	r1, r3
 80089e2:	d002      	beq.n	80089ea <cleanup_stdio+0x1e>
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 fdf3 	bl	80095d0 <_fflush_r>
 80089ea:	68e1      	ldr	r1, [r4, #12]
 80089ec:	4b06      	ldr	r3, [pc, #24]	@ (8008a08 <cleanup_stdio+0x3c>)
 80089ee:	4299      	cmp	r1, r3
 80089f0:	d004      	beq.n	80089fc <cleanup_stdio+0x30>
 80089f2:	4620      	mov	r0, r4
 80089f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089f8:	f000 bdea 	b.w	80095d0 <_fflush_r>
 80089fc:	bd10      	pop	{r4, pc}
 80089fe:	bf00      	nop
 8008a00:	20004d0c 	.word	0x20004d0c
 8008a04:	20004d74 	.word	0x20004d74
 8008a08:	20004ddc 	.word	0x20004ddc

08008a0c <global_stdio_init.part.0>:
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a3c <global_stdio_init.part.0+0x30>)
 8008a10:	4c0b      	ldr	r4, [pc, #44]	@ (8008a40 <global_stdio_init.part.0+0x34>)
 8008a12:	4a0c      	ldr	r2, [pc, #48]	@ (8008a44 <global_stdio_init.part.0+0x38>)
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	4620      	mov	r0, r4
 8008a18:	2200      	movs	r2, #0
 8008a1a:	2104      	movs	r1, #4
 8008a1c:	f7ff ff94 	bl	8008948 <std>
 8008a20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a24:	2201      	movs	r2, #1
 8008a26:	2109      	movs	r1, #9
 8008a28:	f7ff ff8e 	bl	8008948 <std>
 8008a2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a30:	2202      	movs	r2, #2
 8008a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a36:	2112      	movs	r1, #18
 8008a38:	f7ff bf86 	b.w	8008948 <std>
 8008a3c:	20004e44 	.word	0x20004e44
 8008a40:	20004d0c 	.word	0x20004d0c
 8008a44:	080089b5 	.word	0x080089b5

08008a48 <__sfp_lock_acquire>:
 8008a48:	4801      	ldr	r0, [pc, #4]	@ (8008a50 <__sfp_lock_acquire+0x8>)
 8008a4a:	f000 b964 	b.w	8008d16 <__retarget_lock_acquire_recursive>
 8008a4e:	bf00      	nop
 8008a50:	20004e4d 	.word	0x20004e4d

08008a54 <__sfp_lock_release>:
 8008a54:	4801      	ldr	r0, [pc, #4]	@ (8008a5c <__sfp_lock_release+0x8>)
 8008a56:	f000 b95f 	b.w	8008d18 <__retarget_lock_release_recursive>
 8008a5a:	bf00      	nop
 8008a5c:	20004e4d 	.word	0x20004e4d

08008a60 <__sinit>:
 8008a60:	b510      	push	{r4, lr}
 8008a62:	4604      	mov	r4, r0
 8008a64:	f7ff fff0 	bl	8008a48 <__sfp_lock_acquire>
 8008a68:	6a23      	ldr	r3, [r4, #32]
 8008a6a:	b11b      	cbz	r3, 8008a74 <__sinit+0x14>
 8008a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a70:	f7ff bff0 	b.w	8008a54 <__sfp_lock_release>
 8008a74:	4b04      	ldr	r3, [pc, #16]	@ (8008a88 <__sinit+0x28>)
 8008a76:	6223      	str	r3, [r4, #32]
 8008a78:	4b04      	ldr	r3, [pc, #16]	@ (8008a8c <__sinit+0x2c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1f5      	bne.n	8008a6c <__sinit+0xc>
 8008a80:	f7ff ffc4 	bl	8008a0c <global_stdio_init.part.0>
 8008a84:	e7f2      	b.n	8008a6c <__sinit+0xc>
 8008a86:	bf00      	nop
 8008a88:	080089cd 	.word	0x080089cd
 8008a8c:	20004e44 	.word	0x20004e44

08008a90 <_fwalk_sglue>:
 8008a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a94:	4607      	mov	r7, r0
 8008a96:	4688      	mov	r8, r1
 8008a98:	4614      	mov	r4, r2
 8008a9a:	2600      	movs	r6, #0
 8008a9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008aa0:	f1b9 0901 	subs.w	r9, r9, #1
 8008aa4:	d505      	bpl.n	8008ab2 <_fwalk_sglue+0x22>
 8008aa6:	6824      	ldr	r4, [r4, #0]
 8008aa8:	2c00      	cmp	r4, #0
 8008aaa:	d1f7      	bne.n	8008a9c <_fwalk_sglue+0xc>
 8008aac:	4630      	mov	r0, r6
 8008aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ab2:	89ab      	ldrh	r3, [r5, #12]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d907      	bls.n	8008ac8 <_fwalk_sglue+0x38>
 8008ab8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008abc:	3301      	adds	r3, #1
 8008abe:	d003      	beq.n	8008ac8 <_fwalk_sglue+0x38>
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	47c0      	blx	r8
 8008ac6:	4306      	orrs	r6, r0
 8008ac8:	3568      	adds	r5, #104	@ 0x68
 8008aca:	e7e9      	b.n	8008aa0 <_fwalk_sglue+0x10>

08008acc <iprintf>:
 8008acc:	b40f      	push	{r0, r1, r2, r3}
 8008ace:	b507      	push	{r0, r1, r2, lr}
 8008ad0:	4906      	ldr	r1, [pc, #24]	@ (8008aec <iprintf+0x20>)
 8008ad2:	ab04      	add	r3, sp, #16
 8008ad4:	6808      	ldr	r0, [r1, #0]
 8008ad6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ada:	6881      	ldr	r1, [r0, #8]
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	f000 fa4d 	bl	8008f7c <_vfiprintf_r>
 8008ae2:	b003      	add	sp, #12
 8008ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ae8:	b004      	add	sp, #16
 8008aea:	4770      	bx	lr
 8008aec:	2000001c 	.word	0x2000001c

08008af0 <__sread>:
 8008af0:	b510      	push	{r4, lr}
 8008af2:	460c      	mov	r4, r1
 8008af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af8:	f000 f8be 	bl	8008c78 <_read_r>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	bfab      	itete	ge
 8008b00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b02:	89a3      	ldrhlt	r3, [r4, #12]
 8008b04:	181b      	addge	r3, r3, r0
 8008b06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b0a:	bfac      	ite	ge
 8008b0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b0e:	81a3      	strhlt	r3, [r4, #12]
 8008b10:	bd10      	pop	{r4, pc}

08008b12 <__swrite>:
 8008b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b16:	461f      	mov	r7, r3
 8008b18:	898b      	ldrh	r3, [r1, #12]
 8008b1a:	05db      	lsls	r3, r3, #23
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	460c      	mov	r4, r1
 8008b20:	4616      	mov	r6, r2
 8008b22:	d505      	bpl.n	8008b30 <__swrite+0x1e>
 8008b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b28:	2302      	movs	r3, #2
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f000 f892 	bl	8008c54 <_lseek_r>
 8008b30:	89a3      	ldrh	r3, [r4, #12]
 8008b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b3a:	81a3      	strh	r3, [r4, #12]
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	463b      	mov	r3, r7
 8008b40:	4628      	mov	r0, r5
 8008b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b46:	f000 b8a9 	b.w	8008c9c <_write_r>

08008b4a <__sseek>:
 8008b4a:	b510      	push	{r4, lr}
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b52:	f000 f87f 	bl	8008c54 <_lseek_r>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	bf15      	itete	ne
 8008b5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b66:	81a3      	strheq	r3, [r4, #12]
 8008b68:	bf18      	it	ne
 8008b6a:	81a3      	strhne	r3, [r4, #12]
 8008b6c:	bd10      	pop	{r4, pc}

08008b6e <__sclose>:
 8008b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b72:	f000 b809 	b.w	8008b88 <_close_r>

08008b76 <memset>:
 8008b76:	4402      	add	r2, r0
 8008b78:	4603      	mov	r3, r0
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d100      	bne.n	8008b80 <memset+0xa>
 8008b7e:	4770      	bx	lr
 8008b80:	f803 1b01 	strb.w	r1, [r3], #1
 8008b84:	e7f9      	b.n	8008b7a <memset+0x4>
	...

08008b88 <_close_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	4d06      	ldr	r5, [pc, #24]	@ (8008ba4 <_close_r+0x1c>)
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	4604      	mov	r4, r0
 8008b90:	4608      	mov	r0, r1
 8008b92:	602b      	str	r3, [r5, #0]
 8008b94:	f7f8 fa39 	bl	800100a <_close>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_close_r+0x1a>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_close_r+0x1a>
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	20004e48 	.word	0x20004e48

08008ba8 <_reclaim_reent>:
 8008ba8:	4b29      	ldr	r3, [pc, #164]	@ (8008c50 <_reclaim_reent+0xa8>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4283      	cmp	r3, r0
 8008bae:	b570      	push	{r4, r5, r6, lr}
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	d04b      	beq.n	8008c4c <_reclaim_reent+0xa4>
 8008bb4:	69c3      	ldr	r3, [r0, #28]
 8008bb6:	b1ab      	cbz	r3, 8008be4 <_reclaim_reent+0x3c>
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	b16b      	cbz	r3, 8008bd8 <_reclaim_reent+0x30>
 8008bbc:	2500      	movs	r5, #0
 8008bbe:	69e3      	ldr	r3, [r4, #28]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	5959      	ldr	r1, [r3, r5]
 8008bc4:	2900      	cmp	r1, #0
 8008bc6:	d13b      	bne.n	8008c40 <_reclaim_reent+0x98>
 8008bc8:	3504      	adds	r5, #4
 8008bca:	2d80      	cmp	r5, #128	@ 0x80
 8008bcc:	d1f7      	bne.n	8008bbe <_reclaim_reent+0x16>
 8008bce:	69e3      	ldr	r3, [r4, #28]
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	68d9      	ldr	r1, [r3, #12]
 8008bd4:	f000 f8b0 	bl	8008d38 <_free_r>
 8008bd8:	69e3      	ldr	r3, [r4, #28]
 8008bda:	6819      	ldr	r1, [r3, #0]
 8008bdc:	b111      	cbz	r1, 8008be4 <_reclaim_reent+0x3c>
 8008bde:	4620      	mov	r0, r4
 8008be0:	f000 f8aa 	bl	8008d38 <_free_r>
 8008be4:	6961      	ldr	r1, [r4, #20]
 8008be6:	b111      	cbz	r1, 8008bee <_reclaim_reent+0x46>
 8008be8:	4620      	mov	r0, r4
 8008bea:	f000 f8a5 	bl	8008d38 <_free_r>
 8008bee:	69e1      	ldr	r1, [r4, #28]
 8008bf0:	b111      	cbz	r1, 8008bf8 <_reclaim_reent+0x50>
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 f8a0 	bl	8008d38 <_free_r>
 8008bf8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008bfa:	b111      	cbz	r1, 8008c02 <_reclaim_reent+0x5a>
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f000 f89b 	bl	8008d38 <_free_r>
 8008c02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c04:	b111      	cbz	r1, 8008c0c <_reclaim_reent+0x64>
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 f896 	bl	8008d38 <_free_r>
 8008c0c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008c0e:	b111      	cbz	r1, 8008c16 <_reclaim_reent+0x6e>
 8008c10:	4620      	mov	r0, r4
 8008c12:	f000 f891 	bl	8008d38 <_free_r>
 8008c16:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008c18:	b111      	cbz	r1, 8008c20 <_reclaim_reent+0x78>
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f000 f88c 	bl	8008d38 <_free_r>
 8008c20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008c22:	b111      	cbz	r1, 8008c2a <_reclaim_reent+0x82>
 8008c24:	4620      	mov	r0, r4
 8008c26:	f000 f887 	bl	8008d38 <_free_r>
 8008c2a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008c2c:	b111      	cbz	r1, 8008c34 <_reclaim_reent+0x8c>
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 f882 	bl	8008d38 <_free_r>
 8008c34:	6a23      	ldr	r3, [r4, #32]
 8008c36:	b14b      	cbz	r3, 8008c4c <_reclaim_reent+0xa4>
 8008c38:	4620      	mov	r0, r4
 8008c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c3e:	4718      	bx	r3
 8008c40:	680e      	ldr	r6, [r1, #0]
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 f878 	bl	8008d38 <_free_r>
 8008c48:	4631      	mov	r1, r6
 8008c4a:	e7bb      	b.n	8008bc4 <_reclaim_reent+0x1c>
 8008c4c:	bd70      	pop	{r4, r5, r6, pc}
 8008c4e:	bf00      	nop
 8008c50:	2000001c 	.word	0x2000001c

08008c54 <_lseek_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4d07      	ldr	r5, [pc, #28]	@ (8008c74 <_lseek_r+0x20>)
 8008c58:	4604      	mov	r4, r0
 8008c5a:	4608      	mov	r0, r1
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	2200      	movs	r2, #0
 8008c60:	602a      	str	r2, [r5, #0]
 8008c62:	461a      	mov	r2, r3
 8008c64:	f7f8 f9f8 	bl	8001058 <_lseek>
 8008c68:	1c43      	adds	r3, r0, #1
 8008c6a:	d102      	bne.n	8008c72 <_lseek_r+0x1e>
 8008c6c:	682b      	ldr	r3, [r5, #0]
 8008c6e:	b103      	cbz	r3, 8008c72 <_lseek_r+0x1e>
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	bd38      	pop	{r3, r4, r5, pc}
 8008c74:	20004e48 	.word	0x20004e48

08008c78 <_read_r>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4d07      	ldr	r5, [pc, #28]	@ (8008c98 <_read_r+0x20>)
 8008c7c:	4604      	mov	r4, r0
 8008c7e:	4608      	mov	r0, r1
 8008c80:	4611      	mov	r1, r2
 8008c82:	2200      	movs	r2, #0
 8008c84:	602a      	str	r2, [r5, #0]
 8008c86:	461a      	mov	r2, r3
 8008c88:	f7f8 f986 	bl	8000f98 <_read>
 8008c8c:	1c43      	adds	r3, r0, #1
 8008c8e:	d102      	bne.n	8008c96 <_read_r+0x1e>
 8008c90:	682b      	ldr	r3, [r5, #0]
 8008c92:	b103      	cbz	r3, 8008c96 <_read_r+0x1e>
 8008c94:	6023      	str	r3, [r4, #0]
 8008c96:	bd38      	pop	{r3, r4, r5, pc}
 8008c98:	20004e48 	.word	0x20004e48

08008c9c <_write_r>:
 8008c9c:	b538      	push	{r3, r4, r5, lr}
 8008c9e:	4d07      	ldr	r5, [pc, #28]	@ (8008cbc <_write_r+0x20>)
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	4608      	mov	r0, r1
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	602a      	str	r2, [r5, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	f7f8 f991 	bl	8000fd2 <_write>
 8008cb0:	1c43      	adds	r3, r0, #1
 8008cb2:	d102      	bne.n	8008cba <_write_r+0x1e>
 8008cb4:	682b      	ldr	r3, [r5, #0]
 8008cb6:	b103      	cbz	r3, 8008cba <_write_r+0x1e>
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	bd38      	pop	{r3, r4, r5, pc}
 8008cbc:	20004e48 	.word	0x20004e48

08008cc0 <__errno>:
 8008cc0:	4b01      	ldr	r3, [pc, #4]	@ (8008cc8 <__errno+0x8>)
 8008cc2:	6818      	ldr	r0, [r3, #0]
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	2000001c 	.word	0x2000001c

08008ccc <__libc_init_array>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	4d0d      	ldr	r5, [pc, #52]	@ (8008d04 <__libc_init_array+0x38>)
 8008cd0:	4c0d      	ldr	r4, [pc, #52]	@ (8008d08 <__libc_init_array+0x3c>)
 8008cd2:	1b64      	subs	r4, r4, r5
 8008cd4:	10a4      	asrs	r4, r4, #2
 8008cd6:	2600      	movs	r6, #0
 8008cd8:	42a6      	cmp	r6, r4
 8008cda:	d109      	bne.n	8008cf0 <__libc_init_array+0x24>
 8008cdc:	4d0b      	ldr	r5, [pc, #44]	@ (8008d0c <__libc_init_array+0x40>)
 8008cde:	4c0c      	ldr	r4, [pc, #48]	@ (8008d10 <__libc_init_array+0x44>)
 8008ce0:	f000 fdc6 	bl	8009870 <_init>
 8008ce4:	1b64      	subs	r4, r4, r5
 8008ce6:	10a4      	asrs	r4, r4, #2
 8008ce8:	2600      	movs	r6, #0
 8008cea:	42a6      	cmp	r6, r4
 8008cec:	d105      	bne.n	8008cfa <__libc_init_array+0x2e>
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cf4:	4798      	blx	r3
 8008cf6:	3601      	adds	r6, #1
 8008cf8:	e7ee      	b.n	8008cd8 <__libc_init_array+0xc>
 8008cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cfe:	4798      	blx	r3
 8008d00:	3601      	adds	r6, #1
 8008d02:	e7f2      	b.n	8008cea <__libc_init_array+0x1e>
 8008d04:	080099d0 	.word	0x080099d0
 8008d08:	080099d0 	.word	0x080099d0
 8008d0c:	080099d0 	.word	0x080099d0
 8008d10:	080099d4 	.word	0x080099d4

08008d14 <__retarget_lock_init_recursive>:
 8008d14:	4770      	bx	lr

08008d16 <__retarget_lock_acquire_recursive>:
 8008d16:	4770      	bx	lr

08008d18 <__retarget_lock_release_recursive>:
 8008d18:	4770      	bx	lr

08008d1a <memcpy>:
 8008d1a:	440a      	add	r2, r1
 8008d1c:	4291      	cmp	r1, r2
 8008d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d22:	d100      	bne.n	8008d26 <memcpy+0xc>
 8008d24:	4770      	bx	lr
 8008d26:	b510      	push	{r4, lr}
 8008d28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d30:	4291      	cmp	r1, r2
 8008d32:	d1f9      	bne.n	8008d28 <memcpy+0xe>
 8008d34:	bd10      	pop	{r4, pc}
	...

08008d38 <_free_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	d041      	beq.n	8008dc4 <_free_r+0x8c>
 8008d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d44:	1f0c      	subs	r4, r1, #4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bfb8      	it	lt
 8008d4a:	18e4      	addlt	r4, r4, r3
 8008d4c:	f000 f8e0 	bl	8008f10 <__malloc_lock>
 8008d50:	4a1d      	ldr	r2, [pc, #116]	@ (8008dc8 <_free_r+0x90>)
 8008d52:	6813      	ldr	r3, [r2, #0]
 8008d54:	b933      	cbnz	r3, 8008d64 <_free_r+0x2c>
 8008d56:	6063      	str	r3, [r4, #4]
 8008d58:	6014      	str	r4, [r2, #0]
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d60:	f000 b8dc 	b.w	8008f1c <__malloc_unlock>
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	d908      	bls.n	8008d7a <_free_r+0x42>
 8008d68:	6820      	ldr	r0, [r4, #0]
 8008d6a:	1821      	adds	r1, r4, r0
 8008d6c:	428b      	cmp	r3, r1
 8008d6e:	bf01      	itttt	eq
 8008d70:	6819      	ldreq	r1, [r3, #0]
 8008d72:	685b      	ldreq	r3, [r3, #4]
 8008d74:	1809      	addeq	r1, r1, r0
 8008d76:	6021      	streq	r1, [r4, #0]
 8008d78:	e7ed      	b.n	8008d56 <_free_r+0x1e>
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	b10b      	cbz	r3, 8008d84 <_free_r+0x4c>
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	d9fa      	bls.n	8008d7a <_free_r+0x42>
 8008d84:	6811      	ldr	r1, [r2, #0]
 8008d86:	1850      	adds	r0, r2, r1
 8008d88:	42a0      	cmp	r0, r4
 8008d8a:	d10b      	bne.n	8008da4 <_free_r+0x6c>
 8008d8c:	6820      	ldr	r0, [r4, #0]
 8008d8e:	4401      	add	r1, r0
 8008d90:	1850      	adds	r0, r2, r1
 8008d92:	4283      	cmp	r3, r0
 8008d94:	6011      	str	r1, [r2, #0]
 8008d96:	d1e0      	bne.n	8008d5a <_free_r+0x22>
 8008d98:	6818      	ldr	r0, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	6053      	str	r3, [r2, #4]
 8008d9e:	4408      	add	r0, r1
 8008da0:	6010      	str	r0, [r2, #0]
 8008da2:	e7da      	b.n	8008d5a <_free_r+0x22>
 8008da4:	d902      	bls.n	8008dac <_free_r+0x74>
 8008da6:	230c      	movs	r3, #12
 8008da8:	602b      	str	r3, [r5, #0]
 8008daa:	e7d6      	b.n	8008d5a <_free_r+0x22>
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	1821      	adds	r1, r4, r0
 8008db0:	428b      	cmp	r3, r1
 8008db2:	bf04      	itt	eq
 8008db4:	6819      	ldreq	r1, [r3, #0]
 8008db6:	685b      	ldreq	r3, [r3, #4]
 8008db8:	6063      	str	r3, [r4, #4]
 8008dba:	bf04      	itt	eq
 8008dbc:	1809      	addeq	r1, r1, r0
 8008dbe:	6021      	streq	r1, [r4, #0]
 8008dc0:	6054      	str	r4, [r2, #4]
 8008dc2:	e7ca      	b.n	8008d5a <_free_r+0x22>
 8008dc4:	bd38      	pop	{r3, r4, r5, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20004e54 	.word	0x20004e54

08008dcc <sbrk_aligned>:
 8008dcc:	b570      	push	{r4, r5, r6, lr}
 8008dce:	4e0f      	ldr	r6, [pc, #60]	@ (8008e0c <sbrk_aligned+0x40>)
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	6831      	ldr	r1, [r6, #0]
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	b911      	cbnz	r1, 8008dde <sbrk_aligned+0x12>
 8008dd8:	f000 fcb6 	bl	8009748 <_sbrk_r>
 8008ddc:	6030      	str	r0, [r6, #0]
 8008dde:	4621      	mov	r1, r4
 8008de0:	4628      	mov	r0, r5
 8008de2:	f000 fcb1 	bl	8009748 <_sbrk_r>
 8008de6:	1c43      	adds	r3, r0, #1
 8008de8:	d103      	bne.n	8008df2 <sbrk_aligned+0x26>
 8008dea:	f04f 34ff 	mov.w	r4, #4294967295
 8008dee:	4620      	mov	r0, r4
 8008df0:	bd70      	pop	{r4, r5, r6, pc}
 8008df2:	1cc4      	adds	r4, r0, #3
 8008df4:	f024 0403 	bic.w	r4, r4, #3
 8008df8:	42a0      	cmp	r0, r4
 8008dfa:	d0f8      	beq.n	8008dee <sbrk_aligned+0x22>
 8008dfc:	1a21      	subs	r1, r4, r0
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f000 fca2 	bl	8009748 <_sbrk_r>
 8008e04:	3001      	adds	r0, #1
 8008e06:	d1f2      	bne.n	8008dee <sbrk_aligned+0x22>
 8008e08:	e7ef      	b.n	8008dea <sbrk_aligned+0x1e>
 8008e0a:	bf00      	nop
 8008e0c:	20004e50 	.word	0x20004e50

08008e10 <_malloc_r>:
 8008e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e14:	1ccd      	adds	r5, r1, #3
 8008e16:	f025 0503 	bic.w	r5, r5, #3
 8008e1a:	3508      	adds	r5, #8
 8008e1c:	2d0c      	cmp	r5, #12
 8008e1e:	bf38      	it	cc
 8008e20:	250c      	movcc	r5, #12
 8008e22:	2d00      	cmp	r5, #0
 8008e24:	4606      	mov	r6, r0
 8008e26:	db01      	blt.n	8008e2c <_malloc_r+0x1c>
 8008e28:	42a9      	cmp	r1, r5
 8008e2a:	d904      	bls.n	8008e36 <_malloc_r+0x26>
 8008e2c:	230c      	movs	r3, #12
 8008e2e:	6033      	str	r3, [r6, #0]
 8008e30:	2000      	movs	r0, #0
 8008e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f0c <_malloc_r+0xfc>
 8008e3a:	f000 f869 	bl	8008f10 <__malloc_lock>
 8008e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e42:	461c      	mov	r4, r3
 8008e44:	bb44      	cbnz	r4, 8008e98 <_malloc_r+0x88>
 8008e46:	4629      	mov	r1, r5
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f7ff ffbf 	bl	8008dcc <sbrk_aligned>
 8008e4e:	1c43      	adds	r3, r0, #1
 8008e50:	4604      	mov	r4, r0
 8008e52:	d158      	bne.n	8008f06 <_malloc_r+0xf6>
 8008e54:	f8d8 4000 	ldr.w	r4, [r8]
 8008e58:	4627      	mov	r7, r4
 8008e5a:	2f00      	cmp	r7, #0
 8008e5c:	d143      	bne.n	8008ee6 <_malloc_r+0xd6>
 8008e5e:	2c00      	cmp	r4, #0
 8008e60:	d04b      	beq.n	8008efa <_malloc_r+0xea>
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	4639      	mov	r1, r7
 8008e66:	4630      	mov	r0, r6
 8008e68:	eb04 0903 	add.w	r9, r4, r3
 8008e6c:	f000 fc6c 	bl	8009748 <_sbrk_r>
 8008e70:	4581      	cmp	r9, r0
 8008e72:	d142      	bne.n	8008efa <_malloc_r+0xea>
 8008e74:	6821      	ldr	r1, [r4, #0]
 8008e76:	1a6d      	subs	r5, r5, r1
 8008e78:	4629      	mov	r1, r5
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	f7ff ffa6 	bl	8008dcc <sbrk_aligned>
 8008e80:	3001      	adds	r0, #1
 8008e82:	d03a      	beq.n	8008efa <_malloc_r+0xea>
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	442b      	add	r3, r5
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	bb62      	cbnz	r2, 8008eec <_malloc_r+0xdc>
 8008e92:	f8c8 7000 	str.w	r7, [r8]
 8008e96:	e00f      	b.n	8008eb8 <_malloc_r+0xa8>
 8008e98:	6822      	ldr	r2, [r4, #0]
 8008e9a:	1b52      	subs	r2, r2, r5
 8008e9c:	d420      	bmi.n	8008ee0 <_malloc_r+0xd0>
 8008e9e:	2a0b      	cmp	r2, #11
 8008ea0:	d917      	bls.n	8008ed2 <_malloc_r+0xc2>
 8008ea2:	1961      	adds	r1, r4, r5
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	6025      	str	r5, [r4, #0]
 8008ea8:	bf18      	it	ne
 8008eaa:	6059      	strne	r1, [r3, #4]
 8008eac:	6863      	ldr	r3, [r4, #4]
 8008eae:	bf08      	it	eq
 8008eb0:	f8c8 1000 	streq.w	r1, [r8]
 8008eb4:	5162      	str	r2, [r4, r5]
 8008eb6:	604b      	str	r3, [r1, #4]
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f000 f82f 	bl	8008f1c <__malloc_unlock>
 8008ebe:	f104 000b 	add.w	r0, r4, #11
 8008ec2:	1d23      	adds	r3, r4, #4
 8008ec4:	f020 0007 	bic.w	r0, r0, #7
 8008ec8:	1ac2      	subs	r2, r0, r3
 8008eca:	bf1c      	itt	ne
 8008ecc:	1a1b      	subne	r3, r3, r0
 8008ece:	50a3      	strne	r3, [r4, r2]
 8008ed0:	e7af      	b.n	8008e32 <_malloc_r+0x22>
 8008ed2:	6862      	ldr	r2, [r4, #4]
 8008ed4:	42a3      	cmp	r3, r4
 8008ed6:	bf0c      	ite	eq
 8008ed8:	f8c8 2000 	streq.w	r2, [r8]
 8008edc:	605a      	strne	r2, [r3, #4]
 8008ede:	e7eb      	b.n	8008eb8 <_malloc_r+0xa8>
 8008ee0:	4623      	mov	r3, r4
 8008ee2:	6864      	ldr	r4, [r4, #4]
 8008ee4:	e7ae      	b.n	8008e44 <_malloc_r+0x34>
 8008ee6:	463c      	mov	r4, r7
 8008ee8:	687f      	ldr	r7, [r7, #4]
 8008eea:	e7b6      	b.n	8008e5a <_malloc_r+0x4a>
 8008eec:	461a      	mov	r2, r3
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	42a3      	cmp	r3, r4
 8008ef2:	d1fb      	bne.n	8008eec <_malloc_r+0xdc>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	6053      	str	r3, [r2, #4]
 8008ef8:	e7de      	b.n	8008eb8 <_malloc_r+0xa8>
 8008efa:	230c      	movs	r3, #12
 8008efc:	6033      	str	r3, [r6, #0]
 8008efe:	4630      	mov	r0, r6
 8008f00:	f000 f80c 	bl	8008f1c <__malloc_unlock>
 8008f04:	e794      	b.n	8008e30 <_malloc_r+0x20>
 8008f06:	6005      	str	r5, [r0, #0]
 8008f08:	e7d6      	b.n	8008eb8 <_malloc_r+0xa8>
 8008f0a:	bf00      	nop
 8008f0c:	20004e54 	.word	0x20004e54

08008f10 <__malloc_lock>:
 8008f10:	4801      	ldr	r0, [pc, #4]	@ (8008f18 <__malloc_lock+0x8>)
 8008f12:	f7ff bf00 	b.w	8008d16 <__retarget_lock_acquire_recursive>
 8008f16:	bf00      	nop
 8008f18:	20004e4c 	.word	0x20004e4c

08008f1c <__malloc_unlock>:
 8008f1c:	4801      	ldr	r0, [pc, #4]	@ (8008f24 <__malloc_unlock+0x8>)
 8008f1e:	f7ff befb 	b.w	8008d18 <__retarget_lock_release_recursive>
 8008f22:	bf00      	nop
 8008f24:	20004e4c 	.word	0x20004e4c

08008f28 <__sfputc_r>:
 8008f28:	6893      	ldr	r3, [r2, #8]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	b410      	push	{r4}
 8008f30:	6093      	str	r3, [r2, #8]
 8008f32:	da08      	bge.n	8008f46 <__sfputc_r+0x1e>
 8008f34:	6994      	ldr	r4, [r2, #24]
 8008f36:	42a3      	cmp	r3, r4
 8008f38:	db01      	blt.n	8008f3e <__sfputc_r+0x16>
 8008f3a:	290a      	cmp	r1, #10
 8008f3c:	d103      	bne.n	8008f46 <__sfputc_r+0x1e>
 8008f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f42:	f000 bb6d 	b.w	8009620 <__swbuf_r>
 8008f46:	6813      	ldr	r3, [r2, #0]
 8008f48:	1c58      	adds	r0, r3, #1
 8008f4a:	6010      	str	r0, [r2, #0]
 8008f4c:	7019      	strb	r1, [r3, #0]
 8008f4e:	4608      	mov	r0, r1
 8008f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <__sfputs_r>:
 8008f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f58:	4606      	mov	r6, r0
 8008f5a:	460f      	mov	r7, r1
 8008f5c:	4614      	mov	r4, r2
 8008f5e:	18d5      	adds	r5, r2, r3
 8008f60:	42ac      	cmp	r4, r5
 8008f62:	d101      	bne.n	8008f68 <__sfputs_r+0x12>
 8008f64:	2000      	movs	r0, #0
 8008f66:	e007      	b.n	8008f78 <__sfputs_r+0x22>
 8008f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f6c:	463a      	mov	r2, r7
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f7ff ffda 	bl	8008f28 <__sfputc_r>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d1f3      	bne.n	8008f60 <__sfputs_r+0xa>
 8008f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f7c <_vfiprintf_r>:
 8008f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f80:	460d      	mov	r5, r1
 8008f82:	b09d      	sub	sp, #116	@ 0x74
 8008f84:	4614      	mov	r4, r2
 8008f86:	4698      	mov	r8, r3
 8008f88:	4606      	mov	r6, r0
 8008f8a:	b118      	cbz	r0, 8008f94 <_vfiprintf_r+0x18>
 8008f8c:	6a03      	ldr	r3, [r0, #32]
 8008f8e:	b90b      	cbnz	r3, 8008f94 <_vfiprintf_r+0x18>
 8008f90:	f7ff fd66 	bl	8008a60 <__sinit>
 8008f94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f96:	07d9      	lsls	r1, r3, #31
 8008f98:	d405      	bmi.n	8008fa6 <_vfiprintf_r+0x2a>
 8008f9a:	89ab      	ldrh	r3, [r5, #12]
 8008f9c:	059a      	lsls	r2, r3, #22
 8008f9e:	d402      	bmi.n	8008fa6 <_vfiprintf_r+0x2a>
 8008fa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fa2:	f7ff feb8 	bl	8008d16 <__retarget_lock_acquire_recursive>
 8008fa6:	89ab      	ldrh	r3, [r5, #12]
 8008fa8:	071b      	lsls	r3, r3, #28
 8008faa:	d501      	bpl.n	8008fb0 <_vfiprintf_r+0x34>
 8008fac:	692b      	ldr	r3, [r5, #16]
 8008fae:	b99b      	cbnz	r3, 8008fd8 <_vfiprintf_r+0x5c>
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f000 fb72 	bl	800969c <__swsetup_r>
 8008fb8:	b170      	cbz	r0, 8008fd8 <_vfiprintf_r+0x5c>
 8008fba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fbc:	07dc      	lsls	r4, r3, #31
 8008fbe:	d504      	bpl.n	8008fca <_vfiprintf_r+0x4e>
 8008fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc4:	b01d      	add	sp, #116	@ 0x74
 8008fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fca:	89ab      	ldrh	r3, [r5, #12]
 8008fcc:	0598      	lsls	r0, r3, #22
 8008fce:	d4f7      	bmi.n	8008fc0 <_vfiprintf_r+0x44>
 8008fd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fd2:	f7ff fea1 	bl	8008d18 <__retarget_lock_release_recursive>
 8008fd6:	e7f3      	b.n	8008fc0 <_vfiprintf_r+0x44>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fdc:	2320      	movs	r3, #32
 8008fde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fe2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fe6:	2330      	movs	r3, #48	@ 0x30
 8008fe8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009198 <_vfiprintf_r+0x21c>
 8008fec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ff0:	f04f 0901 	mov.w	r9, #1
 8008ff4:	4623      	mov	r3, r4
 8008ff6:	469a      	mov	sl, r3
 8008ff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ffc:	b10a      	cbz	r2, 8009002 <_vfiprintf_r+0x86>
 8008ffe:	2a25      	cmp	r2, #37	@ 0x25
 8009000:	d1f9      	bne.n	8008ff6 <_vfiprintf_r+0x7a>
 8009002:	ebba 0b04 	subs.w	fp, sl, r4
 8009006:	d00b      	beq.n	8009020 <_vfiprintf_r+0xa4>
 8009008:	465b      	mov	r3, fp
 800900a:	4622      	mov	r2, r4
 800900c:	4629      	mov	r1, r5
 800900e:	4630      	mov	r0, r6
 8009010:	f7ff ffa1 	bl	8008f56 <__sfputs_r>
 8009014:	3001      	adds	r0, #1
 8009016:	f000 80a7 	beq.w	8009168 <_vfiprintf_r+0x1ec>
 800901a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800901c:	445a      	add	r2, fp
 800901e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009020:	f89a 3000 	ldrb.w	r3, [sl]
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 809f 	beq.w	8009168 <_vfiprintf_r+0x1ec>
 800902a:	2300      	movs	r3, #0
 800902c:	f04f 32ff 	mov.w	r2, #4294967295
 8009030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009034:	f10a 0a01 	add.w	sl, sl, #1
 8009038:	9304      	str	r3, [sp, #16]
 800903a:	9307      	str	r3, [sp, #28]
 800903c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009040:	931a      	str	r3, [sp, #104]	@ 0x68
 8009042:	4654      	mov	r4, sl
 8009044:	2205      	movs	r2, #5
 8009046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800904a:	4853      	ldr	r0, [pc, #332]	@ (8009198 <_vfiprintf_r+0x21c>)
 800904c:	f7f7 f8c8 	bl	80001e0 <memchr>
 8009050:	9a04      	ldr	r2, [sp, #16]
 8009052:	b9d8      	cbnz	r0, 800908c <_vfiprintf_r+0x110>
 8009054:	06d1      	lsls	r1, r2, #27
 8009056:	bf44      	itt	mi
 8009058:	2320      	movmi	r3, #32
 800905a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800905e:	0713      	lsls	r3, r2, #28
 8009060:	bf44      	itt	mi
 8009062:	232b      	movmi	r3, #43	@ 0x2b
 8009064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009068:	f89a 3000 	ldrb.w	r3, [sl]
 800906c:	2b2a      	cmp	r3, #42	@ 0x2a
 800906e:	d015      	beq.n	800909c <_vfiprintf_r+0x120>
 8009070:	9a07      	ldr	r2, [sp, #28]
 8009072:	4654      	mov	r4, sl
 8009074:	2000      	movs	r0, #0
 8009076:	f04f 0c0a 	mov.w	ip, #10
 800907a:	4621      	mov	r1, r4
 800907c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009080:	3b30      	subs	r3, #48	@ 0x30
 8009082:	2b09      	cmp	r3, #9
 8009084:	d94b      	bls.n	800911e <_vfiprintf_r+0x1a2>
 8009086:	b1b0      	cbz	r0, 80090b6 <_vfiprintf_r+0x13a>
 8009088:	9207      	str	r2, [sp, #28]
 800908a:	e014      	b.n	80090b6 <_vfiprintf_r+0x13a>
 800908c:	eba0 0308 	sub.w	r3, r0, r8
 8009090:	fa09 f303 	lsl.w	r3, r9, r3
 8009094:	4313      	orrs	r3, r2
 8009096:	9304      	str	r3, [sp, #16]
 8009098:	46a2      	mov	sl, r4
 800909a:	e7d2      	b.n	8009042 <_vfiprintf_r+0xc6>
 800909c:	9b03      	ldr	r3, [sp, #12]
 800909e:	1d19      	adds	r1, r3, #4
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	9103      	str	r1, [sp, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	bfbb      	ittet	lt
 80090a8:	425b      	neglt	r3, r3
 80090aa:	f042 0202 	orrlt.w	r2, r2, #2
 80090ae:	9307      	strge	r3, [sp, #28]
 80090b0:	9307      	strlt	r3, [sp, #28]
 80090b2:	bfb8      	it	lt
 80090b4:	9204      	strlt	r2, [sp, #16]
 80090b6:	7823      	ldrb	r3, [r4, #0]
 80090b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80090ba:	d10a      	bne.n	80090d2 <_vfiprintf_r+0x156>
 80090bc:	7863      	ldrb	r3, [r4, #1]
 80090be:	2b2a      	cmp	r3, #42	@ 0x2a
 80090c0:	d132      	bne.n	8009128 <_vfiprintf_r+0x1ac>
 80090c2:	9b03      	ldr	r3, [sp, #12]
 80090c4:	1d1a      	adds	r2, r3, #4
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	9203      	str	r2, [sp, #12]
 80090ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090ce:	3402      	adds	r4, #2
 80090d0:	9305      	str	r3, [sp, #20]
 80090d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091a8 <_vfiprintf_r+0x22c>
 80090d6:	7821      	ldrb	r1, [r4, #0]
 80090d8:	2203      	movs	r2, #3
 80090da:	4650      	mov	r0, sl
 80090dc:	f7f7 f880 	bl	80001e0 <memchr>
 80090e0:	b138      	cbz	r0, 80090f2 <_vfiprintf_r+0x176>
 80090e2:	9b04      	ldr	r3, [sp, #16]
 80090e4:	eba0 000a 	sub.w	r0, r0, sl
 80090e8:	2240      	movs	r2, #64	@ 0x40
 80090ea:	4082      	lsls	r2, r0
 80090ec:	4313      	orrs	r3, r2
 80090ee:	3401      	adds	r4, #1
 80090f0:	9304      	str	r3, [sp, #16]
 80090f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f6:	4829      	ldr	r0, [pc, #164]	@ (800919c <_vfiprintf_r+0x220>)
 80090f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090fc:	2206      	movs	r2, #6
 80090fe:	f7f7 f86f 	bl	80001e0 <memchr>
 8009102:	2800      	cmp	r0, #0
 8009104:	d03f      	beq.n	8009186 <_vfiprintf_r+0x20a>
 8009106:	4b26      	ldr	r3, [pc, #152]	@ (80091a0 <_vfiprintf_r+0x224>)
 8009108:	bb1b      	cbnz	r3, 8009152 <_vfiprintf_r+0x1d6>
 800910a:	9b03      	ldr	r3, [sp, #12]
 800910c:	3307      	adds	r3, #7
 800910e:	f023 0307 	bic.w	r3, r3, #7
 8009112:	3308      	adds	r3, #8
 8009114:	9303      	str	r3, [sp, #12]
 8009116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009118:	443b      	add	r3, r7
 800911a:	9309      	str	r3, [sp, #36]	@ 0x24
 800911c:	e76a      	b.n	8008ff4 <_vfiprintf_r+0x78>
 800911e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009122:	460c      	mov	r4, r1
 8009124:	2001      	movs	r0, #1
 8009126:	e7a8      	b.n	800907a <_vfiprintf_r+0xfe>
 8009128:	2300      	movs	r3, #0
 800912a:	3401      	adds	r4, #1
 800912c:	9305      	str	r3, [sp, #20]
 800912e:	4619      	mov	r1, r3
 8009130:	f04f 0c0a 	mov.w	ip, #10
 8009134:	4620      	mov	r0, r4
 8009136:	f810 2b01 	ldrb.w	r2, [r0], #1
 800913a:	3a30      	subs	r2, #48	@ 0x30
 800913c:	2a09      	cmp	r2, #9
 800913e:	d903      	bls.n	8009148 <_vfiprintf_r+0x1cc>
 8009140:	2b00      	cmp	r3, #0
 8009142:	d0c6      	beq.n	80090d2 <_vfiprintf_r+0x156>
 8009144:	9105      	str	r1, [sp, #20]
 8009146:	e7c4      	b.n	80090d2 <_vfiprintf_r+0x156>
 8009148:	fb0c 2101 	mla	r1, ip, r1, r2
 800914c:	4604      	mov	r4, r0
 800914e:	2301      	movs	r3, #1
 8009150:	e7f0      	b.n	8009134 <_vfiprintf_r+0x1b8>
 8009152:	ab03      	add	r3, sp, #12
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	462a      	mov	r2, r5
 8009158:	4b12      	ldr	r3, [pc, #72]	@ (80091a4 <_vfiprintf_r+0x228>)
 800915a:	a904      	add	r1, sp, #16
 800915c:	4630      	mov	r0, r6
 800915e:	f3af 8000 	nop.w
 8009162:	4607      	mov	r7, r0
 8009164:	1c78      	adds	r0, r7, #1
 8009166:	d1d6      	bne.n	8009116 <_vfiprintf_r+0x19a>
 8009168:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800916a:	07d9      	lsls	r1, r3, #31
 800916c:	d405      	bmi.n	800917a <_vfiprintf_r+0x1fe>
 800916e:	89ab      	ldrh	r3, [r5, #12]
 8009170:	059a      	lsls	r2, r3, #22
 8009172:	d402      	bmi.n	800917a <_vfiprintf_r+0x1fe>
 8009174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009176:	f7ff fdcf 	bl	8008d18 <__retarget_lock_release_recursive>
 800917a:	89ab      	ldrh	r3, [r5, #12]
 800917c:	065b      	lsls	r3, r3, #25
 800917e:	f53f af1f 	bmi.w	8008fc0 <_vfiprintf_r+0x44>
 8009182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009184:	e71e      	b.n	8008fc4 <_vfiprintf_r+0x48>
 8009186:	ab03      	add	r3, sp, #12
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	462a      	mov	r2, r5
 800918c:	4b05      	ldr	r3, [pc, #20]	@ (80091a4 <_vfiprintf_r+0x228>)
 800918e:	a904      	add	r1, sp, #16
 8009190:	4630      	mov	r0, r6
 8009192:	f000 f879 	bl	8009288 <_printf_i>
 8009196:	e7e4      	b.n	8009162 <_vfiprintf_r+0x1e6>
 8009198:	08009994 	.word	0x08009994
 800919c:	0800999e 	.word	0x0800999e
 80091a0:	00000000 	.word	0x00000000
 80091a4:	08008f57 	.word	0x08008f57
 80091a8:	0800999a 	.word	0x0800999a

080091ac <_printf_common>:
 80091ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b0:	4616      	mov	r6, r2
 80091b2:	4698      	mov	r8, r3
 80091b4:	688a      	ldr	r2, [r1, #8]
 80091b6:	690b      	ldr	r3, [r1, #16]
 80091b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091bc:	4293      	cmp	r3, r2
 80091be:	bfb8      	it	lt
 80091c0:	4613      	movlt	r3, r2
 80091c2:	6033      	str	r3, [r6, #0]
 80091c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091c8:	4607      	mov	r7, r0
 80091ca:	460c      	mov	r4, r1
 80091cc:	b10a      	cbz	r2, 80091d2 <_printf_common+0x26>
 80091ce:	3301      	adds	r3, #1
 80091d0:	6033      	str	r3, [r6, #0]
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	0699      	lsls	r1, r3, #26
 80091d6:	bf42      	ittt	mi
 80091d8:	6833      	ldrmi	r3, [r6, #0]
 80091da:	3302      	addmi	r3, #2
 80091dc:	6033      	strmi	r3, [r6, #0]
 80091de:	6825      	ldr	r5, [r4, #0]
 80091e0:	f015 0506 	ands.w	r5, r5, #6
 80091e4:	d106      	bne.n	80091f4 <_printf_common+0x48>
 80091e6:	f104 0a19 	add.w	sl, r4, #25
 80091ea:	68e3      	ldr	r3, [r4, #12]
 80091ec:	6832      	ldr	r2, [r6, #0]
 80091ee:	1a9b      	subs	r3, r3, r2
 80091f0:	42ab      	cmp	r3, r5
 80091f2:	dc26      	bgt.n	8009242 <_printf_common+0x96>
 80091f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091f8:	6822      	ldr	r2, [r4, #0]
 80091fa:	3b00      	subs	r3, #0
 80091fc:	bf18      	it	ne
 80091fe:	2301      	movne	r3, #1
 8009200:	0692      	lsls	r2, r2, #26
 8009202:	d42b      	bmi.n	800925c <_printf_common+0xb0>
 8009204:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009208:	4641      	mov	r1, r8
 800920a:	4638      	mov	r0, r7
 800920c:	47c8      	blx	r9
 800920e:	3001      	adds	r0, #1
 8009210:	d01e      	beq.n	8009250 <_printf_common+0xa4>
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	6922      	ldr	r2, [r4, #16]
 8009216:	f003 0306 	and.w	r3, r3, #6
 800921a:	2b04      	cmp	r3, #4
 800921c:	bf02      	ittt	eq
 800921e:	68e5      	ldreq	r5, [r4, #12]
 8009220:	6833      	ldreq	r3, [r6, #0]
 8009222:	1aed      	subeq	r5, r5, r3
 8009224:	68a3      	ldr	r3, [r4, #8]
 8009226:	bf0c      	ite	eq
 8009228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800922c:	2500      	movne	r5, #0
 800922e:	4293      	cmp	r3, r2
 8009230:	bfc4      	itt	gt
 8009232:	1a9b      	subgt	r3, r3, r2
 8009234:	18ed      	addgt	r5, r5, r3
 8009236:	2600      	movs	r6, #0
 8009238:	341a      	adds	r4, #26
 800923a:	42b5      	cmp	r5, r6
 800923c:	d11a      	bne.n	8009274 <_printf_common+0xc8>
 800923e:	2000      	movs	r0, #0
 8009240:	e008      	b.n	8009254 <_printf_common+0xa8>
 8009242:	2301      	movs	r3, #1
 8009244:	4652      	mov	r2, sl
 8009246:	4641      	mov	r1, r8
 8009248:	4638      	mov	r0, r7
 800924a:	47c8      	blx	r9
 800924c:	3001      	adds	r0, #1
 800924e:	d103      	bne.n	8009258 <_printf_common+0xac>
 8009250:	f04f 30ff 	mov.w	r0, #4294967295
 8009254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009258:	3501      	adds	r5, #1
 800925a:	e7c6      	b.n	80091ea <_printf_common+0x3e>
 800925c:	18e1      	adds	r1, r4, r3
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	2030      	movs	r0, #48	@ 0x30
 8009262:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009266:	4422      	add	r2, r4
 8009268:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800926c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009270:	3302      	adds	r3, #2
 8009272:	e7c7      	b.n	8009204 <_printf_common+0x58>
 8009274:	2301      	movs	r3, #1
 8009276:	4622      	mov	r2, r4
 8009278:	4641      	mov	r1, r8
 800927a:	4638      	mov	r0, r7
 800927c:	47c8      	blx	r9
 800927e:	3001      	adds	r0, #1
 8009280:	d0e6      	beq.n	8009250 <_printf_common+0xa4>
 8009282:	3601      	adds	r6, #1
 8009284:	e7d9      	b.n	800923a <_printf_common+0x8e>
	...

08009288 <_printf_i>:
 8009288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800928c:	7e0f      	ldrb	r7, [r1, #24]
 800928e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009290:	2f78      	cmp	r7, #120	@ 0x78
 8009292:	4691      	mov	r9, r2
 8009294:	4680      	mov	r8, r0
 8009296:	460c      	mov	r4, r1
 8009298:	469a      	mov	sl, r3
 800929a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800929e:	d807      	bhi.n	80092b0 <_printf_i+0x28>
 80092a0:	2f62      	cmp	r7, #98	@ 0x62
 80092a2:	d80a      	bhi.n	80092ba <_printf_i+0x32>
 80092a4:	2f00      	cmp	r7, #0
 80092a6:	f000 80d2 	beq.w	800944e <_printf_i+0x1c6>
 80092aa:	2f58      	cmp	r7, #88	@ 0x58
 80092ac:	f000 80b9 	beq.w	8009422 <_printf_i+0x19a>
 80092b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092b8:	e03a      	b.n	8009330 <_printf_i+0xa8>
 80092ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092be:	2b15      	cmp	r3, #21
 80092c0:	d8f6      	bhi.n	80092b0 <_printf_i+0x28>
 80092c2:	a101      	add	r1, pc, #4	@ (adr r1, 80092c8 <_printf_i+0x40>)
 80092c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092c8:	08009321 	.word	0x08009321
 80092cc:	08009335 	.word	0x08009335
 80092d0:	080092b1 	.word	0x080092b1
 80092d4:	080092b1 	.word	0x080092b1
 80092d8:	080092b1 	.word	0x080092b1
 80092dc:	080092b1 	.word	0x080092b1
 80092e0:	08009335 	.word	0x08009335
 80092e4:	080092b1 	.word	0x080092b1
 80092e8:	080092b1 	.word	0x080092b1
 80092ec:	080092b1 	.word	0x080092b1
 80092f0:	080092b1 	.word	0x080092b1
 80092f4:	08009435 	.word	0x08009435
 80092f8:	0800935f 	.word	0x0800935f
 80092fc:	080093ef 	.word	0x080093ef
 8009300:	080092b1 	.word	0x080092b1
 8009304:	080092b1 	.word	0x080092b1
 8009308:	08009457 	.word	0x08009457
 800930c:	080092b1 	.word	0x080092b1
 8009310:	0800935f 	.word	0x0800935f
 8009314:	080092b1 	.word	0x080092b1
 8009318:	080092b1 	.word	0x080092b1
 800931c:	080093f7 	.word	0x080093f7
 8009320:	6833      	ldr	r3, [r6, #0]
 8009322:	1d1a      	adds	r2, r3, #4
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	6032      	str	r2, [r6, #0]
 8009328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800932c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009330:	2301      	movs	r3, #1
 8009332:	e09d      	b.n	8009470 <_printf_i+0x1e8>
 8009334:	6833      	ldr	r3, [r6, #0]
 8009336:	6820      	ldr	r0, [r4, #0]
 8009338:	1d19      	adds	r1, r3, #4
 800933a:	6031      	str	r1, [r6, #0]
 800933c:	0606      	lsls	r6, r0, #24
 800933e:	d501      	bpl.n	8009344 <_printf_i+0xbc>
 8009340:	681d      	ldr	r5, [r3, #0]
 8009342:	e003      	b.n	800934c <_printf_i+0xc4>
 8009344:	0645      	lsls	r5, r0, #25
 8009346:	d5fb      	bpl.n	8009340 <_printf_i+0xb8>
 8009348:	f9b3 5000 	ldrsh.w	r5, [r3]
 800934c:	2d00      	cmp	r5, #0
 800934e:	da03      	bge.n	8009358 <_printf_i+0xd0>
 8009350:	232d      	movs	r3, #45	@ 0x2d
 8009352:	426d      	negs	r5, r5
 8009354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009358:	4859      	ldr	r0, [pc, #356]	@ (80094c0 <_printf_i+0x238>)
 800935a:	230a      	movs	r3, #10
 800935c:	e011      	b.n	8009382 <_printf_i+0xfa>
 800935e:	6821      	ldr	r1, [r4, #0]
 8009360:	6833      	ldr	r3, [r6, #0]
 8009362:	0608      	lsls	r0, r1, #24
 8009364:	f853 5b04 	ldr.w	r5, [r3], #4
 8009368:	d402      	bmi.n	8009370 <_printf_i+0xe8>
 800936a:	0649      	lsls	r1, r1, #25
 800936c:	bf48      	it	mi
 800936e:	b2ad      	uxthmi	r5, r5
 8009370:	2f6f      	cmp	r7, #111	@ 0x6f
 8009372:	4853      	ldr	r0, [pc, #332]	@ (80094c0 <_printf_i+0x238>)
 8009374:	6033      	str	r3, [r6, #0]
 8009376:	bf14      	ite	ne
 8009378:	230a      	movne	r3, #10
 800937a:	2308      	moveq	r3, #8
 800937c:	2100      	movs	r1, #0
 800937e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009382:	6866      	ldr	r6, [r4, #4]
 8009384:	60a6      	str	r6, [r4, #8]
 8009386:	2e00      	cmp	r6, #0
 8009388:	bfa2      	ittt	ge
 800938a:	6821      	ldrge	r1, [r4, #0]
 800938c:	f021 0104 	bicge.w	r1, r1, #4
 8009390:	6021      	strge	r1, [r4, #0]
 8009392:	b90d      	cbnz	r5, 8009398 <_printf_i+0x110>
 8009394:	2e00      	cmp	r6, #0
 8009396:	d04b      	beq.n	8009430 <_printf_i+0x1a8>
 8009398:	4616      	mov	r6, r2
 800939a:	fbb5 f1f3 	udiv	r1, r5, r3
 800939e:	fb03 5711 	mls	r7, r3, r1, r5
 80093a2:	5dc7      	ldrb	r7, [r0, r7]
 80093a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093a8:	462f      	mov	r7, r5
 80093aa:	42bb      	cmp	r3, r7
 80093ac:	460d      	mov	r5, r1
 80093ae:	d9f4      	bls.n	800939a <_printf_i+0x112>
 80093b0:	2b08      	cmp	r3, #8
 80093b2:	d10b      	bne.n	80093cc <_printf_i+0x144>
 80093b4:	6823      	ldr	r3, [r4, #0]
 80093b6:	07df      	lsls	r7, r3, #31
 80093b8:	d508      	bpl.n	80093cc <_printf_i+0x144>
 80093ba:	6923      	ldr	r3, [r4, #16]
 80093bc:	6861      	ldr	r1, [r4, #4]
 80093be:	4299      	cmp	r1, r3
 80093c0:	bfde      	ittt	le
 80093c2:	2330      	movle	r3, #48	@ 0x30
 80093c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093cc:	1b92      	subs	r2, r2, r6
 80093ce:	6122      	str	r2, [r4, #16]
 80093d0:	f8cd a000 	str.w	sl, [sp]
 80093d4:	464b      	mov	r3, r9
 80093d6:	aa03      	add	r2, sp, #12
 80093d8:	4621      	mov	r1, r4
 80093da:	4640      	mov	r0, r8
 80093dc:	f7ff fee6 	bl	80091ac <_printf_common>
 80093e0:	3001      	adds	r0, #1
 80093e2:	d14a      	bne.n	800947a <_printf_i+0x1f2>
 80093e4:	f04f 30ff 	mov.w	r0, #4294967295
 80093e8:	b004      	add	sp, #16
 80093ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	f043 0320 	orr.w	r3, r3, #32
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	4833      	ldr	r0, [pc, #204]	@ (80094c4 <_printf_i+0x23c>)
 80093f8:	2778      	movs	r7, #120	@ 0x78
 80093fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093fe:	6823      	ldr	r3, [r4, #0]
 8009400:	6831      	ldr	r1, [r6, #0]
 8009402:	061f      	lsls	r7, r3, #24
 8009404:	f851 5b04 	ldr.w	r5, [r1], #4
 8009408:	d402      	bmi.n	8009410 <_printf_i+0x188>
 800940a:	065f      	lsls	r7, r3, #25
 800940c:	bf48      	it	mi
 800940e:	b2ad      	uxthmi	r5, r5
 8009410:	6031      	str	r1, [r6, #0]
 8009412:	07d9      	lsls	r1, r3, #31
 8009414:	bf44      	itt	mi
 8009416:	f043 0320 	orrmi.w	r3, r3, #32
 800941a:	6023      	strmi	r3, [r4, #0]
 800941c:	b11d      	cbz	r5, 8009426 <_printf_i+0x19e>
 800941e:	2310      	movs	r3, #16
 8009420:	e7ac      	b.n	800937c <_printf_i+0xf4>
 8009422:	4827      	ldr	r0, [pc, #156]	@ (80094c0 <_printf_i+0x238>)
 8009424:	e7e9      	b.n	80093fa <_printf_i+0x172>
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	f023 0320 	bic.w	r3, r3, #32
 800942c:	6023      	str	r3, [r4, #0]
 800942e:	e7f6      	b.n	800941e <_printf_i+0x196>
 8009430:	4616      	mov	r6, r2
 8009432:	e7bd      	b.n	80093b0 <_printf_i+0x128>
 8009434:	6833      	ldr	r3, [r6, #0]
 8009436:	6825      	ldr	r5, [r4, #0]
 8009438:	6961      	ldr	r1, [r4, #20]
 800943a:	1d18      	adds	r0, r3, #4
 800943c:	6030      	str	r0, [r6, #0]
 800943e:	062e      	lsls	r6, r5, #24
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	d501      	bpl.n	8009448 <_printf_i+0x1c0>
 8009444:	6019      	str	r1, [r3, #0]
 8009446:	e002      	b.n	800944e <_printf_i+0x1c6>
 8009448:	0668      	lsls	r0, r5, #25
 800944a:	d5fb      	bpl.n	8009444 <_printf_i+0x1bc>
 800944c:	8019      	strh	r1, [r3, #0]
 800944e:	2300      	movs	r3, #0
 8009450:	6123      	str	r3, [r4, #16]
 8009452:	4616      	mov	r6, r2
 8009454:	e7bc      	b.n	80093d0 <_printf_i+0x148>
 8009456:	6833      	ldr	r3, [r6, #0]
 8009458:	1d1a      	adds	r2, r3, #4
 800945a:	6032      	str	r2, [r6, #0]
 800945c:	681e      	ldr	r6, [r3, #0]
 800945e:	6862      	ldr	r2, [r4, #4]
 8009460:	2100      	movs	r1, #0
 8009462:	4630      	mov	r0, r6
 8009464:	f7f6 febc 	bl	80001e0 <memchr>
 8009468:	b108      	cbz	r0, 800946e <_printf_i+0x1e6>
 800946a:	1b80      	subs	r0, r0, r6
 800946c:	6060      	str	r0, [r4, #4]
 800946e:	6863      	ldr	r3, [r4, #4]
 8009470:	6123      	str	r3, [r4, #16]
 8009472:	2300      	movs	r3, #0
 8009474:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009478:	e7aa      	b.n	80093d0 <_printf_i+0x148>
 800947a:	6923      	ldr	r3, [r4, #16]
 800947c:	4632      	mov	r2, r6
 800947e:	4649      	mov	r1, r9
 8009480:	4640      	mov	r0, r8
 8009482:	47d0      	blx	sl
 8009484:	3001      	adds	r0, #1
 8009486:	d0ad      	beq.n	80093e4 <_printf_i+0x15c>
 8009488:	6823      	ldr	r3, [r4, #0]
 800948a:	079b      	lsls	r3, r3, #30
 800948c:	d413      	bmi.n	80094b6 <_printf_i+0x22e>
 800948e:	68e0      	ldr	r0, [r4, #12]
 8009490:	9b03      	ldr	r3, [sp, #12]
 8009492:	4298      	cmp	r0, r3
 8009494:	bfb8      	it	lt
 8009496:	4618      	movlt	r0, r3
 8009498:	e7a6      	b.n	80093e8 <_printf_i+0x160>
 800949a:	2301      	movs	r3, #1
 800949c:	4632      	mov	r2, r6
 800949e:	4649      	mov	r1, r9
 80094a0:	4640      	mov	r0, r8
 80094a2:	47d0      	blx	sl
 80094a4:	3001      	adds	r0, #1
 80094a6:	d09d      	beq.n	80093e4 <_printf_i+0x15c>
 80094a8:	3501      	adds	r5, #1
 80094aa:	68e3      	ldr	r3, [r4, #12]
 80094ac:	9903      	ldr	r1, [sp, #12]
 80094ae:	1a5b      	subs	r3, r3, r1
 80094b0:	42ab      	cmp	r3, r5
 80094b2:	dcf2      	bgt.n	800949a <_printf_i+0x212>
 80094b4:	e7eb      	b.n	800948e <_printf_i+0x206>
 80094b6:	2500      	movs	r5, #0
 80094b8:	f104 0619 	add.w	r6, r4, #25
 80094bc:	e7f5      	b.n	80094aa <_printf_i+0x222>
 80094be:	bf00      	nop
 80094c0:	080099a5 	.word	0x080099a5
 80094c4:	080099b6 	.word	0x080099b6

080094c8 <__sflush_r>:
 80094c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d0:	0716      	lsls	r6, r2, #28
 80094d2:	4605      	mov	r5, r0
 80094d4:	460c      	mov	r4, r1
 80094d6:	d454      	bmi.n	8009582 <__sflush_r+0xba>
 80094d8:	684b      	ldr	r3, [r1, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	dc02      	bgt.n	80094e4 <__sflush_r+0x1c>
 80094de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	dd48      	ble.n	8009576 <__sflush_r+0xae>
 80094e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094e6:	2e00      	cmp	r6, #0
 80094e8:	d045      	beq.n	8009576 <__sflush_r+0xae>
 80094ea:	2300      	movs	r3, #0
 80094ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80094f0:	682f      	ldr	r7, [r5, #0]
 80094f2:	6a21      	ldr	r1, [r4, #32]
 80094f4:	602b      	str	r3, [r5, #0]
 80094f6:	d030      	beq.n	800955a <__sflush_r+0x92>
 80094f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80094fa:	89a3      	ldrh	r3, [r4, #12]
 80094fc:	0759      	lsls	r1, r3, #29
 80094fe:	d505      	bpl.n	800950c <__sflush_r+0x44>
 8009500:	6863      	ldr	r3, [r4, #4]
 8009502:	1ad2      	subs	r2, r2, r3
 8009504:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009506:	b10b      	cbz	r3, 800950c <__sflush_r+0x44>
 8009508:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800950a:	1ad2      	subs	r2, r2, r3
 800950c:	2300      	movs	r3, #0
 800950e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009510:	6a21      	ldr	r1, [r4, #32]
 8009512:	4628      	mov	r0, r5
 8009514:	47b0      	blx	r6
 8009516:	1c43      	adds	r3, r0, #1
 8009518:	89a3      	ldrh	r3, [r4, #12]
 800951a:	d106      	bne.n	800952a <__sflush_r+0x62>
 800951c:	6829      	ldr	r1, [r5, #0]
 800951e:	291d      	cmp	r1, #29
 8009520:	d82b      	bhi.n	800957a <__sflush_r+0xb2>
 8009522:	4a2a      	ldr	r2, [pc, #168]	@ (80095cc <__sflush_r+0x104>)
 8009524:	410a      	asrs	r2, r1
 8009526:	07d6      	lsls	r6, r2, #31
 8009528:	d427      	bmi.n	800957a <__sflush_r+0xb2>
 800952a:	2200      	movs	r2, #0
 800952c:	6062      	str	r2, [r4, #4]
 800952e:	04d9      	lsls	r1, r3, #19
 8009530:	6922      	ldr	r2, [r4, #16]
 8009532:	6022      	str	r2, [r4, #0]
 8009534:	d504      	bpl.n	8009540 <__sflush_r+0x78>
 8009536:	1c42      	adds	r2, r0, #1
 8009538:	d101      	bne.n	800953e <__sflush_r+0x76>
 800953a:	682b      	ldr	r3, [r5, #0]
 800953c:	b903      	cbnz	r3, 8009540 <__sflush_r+0x78>
 800953e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009542:	602f      	str	r7, [r5, #0]
 8009544:	b1b9      	cbz	r1, 8009576 <__sflush_r+0xae>
 8009546:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800954a:	4299      	cmp	r1, r3
 800954c:	d002      	beq.n	8009554 <__sflush_r+0x8c>
 800954e:	4628      	mov	r0, r5
 8009550:	f7ff fbf2 	bl	8008d38 <_free_r>
 8009554:	2300      	movs	r3, #0
 8009556:	6363      	str	r3, [r4, #52]	@ 0x34
 8009558:	e00d      	b.n	8009576 <__sflush_r+0xae>
 800955a:	2301      	movs	r3, #1
 800955c:	4628      	mov	r0, r5
 800955e:	47b0      	blx	r6
 8009560:	4602      	mov	r2, r0
 8009562:	1c50      	adds	r0, r2, #1
 8009564:	d1c9      	bne.n	80094fa <__sflush_r+0x32>
 8009566:	682b      	ldr	r3, [r5, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d0c6      	beq.n	80094fa <__sflush_r+0x32>
 800956c:	2b1d      	cmp	r3, #29
 800956e:	d001      	beq.n	8009574 <__sflush_r+0xac>
 8009570:	2b16      	cmp	r3, #22
 8009572:	d11e      	bne.n	80095b2 <__sflush_r+0xea>
 8009574:	602f      	str	r7, [r5, #0]
 8009576:	2000      	movs	r0, #0
 8009578:	e022      	b.n	80095c0 <__sflush_r+0xf8>
 800957a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800957e:	b21b      	sxth	r3, r3
 8009580:	e01b      	b.n	80095ba <__sflush_r+0xf2>
 8009582:	690f      	ldr	r7, [r1, #16]
 8009584:	2f00      	cmp	r7, #0
 8009586:	d0f6      	beq.n	8009576 <__sflush_r+0xae>
 8009588:	0793      	lsls	r3, r2, #30
 800958a:	680e      	ldr	r6, [r1, #0]
 800958c:	bf08      	it	eq
 800958e:	694b      	ldreq	r3, [r1, #20]
 8009590:	600f      	str	r7, [r1, #0]
 8009592:	bf18      	it	ne
 8009594:	2300      	movne	r3, #0
 8009596:	eba6 0807 	sub.w	r8, r6, r7
 800959a:	608b      	str	r3, [r1, #8]
 800959c:	f1b8 0f00 	cmp.w	r8, #0
 80095a0:	dde9      	ble.n	8009576 <__sflush_r+0xae>
 80095a2:	6a21      	ldr	r1, [r4, #32]
 80095a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80095a6:	4643      	mov	r3, r8
 80095a8:	463a      	mov	r2, r7
 80095aa:	4628      	mov	r0, r5
 80095ac:	47b0      	blx	r6
 80095ae:	2800      	cmp	r0, #0
 80095b0:	dc08      	bgt.n	80095c4 <__sflush_r+0xfc>
 80095b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095ba:	81a3      	strh	r3, [r4, #12]
 80095bc:	f04f 30ff 	mov.w	r0, #4294967295
 80095c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095c4:	4407      	add	r7, r0
 80095c6:	eba8 0800 	sub.w	r8, r8, r0
 80095ca:	e7e7      	b.n	800959c <__sflush_r+0xd4>
 80095cc:	dfbffffe 	.word	0xdfbffffe

080095d0 <_fflush_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	690b      	ldr	r3, [r1, #16]
 80095d4:	4605      	mov	r5, r0
 80095d6:	460c      	mov	r4, r1
 80095d8:	b913      	cbnz	r3, 80095e0 <_fflush_r+0x10>
 80095da:	2500      	movs	r5, #0
 80095dc:	4628      	mov	r0, r5
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	b118      	cbz	r0, 80095ea <_fflush_r+0x1a>
 80095e2:	6a03      	ldr	r3, [r0, #32]
 80095e4:	b90b      	cbnz	r3, 80095ea <_fflush_r+0x1a>
 80095e6:	f7ff fa3b 	bl	8008a60 <__sinit>
 80095ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0f3      	beq.n	80095da <_fflush_r+0xa>
 80095f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80095f4:	07d0      	lsls	r0, r2, #31
 80095f6:	d404      	bmi.n	8009602 <_fflush_r+0x32>
 80095f8:	0599      	lsls	r1, r3, #22
 80095fa:	d402      	bmi.n	8009602 <_fflush_r+0x32>
 80095fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095fe:	f7ff fb8a 	bl	8008d16 <__retarget_lock_acquire_recursive>
 8009602:	4628      	mov	r0, r5
 8009604:	4621      	mov	r1, r4
 8009606:	f7ff ff5f 	bl	80094c8 <__sflush_r>
 800960a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800960c:	07da      	lsls	r2, r3, #31
 800960e:	4605      	mov	r5, r0
 8009610:	d4e4      	bmi.n	80095dc <_fflush_r+0xc>
 8009612:	89a3      	ldrh	r3, [r4, #12]
 8009614:	059b      	lsls	r3, r3, #22
 8009616:	d4e1      	bmi.n	80095dc <_fflush_r+0xc>
 8009618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800961a:	f7ff fb7d 	bl	8008d18 <__retarget_lock_release_recursive>
 800961e:	e7dd      	b.n	80095dc <_fflush_r+0xc>

08009620 <__swbuf_r>:
 8009620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009622:	460e      	mov	r6, r1
 8009624:	4614      	mov	r4, r2
 8009626:	4605      	mov	r5, r0
 8009628:	b118      	cbz	r0, 8009632 <__swbuf_r+0x12>
 800962a:	6a03      	ldr	r3, [r0, #32]
 800962c:	b90b      	cbnz	r3, 8009632 <__swbuf_r+0x12>
 800962e:	f7ff fa17 	bl	8008a60 <__sinit>
 8009632:	69a3      	ldr	r3, [r4, #24]
 8009634:	60a3      	str	r3, [r4, #8]
 8009636:	89a3      	ldrh	r3, [r4, #12]
 8009638:	071a      	lsls	r2, r3, #28
 800963a:	d501      	bpl.n	8009640 <__swbuf_r+0x20>
 800963c:	6923      	ldr	r3, [r4, #16]
 800963e:	b943      	cbnz	r3, 8009652 <__swbuf_r+0x32>
 8009640:	4621      	mov	r1, r4
 8009642:	4628      	mov	r0, r5
 8009644:	f000 f82a 	bl	800969c <__swsetup_r>
 8009648:	b118      	cbz	r0, 8009652 <__swbuf_r+0x32>
 800964a:	f04f 37ff 	mov.w	r7, #4294967295
 800964e:	4638      	mov	r0, r7
 8009650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009652:	6823      	ldr	r3, [r4, #0]
 8009654:	6922      	ldr	r2, [r4, #16]
 8009656:	1a98      	subs	r0, r3, r2
 8009658:	6963      	ldr	r3, [r4, #20]
 800965a:	b2f6      	uxtb	r6, r6
 800965c:	4283      	cmp	r3, r0
 800965e:	4637      	mov	r7, r6
 8009660:	dc05      	bgt.n	800966e <__swbuf_r+0x4e>
 8009662:	4621      	mov	r1, r4
 8009664:	4628      	mov	r0, r5
 8009666:	f7ff ffb3 	bl	80095d0 <_fflush_r>
 800966a:	2800      	cmp	r0, #0
 800966c:	d1ed      	bne.n	800964a <__swbuf_r+0x2a>
 800966e:	68a3      	ldr	r3, [r4, #8]
 8009670:	3b01      	subs	r3, #1
 8009672:	60a3      	str	r3, [r4, #8]
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	1c5a      	adds	r2, r3, #1
 8009678:	6022      	str	r2, [r4, #0]
 800967a:	701e      	strb	r6, [r3, #0]
 800967c:	6962      	ldr	r2, [r4, #20]
 800967e:	1c43      	adds	r3, r0, #1
 8009680:	429a      	cmp	r2, r3
 8009682:	d004      	beq.n	800968e <__swbuf_r+0x6e>
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	07db      	lsls	r3, r3, #31
 8009688:	d5e1      	bpl.n	800964e <__swbuf_r+0x2e>
 800968a:	2e0a      	cmp	r6, #10
 800968c:	d1df      	bne.n	800964e <__swbuf_r+0x2e>
 800968e:	4621      	mov	r1, r4
 8009690:	4628      	mov	r0, r5
 8009692:	f7ff ff9d 	bl	80095d0 <_fflush_r>
 8009696:	2800      	cmp	r0, #0
 8009698:	d0d9      	beq.n	800964e <__swbuf_r+0x2e>
 800969a:	e7d6      	b.n	800964a <__swbuf_r+0x2a>

0800969c <__swsetup_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4b29      	ldr	r3, [pc, #164]	@ (8009744 <__swsetup_r+0xa8>)
 80096a0:	4605      	mov	r5, r0
 80096a2:	6818      	ldr	r0, [r3, #0]
 80096a4:	460c      	mov	r4, r1
 80096a6:	b118      	cbz	r0, 80096b0 <__swsetup_r+0x14>
 80096a8:	6a03      	ldr	r3, [r0, #32]
 80096aa:	b90b      	cbnz	r3, 80096b0 <__swsetup_r+0x14>
 80096ac:	f7ff f9d8 	bl	8008a60 <__sinit>
 80096b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096b4:	0719      	lsls	r1, r3, #28
 80096b6:	d422      	bmi.n	80096fe <__swsetup_r+0x62>
 80096b8:	06da      	lsls	r2, r3, #27
 80096ba:	d407      	bmi.n	80096cc <__swsetup_r+0x30>
 80096bc:	2209      	movs	r2, #9
 80096be:	602a      	str	r2, [r5, #0]
 80096c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096c4:	81a3      	strh	r3, [r4, #12]
 80096c6:	f04f 30ff 	mov.w	r0, #4294967295
 80096ca:	e033      	b.n	8009734 <__swsetup_r+0x98>
 80096cc:	0758      	lsls	r0, r3, #29
 80096ce:	d512      	bpl.n	80096f6 <__swsetup_r+0x5a>
 80096d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096d2:	b141      	cbz	r1, 80096e6 <__swsetup_r+0x4a>
 80096d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096d8:	4299      	cmp	r1, r3
 80096da:	d002      	beq.n	80096e2 <__swsetup_r+0x46>
 80096dc:	4628      	mov	r0, r5
 80096de:	f7ff fb2b 	bl	8008d38 <_free_r>
 80096e2:	2300      	movs	r3, #0
 80096e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80096ec:	81a3      	strh	r3, [r4, #12]
 80096ee:	2300      	movs	r3, #0
 80096f0:	6063      	str	r3, [r4, #4]
 80096f2:	6923      	ldr	r3, [r4, #16]
 80096f4:	6023      	str	r3, [r4, #0]
 80096f6:	89a3      	ldrh	r3, [r4, #12]
 80096f8:	f043 0308 	orr.w	r3, r3, #8
 80096fc:	81a3      	strh	r3, [r4, #12]
 80096fe:	6923      	ldr	r3, [r4, #16]
 8009700:	b94b      	cbnz	r3, 8009716 <__swsetup_r+0x7a>
 8009702:	89a3      	ldrh	r3, [r4, #12]
 8009704:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800970c:	d003      	beq.n	8009716 <__swsetup_r+0x7a>
 800970e:	4621      	mov	r1, r4
 8009710:	4628      	mov	r0, r5
 8009712:	f000 f84f 	bl	80097b4 <__smakebuf_r>
 8009716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800971a:	f013 0201 	ands.w	r2, r3, #1
 800971e:	d00a      	beq.n	8009736 <__swsetup_r+0x9a>
 8009720:	2200      	movs	r2, #0
 8009722:	60a2      	str	r2, [r4, #8]
 8009724:	6962      	ldr	r2, [r4, #20]
 8009726:	4252      	negs	r2, r2
 8009728:	61a2      	str	r2, [r4, #24]
 800972a:	6922      	ldr	r2, [r4, #16]
 800972c:	b942      	cbnz	r2, 8009740 <__swsetup_r+0xa4>
 800972e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009732:	d1c5      	bne.n	80096c0 <__swsetup_r+0x24>
 8009734:	bd38      	pop	{r3, r4, r5, pc}
 8009736:	0799      	lsls	r1, r3, #30
 8009738:	bf58      	it	pl
 800973a:	6962      	ldrpl	r2, [r4, #20]
 800973c:	60a2      	str	r2, [r4, #8]
 800973e:	e7f4      	b.n	800972a <__swsetup_r+0x8e>
 8009740:	2000      	movs	r0, #0
 8009742:	e7f7      	b.n	8009734 <__swsetup_r+0x98>
 8009744:	2000001c 	.word	0x2000001c

08009748 <_sbrk_r>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	4d06      	ldr	r5, [pc, #24]	@ (8009764 <_sbrk_r+0x1c>)
 800974c:	2300      	movs	r3, #0
 800974e:	4604      	mov	r4, r0
 8009750:	4608      	mov	r0, r1
 8009752:	602b      	str	r3, [r5, #0]
 8009754:	f7f7 fc8e 	bl	8001074 <_sbrk>
 8009758:	1c43      	adds	r3, r0, #1
 800975a:	d102      	bne.n	8009762 <_sbrk_r+0x1a>
 800975c:	682b      	ldr	r3, [r5, #0]
 800975e:	b103      	cbz	r3, 8009762 <_sbrk_r+0x1a>
 8009760:	6023      	str	r3, [r4, #0]
 8009762:	bd38      	pop	{r3, r4, r5, pc}
 8009764:	20004e48 	.word	0x20004e48

08009768 <__swhatbuf_r>:
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	460c      	mov	r4, r1
 800976c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009770:	2900      	cmp	r1, #0
 8009772:	b096      	sub	sp, #88	@ 0x58
 8009774:	4615      	mov	r5, r2
 8009776:	461e      	mov	r6, r3
 8009778:	da0d      	bge.n	8009796 <__swhatbuf_r+0x2e>
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009780:	f04f 0100 	mov.w	r1, #0
 8009784:	bf14      	ite	ne
 8009786:	2340      	movne	r3, #64	@ 0x40
 8009788:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800978c:	2000      	movs	r0, #0
 800978e:	6031      	str	r1, [r6, #0]
 8009790:	602b      	str	r3, [r5, #0]
 8009792:	b016      	add	sp, #88	@ 0x58
 8009794:	bd70      	pop	{r4, r5, r6, pc}
 8009796:	466a      	mov	r2, sp
 8009798:	f000 f848 	bl	800982c <_fstat_r>
 800979c:	2800      	cmp	r0, #0
 800979e:	dbec      	blt.n	800977a <__swhatbuf_r+0x12>
 80097a0:	9901      	ldr	r1, [sp, #4]
 80097a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80097a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80097aa:	4259      	negs	r1, r3
 80097ac:	4159      	adcs	r1, r3
 80097ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097b2:	e7eb      	b.n	800978c <__swhatbuf_r+0x24>

080097b4 <__smakebuf_r>:
 80097b4:	898b      	ldrh	r3, [r1, #12]
 80097b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097b8:	079d      	lsls	r5, r3, #30
 80097ba:	4606      	mov	r6, r0
 80097bc:	460c      	mov	r4, r1
 80097be:	d507      	bpl.n	80097d0 <__smakebuf_r+0x1c>
 80097c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	6123      	str	r3, [r4, #16]
 80097c8:	2301      	movs	r3, #1
 80097ca:	6163      	str	r3, [r4, #20]
 80097cc:	b003      	add	sp, #12
 80097ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097d0:	ab01      	add	r3, sp, #4
 80097d2:	466a      	mov	r2, sp
 80097d4:	f7ff ffc8 	bl	8009768 <__swhatbuf_r>
 80097d8:	9f00      	ldr	r7, [sp, #0]
 80097da:	4605      	mov	r5, r0
 80097dc:	4639      	mov	r1, r7
 80097de:	4630      	mov	r0, r6
 80097e0:	f7ff fb16 	bl	8008e10 <_malloc_r>
 80097e4:	b948      	cbnz	r0, 80097fa <__smakebuf_r+0x46>
 80097e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ea:	059a      	lsls	r2, r3, #22
 80097ec:	d4ee      	bmi.n	80097cc <__smakebuf_r+0x18>
 80097ee:	f023 0303 	bic.w	r3, r3, #3
 80097f2:	f043 0302 	orr.w	r3, r3, #2
 80097f6:	81a3      	strh	r3, [r4, #12]
 80097f8:	e7e2      	b.n	80097c0 <__smakebuf_r+0xc>
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	6020      	str	r0, [r4, #0]
 80097fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009802:	81a3      	strh	r3, [r4, #12]
 8009804:	9b01      	ldr	r3, [sp, #4]
 8009806:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800980a:	b15b      	cbz	r3, 8009824 <__smakebuf_r+0x70>
 800980c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009810:	4630      	mov	r0, r6
 8009812:	f000 f81d 	bl	8009850 <_isatty_r>
 8009816:	b128      	cbz	r0, 8009824 <__smakebuf_r+0x70>
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	f023 0303 	bic.w	r3, r3, #3
 800981e:	f043 0301 	orr.w	r3, r3, #1
 8009822:	81a3      	strh	r3, [r4, #12]
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	431d      	orrs	r5, r3
 8009828:	81a5      	strh	r5, [r4, #12]
 800982a:	e7cf      	b.n	80097cc <__smakebuf_r+0x18>

0800982c <_fstat_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d07      	ldr	r5, [pc, #28]	@ (800984c <_fstat_r+0x20>)
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	4611      	mov	r1, r2
 8009838:	602b      	str	r3, [r5, #0]
 800983a:	f7f7 fbf2 	bl	8001022 <_fstat>
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	d102      	bne.n	8009848 <_fstat_r+0x1c>
 8009842:	682b      	ldr	r3, [r5, #0]
 8009844:	b103      	cbz	r3, 8009848 <_fstat_r+0x1c>
 8009846:	6023      	str	r3, [r4, #0]
 8009848:	bd38      	pop	{r3, r4, r5, pc}
 800984a:	bf00      	nop
 800984c:	20004e48 	.word	0x20004e48

08009850 <_isatty_r>:
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	4d06      	ldr	r5, [pc, #24]	@ (800986c <_isatty_r+0x1c>)
 8009854:	2300      	movs	r3, #0
 8009856:	4604      	mov	r4, r0
 8009858:	4608      	mov	r0, r1
 800985a:	602b      	str	r3, [r5, #0]
 800985c:	f7f7 fbf1 	bl	8001042 <_isatty>
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	d102      	bne.n	800986a <_isatty_r+0x1a>
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	b103      	cbz	r3, 800986a <_isatty_r+0x1a>
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	bd38      	pop	{r3, r4, r5, pc}
 800986c:	20004e48 	.word	0x20004e48

08009870 <_init>:
 8009870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009872:	bf00      	nop
 8009874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009876:	bc08      	pop	{r3}
 8009878:	469e      	mov	lr, r3
 800987a:	4770      	bx	lr

0800987c <_fini>:
 800987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987e:	bf00      	nop
 8009880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009882:	bc08      	pop	{r3}
 8009884:	469e      	mov	lr, r3
 8009886:	4770      	bx	lr
