
selfDriving_RCcar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad48  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800aee8  0800aee8  0000bee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b014  0800b014  0000d070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b014  0800b014  0000c014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b01c  0800b01c  0000d070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b01c  0800b01c  0000c01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b020  0800b020  0000c020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800b024  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000507c  20000070  0800b094  0000d070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050ec  0800b094  0000d0ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb49  00000000  00000000  0000d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040c9  00000000  00000000  00028be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  0002ccb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000117c  00000000  00000000  0002e360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abe2  00000000  00000000  0002f4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b996  00000000  00000000  0004a0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b92c  00000000  00000000  00065a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101380  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066d0  00000000  00000000  001013c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00107a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aed0 	.word	0x0800aed0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800aed0 	.word	0x0800aed0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b96a 	b.w	8000e58 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d14e      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000ba8:	4694      	mov	ip, r2
 8000baa:	458c      	cmp	ip, r1
 8000bac:	4686      	mov	lr, r0
 8000bae:	fab2 f282 	clz	r2, r2
 8000bb2:	d962      	bls.n	8000c7a <__udivmoddi4+0xde>
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0320 	rsb	r3, r2, #32
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	4319      	orrs	r1, r3
 8000bc6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bce:	fa1f f68c 	uxth.w	r6, ip
 8000bd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bd6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bda:	fb07 1114 	mls	r1, r7, r4, r1
 8000bde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be2:	fb04 f106 	mul.w	r1, r4, r6
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bf2:	f080 8112 	bcs.w	8000e1a <__udivmoddi4+0x27e>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 810f 	bls.w	8000e1a <__udivmoddi4+0x27e>
 8000bfc:	3c02      	subs	r4, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	fa1f f38e 	uxth.w	r3, lr
 8000c06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c12:	fb00 f606 	mul.w	r6, r0, r6
 8000c16:	429e      	cmp	r6, r3
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x94>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c22:	f080 80fc 	bcs.w	8000e1e <__udivmoddi4+0x282>
 8000c26:	429e      	cmp	r6, r3
 8000c28:	f240 80f9 	bls.w	8000e1e <__udivmoddi4+0x282>
 8000c2c:	4463      	add	r3, ip
 8000c2e:	3802      	subs	r0, #2
 8000c30:	1b9b      	subs	r3, r3, r6
 8000c32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c36:	2100      	movs	r1, #0
 8000c38:	b11d      	cbz	r5, 8000c42 <__udivmoddi4+0xa6>
 8000c3a:	40d3      	lsrs	r3, r2
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d905      	bls.n	8000c56 <__udivmoddi4+0xba>
 8000c4a:	b10d      	cbz	r5, 8000c50 <__udivmoddi4+0xb4>
 8000c4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c50:	2100      	movs	r1, #0
 8000c52:	4608      	mov	r0, r1
 8000c54:	e7f5      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c56:	fab3 f183 	clz	r1, r3
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d146      	bne.n	8000cec <__udivmoddi4+0x150>
 8000c5e:	42a3      	cmp	r3, r4
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xcc>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f0c0 80f0 	bcc.w	8000e48 <__udivmoddi4+0x2ac>
 8000c68:	1a86      	subs	r6, r0, r2
 8000c6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d0e6      	beq.n	8000c42 <__udivmoddi4+0xa6>
 8000c74:	e9c5 6300 	strd	r6, r3, [r5]
 8000c78:	e7e3      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	f040 8090 	bne.w	8000da0 <__udivmoddi4+0x204>
 8000c80:	eba1 040c 	sub.w	r4, r1, ip
 8000c84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c88:	fa1f f78c 	uxth.w	r7, ip
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb08 4416 	mls	r4, r8, r6, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x11c>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x11a>
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000cb6:	4626      	mov	r6, r4
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	fa1f f38e 	uxth.w	r3, lr
 8000cbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cca:	fb00 f707 	mul.w	r7, r0, r7
 8000cce:	429f      	cmp	r7, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x148>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x146>
 8000cdc:	429f      	cmp	r7, r3
 8000cde:	f200 80b0 	bhi.w	8000e42 <__udivmoddi4+0x2a6>
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	1bdb      	subs	r3, r3, r7
 8000ce6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cea:	e7a5      	b.n	8000c38 <__udivmoddi4+0x9c>
 8000cec:	f1c1 0620 	rsb	r6, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000d00:	ea43 030c 	orr.w	r3, r3, ip
 8000d04:	40f4      	lsrs	r4, r6
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	0c38      	lsrs	r0, r7, #16
 8000d0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d10:	fbb4 fef0 	udiv	lr, r4, r0
 8000d14:	fa1f fc87 	uxth.w	ip, r7
 8000d18:	fb00 441e 	mls	r4, r0, lr, r4
 8000d1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d20:	fb0e f90c 	mul.w	r9, lr, ip
 8000d24:	45a1      	cmp	r9, r4
 8000d26:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2a:	d90a      	bls.n	8000d42 <__udivmoddi4+0x1a6>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d32:	f080 8084 	bcs.w	8000e3e <__udivmoddi4+0x2a2>
 8000d36:	45a1      	cmp	r9, r4
 8000d38:	f240 8081 	bls.w	8000e3e <__udivmoddi4+0x2a2>
 8000d3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	eba4 0409 	sub.w	r4, r4, r9
 8000d46:	fa1f f983 	uxth.w	r9, r3
 8000d4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x1d2>
 8000d5e:	193c      	adds	r4, r7, r4
 8000d60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d64:	d267      	bcs.n	8000e36 <__udivmoddi4+0x29a>
 8000d66:	45a4      	cmp	ip, r4
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d72:	fba0 9302 	umull	r9, r3, r0, r2
 8000d76:	eba4 040c 	sub.w	r4, r4, ip
 8000d7a:	429c      	cmp	r4, r3
 8000d7c:	46ce      	mov	lr, r9
 8000d7e:	469c      	mov	ip, r3
 8000d80:	d351      	bcc.n	8000e26 <__udivmoddi4+0x28a>
 8000d82:	d04e      	beq.n	8000e22 <__udivmoddi4+0x286>
 8000d84:	b155      	cbz	r5, 8000d9c <__udivmoddi4+0x200>
 8000d86:	ebb8 030e 	subs.w	r3, r8, lr
 8000d8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d92:	40cb      	lsrs	r3, r1
 8000d94:	431e      	orrs	r6, r3
 8000d96:	40cc      	lsrs	r4, r1
 8000d98:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e750      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f103 	lsr.w	r1, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa24 f303 	lsr.w	r3, r4, r3
 8000db0:	4094      	lsls	r4, r2
 8000db2:	430c      	orrs	r4, r1
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dbc:	fa1f f78c 	uxth.w	r7, ip
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc8:	0c23      	lsrs	r3, r4, #16
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f107 	mul.w	r1, r0, r7
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x24c>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dde:	d22c      	bcs.n	8000e3a <__udivmoddi4+0x29e>
 8000de0:	4299      	cmp	r1, r3
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df0:	fb08 3311 	mls	r3, r8, r1, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb01 f307 	mul.w	r3, r1, r7
 8000dfc:	42a3      	cmp	r3, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x276>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e08:	d213      	bcs.n	8000e32 <__udivmoddi4+0x296>
 8000e0a:	42a3      	cmp	r3, r4
 8000e0c:	d911      	bls.n	8000e32 <__udivmoddi4+0x296>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	1ae4      	subs	r4, r4, r3
 8000e14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e18:	e739      	b.n	8000c8e <__udivmoddi4+0xf2>
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	e6f0      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e706      	b.n	8000c30 <__udivmoddi4+0x94>
 8000e22:	45c8      	cmp	r8, r9
 8000e24:	d2ae      	bcs.n	8000d84 <__udivmoddi4+0x1e8>
 8000e26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e2e:	3801      	subs	r0, #1
 8000e30:	e7a8      	b.n	8000d84 <__udivmoddi4+0x1e8>
 8000e32:	4631      	mov	r1, r6
 8000e34:	e7ed      	b.n	8000e12 <__udivmoddi4+0x276>
 8000e36:	4603      	mov	r3, r0
 8000e38:	e799      	b.n	8000d6e <__udivmoddi4+0x1d2>
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e7d4      	b.n	8000de8 <__udivmoddi4+0x24c>
 8000e3e:	46d6      	mov	lr, sl
 8000e40:	e77f      	b.n	8000d42 <__udivmoddi4+0x1a6>
 8000e42:	4463      	add	r3, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e74d      	b.n	8000ce4 <__udivmoddi4+0x148>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e70f      	b.n	8000c70 <__udivmoddi4+0xd4>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	e730      	b.n	8000cb8 <__udivmoddi4+0x11c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b2b      	ldr	r3, [pc, #172]	@ (8000f14 <MX_DMA_Init+0xb8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8000f14 <MX_DMA_Init+0xb8>)
 8000e6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b28      	ldr	r3, [pc, #160]	@ (8000f14 <MX_DMA_Init+0xb8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <MX_DMA_Init+0xb8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a23      	ldr	r2, [pc, #140]	@ (8000f14 <MX_DMA_Init+0xb8>)
 8000e88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <MX_DMA_Init+0xb8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2105      	movs	r1, #5
 8000e9e:	200b      	movs	r0, #11
 8000ea0:	f002 f968 	bl	8003174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ea4:	200b      	movs	r0, #11
 8000ea6:	f002 f981 	bl	80031ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2105      	movs	r1, #5
 8000eae:	200d      	movs	r0, #13
 8000eb0:	f002 f960 	bl	8003174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000eb4:	200d      	movs	r0, #13
 8000eb6:	f002 f979 	bl	80031ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2105      	movs	r1, #5
 8000ebe:	200e      	movs	r0, #14
 8000ec0:	f002 f958 	bl	8003174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ec4:	200e      	movs	r0, #14
 8000ec6:	f002 f971 	bl	80031ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2105      	movs	r1, #5
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f002 f950 	bl	8003174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000ed4:	200f      	movs	r0, #15
 8000ed6:	f002 f969 	bl	80031ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2105      	movs	r1, #5
 8000ede:	2010      	movs	r0, #16
 8000ee0:	f002 f948 	bl	8003174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ee4:	2010      	movs	r0, #16
 8000ee6:	f002 f961 	bl	80031ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2105      	movs	r1, #5
 8000eee:	202f      	movs	r0, #47	@ 0x2f
 8000ef0:	f002 f940 	bl	8003174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000ef4:	202f      	movs	r0, #47	@ 0x2f
 8000ef6:	f002 f959 	bl	80031ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2105      	movs	r1, #5
 8000efe:	203a      	movs	r0, #58	@ 0x3a
 8000f00:	f002 f938 	bl	8003174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f04:	203a      	movs	r0, #58	@ 0x3a
 8000f06:	f002 f951 	bl	80031ac <HAL_NVIC_EnableIRQ>

}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800

08000f18 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of auto_drive_task */
  auto_drive_taskHandle = osThreadNew(StartTask_auto_drive, NULL, &auto_drive_task_attributes);
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f50 <MX_FREERTOS_Init+0x38>)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <MX_FREERTOS_Init+0x3c>)
 8000f22:	f006 fadf 	bl	80074e4 <osThreadNew>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a0b      	ldr	r2, [pc, #44]	@ (8000f58 <MX_FREERTOS_Init+0x40>)
 8000f2a:	6013      	str	r3, [r2, #0]

  /* creation of get_echo_time */
  get_echo_timeHandle = osThreadNew(StartTask_get_echo_time, NULL, &get_echo_time_attributes);
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f5c <MX_FREERTOS_Init+0x44>)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	480b      	ldr	r0, [pc, #44]	@ (8000f60 <MX_FREERTOS_Init+0x48>)
 8000f32:	f006 fad7 	bl	80074e4 <osThreadNew>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <MX_FREERTOS_Init+0x4c>)
 8000f3a:	6013      	str	r3, [r2, #0]

  /* creation of print_sensor_va */
  print_sensor_vaHandle = osThreadNew(StartTask_print_sensor_value, NULL, &print_sensor_va_attributes);
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <MX_FREERTOS_Init+0x50>)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	480a      	ldr	r0, [pc, #40]	@ (8000f6c <MX_FREERTOS_Init+0x54>)
 8000f42:	f006 facf 	bl	80074e4 <osThreadNew>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a09      	ldr	r2, [pc, #36]	@ (8000f70 <MX_FREERTOS_Init+0x58>)
 8000f4a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	0800af54 	.word	0x0800af54
 8000f54:	08001031 	.word	0x08001031
 8000f58:	2000008c 	.word	0x2000008c
 8000f5c:	0800af78 	.word	0x0800af78
 8000f60:	08001599 	.word	0x08001599
 8000f64:	20000090 	.word	0x20000090
 8000f68:	0800af9c 	.word	0x0800af9c
 8000f6c:	0800174d 	.word	0x0800174d
 8000f70:	20000094 	.word	0x20000094

08000f74 <pid_process>:

#define STRAIGHT_DIR_THRESHOLD 1000.0
float integral;

float pid_process (float current_value, float target_value, float kp, float ki, float kd, float dt, float* integral_ptr, float* prev_value_ptr)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b08d      	sub	sp, #52	@ 0x34
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	ed87 0a07 	vstr	s0, [r7, #28]
 8000f7e:	edc7 0a06 	vstr	s1, [r7, #24]
 8000f82:	ed87 1a05 	vstr	s2, [r7, #20]
 8000f86:	edc7 1a04 	vstr	s3, [r7, #16]
 8000f8a:	ed87 2a03 	vstr	s4, [r7, #12]
 8000f8e:	edc7 2a02 	vstr	s5, [r7, #8]
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	float error = target_value - current_value;
 8000f96:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float p_term = kp * error;
 8000fa6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000faa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	*integral_ptr += error * dt;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	ed93 7a00 	vldr	s14, [r3]
 8000fbc:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000fc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	edc3 7a00 	vstr	s15, [r3]
	float i_term = ki * *integral_ptr;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	edd3 7a00 	vldr	s15, [r3]
 8000fd8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float d_term = kd * (current_value - *prev_value_ptr) / dt;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	edd3 7a00 	vldr	s15, [r3]
 8000fea:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ff2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ff6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000ffa:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001002:	edc7 7a08 	vstr	s15, [r7, #32]
	*prev_value_ptr = current_value;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	601a      	str	r2, [r3, #0]

	return p_term + i_term - d_term;
 800100c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001010:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001018:	edd7 7a08 	vldr	s15, [r7, #32]
 800101c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001020:	eeb0 0a67 	vmov.f32	s0, s15
 8001024:	3734      	adds	r7, #52	@ 0x34
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <StartTask_auto_drive>:
float center_integral = 0, center_prev_value = 0;
float curve_integral_left = 0, curve_prev_value_left = 0;
float curve_integral_right = 0, curve_prev_value_right = 0;
/* USER CODE END Header_StartTask_auto_drive */
void StartTask_auto_drive(void *argument)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08e      	sub	sp, #56	@ 0x38
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_auto_drive */
	deadlock_threshold = STRAIGHT_SENSOR_VALUE_THRESHOLD;
 8001038:	4bb2      	ldr	r3, [pc, #712]	@ (8001304 <StartTask_auto_drive+0x2d4>)
 800103a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800103e:	601a      	str	r2, [r3, #0]
	osDelay(1000);
 8001040:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001044:	f006 fae0 	bl	8007608 <osDelay>
	/* Infinite loop */
	for(;;)
	{
	// deadlock escape mode if cornered
	if ((echo_left_time_us < deadlock_threshold) && (echo_center_time_us < deadlock_threshold) && (echo_right_time_us < deadlock_threshold))
 8001048:	4baf      	ldr	r3, [pc, #700]	@ (8001308 <StartTask_auto_drive+0x2d8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4bad      	ldr	r3, [pc, #692]	@ (8001304 <StartTask_auto_drive+0x2d4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d219      	bcs.n	800108a <StartTask_auto_drive+0x5a>
 8001056:	4bad      	ldr	r3, [pc, #692]	@ (800130c <StartTask_auto_drive+0x2dc>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	4ba9      	ldr	r3, [pc, #676]	@ (8001304 <StartTask_auto_drive+0x2d4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d212      	bcs.n	800108a <StartTask_auto_drive+0x5a>
 8001064:	4baa      	ldr	r3, [pc, #680]	@ (8001310 <StartTask_auto_drive+0x2e0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4ba6      	ldr	r3, [pc, #664]	@ (8001304 <StartTask_auto_drive+0x2d4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d20b      	bcs.n	800108a <StartTask_auto_drive+0x5a>
	{
		if (!mode_deadlock_normal)
 8001072:	4ba8      	ldr	r3, [pc, #672]	@ (8001314 <StartTask_auto_drive+0x2e4>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d124      	bne.n	80010c4 <StartTask_auto_drive+0x94>
		{
			mode_deadlock_normal = 1;
 800107a:	4ba6      	ldr	r3, [pc, #664]	@ (8001314 <StartTask_auto_drive+0x2e4>)
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
			deadlock_threshold = STRAIGHT_SENSOR_VALUE_THRESHOLD + 500;
 8001080:	4ba0      	ldr	r3, [pc, #640]	@ (8001304 <StartTask_auto_drive+0x2d4>)
 8001082:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001086:	601a      	str	r2, [r3, #0]
		if (!mode_deadlock_normal)
 8001088:	e01c      	b.n	80010c4 <StartTask_auto_drive+0x94>
		}
	}
	// reject sensor value if it is touching wall
	else if (echo_left_time_us < 5000 && echo_center_time_us < 5000 && echo_right_time_us < 5000)
 800108a:	4b9f      	ldr	r3, [pc, #636]	@ (8001308 <StartTask_auto_drive+0x2d8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001092:	4293      	cmp	r3, r2
 8001094:	dc16      	bgt.n	80010c4 <StartTask_auto_drive+0x94>
 8001096:	4b9d      	ldr	r3, [pc, #628]	@ (800130c <StartTask_auto_drive+0x2dc>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800109e:	4293      	cmp	r3, r2
 80010a0:	dc10      	bgt.n	80010c4 <StartTask_auto_drive+0x94>
 80010a2:	4b9b      	ldr	r3, [pc, #620]	@ (8001310 <StartTask_auto_drive+0x2e0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80010aa:	4293      	cmp	r3, r2
 80010ac:	dc0a      	bgt.n	80010c4 <StartTask_auto_drive+0x94>
	{
		if (mode_deadlock_normal)
 80010ae:	4b99      	ldr	r3, [pc, #612]	@ (8001314 <StartTask_auto_drive+0x2e4>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <StartTask_auto_drive+0x94>
		{
			mode_deadlock_normal = 0;
 80010b6:	4b97      	ldr	r3, [pc, #604]	@ (8001314 <StartTask_auto_drive+0x2e4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
			deadlock_threshold = STRAIGHT_SENSOR_VALUE_THRESHOLD;
 80010bc:	4b91      	ldr	r3, [pc, #580]	@ (8001304 <StartTask_auto_drive+0x2d4>)
 80010be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010c2:	601a      	str	r2, [r3, #0]
	}

	float left_motor_straight, left_motor_curve, right_motor_straight, right_motor_curve;

	// Straight speed calculate
	left_motor_straight = pid_process (echo_center_time_us, STRAIGHT_SENSOR_VALUE_THRESHOLD, -1, -0, -0.000001, SAMPLE_TIME_S, &center_integral, &center_prev_value);
 80010c4:	4b91      	ldr	r3, [pc, #580]	@ (800130c <StartTask_auto_drive+0x2dc>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d0:	4991      	ldr	r1, [pc, #580]	@ (8001318 <StartTask_auto_drive+0x2e8>)
 80010d2:	4892      	ldr	r0, [pc, #584]	@ (800131c <StartTask_auto_drive+0x2ec>)
 80010d4:	eddf 2a92 	vldr	s5, [pc, #584]	@ 8001320 <StartTask_auto_drive+0x2f0>
 80010d8:	ed9f 2a92 	vldr	s4, [pc, #584]	@ 8001324 <StartTask_auto_drive+0x2f4>
 80010dc:	eddf 1a92 	vldr	s3, [pc, #584]	@ 8001328 <StartTask_auto_drive+0x2f8>
 80010e0:	eebf 1a00 	vmov.f32	s2, #240	@ 0xbf800000 -1.0
 80010e4:	eddf 0a91 	vldr	s1, [pc, #580]	@ 800132c <StartTask_auto_drive+0x2fc>
 80010e8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ec:	f7ff ff42 	bl	8000f74 <pid_process>
 80010f0:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	right_motor_straight = left_motor_straight;
 80010f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// adjust sensor value to percentage
	left_motor_straight = left_motor_straight / STRAIGHT_SENSOR_VALUE_AT_MAX_SPEED * 100;
 80010f8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80010fc:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8001330 <StartTask_auto_drive+0x300>
 8001100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001104:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8001334 <StartTask_auto_drive+0x304>
 8001108:	ee67 7a87 	vmul.f32	s15, s15, s14
 800110c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	right_motor_straight = right_motor_straight / STRAIGHT_SENSOR_VALUE_AT_MAX_SPEED * 100;
 8001110:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001114:	eddf 6a86 	vldr	s13, [pc, #536]	@ 8001330 <StartTask_auto_drive+0x300>
 8001118:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111c:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8001334 <StartTask_auto_drive+0x304>
 8001120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001124:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
//	else if (left_motor_straight < -100) left_motor_straight = -100;
//	if (right_motor_straight > 100) right_motor_straight = 100;
//	else if (right_motor_straight < -100) right_motor_straight = -100;

	// Curve speed calculate (if deadlocked, force curve value to hard curve)
	float curve_current_value = echo_left_time_us - echo_right_time_us;
 8001128:	4b77      	ldr	r3, [pc, #476]	@ (8001308 <StartTask_auto_drive+0x2d8>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b78      	ldr	r3, [pc, #480]	@ (8001310 <StartTask_auto_drive+0x2e0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113a:	edc7 7a05 	vstr	s15, [r7, #20]
	if (mode_deadlock_normal)
 800113e:	4b75      	ldr	r3, [pc, #468]	@ (8001314 <StartTask_auto_drive+0x2e4>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d011      	beq.n	800116a <StartTask_auto_drive+0x13a>
	{
		left_motor_straight = -100;
 8001146:	4b7c      	ldr	r3, [pc, #496]	@ (8001338 <StartTask_auto_drive+0x308>)
 8001148:	637b      	str	r3, [r7, #52]	@ 0x34
		right_motor_straight = -100;
 800114a:	4b7b      	ldr	r3, [pc, #492]	@ (8001338 <StartTask_auto_drive+0x308>)
 800114c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (arbitrary_turn_right_left)
 800114e:	4b7b      	ldr	r3, [pc, #492]	@ (800133c <StartTask_auto_drive+0x30c>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <StartTask_auto_drive+0x130>
		{
			left_motor_curve = 100;
 8001156:	4b7a      	ldr	r3, [pc, #488]	@ (8001340 <StartTask_auto_drive+0x310>)
 8001158:	633b      	str	r3, [r7, #48]	@ 0x30
			right_motor_curve = -100;
 800115a:	4b77      	ldr	r3, [pc, #476]	@ (8001338 <StartTask_auto_drive+0x308>)
 800115c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800115e:	e040      	b.n	80011e2 <StartTask_auto_drive+0x1b2>

		}
		else
		{
			left_motor_curve = -100;
 8001160:	4b75      	ldr	r3, [pc, #468]	@ (8001338 <StartTask_auto_drive+0x308>)
 8001162:	633b      	str	r3, [r7, #48]	@ 0x30
			right_motor_curve = 100;
 8001164:	4b76      	ldr	r3, [pc, #472]	@ (8001340 <StartTask_auto_drive+0x310>)
 8001166:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001168:	e03b      	b.n	80011e2 <StartTask_auto_drive+0x1b2>
		}
	}
	else
	{
		left_motor_curve = pid_process (curve_current_value, 0, 0.59, 0, 0.0000001, SAMPLE_TIME_S, &curve_integral_left, &curve_prev_value_left);
 800116a:	4976      	ldr	r1, [pc, #472]	@ (8001344 <StartTask_auto_drive+0x314>)
 800116c:	4876      	ldr	r0, [pc, #472]	@ (8001348 <StartTask_auto_drive+0x318>)
 800116e:	eddf 2a6c 	vldr	s5, [pc, #432]	@ 8001320 <StartTask_auto_drive+0x2f0>
 8001172:	ed9f 2a76 	vldr	s4, [pc, #472]	@ 800134c <StartTask_auto_drive+0x31c>
 8001176:	eddf 1a6c 	vldr	s3, [pc, #432]	@ 8001328 <StartTask_auto_drive+0x2f8>
 800117a:	ed9f 1a75 	vldr	s2, [pc, #468]	@ 8001350 <StartTask_auto_drive+0x320>
 800117e:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 8001328 <StartTask_auto_drive+0x2f8>
 8001182:	ed97 0a05 	vldr	s0, [r7, #20]
 8001186:	f7ff fef5 	bl	8000f74 <pid_process>
 800118a:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
		right_motor_curve = pid_process (curve_current_value, 0, -0.59, -0, -0.0000001, SAMPLE_TIME_S, &curve_integral_right, &curve_prev_value_right);
 800118e:	4971      	ldr	r1, [pc, #452]	@ (8001354 <StartTask_auto_drive+0x324>)
 8001190:	4871      	ldr	r0, [pc, #452]	@ (8001358 <StartTask_auto_drive+0x328>)
 8001192:	eddf 2a63 	vldr	s5, [pc, #396]	@ 8001320 <StartTask_auto_drive+0x2f0>
 8001196:	ed9f 2a71 	vldr	s4, [pc, #452]	@ 800135c <StartTask_auto_drive+0x32c>
 800119a:	eddf 1a63 	vldr	s3, [pc, #396]	@ 8001328 <StartTask_auto_drive+0x2f8>
 800119e:	ed9f 1a70 	vldr	s2, [pc, #448]	@ 8001360 <StartTask_auto_drive+0x330>
 80011a2:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8001328 <StartTask_auto_drive+0x2f8>
 80011a6:	ed97 0a05 	vldr	s0, [r7, #20]
 80011aa:	f7ff fee3 	bl	8000f74 <pid_process>
 80011ae:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

		// adjust sensor value to percentage
		left_motor_curve = left_motor_curve / CURVE_SENSOR_VALUE_AT_MAX_SPEED * 100;
 80011b2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80011b6:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001364 <StartTask_auto_drive+0x334>
 80011ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011be:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8001334 <StartTask_auto_drive+0x304>
 80011c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		right_motor_curve = right_motor_curve / CURVE_SENSOR_VALUE_AT_MAX_SPEED * 100;
 80011ca:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80011ce:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8001364 <StartTask_auto_drive+0x334>
 80011d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d6:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8001334 <StartTask_auto_drive+0x304>
 80011da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011de:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
//		else if (right_motor_curve < -100) right_motor_curve = -100;
	}

	// straight percentage calculate
	float left_motor_straight_percent, right_motor_straight_percent;
	if (left_motor_straight >= 0) left_motor_straight_percent = left_motor_straight;
 80011e2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	db02      	blt.n	80011f6 <StartTask_auto_drive+0x1c6>
 80011f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f4:	e005      	b.n	8001202 <StartTask_auto_drive+0x1d2>
	else left_motor_straight_percent = -1 * left_motor_straight;
 80011f6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011fa:	eef1 7a67 	vneg.f32	s15, s15
 80011fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	if (right_motor_straight >= 0) right_motor_straight_percent = right_motor_straight;
 8001202:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001206:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120e:	db02      	blt.n	8001216 <StartTask_auto_drive+0x1e6>
 8001210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001212:	623b      	str	r3, [r7, #32]
 8001214:	e005      	b.n	8001222 <StartTask_auto_drive+0x1f2>
	else right_motor_straight_percent = -1 * right_motor_straight;
 8001216:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800121a:	eef1 7a67 	vneg.f32	s15, s15
 800121e:	edc7 7a08 	vstr	s15, [r7, #32]

	// curve percentage calculate
	float left_curve_percentage, right_curve_percentage;
	if (left_motor_curve > 0) left_curve_percentage = left_motor_curve;
 8001222:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001226:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122e:	dd02      	ble.n	8001236 <StartTask_auto_drive+0x206>
 8001230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	e005      	b.n	8001242 <StartTask_auto_drive+0x212>
	else left_curve_percentage = -1 * left_motor_curve;
 8001236:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800123a:	eef1 7a67 	vneg.f32	s15, s15
 800123e:	edc7 7a07 	vstr	s15, [r7, #28]
	if (right_motor_curve > 0) right_curve_percentage = right_motor_curve;
 8001242:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	dd02      	ble.n	8001256 <StartTask_auto_drive+0x226>
 8001250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	e005      	b.n	8001262 <StartTask_auto_drive+0x232>
	else right_curve_percentage = -1 * right_motor_curve;
 8001256:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800125a:	eef1 7a67 	vneg.f32	s15, s15
 800125e:	edc7 7a06 	vstr	s15, [r7, #24]

	// straight and curve percentage combine. The more value, the more weight
	float left_straight_curve_sum = left_motor_straight_percent + left_curve_percentage;
 8001262:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001266:	edd7 7a07 	vldr	s15, [r7, #28]
 800126a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126e:	edc7 7a04 	vstr	s15, [r7, #16]
	float right_straight_curve_sum = right_motor_straight_percent + right_curve_percentage;
 8001272:	ed97 7a08 	vldr	s14, [r7, #32]
 8001276:	edd7 7a06 	vldr	s15, [r7, #24]
 800127a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127e:	edc7 7a03 	vstr	s15, [r7, #12]
	left_motor_duty_float = left_motor_straight_percent / left_straight_curve_sum * left_motor_straight + left_curve_percentage / left_straight_curve_sum * left_motor_curve;
 8001282:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001286:	edd7 7a04 	vldr	s15, [r7, #16]
 800128a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800128e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001296:	ed97 6a07 	vldr	s12, [r7, #28]
 800129a:	edd7 7a04 	vldr	s15, [r7, #16]
 800129e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80012a2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80012a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001368 <StartTask_auto_drive+0x338>)
 80012b0:	edc3 7a00 	vstr	s15, [r3]
	right_motor_duty_float = right_motor_straight_percent / right_straight_curve_sum * right_motor_straight + right_curve_percentage / right_straight_curve_sum * right_motor_curve;
 80012b4:	edd7 6a08 	vldr	s13, [r7, #32]
 80012b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80012bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012c0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80012c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c8:	ed97 6a06 	vldr	s12, [r7, #24]
 80012cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80012d4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80012d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e0:	4b22      	ldr	r3, [pc, #136]	@ (800136c <StartTask_auto_drive+0x33c>)
 80012e2:	edc3 7a00 	vstr	s15, [r3]

	// truncate above maximum value
	if (left_motor_duty_float > 100) left_motor_duty_float = 100;
 80012e6:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <StartTask_auto_drive+0x338>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001334 <StartTask_auto_drive+0x304>
 80012f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f8:	dd3a      	ble.n	8001370 <StartTask_auto_drive+0x340>
 80012fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001368 <StartTask_auto_drive+0x338>)
 80012fc:	4a10      	ldr	r2, [pc, #64]	@ (8001340 <StartTask_auto_drive+0x310>)
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	e043      	b.n	800138a <StartTask_auto_drive+0x35a>
 8001302:	bf00      	nop
 8001304:	20000000 	.word	0x20000000
 8001308:	200000b4 	.word	0x200000b4
 800130c:	200000b8 	.word	0x200000b8
 8001310:	200000bc 	.word	0x200000bc
 8001314:	200000c1 	.word	0x200000c1
 8001318:	2000009c 	.word	0x2000009c
 800131c:	20000098 	.word	0x20000098
 8001320:	3c23d70a 	.word	0x3c23d70a
 8001324:	b58637bd 	.word	0xb58637bd
 8001328:	00000000 	.word	0x00000000
 800132c:	43960000 	.word	0x43960000
 8001330:	44fa0000 	.word	0x44fa0000
 8001334:	42c80000 	.word	0x42c80000
 8001338:	c2c80000 	.word	0xc2c80000
 800133c:	20000114 	.word	0x20000114
 8001340:	42c80000 	.word	0x42c80000
 8001344:	200000a4 	.word	0x200000a4
 8001348:	200000a0 	.word	0x200000a0
 800134c:	33d6bf95 	.word	0x33d6bf95
 8001350:	3f170a3d 	.word	0x3f170a3d
 8001354:	200000ac 	.word	0x200000ac
 8001358:	200000a8 	.word	0x200000a8
 800135c:	b3d6bf95 	.word	0xb3d6bf95
 8001360:	bf170a3d 	.word	0xbf170a3d
 8001364:	453b8000 	.word	0x453b8000
 8001368:	20000104 	.word	0x20000104
 800136c:	20000108 	.word	0x20000108
	else if (left_motor_duty_float < -100) left_motor_duty_float = -100;
 8001370:	4b7d      	ldr	r3, [pc, #500]	@ (8001568 <StartTask_auto_drive+0x538>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 800156c <StartTask_auto_drive+0x53c>
 800137a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	d502      	bpl.n	800138a <StartTask_auto_drive+0x35a>
 8001384:	4b78      	ldr	r3, [pc, #480]	@ (8001568 <StartTask_auto_drive+0x538>)
 8001386:	4a7a      	ldr	r2, [pc, #488]	@ (8001570 <StartTask_auto_drive+0x540>)
 8001388:	601a      	str	r2, [r3, #0]
	if (right_motor_duty_float > 100) right_motor_duty_float = 100;
 800138a:	4b7a      	ldr	r3, [pc, #488]	@ (8001574 <StartTask_auto_drive+0x544>)
 800138c:	edd3 7a00 	vldr	s15, [r3]
 8001390:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8001578 <StartTask_auto_drive+0x548>
 8001394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139c:	dd03      	ble.n	80013a6 <StartTask_auto_drive+0x376>
 800139e:	4b75      	ldr	r3, [pc, #468]	@ (8001574 <StartTask_auto_drive+0x544>)
 80013a0:	4a76      	ldr	r2, [pc, #472]	@ (800157c <StartTask_auto_drive+0x54c>)
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	e00c      	b.n	80013c0 <StartTask_auto_drive+0x390>
	else if (right_motor_duty_float < -100) right_motor_duty_float = -100;
 80013a6:	4b73      	ldr	r3, [pc, #460]	@ (8001574 <StartTask_auto_drive+0x544>)
 80013a8:	edd3 7a00 	vldr	s15, [r3]
 80013ac:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 800156c <StartTask_auto_drive+0x53c>
 80013b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b8:	d502      	bpl.n	80013c0 <StartTask_auto_drive+0x390>
 80013ba:	4b6e      	ldr	r3, [pc, #440]	@ (8001574 <StartTask_auto_drive+0x544>)
 80013bc:	4a6c      	ldr	r2, [pc, #432]	@ (8001570 <StartTask_auto_drive+0x540>)
 80013be:	601a      	str	r2, [r3, #0]

	// motor value normalize (0~100 to MIN_VAL~100)
	if (left_motor_duty_float < 0.02 &&  left_motor_duty_float > -0.02) left_motor_duty_float = 0;
 80013c0:	4b69      	ldr	r3, [pc, #420]	@ (8001568 <StartTask_auto_drive+0x538>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f8bf 	bl	8000548 <__aeabi_f2d>
 80013ca:	a363      	add	r3, pc, #396	@ (adr r3, 8001558 <StartTask_auto_drive+0x528>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7ff fb84 	bl	8000adc <__aeabi_dcmplt>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d011      	beq.n	80013fe <StartTask_auto_drive+0x3ce>
 80013da:	4b63      	ldr	r3, [pc, #396]	@ (8001568 <StartTask_auto_drive+0x538>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8b2 	bl	8000548 <__aeabi_f2d>
 80013e4:	a35e      	add	r3, pc, #376	@ (adr r3, 8001560 <StartTask_auto_drive+0x530>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	f7ff fb95 	bl	8000b18 <__aeabi_dcmpgt>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <StartTask_auto_drive+0x3ce>
 80013f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001568 <StartTask_auto_drive+0x538>)
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e034      	b.n	8001468 <StartTask_auto_drive+0x438>
	else if (left_motor_duty_float > 0) left_motor_duty_float = left_motor_duty_float / 100 * (97 - 40) + 40;
 80013fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001568 <StartTask_auto_drive+0x538>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140c:	dd12      	ble.n	8001434 <StartTask_auto_drive+0x404>
 800140e:	4b56      	ldr	r3, [pc, #344]	@ (8001568 <StartTask_auto_drive+0x538>)
 8001410:	ed93 7a00 	vldr	s14, [r3]
 8001414:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001578 <StartTask_auto_drive+0x548>
 8001418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800141c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001580 <StartTask_auto_drive+0x550>
 8001420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001424:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8001584 <StartTask_auto_drive+0x554>
 8001428:	ee77 7a87 	vadd.f32	s15, s15, s14
 800142c:	4b4e      	ldr	r3, [pc, #312]	@ (8001568 <StartTask_auto_drive+0x538>)
 800142e:	edc3 7a00 	vstr	s15, [r3]
 8001432:	e019      	b.n	8001468 <StartTask_auto_drive+0x438>
	else if (left_motor_duty_float < 0) left_motor_duty_float = left_motor_duty_float / 100 * (97 - 40) - 40;
 8001434:	4b4c      	ldr	r3, [pc, #304]	@ (8001568 <StartTask_auto_drive+0x538>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800143e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001442:	d511      	bpl.n	8001468 <StartTask_auto_drive+0x438>
 8001444:	4b48      	ldr	r3, [pc, #288]	@ (8001568 <StartTask_auto_drive+0x538>)
 8001446:	ed93 7a00 	vldr	s14, [r3]
 800144a:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8001578 <StartTask_auto_drive+0x548>
 800144e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001452:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001580 <StartTask_auto_drive+0x550>
 8001456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001584 <StartTask_auto_drive+0x554>
 800145e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001462:	4b41      	ldr	r3, [pc, #260]	@ (8001568 <StartTask_auto_drive+0x538>)
 8001464:	edc3 7a00 	vstr	s15, [r3]
	if (right_motor_duty_float < 0.02 &&  right_motor_duty_float > -0.02) right_motor_duty_float = 0;
 8001468:	4b42      	ldr	r3, [pc, #264]	@ (8001574 <StartTask_auto_drive+0x544>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f86b 	bl	8000548 <__aeabi_f2d>
 8001472:	a339      	add	r3, pc, #228	@ (adr r3, 8001558 <StartTask_auto_drive+0x528>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff fb30 	bl	8000adc <__aeabi_dcmplt>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d011      	beq.n	80014a6 <StartTask_auto_drive+0x476>
 8001482:	4b3c      	ldr	r3, [pc, #240]	@ (8001574 <StartTask_auto_drive+0x544>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f85e 	bl	8000548 <__aeabi_f2d>
 800148c:	a334      	add	r3, pc, #208	@ (adr r3, 8001560 <StartTask_auto_drive+0x530>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff fb41 	bl	8000b18 <__aeabi_dcmpgt>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d004      	beq.n	80014a6 <StartTask_auto_drive+0x476>
 800149c:	4b35      	ldr	r3, [pc, #212]	@ (8001574 <StartTask_auto_drive+0x544>)
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	e034      	b.n	8001510 <StartTask_auto_drive+0x4e0>
	else if (right_motor_duty_float > 0) right_motor_duty_float = right_motor_duty_float / 100 * (100 - 43) + 43;
 80014a6:	4b33      	ldr	r3, [pc, #204]	@ (8001574 <StartTask_auto_drive+0x544>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	dd12      	ble.n	80014dc <StartTask_auto_drive+0x4ac>
 80014b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001574 <StartTask_auto_drive+0x544>)
 80014b8:	ed93 7a00 	vldr	s14, [r3]
 80014bc:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8001578 <StartTask_auto_drive+0x548>
 80014c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c4:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001580 <StartTask_auto_drive+0x550>
 80014c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014cc:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001588 <StartTask_auto_drive+0x558>
 80014d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014d4:	4b27      	ldr	r3, [pc, #156]	@ (8001574 <StartTask_auto_drive+0x544>)
 80014d6:	edc3 7a00 	vstr	s15, [r3]
 80014da:	e019      	b.n	8001510 <StartTask_auto_drive+0x4e0>
	else if (right_motor_duty_float < 0) right_motor_duty_float = right_motor_duty_float / 100 * (100 - 43) - 43;
 80014dc:	4b25      	ldr	r3, [pc, #148]	@ (8001574 <StartTask_auto_drive+0x544>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	d511      	bpl.n	8001510 <StartTask_auto_drive+0x4e0>
 80014ec:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <StartTask_auto_drive+0x544>)
 80014ee:	ed93 7a00 	vldr	s14, [r3]
 80014f2:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001578 <StartTask_auto_drive+0x548>
 80014f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014fa:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001580 <StartTask_auto_drive+0x550>
 80014fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001502:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001588 <StartTask_auto_drive+0x558>
 8001506:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800150a:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <StartTask_auto_drive+0x544>)
 800150c:	edc3 7a00 	vstr	s15, [r3]

	// convert to integer value
	left_motor_duty_int = (int) left_motor_duty_float;
 8001510:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <StartTask_auto_drive+0x538>)
 8001512:	edd3 7a00 	vldr	s15, [r3]
 8001516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151a:	ee17 2a90 	vmov	r2, s15
 800151e:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <StartTask_auto_drive+0x55c>)
 8001520:	601a      	str	r2, [r3, #0]
	right_motor_duty_int = (int) right_motor_duty_float;
 8001522:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <StartTask_auto_drive+0x544>)
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800152c:	ee17 2a90 	vmov	r2, s15
 8001530:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <StartTask_auto_drive+0x560>)
 8001532:	601a      	str	r2, [r3, #0]

	if (mode_auto_manu) RCcar_set_motor_speed(left_motor_duty_int, right_motor_duty_int);
 8001534:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <StartTask_auto_drive+0x564>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d009      	beq.n	8001550 <StartTask_auto_drive+0x520>
 800153c:	4b13      	ldr	r3, [pc, #76]	@ (800158c <StartTask_auto_drive+0x55c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	b25b      	sxtb	r3, r3
 8001542:	4a13      	ldr	r2, [pc, #76]	@ (8001590 <StartTask_auto_drive+0x560>)
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	b252      	sxtb	r2, r2
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fb22 	bl	8001b94 <RCcar_set_motor_speed>

	osDelay(SAMPLE_TIME_S * 1000);
 8001550:	200a      	movs	r0, #10
 8001552:	f006 f859 	bl	8007608 <osDelay>
	{
 8001556:	e577      	b.n	8001048 <StartTask_auto_drive+0x18>
 8001558:	47ae147b 	.word	0x47ae147b
 800155c:	3f947ae1 	.word	0x3f947ae1
 8001560:	47ae147b 	.word	0x47ae147b
 8001564:	bf947ae1 	.word	0xbf947ae1
 8001568:	20000104 	.word	0x20000104
 800156c:	c2c80000 	.word	0xc2c80000
 8001570:	c2c80000 	.word	0xc2c80000
 8001574:	20000108 	.word	0x20000108
 8001578:	42c80000 	.word	0x42c80000
 800157c:	42c80000 	.word	0x42c80000
 8001580:	42640000 	.word	0x42640000
 8001584:	42200000 	.word	0x42200000
 8001588:	422c0000 	.word	0x422c0000
 800158c:	2000010c 	.word	0x2000010c
 8001590:	20000110 	.word	0x20000110
 8001594:	200000c0 	.word	0x200000c0

08001598 <StartTask_get_echo_time>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_get_echo_time */
void StartTask_get_echo_time(void *argument)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_get_echo_time */
  osDelay(100);
 80015a0:	2064      	movs	r0, #100	@ 0x64
 80015a2:	f006 f831 	bl	8007608 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	int echo_left_time_us_temp, echo_center_time_us_temp, echo_right_time_us_temp;

	if (echo_left_fall_time > echo_left_rise_time) echo_left_time_us_temp = echo_left_fall_time - echo_left_rise_time;
 80015a6:	4b59      	ldr	r3, [pc, #356]	@ (800170c <StartTask_get_echo_time+0x174>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4b59      	ldr	r3, [pc, #356]	@ (8001710 <StartTask_get_echo_time+0x178>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d905      	bls.n	80015be <StartTask_get_echo_time+0x26>
 80015b2:	4b56      	ldr	r3, [pc, #344]	@ (800170c <StartTask_get_echo_time+0x174>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b56      	ldr	r3, [pc, #344]	@ (8001710 <StartTask_get_echo_time+0x178>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
	if (echo_center_fall_time > echo_center_rise_time) echo_center_time_us_temp = echo_center_fall_time - echo_center_rise_time;
 80015be:	4b55      	ldr	r3, [pc, #340]	@ (8001714 <StartTask_get_echo_time+0x17c>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b55      	ldr	r3, [pc, #340]	@ (8001718 <StartTask_get_echo_time+0x180>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d905      	bls.n	80015d6 <StartTask_get_echo_time+0x3e>
 80015ca:	4b52      	ldr	r3, [pc, #328]	@ (8001714 <StartTask_get_echo_time+0x17c>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b52      	ldr	r3, [pc, #328]	@ (8001718 <StartTask_get_echo_time+0x180>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	623b      	str	r3, [r7, #32]
	if (echo_right_fall_time > echo_right_rise_time) echo_right_time_us_temp = echo_right_fall_time - echo_right_rise_time;
 80015d6:	4b51      	ldr	r3, [pc, #324]	@ (800171c <StartTask_get_echo_time+0x184>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b51      	ldr	r3, [pc, #324]	@ (8001720 <StartTask_get_echo_time+0x188>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d905      	bls.n	80015ee <StartTask_get_echo_time+0x56>
 80015e2:	4b4e      	ldr	r3, [pc, #312]	@ (800171c <StartTask_get_echo_time+0x184>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001720 <StartTask_get_echo_time+0x188>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	61fb      	str	r3, [r7, #28]

	// reject too high values
	if (echo_left_time_us_temp < SENSOR_VALUE_THRESHOLD) echo_left_time_queue[echo_left_time_queue_index++] = echo_left_time_us_temp;
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	f247 522f 	movw	r2, #29999	@ 0x752f
 80015f4:	4293      	cmp	r3, r2
 80015f6:	dc0b      	bgt.n	8001610 <StartTask_get_echo_time+0x78>
 80015f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001724 <StartTask_get_echo_time+0x18c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	b2d1      	uxtb	r1, r2
 8001600:	4a48      	ldr	r2, [pc, #288]	@ (8001724 <StartTask_get_echo_time+0x18c>)
 8001602:	7011      	strb	r1, [r2, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001608:	b299      	uxth	r1, r3
 800160a:	4b47      	ldr	r3, [pc, #284]	@ (8001728 <StartTask_get_echo_time+0x190>)
 800160c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	if (echo_center_time_us_temp < SENSOR_VALUE_THRESHOLD) echo_center_time_queue[echo_center_time_queue_index++] = echo_center_time_us_temp;
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001616:	4293      	cmp	r3, r2
 8001618:	dc0b      	bgt.n	8001632 <StartTask_get_echo_time+0x9a>
 800161a:	4b44      	ldr	r3, [pc, #272]	@ (800172c <StartTask_get_echo_time+0x194>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	b2d1      	uxtb	r1, r2
 8001622:	4a42      	ldr	r2, [pc, #264]	@ (800172c <StartTask_get_echo_time+0x194>)
 8001624:	7011      	strb	r1, [r2, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	b299      	uxth	r1, r3
 800162c:	4b40      	ldr	r3, [pc, #256]	@ (8001730 <StartTask_get_echo_time+0x198>)
 800162e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	if (echo_right_time_us_temp < SENSOR_VALUE_THRESHOLD) echo_right_time_queue[echo_right_time_queue_index++] = echo_right_time_us_temp;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001638:	4293      	cmp	r3, r2
 800163a:	dc0b      	bgt.n	8001654 <StartTask_get_echo_time+0xbc>
 800163c:	4b3d      	ldr	r3, [pc, #244]	@ (8001734 <StartTask_get_echo_time+0x19c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	b2d1      	uxtb	r1, r2
 8001644:	4a3b      	ldr	r2, [pc, #236]	@ (8001734 <StartTask_get_echo_time+0x19c>)
 8001646:	7011      	strb	r1, [r2, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	b299      	uxth	r1, r3
 800164e:	4b3a      	ldr	r3, [pc, #232]	@ (8001738 <StartTask_get_echo_time+0x1a0>)
 8001650:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	int echo_left_sum = 0, echo_center_sum = 0, echo_right_sum = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	2300      	movs	r3, #0
 800165e:	613b      	str	r3, [r7, #16]
	for (uint8_t i=0; i<VALUE_QUEUE_SIZE; ++i)
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e01a      	b.n	800169c <StartTask_get_echo_time+0x104>
	{
		echo_left_sum += echo_left_time_queue[i];
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	4a2f      	ldr	r2, [pc, #188]	@ (8001728 <StartTask_get_echo_time+0x190>)
 800166a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800166e:	461a      	mov	r2, r3
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	4413      	add	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
		echo_center_sum += echo_center_time_queue[i];
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	4a2d      	ldr	r2, [pc, #180]	@ (8001730 <StartTask_get_echo_time+0x198>)
 800167a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800167e:	461a      	mov	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	4413      	add	r3, r2
 8001684:	617b      	str	r3, [r7, #20]
		echo_right_sum += echo_right_time_queue[i];
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	4a2b      	ldr	r2, [pc, #172]	@ (8001738 <StartTask_get_echo_time+0x1a0>)
 800168a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800168e:	461a      	mov	r2, r3
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4413      	add	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
	for (uint8_t i=0; i<VALUE_QUEUE_SIZE; ++i)
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	3301      	adds	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d9e1      	bls.n	8001666 <StartTask_get_echo_time+0xce>
	}

	echo_left_time_us = echo_left_sum / VALUE_QUEUE_SIZE;
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4a25      	ldr	r2, [pc, #148]	@ (800173c <StartTask_get_echo_time+0x1a4>)
 80016a6:	fb82 1203 	smull	r1, r2, r2, r3
 80016aa:	1052      	asrs	r2, r2, #1
 80016ac:	17db      	asrs	r3, r3, #31
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	4a23      	ldr	r2, [pc, #140]	@ (8001740 <StartTask_get_echo_time+0x1a8>)
 80016b2:	6013      	str	r3, [r2, #0]
	echo_center_time_us = echo_center_sum / VALUE_QUEUE_SIZE;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	4a21      	ldr	r2, [pc, #132]	@ (800173c <StartTask_get_echo_time+0x1a4>)
 80016b8:	fb82 1203 	smull	r1, r2, r2, r3
 80016bc:	1052      	asrs	r2, r2, #1
 80016be:	17db      	asrs	r3, r3, #31
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	4a20      	ldr	r2, [pc, #128]	@ (8001744 <StartTask_get_echo_time+0x1ac>)
 80016c4:	6013      	str	r3, [r2, #0]
	echo_right_time_us = echo_right_sum / VALUE_QUEUE_SIZE;
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4a1c      	ldr	r2, [pc, #112]	@ (800173c <StartTask_get_echo_time+0x1a4>)
 80016ca:	fb82 1203 	smull	r1, r2, r2, r3
 80016ce:	1052      	asrs	r2, r2, #1
 80016d0:	17db      	asrs	r3, r3, #31
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001748 <StartTask_get_echo_time+0x1b0>)
 80016d6:	6013      	str	r3, [r2, #0]

	if (echo_left_time_queue_index >= VALUE_QUEUE_SIZE) echo_left_time_queue_index = 0;
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <StartTask_get_echo_time+0x18c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d902      	bls.n	80016e6 <StartTask_get_echo_time+0x14e>
 80016e0:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <StartTask_get_echo_time+0x18c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
	if (echo_center_time_queue_index >= VALUE_QUEUE_SIZE) echo_center_time_queue_index = 0;
 80016e6:	4b11      	ldr	r3, [pc, #68]	@ (800172c <StartTask_get_echo_time+0x194>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d902      	bls.n	80016f4 <StartTask_get_echo_time+0x15c>
 80016ee:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <StartTask_get_echo_time+0x194>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
	if (echo_right_time_queue_index >= VALUE_QUEUE_SIZE) echo_right_time_queue_index = 0;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <StartTask_get_echo_time+0x19c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d902      	bls.n	8001702 <StartTask_get_echo_time+0x16a>
 80016fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <StartTask_get_echo_time+0x19c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]

    osDelay(SAMPLE_TIME_S * 1000);
 8001702:	200a      	movs	r0, #10
 8001704:	f005 ff80 	bl	8007608 <osDelay>
  {
 8001708:	e74d      	b.n	80015a6 <StartTask_get_echo_time+0xe>
 800170a:	bf00      	nop
 800170c:	200000f0 	.word	0x200000f0
 8001710:	200000ec 	.word	0x200000ec
 8001714:	200000f8 	.word	0x200000f8
 8001718:	200000f4 	.word	0x200000f4
 800171c:	20000100 	.word	0x20000100
 8001720:	200000fc 	.word	0x200000fc
 8001724:	200000e6 	.word	0x200000e6
 8001728:	200000c4 	.word	0x200000c4
 800172c:	200000e7 	.word	0x200000e7
 8001730:	200000d0 	.word	0x200000d0
 8001734:	200000e8 	.word	0x200000e8
 8001738:	200000dc 	.word	0x200000dc
 800173c:	66666667 	.word	0x66666667
 8001740:	200000b4 	.word	0x200000b4
 8001744:	200000b8 	.word	0x200000b8
 8001748:	200000bc 	.word	0x200000bc

0800174c <StartTask_print_sensor_value>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_print_sensor_value */
void StartTask_print_sensor_value(void *argument)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_print_sensor_value */
  osDelay(1000);
 8001754:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001758:	f005 ff56 	bl	8007608 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  printf("%5lu %5lu %5lu || ", echo_left_time_us, echo_center_time_us, echo_right_time_us);
 800175c:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <StartTask_print_sensor_value+0x54>)
 800175e:	6819      	ldr	r1, [r3, #0]
 8001760:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <StartTask_print_sensor_value+0x58>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <StartTask_print_sensor_value+0x5c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4810      	ldr	r0, [pc, #64]	@ (80017ac <StartTask_print_sensor_value+0x60>)
 800176a:	f008 fcdf 	bl	800a12c <iprintf>
	  printf("L: %+3d R:%+3d\n", left_motor_duty_int, right_motor_duty_int);
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <StartTask_print_sensor_value+0x64>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a10      	ldr	r2, [pc, #64]	@ (80017b4 <StartTask_print_sensor_value+0x68>)
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	4619      	mov	r1, r3
 8001778:	480f      	ldr	r0, [pc, #60]	@ (80017b8 <StartTask_print_sensor_value+0x6c>)
 800177a:	f008 fcd7 	bl	800a12c <iprintf>

	  arbitrary_turn_right_left = !arbitrary_turn_right_left;
 800177e:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <StartTask_print_sensor_value+0x70>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	bf0c      	ite	eq
 8001786:	2301      	moveq	r3, #1
 8001788:	2300      	movne	r3, #0
 800178a:	b2db      	uxtb	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <StartTask_print_sensor_value+0x70>)
 8001790:	701a      	strb	r2, [r3, #0]

	  osDelay(1000);
 8001792:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001796:	f005 ff37 	bl	8007608 <osDelay>
	  printf("%5lu %5lu %5lu || ", echo_left_time_us, echo_center_time_us, echo_right_time_us);
 800179a:	bf00      	nop
 800179c:	e7de      	b.n	800175c <StartTask_print_sensor_value+0x10>
 800179e:	bf00      	nop
 80017a0:	200000b4 	.word	0x200000b4
 80017a4:	200000b8 	.word	0x200000b8
 80017a8:	200000bc 	.word	0x200000bc
 80017ac:	0800af18 	.word	0x0800af18
 80017b0:	2000010c 	.word	0x2000010c
 80017b4:	20000110 	.word	0x20000110
 80017b8:	0800af2c 	.word	0x0800af2c
 80017bc:	20000114 	.word	0x20000114

080017c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	4b20      	ldr	r3, [pc, #128]	@ (800185c <MX_GPIO_Init+0x9c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a1f      	ldr	r2, [pc, #124]	@ (800185c <MX_GPIO_Init+0x9c>)
 80017e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <MX_GPIO_Init+0x9c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	4b19      	ldr	r3, [pc, #100]	@ (800185c <MX_GPIO_Init+0x9c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a18      	ldr	r2, [pc, #96]	@ (800185c <MX_GPIO_Init+0x9c>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b16      	ldr	r3, [pc, #88]	@ (800185c <MX_GPIO_Init+0x9c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	4b12      	ldr	r3, [pc, #72]	@ (800185c <MX_GPIO_Init+0x9c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a11      	ldr	r2, [pc, #68]	@ (800185c <MX_GPIO_Init+0x9c>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <MX_GPIO_Init+0x9c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_motorDriver_IN1_Pin|GPIO_motorDriver_IN4_Pin|GPIO_motorDriver_IN3_Pin|GPIO_motorDriver_IN2_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	f24e 0102 	movw	r1, #57346	@ 0xe002
 8001830:	480b      	ldr	r0, [pc, #44]	@ (8001860 <MX_GPIO_Init+0xa0>)
 8001832:	f002 fa4f 	bl	8003cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_motorDriver_IN1_Pin|GPIO_motorDriver_IN4_Pin|GPIO_motorDriver_IN3_Pin|GPIO_motorDriver_IN2_Pin;
 8001836:	f24e 0302 	movw	r3, #57346	@ 0xe002
 800183a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001844:	2302      	movs	r3, #2
 8001846:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4619      	mov	r1, r3
 800184e:	4804      	ldr	r0, [pc, #16]	@ (8001860 <MX_GPIO_Init+0xa0>)
 8001850:	f002 f8bc 	bl	80039cc <HAL_GPIO_Init>

}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	40020400 	.word	0x40020400

08001864 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart_bluetooth, (uint8_t *) &ch, 1, 0xFFFF);
 800186c:	1d39      	adds	r1, r7, #4
 800186e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001872:	2201      	movs	r2, #1
 8001874:	4803      	ldr	r0, [pc, #12]	@ (8001884 <__io_putchar+0x20>)
 8001876:	f004 fc0f 	bl	8006098 <HAL_UART_Transmit>

  return ch;
 800187a:	687b      	ldr	r3, [r7, #4]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200004c4 	.word	0x200004c4

08001888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800188c:	f001 fb78 	bl	8002f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001890:	f000 f86e 	bl	8001970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001894:	f7ff ff94 	bl	80017c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001898:	f7ff fae0 	bl	8000e5c <MX_DMA_Init>
  MX_TIM3_Init();
 800189c:	f000 fdc2 	bl	8002424 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80018a0:	f001 fa10 	bl	8002cc4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80018a4:	f001 fa38 	bl	8002d18 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80018a8:	f000 fe5a 	bl	8002560 <MX_TIM4_Init>
  MX_TIM1_Init();
 80018ac:	f000 fc7e 	bl	80021ac <MX_TIM1_Init>
  MX_TIM2_Init();
 80018b0:	f000 fd36 	bl	8002320 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  pwmMotor_init(&htim_pwmMotor, CHANNEL_MOTOR_A);
 80018b4:	2100      	movs	r1, #0
 80018b6:	4822      	ldr	r0, [pc, #136]	@ (8001940 <main+0xb8>)
 80018b8:	f000 f8da 	bl	8001a70 <pwmMotor_init>
  pwmMotor_init(&htim_pwmMotor, CHANNEL_MOTOR_B);
 80018bc:	2104      	movs	r1, #4
 80018be:	4820      	ldr	r0, [pc, #128]	@ (8001940 <main+0xb8>)
 80018c0:	f000 f8d6 	bl	8001a70 <pwmMotor_init>

  HAL_TIM_PWM_Start(&htim_triggerPulse, CHANNEL_TRIG_LEFT);
 80018c4:	2100      	movs	r1, #0
 80018c6:	481f      	ldr	r0, [pc, #124]	@ (8001944 <main+0xbc>)
 80018c8:	f002 fff4 	bl	80048b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim_triggerPulse, CHANNEL_TRIG_CENTER);
 80018cc:	2104      	movs	r1, #4
 80018ce:	481d      	ldr	r0, [pc, #116]	@ (8001944 <main+0xbc>)
 80018d0:	f002 fff0 	bl	80048b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim_triggerPulse, CHANNEL_TRIG_RIGHT);
 80018d4:	2108      	movs	r1, #8
 80018d6:	481b      	ldr	r0, [pc, #108]	@ (8001944 <main+0xbc>)
 80018d8:	f002 ffec 	bl	80048b4 <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start_DMA(&htim_echoMeasure_1, CHANNEL_ECHO_LEFT_RISING, &echo_left_rise_time, 1);
 80018dc:	2301      	movs	r3, #1
 80018de:	4a1a      	ldr	r2, [pc, #104]	@ (8001948 <main+0xc0>)
 80018e0:	2100      	movs	r1, #0
 80018e2:	481a      	ldr	r0, [pc, #104]	@ (800194c <main+0xc4>)
 80018e4:	f003 f8f0 	bl	8004ac8 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim_echoMeasure_1, CHANNEL_ECHO_LEFT_FALLING, &echo_left_fall_time, 1);
 80018e8:	2301      	movs	r3, #1
 80018ea:	4a19      	ldr	r2, [pc, #100]	@ (8001950 <main+0xc8>)
 80018ec:	2104      	movs	r1, #4
 80018ee:	4817      	ldr	r0, [pc, #92]	@ (800194c <main+0xc4>)
 80018f0:	f003 f8ea 	bl	8004ac8 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim_echoMeasure_1, CHANNEL_ECHO_CENTER_RISING, &echo_center_rise_time, 1);
 80018f4:	2301      	movs	r3, #1
 80018f6:	4a17      	ldr	r2, [pc, #92]	@ (8001954 <main+0xcc>)
 80018f8:	2108      	movs	r1, #8
 80018fa:	4814      	ldr	r0, [pc, #80]	@ (800194c <main+0xc4>)
 80018fc:	f003 f8e4 	bl	8004ac8 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim_echoMeasure_1, CHANNEL_ECHO_CENTER_FALLING, &echo_center_fall_time, 1);
 8001900:	2301      	movs	r3, #1
 8001902:	4a15      	ldr	r2, [pc, #84]	@ (8001958 <main+0xd0>)
 8001904:	210c      	movs	r1, #12
 8001906:	4811      	ldr	r0, [pc, #68]	@ (800194c <main+0xc4>)
 8001908:	f003 f8de 	bl	8004ac8 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim_echoMeasure_2, CHANNEL_ECHO_RIGHT_RISING, &echo_right_rise_time, 1);
 800190c:	2301      	movs	r3, #1
 800190e:	4a13      	ldr	r2, [pc, #76]	@ (800195c <main+0xd4>)
 8001910:	2100      	movs	r1, #0
 8001912:	4813      	ldr	r0, [pc, #76]	@ (8001960 <main+0xd8>)
 8001914:	f003 f8d8 	bl	8004ac8 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim_echoMeasure_2, CHANNEL_ECHO_RIGHT_FALLING, &echo_right_fall_time, 1);
 8001918:	2301      	movs	r3, #1
 800191a:	4a12      	ldr	r2, [pc, #72]	@ (8001964 <main+0xdc>)
 800191c:	2104      	movs	r1, #4
 800191e:	4810      	ldr	r0, [pc, #64]	@ (8001960 <main+0xd8>)
 8001920:	f003 f8d2 	bl	8004ac8 <HAL_TIM_IC_Start_DMA>

  HAL_UART_Receive_DMA(&huart_bluetooth, &rxChar, 1);
 8001924:	2201      	movs	r2, #1
 8001926:	4910      	ldr	r1, [pc, #64]	@ (8001968 <main+0xe0>)
 8001928:	4810      	ldr	r0, [pc, #64]	@ (800196c <main+0xe4>)
 800192a:	f004 fc40 	bl	80061ae <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800192e:	f005 fd8f 	bl	8007450 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001932:	f7ff faf1 	bl	8000f18 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001936:	f005 fdaf 	bl	8007498 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800193a:	bf00      	nop
 800193c:	e7fd      	b.n	800193a <main+0xb2>
 800193e:	bf00      	nop
 8001940:	200001ac 	.word	0x200001ac
 8001944:	20000164 	.word	0x20000164
 8001948:	200000ec 	.word	0x200000ec
 800194c:	200001f4 	.word	0x200001f4
 8001950:	200000f0 	.word	0x200000f0
 8001954:	200000f4 	.word	0x200000f4
 8001958:	200000f8 	.word	0x200000f8
 800195c:	200000fc 	.word	0x200000fc
 8001960:	2000023c 	.word	0x2000023c
 8001964:	20000100 	.word	0x20000100
 8001968:	200000b0 	.word	0x200000b0
 800196c:	200004c4 	.word	0x200004c4

08001970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b094      	sub	sp, #80	@ 0x50
 8001974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001976:	f107 0320 	add.w	r3, r7, #32
 800197a:	2230      	movs	r2, #48	@ 0x30
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f008 fc29 	bl	800a1d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	4b27      	ldr	r3, [pc, #156]	@ (8001a38 <SystemClock_Config+0xc8>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199c:	4a26      	ldr	r2, [pc, #152]	@ (8001a38 <SystemClock_Config+0xc8>)
 800199e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a4:	4b24      	ldr	r3, [pc, #144]	@ (8001a38 <SystemClock_Config+0xc8>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	4b21      	ldr	r3, [pc, #132]	@ (8001a3c <SystemClock_Config+0xcc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a20      	ldr	r2, [pc, #128]	@ (8001a3c <SystemClock_Config+0xcc>)
 80019ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <SystemClock_Config+0xcc>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019cc:	2301      	movs	r3, #1
 80019ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d6:	2302      	movs	r3, #2
 80019d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019e0:	2304      	movs	r3, #4
 80019e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80019e4:	2364      	movs	r3, #100	@ 0x64
 80019e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019ec:	2304      	movs	r3, #4
 80019ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f0:	f107 0320 	add.w	r3, r7, #32
 80019f4:	4618      	mov	r0, r3
 80019f6:	f002 f987 	bl	8003d08 <HAL_RCC_OscConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a00:	f000 f830 	bl	8001a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a04:	230f      	movs	r3, #15
 8001a06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	2103      	movs	r1, #3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 fbe9 	bl	80041f8 <HAL_RCC_ClockConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a2c:	f000 f81a 	bl	8001a64 <Error_Handler>
  }
}
 8001a30:	bf00      	nop
 8001a32:	3750      	adds	r7, #80	@ 0x50
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40007000 	.word	0x40007000

08001a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a52:	f001 fab7 	bl	8002fc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40014800 	.word	0x40014800

08001a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a68:	b672      	cpsid	i
}
 8001a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <Error_Handler+0x8>

08001a70 <pwmMotor_init>:
#include "pwmMotor.h"

static uint16_t max_duty;

void pwmMotor_init(TIM_HandleTypeDef *htim, uint32_t motor_channel)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim, motor_channel);
 8001a7a:	6839      	ldr	r1, [r7, #0]
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f002 ff19 	bl	80048b4 <HAL_TIM_PWM_Start>
	max_duty = htim->Instance->ARR - 1;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b03      	ldr	r3, [pc, #12]	@ (8001a9c <pwmMotor_init+0x2c>)
 8001a90:	801a      	strh	r2, [r3, #0]
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000116 	.word	0x20000116

08001aa0 <pwmMotor_setDuty>:
void pwmMotor_setDuty(TIM_HandleTypeDef *htim, uint32_t motor_channel, uint16_t duty)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim, motor_channel, duty);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d104      	bne.n	8001abe <pwmMotor_setDuty+0x1e>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	88fa      	ldrh	r2, [r7, #6]
 8001aba:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001abc:	e013      	b.n	8001ae6 <pwmMotor_setDuty+0x46>
	__HAL_TIM_SET_COMPARE(htim, motor_channel, duty);
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d104      	bne.n	8001ace <pwmMotor_setDuty+0x2e>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001acc:	e00b      	b.n	8001ae6 <pwmMotor_setDuty+0x46>
	__HAL_TIM_SET_COMPARE(htim, motor_channel, duty);
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d104      	bne.n	8001ade <pwmMotor_setDuty+0x3e>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001adc:	e003      	b.n	8001ae6 <pwmMotor_setDuty+0x46>
	__HAL_TIM_SET_COMPARE(htim, motor_channel, duty);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <pwmMotor_directionShift>:
{
	HAL_TIM_PWM_Stop(htim, motor_channel);
}

void pwmMotor_directionShift (uint32_t motor_channel, pwmMotor_direction dir)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	70fb      	strb	r3, [r7, #3]
	GPIO_PinState GPIO_PinState_IN_1st;
	GPIO_PinState GPIO_PinState_IN_2nd;
	switch (dir)
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d81e      	bhi.n	8001b44 <pwmMotor_directionShift+0x50>
 8001b06:	a201      	add	r2, pc, #4	@ (adr r2, 8001b0c <pwmMotor_directionShift+0x18>)
 8001b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0c:	08001b1d 	.word	0x08001b1d
 8001b10:	08001b27 	.word	0x08001b27
 8001b14:	08001b31 	.word	0x08001b31
 8001b18:	08001b3b 	.word	0x08001b3b
	{
	case NEUTRAL:
		GPIO_PinState_IN_1st = GPIO_PIN_RESET;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]
		GPIO_PinState_IN_2nd = GPIO_PIN_RESET;
 8001b20:	2300      	movs	r3, #0
 8001b22:	73bb      	strb	r3, [r7, #14]
		break;
 8001b24:	e00e      	b.n	8001b44 <pwmMotor_directionShift+0x50>
	case FORWARD:
		GPIO_PinState_IN_1st = GPIO_PIN_SET;
 8001b26:	2301      	movs	r3, #1
 8001b28:	73fb      	strb	r3, [r7, #15]
		GPIO_PinState_IN_2nd = GPIO_PIN_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73bb      	strb	r3, [r7, #14]
		break;
 8001b2e:	e009      	b.n	8001b44 <pwmMotor_directionShift+0x50>
	case BACKWARD:
		GPIO_PinState_IN_1st = GPIO_PIN_RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
		GPIO_PinState_IN_2nd = GPIO_PIN_SET;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73bb      	strb	r3, [r7, #14]
		break;
 8001b38:	e004      	b.n	8001b44 <pwmMotor_directionShift+0x50>
	case BREAK:
		GPIO_PinState_IN_1st = GPIO_PIN_SET;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	73fb      	strb	r3, [r7, #15]
		GPIO_PinState_IN_2nd = GPIO_PIN_SET;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73bb      	strb	r3, [r7, #14]
		break;
 8001b42:	bf00      	nop
	}

	if (motor_channel == CHANNEL_MOTOR_A)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10d      	bne.n	8001b66 <pwmMotor_directionShift+0x72>
	{
		HAL_GPIO_WritePin(GPIO_motorDriver_IN1_GPIO_Port, GPIO_motorDriver_IN1_Pin, GPIO_PinState_IN_1st);
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2102      	movs	r1, #2
 8001b50:	480f      	ldr	r0, [pc, #60]	@ (8001b90 <pwmMotor_directionShift+0x9c>)
 8001b52:	f002 f8bf 	bl	8003cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_motorDriver_IN2_GPIO_Port, GPIO_motorDriver_IN2_Pin, GPIO_PinState_IN_2nd);
 8001b56:	7bbb      	ldrb	r3, [r7, #14]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b5e:	480c      	ldr	r0, [pc, #48]	@ (8001b90 <pwmMotor_directionShift+0x9c>)
 8001b60:	f002 f8b8 	bl	8003cd4 <HAL_GPIO_WritePin>
	else if (motor_channel == CHANNEL_MOTOR_B)
	{
		HAL_GPIO_WritePin(GPIO_motorDriver_IN3_GPIO_Port, GPIO_motorDriver_IN3_Pin, GPIO_PinState_IN_1st);
		HAL_GPIO_WritePin(GPIO_motorDriver_IN4_GPIO_Port, GPIO_motorDriver_IN4_Pin, GPIO_PinState_IN_2nd);
	}
}
 8001b64:	e010      	b.n	8001b88 <pwmMotor_directionShift+0x94>
	else if (motor_channel == CHANNEL_MOTOR_B)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d10d      	bne.n	8001b88 <pwmMotor_directionShift+0x94>
		HAL_GPIO_WritePin(GPIO_motorDriver_IN3_GPIO_Port, GPIO_motorDriver_IN3_Pin, GPIO_PinState_IN_1st);
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b74:	4806      	ldr	r0, [pc, #24]	@ (8001b90 <pwmMotor_directionShift+0x9c>)
 8001b76:	f002 f8ad 	bl	8003cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_motorDriver_IN4_GPIO_Port, GPIO_motorDriver_IN4_Pin, GPIO_PinState_IN_2nd);
 8001b7a:	7bbb      	ldrb	r3, [r7, #14]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b82:	4803      	ldr	r0, [pc, #12]	@ (8001b90 <pwmMotor_directionShift+0x9c>)
 8001b84:	f002 f8a6 	bl	8003cd4 <HAL_GPIO_WritePin>
}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40020400 	.word	0x40020400

08001b94 <RCcar_set_motor_speed>:

void RCcar_set_motor_speed (int8_t left_speed_percent, int8_t right_speed_percent)
{
 8001b94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b98:	b084      	sub	sp, #16
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	460a      	mov	r2, r1
 8001ba0:	71fb      	strb	r3, [r7, #7]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	71bb      	strb	r3, [r7, #6]
	uint16_t left_motor_duty, right_motor_duty;

	if (left_speed_percent > 0)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	dd11      	ble.n	8001bd2 <RCcar_set_motor_speed+0x3e>
	{
		pwmMotor_directionShift (CHANNEL_MOTOR_A, FORWARD);
 8001bae:	2101      	movs	r1, #1
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f7ff ff9f 	bl	8001af4 <pwmMotor_directionShift>
		left_motor_duty = left_speed_percent * max_duty / 100;
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	4a4e      	ldr	r2, [pc, #312]	@ (8001cf4 <RCcar_set_motor_speed+0x160>)
 8001bbc:	8812      	ldrh	r2, [r2, #0]
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf8 <RCcar_set_motor_speed+0x164>)
 8001bc4:	fb82 1203 	smull	r1, r2, r2, r3
 8001bc8:	1152      	asrs	r2, r2, #5
 8001bca:	17db      	asrs	r3, r3, #31
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	81fb      	strh	r3, [r7, #14]
 8001bd0:	e034      	b.n	8001c3c <RCcar_set_motor_speed+0xa8>
	}
	else if (left_speed_percent < 0)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da2a      	bge.n	8001c30 <RCcar_set_motor_speed+0x9c>
	{
		pwmMotor_directionShift (CHANNEL_MOTOR_A, BACKWARD);
 8001bda:	2102      	movs	r1, #2
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f7ff ff89 	bl	8001af4 <pwmMotor_directionShift>
		left_motor_duty = -1.0 * left_speed_percent * max_duty / 100;
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fc9c 	bl	8000524 <__aeabi_i2d>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4690      	mov	r8, r2
 8001bf2:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8001cf4 <RCcar_set_motor_speed+0x160>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fc92 	bl	8000524 <__aeabi_i2d>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4640      	mov	r0, r8
 8001c06:	4649      	mov	r1, r9
 8001c08:	f7fe fcf6 	bl	80005f8 <__aeabi_dmul>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	4b38      	ldr	r3, [pc, #224]	@ (8001cfc <RCcar_set_motor_speed+0x168>)
 8001c1a:	f7fe fe17 	bl	800084c <__aeabi_ddiv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f7fe ff81 	bl	8000b2c <__aeabi_d2uiz>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	81fb      	strh	r3, [r7, #14]
 8001c2e:	e005      	b.n	8001c3c <RCcar_set_motor_speed+0xa8>
	}
	else /* (left_speed_percent == 0) */
	{
		pwmMotor_directionShift (CHANNEL_MOTOR_A, BREAK);
 8001c30:	2103      	movs	r1, #3
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff ff5e 	bl	8001af4 <pwmMotor_directionShift>
		left_motor_duty = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	81fb      	strh	r3, [r7, #14]
	}


	if (right_speed_percent > 0)
 8001c3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	dd11      	ble.n	8001c68 <RCcar_set_motor_speed+0xd4>
	{
		pwmMotor_directionShift (CHANNEL_MOTOR_B, FORWARD);
 8001c44:	2101      	movs	r1, #1
 8001c46:	2004      	movs	r0, #4
 8001c48:	f7ff ff54 	bl	8001af4 <pwmMotor_directionShift>
		right_motor_duty = right_speed_percent * max_duty / 100;
 8001c4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c50:	4a28      	ldr	r2, [pc, #160]	@ (8001cf4 <RCcar_set_motor_speed+0x160>)
 8001c52:	8812      	ldrh	r2, [r2, #0]
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	4a27      	ldr	r2, [pc, #156]	@ (8001cf8 <RCcar_set_motor_speed+0x164>)
 8001c5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c5e:	1152      	asrs	r2, r2, #5
 8001c60:	17db      	asrs	r3, r3, #31
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	81bb      	strh	r3, [r7, #12]
 8001c66:	e034      	b.n	8001cd2 <RCcar_set_motor_speed+0x13e>
	}
	else if (right_speed_percent < 0)
 8001c68:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	da2a      	bge.n	8001cc6 <RCcar_set_motor_speed+0x132>
	{
		pwmMotor_directionShift (CHANNEL_MOTOR_B, BACKWARD);
 8001c70:	2102      	movs	r1, #2
 8001c72:	2004      	movs	r0, #4
 8001c74:	f7ff ff3e 	bl	8001af4 <pwmMotor_directionShift>
		right_motor_duty = -1.0 * right_speed_percent * max_duty / 100;
 8001c78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fc51 	bl	8000524 <__aeabi_i2d>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4614      	mov	r4, r2
 8001c88:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001c8c:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <RCcar_set_motor_speed+0x160>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc47 	bl	8000524 <__aeabi_i2d>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	f7fe fcab 	bl	80005f8 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <RCcar_set_motor_speed+0x168>)
 8001cb0:	f7fe fdcc 	bl	800084c <__aeabi_ddiv>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7fe ff36 	bl	8000b2c <__aeabi_d2uiz>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	81bb      	strh	r3, [r7, #12]
 8001cc4:	e005      	b.n	8001cd2 <RCcar_set_motor_speed+0x13e>
	}
	else /* (right_speed_percent == 0) */
	{
		pwmMotor_directionShift (CHANNEL_MOTOR_B, BREAK);
 8001cc6:	2103      	movs	r1, #3
 8001cc8:	2004      	movs	r0, #4
 8001cca:	f7ff ff13 	bl	8001af4 <pwmMotor_directionShift>
		right_motor_duty = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	81bb      	strh	r3, [r7, #12]
	}

	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_A, left_motor_duty);
 8001cd2:	89fb      	ldrh	r3, [r7, #14]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4809      	ldr	r0, [pc, #36]	@ (8001d00 <RCcar_set_motor_speed+0x16c>)
 8001cda:	f7ff fee1 	bl	8001aa0 <pwmMotor_setDuty>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, right_motor_duty);
 8001cde:	89bb      	ldrh	r3, [r7, #12]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	4806      	ldr	r0, [pc, #24]	@ (8001d00 <RCcar_set_motor_speed+0x16c>)
 8001ce6:	f7ff fedb 	bl	8001aa0 <pwmMotor_setDuty>
}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cf4:	20000116 	.word	0x20000116
 8001cf8:	51eb851f 	.word	0x51eb851f
 8001cfc:	40590000 	.word	0x40590000
 8001d00:	200001ac 	.word	0x200001ac

08001d04 <RCcar_go_soft_left>:
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, duty);

}

void RCcar_go_soft_left(uint8_t speed_percent)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
	uint16_t duty = speed_percent * max_duty / 100;
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	4a12      	ldr	r2, [pc, #72]	@ (8001d5c <RCcar_go_soft_left+0x58>)
 8001d12:	8812      	ldrh	r2, [r2, #0]
 8001d14:	fb02 f303 	mul.w	r3, r2, r3
 8001d18:	4a11      	ldr	r2, [pc, #68]	@ (8001d60 <RCcar_go_soft_left+0x5c>)
 8001d1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d1e:	1152      	asrs	r2, r2, #5
 8001d20:	17db      	asrs	r3, r3, #31
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	81fb      	strh	r3, [r7, #14]
	pwmMotor_directionShift (CHANNEL_MOTOR_A, FORWARD);
 8001d26:	2101      	movs	r1, #1
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff fee3 	bl	8001af4 <pwmMotor_directionShift>
	pwmMotor_directionShift (CHANNEL_MOTOR_B, FORWARD);
 8001d2e:	2101      	movs	r1, #1
 8001d30:	2004      	movs	r0, #4
 8001d32:	f7ff fedf 	bl	8001af4 <pwmMotor_directionShift>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_A, duty / 8);
 8001d36:	89fb      	ldrh	r3, [r7, #14]
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4808      	ldr	r0, [pc, #32]	@ (8001d64 <RCcar_go_soft_left+0x60>)
 8001d42:	f7ff fead 	bl	8001aa0 <pwmMotor_setDuty>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, duty);
 8001d46:	89fb      	ldrh	r3, [r7, #14]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4805      	ldr	r0, [pc, #20]	@ (8001d64 <RCcar_go_soft_left+0x60>)
 8001d4e:	f7ff fea7 	bl	8001aa0 <pwmMotor_setDuty>
}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000116 	.word	0x20000116
 8001d60:	51eb851f 	.word	0x51eb851f
 8001d64:	200001ac 	.word	0x200001ac

08001d68 <RCcar_go_soft_right>:

void RCcar_go_soft_right(uint8_t speed_percent)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
	uint16_t duty = speed_percent * max_duty / 100;
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <RCcar_go_soft_right+0x58>)
 8001d76:	8812      	ldrh	r2, [r2, #0]
 8001d78:	fb02 f303 	mul.w	r3, r2, r3
 8001d7c:	4a11      	ldr	r2, [pc, #68]	@ (8001dc4 <RCcar_go_soft_right+0x5c>)
 8001d7e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d82:	1152      	asrs	r2, r2, #5
 8001d84:	17db      	asrs	r3, r3, #31
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	81fb      	strh	r3, [r7, #14]
	pwmMotor_directionShift (CHANNEL_MOTOR_A, FORWARD);
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff feb1 	bl	8001af4 <pwmMotor_directionShift>
	pwmMotor_directionShift (CHANNEL_MOTOR_B, FORWARD);
 8001d92:	2101      	movs	r1, #1
 8001d94:	2004      	movs	r0, #4
 8001d96:	f7ff fead 	bl	8001af4 <pwmMotor_directionShift>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_A, duty);
 8001d9a:	89fb      	ldrh	r3, [r7, #14]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4809      	ldr	r0, [pc, #36]	@ (8001dc8 <RCcar_go_soft_right+0x60>)
 8001da2:	f7ff fe7d 	bl	8001aa0 <pwmMotor_setDuty>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, duty / 8);
 8001da6:	89fb      	ldrh	r3, [r7, #14]
 8001da8:	08db      	lsrs	r3, r3, #3
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	2104      	movs	r1, #4
 8001db0:	4805      	ldr	r0, [pc, #20]	@ (8001dc8 <RCcar_go_soft_right+0x60>)
 8001db2:	f7ff fe75 	bl	8001aa0 <pwmMotor_setDuty>
}
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000116 	.word	0x20000116
 8001dc4:	51eb851f 	.word	0x51eb851f
 8001dc8:	200001ac 	.word	0x200001ac

08001dcc <RCcar_stop>:
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_A, duty);
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, duty);
}

void RCcar_stop()
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	pwmMotor_directionShift (CHANNEL_MOTOR_A, BREAK);
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff fe8e 	bl	8001af4 <pwmMotor_directionShift>
	pwmMotor_directionShift (CHANNEL_MOTOR_B, BREAK);
 8001dd8:	2103      	movs	r1, #3
 8001dda:	2004      	movs	r0, #4
 8001ddc:	f7ff fe8a 	bl	8001af4 <pwmMotor_directionShift>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_A, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	4804      	ldr	r0, [pc, #16]	@ (8001df8 <RCcar_stop+0x2c>)
 8001de6:	f7ff fe5b 	bl	8001aa0 <pwmMotor_setDuty>
	pwmMotor_setDuty(&htim_pwmMotor, CHANNEL_MOTOR_B, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2104      	movs	r1, #4
 8001dee:	4802      	ldr	r0, [pc, #8]	@ (8001df8 <RCcar_stop+0x2c>)
 8001df0:	f7ff fe56 	bl	8001aa0 <pwmMotor_setDuty>
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	200001ac 	.word	0x200001ac

08001dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_MspInit+0x54>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	4a11      	ldr	r2, [pc, #68]	@ (8001e50 <HAL_MspInit+0x54>)
 8001e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e12:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <HAL_MspInit+0x54>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <HAL_MspInit+0x54>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <HAL_MspInit+0x54>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2e:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <HAL_MspInit+0x54>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	210f      	movs	r1, #15
 8001e3e:	f06f 0001 	mvn.w	r0, #1
 8001e42:	f001 f997 	bl	8003174 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800

08001e54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	@ 0x30
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	4b2e      	ldr	r3, [pc, #184]	@ (8001f24 <HAL_InitTick+0xd0>)
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f24 <HAL_InitTick+0xd0>)
 8001e6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e72:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e74:	4b2b      	ldr	r3, [pc, #172]	@ (8001f24 <HAL_InitTick+0xd0>)
 8001e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e80:	f107 020c 	add.w	r2, r7, #12
 8001e84:	f107 0310 	add.w	r3, r7, #16
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f002 fbd4 	bl	8004638 <HAL_RCC_GetClockConfig>
  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e90:	f002 fbbe 	bl	8004610 <HAL_RCC_GetPCLK2Freq>
 8001e94:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e98:	4a23      	ldr	r2, [pc, #140]	@ (8001f28 <HAL_InitTick+0xd4>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	0c9b      	lsrs	r3, r3, #18
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001ea4:	4b21      	ldr	r3, [pc, #132]	@ (8001f2c <HAL_InitTick+0xd8>)
 8001ea6:	4a22      	ldr	r2, [pc, #136]	@ (8001f30 <HAL_InitTick+0xdc>)
 8001ea8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001eaa:	4b20      	ldr	r3, [pc, #128]	@ (8001f2c <HAL_InitTick+0xd8>)
 8001eac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001eb0:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f2c <HAL_InitTick+0xd8>)
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb6:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f2c <HAL_InitTick+0xd8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8001f2c <HAL_InitTick+0xd8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec4:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <HAL_InitTick+0xd8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001eca:	4818      	ldr	r0, [pc, #96]	@ (8001f2c <HAL_InitTick+0xd8>)
 8001ecc:	f002 fbe6 	bl	800469c <HAL_TIM_Base_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d11b      	bne.n	8001f16 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001ede:	4813      	ldr	r0, [pc, #76]	@ (8001f2c <HAL_InitTick+0xd8>)
 8001ee0:	f002 fc2c 	bl	800473c <HAL_TIM_Base_Start_IT>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001eea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d111      	bne.n	8001f16 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ef2:	201a      	movs	r0, #26
 8001ef4:	f001 f95a 	bl	80031ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b0f      	cmp	r3, #15
 8001efc:	d808      	bhi.n	8001f10 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001efe:	2200      	movs	r2, #0
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	201a      	movs	r0, #26
 8001f04:	f001 f936 	bl	8003174 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f08:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <HAL_InitTick+0xe0>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e002      	b.n	8001f16 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3730      	adds	r7, #48	@ 0x30
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	431bde83 	.word	0x431bde83
 8001f2c:	20000118 	.word	0x20000118
 8001f30:	40014800 	.word	0x40014800
 8001f34:	20000008 	.word	0x20000008

08001f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <NMI_Handler+0x4>

08001f40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <HardFault_Handler+0x4>

08001f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f4c:	bf00      	nop
 8001f4e:	e7fd      	b.n	8001f4c <MemManage_Handler+0x4>

08001f50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <BusFault_Handler+0x4>

08001f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <UsageFault_Handler+0x4>

08001f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001f74:	4802      	ldr	r0, [pc, #8]	@ (8001f80 <DMA1_Stream0_IRQHandler+0x10>)
 8001f76:	f001 fabf 	bl	80034f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000404 	.word	0x20000404

08001f84 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001f88:	4802      	ldr	r0, [pc, #8]	@ (8001f94 <DMA1_Stream2_IRQHandler+0x10>)
 8001f8a:	f001 fab5 	bl	80034f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200003a4 	.word	0x200003a4

08001f98 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8001f9c:	4802      	ldr	r0, [pc, #8]	@ (8001fa8 <DMA1_Stream3_IRQHandler+0x10>)
 8001f9e:	f001 faab 	bl	80034f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000464 	.word	0x20000464

08001fac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001fb0:	4802      	ldr	r0, [pc, #8]	@ (8001fbc <DMA1_Stream4_IRQHandler+0x10>)
 8001fb2:	f001 faa1 	bl	80034f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000284 	.word	0x20000284

08001fc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8001fc4:	4802      	ldr	r0, [pc, #8]	@ (8001fd0 <DMA1_Stream5_IRQHandler+0x10>)
 8001fc6:	f001 fa97 	bl	80034f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200002e4 	.word	0x200002e4

08001fd4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fd8:	4803      	ldr	r0, [pc, #12]	@ (8001fe8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001fda:	f002 ff11 	bl	8004e00 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001fde:	4803      	ldr	r0, [pc, #12]	@ (8001fec <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001fe0:	f002 ff0e 	bl	8004e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000164 	.word	0x20000164
 8001fec:	20000118 	.word	0x20000118

08001ff0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ff4:	4802      	ldr	r0, [pc, #8]	@ (8002000 <USART1_IRQHandler+0x10>)
 8001ff6:	f004 f8ff 	bl	80061f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200004c4 	.word	0x200004c4

08002004 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002008:	4802      	ldr	r0, [pc, #8]	@ (8002014 <USART2_IRQHandler+0x10>)
 800200a:	f004 f8f5 	bl	80061f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	2000050c 	.word	0x2000050c

08002018 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 800201c:	4802      	ldr	r0, [pc, #8]	@ (8002028 <DMA1_Stream7_IRQHandler+0x10>)
 800201e:	f001 fa6b 	bl	80034f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000344 	.word	0x20000344

0800202c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002030:	4802      	ldr	r0, [pc, #8]	@ (800203c <DMA2_Stream2_IRQHandler+0x10>)
 8002032:	f001 fa61 	bl	80034f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000554 	.word	0x20000554

08002040 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	e00a      	b.n	8002068 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002052:	f3af 8000 	nop.w
 8002056:	4601      	mov	r1, r0
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	60ba      	str	r2, [r7, #8]
 800205e:	b2ca      	uxtb	r2, r1
 8002060:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3301      	adds	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	dbf0      	blt.n	8002052 <_read+0x12>
  }

  return len;
 8002070:	687b      	ldr	r3, [r7, #4]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	e009      	b.n	80020a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	60ba      	str	r2, [r7, #8]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fbe5 	bl	8001864 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	3301      	adds	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	dbf1      	blt.n	800208c <_write+0x12>
  }
  return len;
 80020a8:	687b      	ldr	r3, [r7, #4]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <_close>:

int _close(int file)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020da:	605a      	str	r2, [r3, #4]
  return 0;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <_isatty>:

int _isatty(int file)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002124:	4a14      	ldr	r2, [pc, #80]	@ (8002178 <_sbrk+0x5c>)
 8002126:	4b15      	ldr	r3, [pc, #84]	@ (800217c <_sbrk+0x60>)
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002130:	4b13      	ldr	r3, [pc, #76]	@ (8002180 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002138:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <_sbrk+0x64>)
 800213a:	4a12      	ldr	r2, [pc, #72]	@ (8002184 <_sbrk+0x68>)
 800213c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213e:	4b10      	ldr	r3, [pc, #64]	@ (8002180 <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	429a      	cmp	r2, r3
 800214a:	d207      	bcs.n	800215c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800214c:	f008 f8e8 	bl	800a320 <__errno>
 8002150:	4603      	mov	r3, r0
 8002152:	220c      	movs	r2, #12
 8002154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
 800215a:	e009      	b.n	8002170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800215c:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <_sbrk+0x64>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002162:	4b07      	ldr	r3, [pc, #28]	@ (8002180 <_sbrk+0x64>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	4a05      	ldr	r2, [pc, #20]	@ (8002180 <_sbrk+0x64>)
 800216c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800216e:	68fb      	ldr	r3, [r7, #12]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20020000 	.word	0x20020000
 800217c:	00000400 	.word	0x00000400
 8002180:	20000160 	.word	0x20000160
 8002184:	200050f0 	.word	0x200050f0

08002188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800218c:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <SystemInit+0x20>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002192:	4a05      	ldr	r2, [pc, #20]	@ (80021a8 <SystemInit+0x20>)
 8002194:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002198:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim4_ch1;
DMA_HandleTypeDef hdma_tim4_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b096      	sub	sp, #88	@ 0x58
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	60da      	str	r2, [r3, #12]
 80021d8:	611a      	str	r2, [r3, #16]
 80021da:	615a      	str	r2, [r3, #20]
 80021dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	2220      	movs	r2, #32
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f007 fff6 	bl	800a1d6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002318 <MX_TIM1_Init+0x16c>)
 80021ec:	4a4b      	ldr	r2, [pc, #300]	@ (800231c <MX_TIM1_Init+0x170>)
 80021ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 80021f0:	4b49      	ldr	r3, [pc, #292]	@ (8002318 <MX_TIM1_Init+0x16c>)
 80021f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f8:	4b47      	ldr	r3, [pc, #284]	@ (8002318 <MX_TIM1_Init+0x16c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80021fe:	4b46      	ldr	r3, [pc, #280]	@ (8002318 <MX_TIM1_Init+0x16c>)
 8002200:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002204:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002206:	4b44      	ldr	r3, [pc, #272]	@ (8002318 <MX_TIM1_Init+0x16c>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800220c:	4b42      	ldr	r3, [pc, #264]	@ (8002318 <MX_TIM1_Init+0x16c>)
 800220e:	2200      	movs	r2, #0
 8002210:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002212:	4b41      	ldr	r3, [pc, #260]	@ (8002318 <MX_TIM1_Init+0x16c>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002218:	483f      	ldr	r0, [pc, #252]	@ (8002318 <MX_TIM1_Init+0x16c>)
 800221a:	f002 fa3f 	bl	800469c <HAL_TIM_Base_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002224:	f7ff fc1e 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002228:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800222c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800222e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002232:	4619      	mov	r1, r3
 8002234:	4838      	ldr	r0, [pc, #224]	@ (8002318 <MX_TIM1_Init+0x16c>)
 8002236:	f003 f831 	bl	800529c <HAL_TIM_ConfigClockSource>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002240:	f7ff fc10 	bl	8001a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002244:	4834      	ldr	r0, [pc, #208]	@ (8002318 <MX_TIM1_Init+0x16c>)
 8002246:	f002 fadb 	bl	8004800 <HAL_TIM_PWM_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002250:	f7ff fc08 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800225c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002260:	4619      	mov	r1, r3
 8002262:	482d      	ldr	r0, [pc, #180]	@ (8002318 <MX_TIM1_Init+0x16c>)
 8002264:	f003 fdf4 	bl	8005e50 <HAL_TIMEx_MasterConfigSynchronization>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800226e:	f7ff fbf9 	bl	8001a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002272:	2360      	movs	r3, #96	@ 0x60
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1;
 8002276:	2301      	movs	r3, #1
 8002278:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800227a:	2300      	movs	r3, #0
 800227c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800227e:	2300      	movs	r3, #0
 8002280:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002282:	2304      	movs	r3, #4
 8002284:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800228e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002292:	2200      	movs	r2, #0
 8002294:	4619      	mov	r1, r3
 8002296:	4820      	ldr	r0, [pc, #128]	@ (8002318 <MX_TIM1_Init+0x16c>)
 8002298:	f002 ff3e 	bl	8005118 <HAL_TIM_PWM_ConfigChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80022a2:	f7ff fbdf 	bl	8001a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022aa:	2204      	movs	r2, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	481a      	ldr	r0, [pc, #104]	@ (8002318 <MX_TIM1_Init+0x16c>)
 80022b0:	f002 ff32 	bl	8005118 <HAL_TIM_PWM_ConfigChannel>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80022ba:	f7ff fbd3 	bl	8001a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022c2:	2208      	movs	r2, #8
 80022c4:	4619      	mov	r1, r3
 80022c6:	4814      	ldr	r0, [pc, #80]	@ (8002318 <MX_TIM1_Init+0x16c>)
 80022c8:	f002 ff26 	bl	8005118 <HAL_TIM_PWM_ConfigChannel>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80022d2:	f7ff fbc7 	bl	8001a64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	4619      	mov	r1, r3
 80022f8:	4807      	ldr	r0, [pc, #28]	@ (8002318 <MX_TIM1_Init+0x16c>)
 80022fa:	f003 fe17 	bl	8005f2c <HAL_TIMEx_ConfigBreakDeadTime>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8002304:	f7ff fbae 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002308:	4803      	ldr	r0, [pc, #12]	@ (8002318 <MX_TIM1_Init+0x16c>)
 800230a:	f000 fbc9 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 800230e:	bf00      	nop
 8002310:	3758      	adds	r7, #88	@ 0x58
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000164 	.word	0x20000164
 800231c:	40010000 	.word	0x40010000

08002320 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08e      	sub	sp, #56	@ 0x38
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002326:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002334:	f107 0320 	add.w	r3, r7, #32
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
 800234c:	615a      	str	r2, [r3, #20]
 800234e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002350:	4b33      	ldr	r3, [pc, #204]	@ (8002420 <MX_TIM2_Init+0x100>)
 8002352:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002356:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8002358:	4b31      	ldr	r3, [pc, #196]	@ (8002420 <MX_TIM2_Init+0x100>)
 800235a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800235e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002360:	4b2f      	ldr	r3, [pc, #188]	@ (8002420 <MX_TIM2_Init+0x100>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002366:	4b2e      	ldr	r3, [pc, #184]	@ (8002420 <MX_TIM2_Init+0x100>)
 8002368:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800236c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236e:	4b2c      	ldr	r3, [pc, #176]	@ (8002420 <MX_TIM2_Init+0x100>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002374:	4b2a      	ldr	r3, [pc, #168]	@ (8002420 <MX_TIM2_Init+0x100>)
 8002376:	2200      	movs	r2, #0
 8002378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800237a:	4829      	ldr	r0, [pc, #164]	@ (8002420 <MX_TIM2_Init+0x100>)
 800237c:	f002 f98e 	bl	800469c <HAL_TIM_Base_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002386:	f7ff fb6d 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800238a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800238e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002390:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002394:	4619      	mov	r1, r3
 8002396:	4822      	ldr	r0, [pc, #136]	@ (8002420 <MX_TIM2_Init+0x100>)
 8002398:	f002 ff80 	bl	800529c <HAL_TIM_ConfigClockSource>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80023a2:	f7ff fb5f 	bl	8001a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80023a6:	481e      	ldr	r0, [pc, #120]	@ (8002420 <MX_TIM2_Init+0x100>)
 80023a8:	f002 fa2a 	bl	8004800 <HAL_TIM_PWM_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80023b2:	f7ff fb57 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023be:	f107 0320 	add.w	r3, r7, #32
 80023c2:	4619      	mov	r1, r3
 80023c4:	4816      	ldr	r0, [pc, #88]	@ (8002420 <MX_TIM2_Init+0x100>)
 80023c6:	f003 fd43 	bl	8005e50 <HAL_TIMEx_MasterConfigSynchronization>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80023d0:	f7ff fb48 	bl	8001a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d4:	2360      	movs	r3, #96	@ 0x60
 80023d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	2200      	movs	r2, #0
 80023e8:	4619      	mov	r1, r3
 80023ea:	480d      	ldr	r0, [pc, #52]	@ (8002420 <MX_TIM2_Init+0x100>)
 80023ec:	f002 fe94 	bl	8005118 <HAL_TIM_PWM_ConfigChannel>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80023f6:	f7ff fb35 	bl	8001a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	2204      	movs	r2, #4
 80023fe:	4619      	mov	r1, r3
 8002400:	4807      	ldr	r0, [pc, #28]	@ (8002420 <MX_TIM2_Init+0x100>)
 8002402:	f002 fe89 	bl	8005118 <HAL_TIM_PWM_ConfigChannel>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800240c:	f7ff fb2a 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002410:	4803      	ldr	r0, [pc, #12]	@ (8002420 <MX_TIM2_Init+0x100>)
 8002412:	f000 fb45 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 8002416:	bf00      	nop
 8002418:	3738      	adds	r7, #56	@ 0x38
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200001ac 	.word	0x200001ac

08002424 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	@ 0x28
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800242a:	f107 0318 	add.w	r3, r7, #24
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002438:	f107 0310 	add.w	r3, r7, #16
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002442:	463b      	mov	r3, r7
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800244e:	4b42      	ldr	r3, [pc, #264]	@ (8002558 <MX_TIM3_Init+0x134>)
 8002450:	4a42      	ldr	r2, [pc, #264]	@ (800255c <MX_TIM3_Init+0x138>)
 8002452:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8002454:	4b40      	ldr	r3, [pc, #256]	@ (8002558 <MX_TIM3_Init+0x134>)
 8002456:	2263      	movs	r2, #99	@ 0x63
 8002458:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245a:	4b3f      	ldr	r3, [pc, #252]	@ (8002558 <MX_TIM3_Init+0x134>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002460:	4b3d      	ldr	r3, [pc, #244]	@ (8002558 <MX_TIM3_Init+0x134>)
 8002462:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002466:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002468:	4b3b      	ldr	r3, [pc, #236]	@ (8002558 <MX_TIM3_Init+0x134>)
 800246a:	2200      	movs	r2, #0
 800246c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246e:	4b3a      	ldr	r3, [pc, #232]	@ (8002558 <MX_TIM3_Init+0x134>)
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002474:	4838      	ldr	r0, [pc, #224]	@ (8002558 <MX_TIM3_Init+0x134>)
 8002476:	f002 f911 	bl	800469c <HAL_TIM_Base_Init>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002480:	f7ff faf0 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002484:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002488:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800248a:	f107 0318 	add.w	r3, r7, #24
 800248e:	4619      	mov	r1, r3
 8002490:	4831      	ldr	r0, [pc, #196]	@ (8002558 <MX_TIM3_Init+0x134>)
 8002492:	f002 ff03 	bl	800529c <HAL_TIM_ConfigClockSource>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800249c:	f7ff fae2 	bl	8001a64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80024a0:	482d      	ldr	r0, [pc, #180]	@ (8002558 <MX_TIM3_Init+0x134>)
 80024a2:	f002 fab7 	bl	8004a14 <HAL_TIM_IC_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80024ac:	f7ff fada 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	4619      	mov	r1, r3
 80024be:	4826      	ldr	r0, [pc, #152]	@ (8002558 <MX_TIM3_Init+0x134>)
 80024c0:	f003 fcc6 	bl	8005e50 <HAL_TIMEx_MasterConfigSynchronization>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80024ca:	f7ff facb 	bl	8001a64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024ce:	2300      	movs	r3, #0
 80024d0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024d2:	2301      	movs	r3, #1
 80024d4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80024de:	463b      	mov	r3, r7
 80024e0:	2200      	movs	r2, #0
 80024e2:	4619      	mov	r1, r3
 80024e4:	481c      	ldr	r0, [pc, #112]	@ (8002558 <MX_TIM3_Init+0x134>)
 80024e6:	f002 fd7b 	bl	8004fe0 <HAL_TIM_IC_ConfigChannel>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80024f0:	f7ff fab8 	bl	8001a64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80024f4:	2302      	movs	r3, #2
 80024f6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80024f8:	2302      	movs	r3, #2
 80024fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80024fc:	463b      	mov	r3, r7
 80024fe:	2204      	movs	r2, #4
 8002500:	4619      	mov	r1, r3
 8002502:	4815      	ldr	r0, [pc, #84]	@ (8002558 <MX_TIM3_Init+0x134>)
 8002504:	f002 fd6c 	bl	8004fe0 <HAL_TIM_IC_ConfigChannel>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800250e:	f7ff faa9 	bl	8001a64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002512:	2300      	movs	r3, #0
 8002514:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002516:	2301      	movs	r3, #1
 8002518:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800251a:	463b      	mov	r3, r7
 800251c:	2208      	movs	r2, #8
 800251e:	4619      	mov	r1, r3
 8002520:	480d      	ldr	r0, [pc, #52]	@ (8002558 <MX_TIM3_Init+0x134>)
 8002522:	f002 fd5d 	bl	8004fe0 <HAL_TIM_IC_ConfigChannel>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 800252c:	f7ff fa9a 	bl	8001a64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002530:	2302      	movs	r3, #2
 8002532:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002534:	2302      	movs	r3, #2
 8002536:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002538:	463b      	mov	r3, r7
 800253a:	220c      	movs	r2, #12
 800253c:	4619      	mov	r1, r3
 800253e:	4806      	ldr	r0, [pc, #24]	@ (8002558 <MX_TIM3_Init+0x134>)
 8002540:	f002 fd4e 	bl	8004fe0 <HAL_TIM_IC_ConfigChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 800254a:	f7ff fa8b 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	3728      	adds	r7, #40	@ 0x28
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200001f4 	.word	0x200001f4
 800255c:	40000400 	.word	0x40000400

08002560 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	@ 0x28
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002566:	f107 0318 	add.w	r3, r7, #24
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800257e:	463b      	mov	r3, r7
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800258a:	4b33      	ldr	r3, [pc, #204]	@ (8002658 <MX_TIM4_Init+0xf8>)
 800258c:	4a33      	ldr	r2, [pc, #204]	@ (800265c <MX_TIM4_Init+0xfc>)
 800258e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8002590:	4b31      	ldr	r3, [pc, #196]	@ (8002658 <MX_TIM4_Init+0xf8>)
 8002592:	2263      	movs	r2, #99	@ 0x63
 8002594:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002596:	4b30      	ldr	r3, [pc, #192]	@ (8002658 <MX_TIM4_Init+0xf8>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800259c:	4b2e      	ldr	r3, [pc, #184]	@ (8002658 <MX_TIM4_Init+0xf8>)
 800259e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002658 <MX_TIM4_Init+0xf8>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002658 <MX_TIM4_Init+0xf8>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025b0:	4829      	ldr	r0, [pc, #164]	@ (8002658 <MX_TIM4_Init+0xf8>)
 80025b2:	f002 f873 	bl	800469c <HAL_TIM_Base_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80025bc:	f7ff fa52 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025c4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025c6:	f107 0318 	add.w	r3, r7, #24
 80025ca:	4619      	mov	r1, r3
 80025cc:	4822      	ldr	r0, [pc, #136]	@ (8002658 <MX_TIM4_Init+0xf8>)
 80025ce:	f002 fe65 	bl	800529c <HAL_TIM_ConfigClockSource>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80025d8:	f7ff fa44 	bl	8001a64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80025dc:	481e      	ldr	r0, [pc, #120]	@ (8002658 <MX_TIM4_Init+0xf8>)
 80025de:	f002 fa19 	bl	8004a14 <HAL_TIM_IC_Init>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80025e8:	f7ff fa3c 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025f4:	f107 0310 	add.w	r3, r7, #16
 80025f8:	4619      	mov	r1, r3
 80025fa:	4817      	ldr	r0, [pc, #92]	@ (8002658 <MX_TIM4_Init+0xf8>)
 80025fc:	f003 fc28 	bl	8005e50 <HAL_TIMEx_MasterConfigSynchronization>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002606:	f7ff fa2d 	bl	8001a64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800260a:	2300      	movs	r3, #0
 800260c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800260e:	2301      	movs	r3, #1
 8002610:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800261a:	463b      	mov	r3, r7
 800261c:	2200      	movs	r2, #0
 800261e:	4619      	mov	r1, r3
 8002620:	480d      	ldr	r0, [pc, #52]	@ (8002658 <MX_TIM4_Init+0xf8>)
 8002622:	f002 fcdd 	bl	8004fe0 <HAL_TIM_IC_ConfigChannel>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800262c:	f7ff fa1a 	bl	8001a64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002630:	2302      	movs	r3, #2
 8002632:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002634:	2302      	movs	r3, #2
 8002636:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002638:	463b      	mov	r3, r7
 800263a:	2204      	movs	r2, #4
 800263c:	4619      	mov	r1, r3
 800263e:	4806      	ldr	r0, [pc, #24]	@ (8002658 <MX_TIM4_Init+0xf8>)
 8002640:	f002 fcce 	bl	8004fe0 <HAL_TIM_IC_ConfigChannel>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800264a:	f7ff fa0b 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800264e:	bf00      	nop
 8002650:	3728      	adds	r7, #40	@ 0x28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000023c 	.word	0x2000023c
 800265c:	40000800 	.word	0x40000800

08002660 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08e      	sub	sp, #56	@ 0x38
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a16      	ldr	r2, [pc, #88]	@ (80026d8 <HAL_TIM_Base_MspInit+0x78>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d116      	bne.n	80026b0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	623b      	str	r3, [r7, #32]
 8002686:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <HAL_TIM_Base_MspInit+0x7c>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268a:	4a14      	ldr	r2, [pc, #80]	@ (80026dc <HAL_TIM_Base_MspInit+0x7c>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6453      	str	r3, [r2, #68]	@ 0x44
 8002692:	4b12      	ldr	r3, [pc, #72]	@ (80026dc <HAL_TIM_Base_MspInit+0x7c>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	623b      	str	r3, [r7, #32]
 800269c:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	2105      	movs	r1, #5
 80026a2:	201a      	movs	r0, #26
 80026a4:	f000 fd66 	bl	8003174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80026a8:	201a      	movs	r0, #26
 80026aa:	f000 fd7f 	bl	80031ac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80026ae:	e1e5      	b.n	8002a7c <HAL_TIM_Base_MspInit+0x41c>
  else if(tim_baseHandle->Instance==TIM2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026b8:	d112      	bne.n	80026e0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	4b07      	ldr	r3, [pc, #28]	@ (80026dc <HAL_TIM_Base_MspInit+0x7c>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	4a06      	ldr	r2, [pc, #24]	@ (80026dc <HAL_TIM_Base_MspInit+0x7c>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ca:	4b04      	ldr	r3, [pc, #16]	@ (80026dc <HAL_TIM_Base_MspInit+0x7c>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	69fb      	ldr	r3, [r7, #28]
}
 80026d6:	e1d1      	b.n	8002a7c <HAL_TIM_Base_MspInit+0x41c>
 80026d8:	40010000 	.word	0x40010000
 80026dc:	40023800 	.word	0x40023800
  else if(tim_baseHandle->Instance==TIM3)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a8f      	ldr	r2, [pc, #572]	@ (8002924 <HAL_TIM_Base_MspInit+0x2c4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	f040 8134 	bne.w	8002954 <HAL_TIM_Base_MspInit+0x2f4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026ec:	2300      	movs	r3, #0
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	4b8d      	ldr	r3, [pc, #564]	@ (8002928 <HAL_TIM_Base_MspInit+0x2c8>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	4a8c      	ldr	r2, [pc, #560]	@ (8002928 <HAL_TIM_Base_MspInit+0x2c8>)
 80026f6:	f043 0302 	orr.w	r3, r3, #2
 80026fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80026fc:	4b8a      	ldr	r3, [pc, #552]	@ (8002928 <HAL_TIM_Base_MspInit+0x2c8>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	4b86      	ldr	r3, [pc, #536]	@ (8002928 <HAL_TIM_Base_MspInit+0x2c8>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	4a85      	ldr	r2, [pc, #532]	@ (8002928 <HAL_TIM_Base_MspInit+0x2c8>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6313      	str	r3, [r2, #48]	@ 0x30
 8002718:	4b83      	ldr	r3, [pc, #524]	@ (8002928 <HAL_TIM_Base_MspInit+0x2c8>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	4b7f      	ldr	r3, [pc, #508]	@ (8002928 <HAL_TIM_Base_MspInit+0x2c8>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272c:	4a7e      	ldr	r2, [pc, #504]	@ (8002928 <HAL_TIM_Base_MspInit+0x2c8>)
 800272e:	f043 0302 	orr.w	r3, r3, #2
 8002732:	6313      	str	r3, [r2, #48]	@ 0x30
 8002734:	4b7c      	ldr	r3, [pc, #496]	@ (8002928 <HAL_TIM_Base_MspInit+0x2c8>)
 8002736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_LEFT_Pin;
 8002740:	2340      	movs	r3, #64	@ 0x40
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274c:	2303      	movs	r3, #3
 800274e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002750:	2302      	movs	r3, #2
 8002752:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ECHO_LEFT_GPIO_Port, &GPIO_InitStruct);
 8002754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002758:	4619      	mov	r1, r3
 800275a:	4874      	ldr	r0, [pc, #464]	@ (800292c <HAL_TIM_Base_MspInit+0x2cc>)
 800275c:	f001 f936 	bl	80039cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ECHO_CENTER_Pin;
 8002760:	2301      	movs	r3, #1
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276c:	2303      	movs	r3, #3
 800276e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002770:	2302      	movs	r3, #2
 8002772:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ECHO_CENTER_GPIO_Port, &GPIO_InitStruct);
 8002774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002778:	4619      	mov	r1, r3
 800277a:	486d      	ldr	r0, [pc, #436]	@ (8002930 <HAL_TIM_Base_MspInit+0x2d0>)
 800277c:	f001 f926 	bl	80039cc <HAL_GPIO_Init>
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8002780:	4b6c      	ldr	r3, [pc, #432]	@ (8002934 <HAL_TIM_Base_MspInit+0x2d4>)
 8002782:	4a6d      	ldr	r2, [pc, #436]	@ (8002938 <HAL_TIM_Base_MspInit+0x2d8>)
 8002784:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002786:	4b6b      	ldr	r3, [pc, #428]	@ (8002934 <HAL_TIM_Base_MspInit+0x2d4>)
 8002788:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800278c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800278e:	4b69      	ldr	r3, [pc, #420]	@ (8002934 <HAL_TIM_Base_MspInit+0x2d4>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002794:	4b67      	ldr	r3, [pc, #412]	@ (8002934 <HAL_TIM_Base_MspInit+0x2d4>)
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800279a:	4b66      	ldr	r3, [pc, #408]	@ (8002934 <HAL_TIM_Base_MspInit+0x2d4>)
 800279c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027a0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027a2:	4b64      	ldr	r3, [pc, #400]	@ (8002934 <HAL_TIM_Base_MspInit+0x2d4>)
 80027a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027a8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027aa:	4b62      	ldr	r3, [pc, #392]	@ (8002934 <HAL_TIM_Base_MspInit+0x2d4>)
 80027ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027b0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 80027b2:	4b60      	ldr	r3, [pc, #384]	@ (8002934 <HAL_TIM_Base_MspInit+0x2d4>)
 80027b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027b8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80027ba:	4b5e      	ldr	r3, [pc, #376]	@ (8002934 <HAL_TIM_Base_MspInit+0x2d4>)
 80027bc:	2200      	movs	r2, #0
 80027be:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002934 <HAL_TIM_Base_MspInit+0x2d4>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80027c6:	485b      	ldr	r0, [pc, #364]	@ (8002934 <HAL_TIM_Base_MspInit+0x2d4>)
 80027c8:	f000 fcfe 	bl	80031c8 <HAL_DMA_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_TIM_Base_MspInit+0x176>
      Error_Handler();
 80027d2:	f7ff f947 	bl	8001a64 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a56      	ldr	r2, [pc, #344]	@ (8002934 <HAL_TIM_Base_MspInit+0x2d4>)
 80027da:	625a      	str	r2, [r3, #36]	@ 0x24
 80027dc:	4a55      	ldr	r2, [pc, #340]	@ (8002934 <HAL_TIM_Base_MspInit+0x2d4>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a53      	ldr	r2, [pc, #332]	@ (8002934 <HAL_TIM_Base_MspInit+0x2d4>)
 80027e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80027e8:	4a52      	ldr	r2, [pc, #328]	@ (8002934 <HAL_TIM_Base_MspInit+0x2d4>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 80027ee:	4b53      	ldr	r3, [pc, #332]	@ (800293c <HAL_TIM_Base_MspInit+0x2dc>)
 80027f0:	4a53      	ldr	r2, [pc, #332]	@ (8002940 <HAL_TIM_Base_MspInit+0x2e0>)
 80027f2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 80027f4:	4b51      	ldr	r3, [pc, #324]	@ (800293c <HAL_TIM_Base_MspInit+0x2dc>)
 80027f6:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80027fa:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027fc:	4b4f      	ldr	r3, [pc, #316]	@ (800293c <HAL_TIM_Base_MspInit+0x2dc>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002802:	4b4e      	ldr	r3, [pc, #312]	@ (800293c <HAL_TIM_Base_MspInit+0x2dc>)
 8002804:	2200      	movs	r2, #0
 8002806:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002808:	4b4c      	ldr	r3, [pc, #304]	@ (800293c <HAL_TIM_Base_MspInit+0x2dc>)
 800280a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800280e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002810:	4b4a      	ldr	r3, [pc, #296]	@ (800293c <HAL_TIM_Base_MspInit+0x2dc>)
 8002812:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002816:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002818:	4b48      	ldr	r3, [pc, #288]	@ (800293c <HAL_TIM_Base_MspInit+0x2dc>)
 800281a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800281e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8002820:	4b46      	ldr	r3, [pc, #280]	@ (800293c <HAL_TIM_Base_MspInit+0x2dc>)
 8002822:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002826:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002828:	4b44      	ldr	r3, [pc, #272]	@ (800293c <HAL_TIM_Base_MspInit+0x2dc>)
 800282a:	2200      	movs	r2, #0
 800282c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800282e:	4b43      	ldr	r3, [pc, #268]	@ (800293c <HAL_TIM_Base_MspInit+0x2dc>)
 8002830:	2200      	movs	r2, #0
 8002832:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002834:	4841      	ldr	r0, [pc, #260]	@ (800293c <HAL_TIM_Base_MspInit+0x2dc>)
 8002836:	f000 fcc7 	bl	80031c8 <HAL_DMA_Init>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_TIM_Base_MspInit+0x1e4>
      Error_Handler();
 8002840:	f7ff f910 	bl	8001a64 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a3d      	ldr	r2, [pc, #244]	@ (800293c <HAL_TIM_Base_MspInit+0x2dc>)
 8002848:	629a      	str	r2, [r3, #40]	@ 0x28
 800284a:	4a3c      	ldr	r2, [pc, #240]	@ (800293c <HAL_TIM_Base_MspInit+0x2dc>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 8002850:	4b3c      	ldr	r3, [pc, #240]	@ (8002944 <HAL_TIM_Base_MspInit+0x2e4>)
 8002852:	4a3d      	ldr	r2, [pc, #244]	@ (8002948 <HAL_TIM_Base_MspInit+0x2e8>)
 8002854:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 8002856:	4b3b      	ldr	r3, [pc, #236]	@ (8002944 <HAL_TIM_Base_MspInit+0x2e4>)
 8002858:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800285c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800285e:	4b39      	ldr	r3, [pc, #228]	@ (8002944 <HAL_TIM_Base_MspInit+0x2e4>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002864:	4b37      	ldr	r3, [pc, #220]	@ (8002944 <HAL_TIM_Base_MspInit+0x2e4>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800286a:	4b36      	ldr	r3, [pc, #216]	@ (8002944 <HAL_TIM_Base_MspInit+0x2e4>)
 800286c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002870:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002872:	4b34      	ldr	r3, [pc, #208]	@ (8002944 <HAL_TIM_Base_MspInit+0x2e4>)
 8002874:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002878:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800287a:	4b32      	ldr	r3, [pc, #200]	@ (8002944 <HAL_TIM_Base_MspInit+0x2e4>)
 800287c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002880:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8002882:	4b30      	ldr	r3, [pc, #192]	@ (8002944 <HAL_TIM_Base_MspInit+0x2e4>)
 8002884:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002888:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800288a:	4b2e      	ldr	r3, [pc, #184]	@ (8002944 <HAL_TIM_Base_MspInit+0x2e4>)
 800288c:	2200      	movs	r2, #0
 800288e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002890:	4b2c      	ldr	r3, [pc, #176]	@ (8002944 <HAL_TIM_Base_MspInit+0x2e4>)
 8002892:	2200      	movs	r2, #0
 8002894:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8002896:	482b      	ldr	r0, [pc, #172]	@ (8002944 <HAL_TIM_Base_MspInit+0x2e4>)
 8002898:	f000 fc96 	bl	80031c8 <HAL_DMA_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_TIM_Base_MspInit+0x246>
      Error_Handler();
 80028a2:	f7ff f8df 	bl	8001a64 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a26      	ldr	r2, [pc, #152]	@ (8002944 <HAL_TIM_Base_MspInit+0x2e4>)
 80028aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028ac:	4a25      	ldr	r2, [pc, #148]	@ (8002944 <HAL_TIM_Base_MspInit+0x2e4>)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 80028b2:	4b26      	ldr	r3, [pc, #152]	@ (800294c <HAL_TIM_Base_MspInit+0x2ec>)
 80028b4:	4a26      	ldr	r2, [pc, #152]	@ (8002950 <HAL_TIM_Base_MspInit+0x2f0>)
 80028b6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 80028b8:	4b24      	ldr	r3, [pc, #144]	@ (800294c <HAL_TIM_Base_MspInit+0x2ec>)
 80028ba:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80028be:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028c0:	4b22      	ldr	r3, [pc, #136]	@ (800294c <HAL_TIM_Base_MspInit+0x2ec>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c6:	4b21      	ldr	r3, [pc, #132]	@ (800294c <HAL_TIM_Base_MspInit+0x2ec>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80028cc:	4b1f      	ldr	r3, [pc, #124]	@ (800294c <HAL_TIM_Base_MspInit+0x2ec>)
 80028ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028d2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028d4:	4b1d      	ldr	r3, [pc, #116]	@ (800294c <HAL_TIM_Base_MspInit+0x2ec>)
 80028d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028da:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <HAL_TIM_Base_MspInit+0x2ec>)
 80028de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028e2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 80028e4:	4b19      	ldr	r3, [pc, #100]	@ (800294c <HAL_TIM_Base_MspInit+0x2ec>)
 80028e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028ea:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 80028ec:	4b17      	ldr	r3, [pc, #92]	@ (800294c <HAL_TIM_Base_MspInit+0x2ec>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028f2:	4b16      	ldr	r3, [pc, #88]	@ (800294c <HAL_TIM_Base_MspInit+0x2ec>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80028f8:	4814      	ldr	r0, [pc, #80]	@ (800294c <HAL_TIM_Base_MspInit+0x2ec>)
 80028fa:	f000 fc65 	bl	80031c8 <HAL_DMA_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_TIM_Base_MspInit+0x2a8>
      Error_Handler();
 8002904:	f7ff f8ae 	bl	8001a64 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a10      	ldr	r2, [pc, #64]	@ (800294c <HAL_TIM_Base_MspInit+0x2ec>)
 800290c:	631a      	str	r2, [r3, #48]	@ 0x30
 800290e:	4a0f      	ldr	r2, [pc, #60]	@ (800294c <HAL_TIM_Base_MspInit+0x2ec>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a0d      	ldr	r2, [pc, #52]	@ (800294c <HAL_TIM_Base_MspInit+0x2ec>)
 8002918:	621a      	str	r2, [r3, #32]
 800291a:	4a0c      	ldr	r2, [pc, #48]	@ (800294c <HAL_TIM_Base_MspInit+0x2ec>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002920:	e0ac      	b.n	8002a7c <HAL_TIM_Base_MspInit+0x41c>
 8002922:	bf00      	nop
 8002924:	40000400 	.word	0x40000400
 8002928:	40023800 	.word	0x40023800
 800292c:	40020000 	.word	0x40020000
 8002930:	40020400 	.word	0x40020400
 8002934:	20000284 	.word	0x20000284
 8002938:	40026070 	.word	0x40026070
 800293c:	200002e4 	.word	0x200002e4
 8002940:	40026088 	.word	0x40026088
 8002944:	20000344 	.word	0x20000344
 8002948:	400260b8 	.word	0x400260b8
 800294c:	200003a4 	.word	0x200003a4
 8002950:	40026040 	.word	0x40026040
  else if(tim_baseHandle->Instance==TIM4)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a4a      	ldr	r2, [pc, #296]	@ (8002a84 <HAL_TIM_Base_MspInit+0x424>)
 800295a:	4293      	cmp	r3, r2
 800295c:	f040 808e 	bne.w	8002a7c <HAL_TIM_Base_MspInit+0x41c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	4b48      	ldr	r3, [pc, #288]	@ (8002a88 <HAL_TIM_Base_MspInit+0x428>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	4a47      	ldr	r2, [pc, #284]	@ (8002a88 <HAL_TIM_Base_MspInit+0x428>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002970:	4b45      	ldr	r3, [pc, #276]	@ (8002a88 <HAL_TIM_Base_MspInit+0x428>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	4b41      	ldr	r3, [pc, #260]	@ (8002a88 <HAL_TIM_Base_MspInit+0x428>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002984:	4a40      	ldr	r2, [pc, #256]	@ (8002a88 <HAL_TIM_Base_MspInit+0x428>)
 8002986:	f043 0302 	orr.w	r3, r3, #2
 800298a:	6313      	str	r3, [r2, #48]	@ 0x30
 800298c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a88 <HAL_TIM_Base_MspInit+0x428>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECHO_RIGHT_Pin;
 8002998:	2340      	movs	r3, #64	@ 0x40
 800299a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029a8:	2302      	movs	r3, #2
 80029aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ECHO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80029ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b0:	4619      	mov	r1, r3
 80029b2:	4836      	ldr	r0, [pc, #216]	@ (8002a8c <HAL_TIM_Base_MspInit+0x42c>)
 80029b4:	f001 f80a 	bl	80039cc <HAL_GPIO_Init>
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80029b8:	4b35      	ldr	r3, [pc, #212]	@ (8002a90 <HAL_TIM_Base_MspInit+0x430>)
 80029ba:	4a36      	ldr	r2, [pc, #216]	@ (8002a94 <HAL_TIM_Base_MspInit+0x434>)
 80029bc:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80029be:	4b34      	ldr	r3, [pc, #208]	@ (8002a90 <HAL_TIM_Base_MspInit+0x430>)
 80029c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80029c4:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029c6:	4b32      	ldr	r3, [pc, #200]	@ (8002a90 <HAL_TIM_Base_MspInit+0x430>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029cc:	4b30      	ldr	r3, [pc, #192]	@ (8002a90 <HAL_TIM_Base_MspInit+0x430>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80029d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002a90 <HAL_TIM_Base_MspInit+0x430>)
 80029d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029d8:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029da:	4b2d      	ldr	r3, [pc, #180]	@ (8002a90 <HAL_TIM_Base_MspInit+0x430>)
 80029dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029e0:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a90 <HAL_TIM_Base_MspInit+0x430>)
 80029e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029e8:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 80029ea:	4b29      	ldr	r3, [pc, #164]	@ (8002a90 <HAL_TIM_Base_MspInit+0x430>)
 80029ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029f0:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80029f2:	4b27      	ldr	r3, [pc, #156]	@ (8002a90 <HAL_TIM_Base_MspInit+0x430>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029f8:	4b25      	ldr	r3, [pc, #148]	@ (8002a90 <HAL_TIM_Base_MspInit+0x430>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80029fe:	4824      	ldr	r0, [pc, #144]	@ (8002a90 <HAL_TIM_Base_MspInit+0x430>)
 8002a00:	f000 fbe2 	bl	80031c8 <HAL_DMA_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_TIM_Base_MspInit+0x3ae>
      Error_Handler();
 8002a0a:	f7ff f82b 	bl	8001a64 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a1f      	ldr	r2, [pc, #124]	@ (8002a90 <HAL_TIM_Base_MspInit+0x430>)
 8002a12:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a14:	4a1e      	ldr	r2, [pc, #120]	@ (8002a90 <HAL_TIM_Base_MspInit+0x430>)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002a98 <HAL_TIM_Base_MspInit+0x438>)
 8002a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002a9c <HAL_TIM_Base_MspInit+0x43c>)
 8002a1e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8002a20:	4b1d      	ldr	r3, [pc, #116]	@ (8002a98 <HAL_TIM_Base_MspInit+0x438>)
 8002a22:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002a26:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a28:	4b1b      	ldr	r3, [pc, #108]	@ (8002a98 <HAL_TIM_Base_MspInit+0x438>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a98 <HAL_TIM_Base_MspInit+0x438>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002a34:	4b18      	ldr	r3, [pc, #96]	@ (8002a98 <HAL_TIM_Base_MspInit+0x438>)
 8002a36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a3a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a3c:	4b16      	ldr	r3, [pc, #88]	@ (8002a98 <HAL_TIM_Base_MspInit+0x438>)
 8002a3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a42:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a44:	4b14      	ldr	r3, [pc, #80]	@ (8002a98 <HAL_TIM_Base_MspInit+0x438>)
 8002a46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a4a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 8002a4c:	4b12      	ldr	r3, [pc, #72]	@ (8002a98 <HAL_TIM_Base_MspInit+0x438>)
 8002a4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a52:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002a54:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <HAL_TIM_Base_MspInit+0x438>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a98 <HAL_TIM_Base_MspInit+0x438>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8002a60:	480d      	ldr	r0, [pc, #52]	@ (8002a98 <HAL_TIM_Base_MspInit+0x438>)
 8002a62:	f000 fbb1 	bl	80031c8 <HAL_DMA_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_TIM_Base_MspInit+0x410>
      Error_Handler();
 8002a6c:	f7fe fffa 	bl	8001a64 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a09      	ldr	r2, [pc, #36]	@ (8002a98 <HAL_TIM_Base_MspInit+0x438>)
 8002a74:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a76:	4a08      	ldr	r2, [pc, #32]	@ (8002a98 <HAL_TIM_Base_MspInit+0x438>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002a7c:	bf00      	nop
 8002a7e:	3738      	adds	r7, #56	@ 0x38
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40000800 	.word	0x40000800
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40020400 	.word	0x40020400
 8002a90:	20000404 	.word	0x20000404
 8002a94:	40026010 	.word	0x40026010
 8002a98:	20000464 	.word	0x20000464
 8002a9c:	40026058 	.word	0x40026058

08002aa0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	@ 0x28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a24      	ldr	r2, [pc, #144]	@ (8002b50 <HAL_TIM_MspPostInit+0xb0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d11f      	bne.n	8002b02 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	4b23      	ldr	r3, [pc, #140]	@ (8002b54 <HAL_TIM_MspPostInit+0xb4>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	4a22      	ldr	r2, [pc, #136]	@ (8002b54 <HAL_TIM_MspPostInit+0xb4>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad2:	4b20      	ldr	r3, [pc, #128]	@ (8002b54 <HAL_TIM_MspPostInit+0xb4>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TRIG_LEFT_Pin|TRIG_CENTER_Pin|TRIG_RIGHT_Pin;
 8002ade:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aec:	2303      	movs	r3, #3
 8002aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002af0:	2301      	movs	r3, #1
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	4619      	mov	r1, r3
 8002afa:	4817      	ldr	r0, [pc, #92]	@ (8002b58 <HAL_TIM_MspPostInit+0xb8>)
 8002afc:	f000 ff66 	bl	80039cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002b00:	e022      	b.n	8002b48 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b0a:	d11d      	bne.n	8002b48 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	4b10      	ldr	r3, [pc, #64]	@ (8002b54 <HAL_TIM_MspPostInit+0xb4>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b14:	4a0f      	ldr	r2, [pc, #60]	@ (8002b54 <HAL_TIM_MspPostInit+0xb4>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b54 <HAL_TIM_MspPostInit+0xb4>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = out_pwmMotor_A_Pin|out_pwmMotor_B_Pin;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b34:	2302      	movs	r3, #2
 8002b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	4619      	mov	r1, r3
 8002b42:	4805      	ldr	r0, [pc, #20]	@ (8002b58 <HAL_TIM_MspPostInit+0xb8>)
 8002b44:	f000 ff42 	bl	80039cc <HAL_GPIO_Init>
}
 8002b48:	bf00      	nop
 8002b4a:	3728      	adds	r7, #40	@ 0x28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020000 	.word	0x40020000

08002b5c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 0 */
extern void RCcar_analogStick(uint8_t x, uint8_t y);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	// Android arduino bluetooth controller app
	if (huart == &huart_bluetooth)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a52      	ldr	r2, [pc, #328]	@ (8002cb0 <HAL_UART_RxCpltCallback+0x154>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	f040 809c 	bne.w	8002ca6 <HAL_UART_RxCpltCallback+0x14a>
	{
		switch (rxChar)
 8002b6e:	4b51      	ldr	r3, [pc, #324]	@ (8002cb4 <HAL_UART_RxCpltCallback+0x158>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	3b30      	subs	r3, #48	@ 0x30
 8002b74:	2b25      	cmp	r3, #37	@ 0x25
 8002b76:	f200 8096 	bhi.w	8002ca6 <HAL_UART_RxCpltCallback+0x14a>
 8002b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b80 <HAL_UART_RxCpltCallback+0x24>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002c5b 	.word	0x08002c5b
 8002b84:	08002ca7 	.word	0x08002ca7
 8002b88:	08002ca7 	.word	0x08002ca7
 8002b8c:	08002ca7 	.word	0x08002ca7
 8002b90:	08002ca7 	.word	0x08002ca7
 8002b94:	08002ca7 	.word	0x08002ca7
 8002b98:	08002ca7 	.word	0x08002ca7
 8002b9c:	08002ca7 	.word	0x08002ca7
 8002ba0:	08002ca7 	.word	0x08002ca7
 8002ba4:	08002ca7 	.word	0x08002ca7
 8002ba8:	08002ca7 	.word	0x08002ca7
 8002bac:	08002ca7 	.word	0x08002ca7
 8002bb0:	08002ca7 	.word	0x08002ca7
 8002bb4:	08002ca7 	.word	0x08002ca7
 8002bb8:	08002ca7 	.word	0x08002ca7
 8002bbc:	08002ca7 	.word	0x08002ca7
 8002bc0:	08002ca7 	.word	0x08002ca7
 8002bc4:	08002c39 	.word	0x08002c39
 8002bc8:	08002c8d 	.word	0x08002c8d
 8002bcc:	08002ca7 	.word	0x08002ca7
 8002bd0:	08002c75 	.word	0x08002c75
 8002bd4:	08002ca7 	.word	0x08002ca7
 8002bd8:	08002c81 	.word	0x08002c81
 8002bdc:	08002ca7 	.word	0x08002ca7
 8002be0:	08002ca7 	.word	0x08002ca7
 8002be4:	08002ca7 	.word	0x08002ca7
 8002be8:	08002ca7 	.word	0x08002ca7
 8002bec:	08002ca7 	.word	0x08002ca7
 8002bf0:	08002c19 	.word	0x08002c19
 8002bf4:	08002ca7 	.word	0x08002ca7
 8002bf8:	08002ca7 	.word	0x08002ca7
 8002bfc:	08002ca7 	.word	0x08002ca7
 8002c00:	08002ca7 	.word	0x08002ca7
 8002c04:	08002ca7 	.word	0x08002ca7
 8002c08:	08002c29 	.word	0x08002c29
 8002c0c:	08002ca7 	.word	0x08002ca7
 8002c10:	08002ca7 	.word	0x08002ca7
 8002c14:	08002c69 	.word	0x08002c69
		case 'B':
			if (!mode_auto_manu) RCcar_go_backward(100);
			break;
		*/
		case 'L':
			if (!mode_auto_manu) RCcar_go_soft_left(100);
 8002c18:	4b27      	ldr	r3, [pc, #156]	@ (8002cb8 <HAL_UART_RxCpltCallback+0x15c>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d13b      	bne.n	8002c98 <HAL_UART_RxCpltCallback+0x13c>
 8002c20:	2064      	movs	r0, #100	@ 0x64
 8002c22:	f7ff f86f 	bl	8001d04 <RCcar_go_soft_left>
			break;
 8002c26:	e037      	b.n	8002c98 <HAL_UART_RxCpltCallback+0x13c>
		case 'R':
			if (!mode_auto_manu) RCcar_go_soft_right(100);
 8002c28:	4b23      	ldr	r3, [pc, #140]	@ (8002cb8 <HAL_UART_RxCpltCallback+0x15c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d135      	bne.n	8002c9c <HAL_UART_RxCpltCallback+0x140>
 8002c30:	2064      	movs	r0, #100	@ 0x64
 8002c32:	f7ff f899 	bl	8001d68 <RCcar_go_soft_right>
			break;
 8002c36:	e031      	b.n	8002c9c <HAL_UART_RxCpltCallback+0x140>
		case 'A':
			mode_auto_manu = !mode_auto_manu;
 8002c38:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb8 <HAL_UART_RxCpltCallback+0x15c>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <HAL_UART_RxCpltCallback+0x15c>)
 8002c4a:	701a      	strb	r2, [r3, #0]
			if (!mode_auto_manu) RCcar_stop();
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb8 <HAL_UART_RxCpltCallback+0x15c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d125      	bne.n	8002ca0 <HAL_UART_RxCpltCallback+0x144>
 8002c54:	f7ff f8ba 	bl	8001dcc <RCcar_stop>
			break;
 8002c58:	e022      	b.n	8002ca0 <HAL_UART_RxCpltCallback+0x144>
		case '0':
			if (!mode_auto_manu) RCcar_stop();
 8002c5a:	4b17      	ldr	r3, [pc, #92]	@ (8002cb8 <HAL_UART_RxCpltCallback+0x15c>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d120      	bne.n	8002ca4 <HAL_UART_RxCpltCallback+0x148>
 8002c62:	f7ff f8b3 	bl	8001dcc <RCcar_stop>
			break;
 8002c66:	e01d      	b.n	8002ca4 <HAL_UART_RxCpltCallback+0x148>
		case 'U':
			++right_motor_duty_int;
 8002c68:	4b14      	ldr	r3, [pc, #80]	@ (8002cbc <HAL_UART_RxCpltCallback+0x160>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	4a13      	ldr	r2, [pc, #76]	@ (8002cbc <HAL_UART_RxCpltCallback+0x160>)
 8002c70:	6013      	str	r3, [r2, #0]
			break;
 8002c72:	e018      	b.n	8002ca6 <HAL_UART_RxCpltCallback+0x14a>
		case 'D':
			--right_motor_duty_int;
 8002c74:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <HAL_UART_RxCpltCallback+0x160>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	4a10      	ldr	r2, [pc, #64]	@ (8002cbc <HAL_UART_RxCpltCallback+0x160>)
 8002c7c:	6013      	str	r3, [r2, #0]
			break;
 8002c7e:	e012      	b.n	8002ca6 <HAL_UART_RxCpltCallback+0x14a>
		case 'F':
			++left_motor_duty_int;
 8002c80:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc0 <HAL_UART_RxCpltCallback+0x164>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3301      	adds	r3, #1
 8002c86:	4a0e      	ldr	r2, [pc, #56]	@ (8002cc0 <HAL_UART_RxCpltCallback+0x164>)
 8002c88:	6013      	str	r3, [r2, #0]
			break;
 8002c8a:	e00c      	b.n	8002ca6 <HAL_UART_RxCpltCallback+0x14a>
		case 'B':
			--left_motor_duty_int;
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <HAL_UART_RxCpltCallback+0x164>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc0 <HAL_UART_RxCpltCallback+0x164>)
 8002c94:	6013      	str	r3, [r2, #0]
			break;
 8002c96:	e006      	b.n	8002ca6 <HAL_UART_RxCpltCallback+0x14a>
			break;
 8002c98:	bf00      	nop
 8002c9a:	e004      	b.n	8002ca6 <HAL_UART_RxCpltCallback+0x14a>
			break;
 8002c9c:	bf00      	nop
 8002c9e:	e002      	b.n	8002ca6 <HAL_UART_RxCpltCallback+0x14a>
			break;
 8002ca0:	bf00      	nop
 8002ca2:	e000      	b.n	8002ca6 <HAL_UART_RxCpltCallback+0x14a>
			break;
 8002ca4:	bf00      	nop
		}
	}

}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200004c4 	.word	0x200004c4
 8002cb4:	200000b0 	.word	0x200000b0
 8002cb8:	200000c0 	.word	0x200000c0
 8002cbc:	20000110 	.word	0x20000110
 8002cc0:	2000010c 	.word	0x2000010c

08002cc4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002cca:	4a12      	ldr	r2, [pc, #72]	@ (8002d14 <MX_USART1_UART_Init+0x50>)
 8002ccc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002cce:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002cd0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002cd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ce8:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002cea:	220c      	movs	r2, #12
 8002cec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cee:	4b08      	ldr	r3, [pc, #32]	@ (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cf4:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cfa:	4805      	ldr	r0, [pc, #20]	@ (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002cfc:	f003 f97c 	bl	8005ff8 <HAL_UART_Init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d06:	f7fe fead 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200004c4 	.word	0x200004c4
 8002d14:	40011000 	.word	0x40011000

08002d18 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d1c:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <MX_USART2_UART_Init+0x4c>)
 8002d1e:	4a12      	ldr	r2, [pc, #72]	@ (8002d68 <MX_USART2_UART_Init+0x50>)
 8002d20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002d22:	4b10      	ldr	r3, [pc, #64]	@ (8002d64 <MX_USART2_UART_Init+0x4c>)
 8002d24:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002d28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d64 <MX_USART2_UART_Init+0x4c>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d30:	4b0c      	ldr	r3, [pc, #48]	@ (8002d64 <MX_USART2_UART_Init+0x4c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d36:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <MX_USART2_UART_Init+0x4c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d3c:	4b09      	ldr	r3, [pc, #36]	@ (8002d64 <MX_USART2_UART_Init+0x4c>)
 8002d3e:	220c      	movs	r2, #12
 8002d40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d42:	4b08      	ldr	r3, [pc, #32]	@ (8002d64 <MX_USART2_UART_Init+0x4c>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d48:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <MX_USART2_UART_Init+0x4c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d4e:	4805      	ldr	r0, [pc, #20]	@ (8002d64 <MX_USART2_UART_Init+0x4c>)
 8002d50:	f003 f952 	bl	8005ff8 <HAL_UART_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d5a:	f7fe fe83 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	2000050c 	.word	0x2000050c
 8002d68:	40004400 	.word	0x40004400

08002d6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08c      	sub	sp, #48	@ 0x30
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 031c 	add.w	r3, r7, #28
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a61      	ldr	r2, [pc, #388]	@ (8002f10 <HAL_UART_MspInit+0x1a4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	f040 8083 	bne.w	8002e96 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d90:	2300      	movs	r3, #0
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	4b5f      	ldr	r3, [pc, #380]	@ (8002f14 <HAL_UART_MspInit+0x1a8>)
 8002d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d98:	4a5e      	ldr	r2, [pc, #376]	@ (8002f14 <HAL_UART_MspInit+0x1a8>)
 8002d9a:	f043 0310 	orr.w	r3, r3, #16
 8002d9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002da0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f14 <HAL_UART_MspInit+0x1a8>)
 8002da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	4b58      	ldr	r3, [pc, #352]	@ (8002f14 <HAL_UART_MspInit+0x1a8>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db4:	4a57      	ldr	r2, [pc, #348]	@ (8002f14 <HAL_UART_MspInit+0x1a8>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dbc:	4b55      	ldr	r3, [pc, #340]	@ (8002f14 <HAL_UART_MspInit+0x1a8>)
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc8:	2300      	movs	r3, #0
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	4b51      	ldr	r3, [pc, #324]	@ (8002f14 <HAL_UART_MspInit+0x1a8>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd0:	4a50      	ldr	r2, [pc, #320]	@ (8002f14 <HAL_UART_MspInit+0x1a8>)
 8002dd2:	f043 0302 	orr.w	r3, r3, #2
 8002dd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd8:	4b4e      	ldr	r3, [pc, #312]	@ (8002f14 <HAL_UART_MspInit+0x1a8>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002de4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df2:	2303      	movs	r3, #3
 8002df4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002df6:	2307      	movs	r3, #7
 8002df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfa:	f107 031c 	add.w	r3, r7, #28
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4845      	ldr	r0, [pc, #276]	@ (8002f18 <HAL_UART_MspInit+0x1ac>)
 8002e02:	f000 fde3 	bl	80039cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e06:	2308      	movs	r3, #8
 8002e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e12:	2303      	movs	r3, #3
 8002e14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e16:	2307      	movs	r3, #7
 8002e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e1a:	f107 031c 	add.w	r3, r7, #28
 8002e1e:	4619      	mov	r1, r3
 8002e20:	483e      	ldr	r0, [pc, #248]	@ (8002f1c <HAL_UART_MspInit+0x1b0>)
 8002e22:	f000 fdd3 	bl	80039cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002e26:	4b3e      	ldr	r3, [pc, #248]	@ (8002f20 <HAL_UART_MspInit+0x1b4>)
 8002e28:	4a3e      	ldr	r2, [pc, #248]	@ (8002f24 <HAL_UART_MspInit+0x1b8>)
 8002e2a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8002f20 <HAL_UART_MspInit+0x1b4>)
 8002e2e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e32:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e34:	4b3a      	ldr	r3, [pc, #232]	@ (8002f20 <HAL_UART_MspInit+0x1b4>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e3a:	4b39      	ldr	r3, [pc, #228]	@ (8002f20 <HAL_UART_MspInit+0x1b4>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e40:	4b37      	ldr	r3, [pc, #220]	@ (8002f20 <HAL_UART_MspInit+0x1b4>)
 8002e42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e46:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e48:	4b35      	ldr	r3, [pc, #212]	@ (8002f20 <HAL_UART_MspInit+0x1b4>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e4e:	4b34      	ldr	r3, [pc, #208]	@ (8002f20 <HAL_UART_MspInit+0x1b4>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002e54:	4b32      	ldr	r3, [pc, #200]	@ (8002f20 <HAL_UART_MspInit+0x1b4>)
 8002e56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e5a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e5c:	4b30      	ldr	r3, [pc, #192]	@ (8002f20 <HAL_UART_MspInit+0x1b4>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e62:	4b2f      	ldr	r3, [pc, #188]	@ (8002f20 <HAL_UART_MspInit+0x1b4>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002e68:	482d      	ldr	r0, [pc, #180]	@ (8002f20 <HAL_UART_MspInit+0x1b4>)
 8002e6a:	f000 f9ad 	bl	80031c8 <HAL_DMA_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002e74:	f7fe fdf6 	bl	8001a64 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a29      	ldr	r2, [pc, #164]	@ (8002f20 <HAL_UART_MspInit+0x1b4>)
 8002e7c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e7e:	4a28      	ldr	r2, [pc, #160]	@ (8002f20 <HAL_UART_MspInit+0x1b4>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002e84:	2200      	movs	r2, #0
 8002e86:	2105      	movs	r1, #5
 8002e88:	2025      	movs	r0, #37	@ 0x25
 8002e8a:	f000 f973 	bl	8003174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e8e:	2025      	movs	r0, #37	@ 0x25
 8002e90:	f000 f98c 	bl	80031ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002e94:	e038      	b.n	8002f08 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART2)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a23      	ldr	r2, [pc, #140]	@ (8002f28 <HAL_UART_MspInit+0x1bc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d133      	bne.n	8002f08 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <HAL_UART_MspInit+0x1a8>)
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f14 <HAL_UART_MspInit+0x1a8>)
 8002eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eb0:	4b18      	ldr	r3, [pc, #96]	@ (8002f14 <HAL_UART_MspInit+0x1a8>)
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	4b14      	ldr	r3, [pc, #80]	@ (8002f14 <HAL_UART_MspInit+0x1a8>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	4a13      	ldr	r2, [pc, #76]	@ (8002f14 <HAL_UART_MspInit+0x1a8>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ecc:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <HAL_UART_MspInit+0x1a8>)
 8002ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ed8:	230c      	movs	r3, #12
 8002eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2302      	movs	r3, #2
 8002ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ee8:	2307      	movs	r3, #7
 8002eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eec:	f107 031c 	add.w	r3, r7, #28
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4809      	ldr	r0, [pc, #36]	@ (8002f18 <HAL_UART_MspInit+0x1ac>)
 8002ef4:	f000 fd6a 	bl	80039cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2105      	movs	r1, #5
 8002efc:	2026      	movs	r0, #38	@ 0x26
 8002efe:	f000 f939 	bl	8003174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f02:	2026      	movs	r0, #38	@ 0x26
 8002f04:	f000 f952 	bl	80031ac <HAL_NVIC_EnableIRQ>
}
 8002f08:	bf00      	nop
 8002f0a:	3730      	adds	r7, #48	@ 0x30
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40011000 	.word	0x40011000
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40020000 	.word	0x40020000
 8002f1c:	40020400 	.word	0x40020400
 8002f20:	20000554 	.word	0x20000554
 8002f24:	40026440 	.word	0x40026440
 8002f28:	40004400 	.word	0x40004400

08002f2c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8002f2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f30:	f7ff f92a 	bl	8002188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f34:	480c      	ldr	r0, [pc, #48]	@ (8002f68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f36:	490d      	ldr	r1, [pc, #52]	@ (8002f6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f38:	4a0d      	ldr	r2, [pc, #52]	@ (8002f70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f3c:	e002      	b.n	8002f44 <LoopCopyDataInit>

08002f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f42:	3304      	adds	r3, #4

08002f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f48:	d3f9      	bcc.n	8002f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002f78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f50:	e001      	b.n	8002f56 <LoopFillZerobss>

08002f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f54:	3204      	adds	r2, #4

08002f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f58:	d3fb      	bcc.n	8002f52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f5a:	f007 f9e7 	bl	800a32c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f5e:	f7fe fc93 	bl	8001888 <main>
  bx  lr    
 8002f62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002f70:	0800b024 	.word	0x0800b024
  ldr r2, =_sbss
 8002f74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002f78:	200050ec 	.word	0x200050ec

08002f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f7c:	e7fe      	b.n	8002f7c <ADC_IRQHandler>
	...

08002f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f84:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc0 <HAL_Init+0x40>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc0 <HAL_Init+0x40>)
 8002f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f90:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <HAL_Init+0x40>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc0 <HAL_Init+0x40>)
 8002f96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f9c:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <HAL_Init+0x40>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a07      	ldr	r2, [pc, #28]	@ (8002fc0 <HAL_Init+0x40>)
 8002fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa8:	2003      	movs	r0, #3
 8002faa:	f000 f8d8 	bl	800315e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fae:	2005      	movs	r0, #5
 8002fb0:	f7fe ff50 	bl	8001e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb4:	f7fe ff22 	bl	8001dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023c00 	.word	0x40023c00

08002fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fc8:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <HAL_IncTick+0x20>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <HAL_IncTick+0x24>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	4a04      	ldr	r2, [pc, #16]	@ (8002fe8 <HAL_IncTick+0x24>)
 8002fd6:	6013      	str	r3, [r2, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	2000000c 	.word	0x2000000c
 8002fe8:	200005b4 	.word	0x200005b4

08002fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff0:	4b03      	ldr	r3, [pc, #12]	@ (8003000 <HAL_GetTick+0x14>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	200005b4 	.word	0x200005b4

08003004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003014:	4b0c      	ldr	r3, [pc, #48]	@ (8003048 <__NVIC_SetPriorityGrouping+0x44>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003020:	4013      	ands	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800302c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003036:	4a04      	ldr	r2, [pc, #16]	@ (8003048 <__NVIC_SetPriorityGrouping+0x44>)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	60d3      	str	r3, [r2, #12]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003050:	4b04      	ldr	r3, [pc, #16]	@ (8003064 <__NVIC_GetPriorityGrouping+0x18>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	0a1b      	lsrs	r3, r3, #8
 8003056:	f003 0307 	and.w	r3, r3, #7
}
 800305a:	4618      	mov	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	2b00      	cmp	r3, #0
 8003078:	db0b      	blt.n	8003092 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	f003 021f 	and.w	r2, r3, #31
 8003080:	4907      	ldr	r1, [pc, #28]	@ (80030a0 <__NVIC_EnableIRQ+0x38>)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2001      	movs	r0, #1
 800308a:	fa00 f202 	lsl.w	r2, r0, r2
 800308e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	e000e100 	.word	0xe000e100

080030a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	6039      	str	r1, [r7, #0]
 80030ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	db0a      	blt.n	80030ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	490c      	ldr	r1, [pc, #48]	@ (80030f0 <__NVIC_SetPriority+0x4c>)
 80030be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c2:	0112      	lsls	r2, r2, #4
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	440b      	add	r3, r1
 80030c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030cc:	e00a      	b.n	80030e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4908      	ldr	r1, [pc, #32]	@ (80030f4 <__NVIC_SetPriority+0x50>)
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	3b04      	subs	r3, #4
 80030dc:	0112      	lsls	r2, r2, #4
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	440b      	add	r3, r1
 80030e2:	761a      	strb	r2, [r3, #24]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000e100 	.word	0xe000e100
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	@ 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f1c3 0307 	rsb	r3, r3, #7
 8003112:	2b04      	cmp	r3, #4
 8003114:	bf28      	it	cs
 8003116:	2304      	movcs	r3, #4
 8003118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3304      	adds	r3, #4
 800311e:	2b06      	cmp	r3, #6
 8003120:	d902      	bls.n	8003128 <NVIC_EncodePriority+0x30>
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3b03      	subs	r3, #3
 8003126:	e000      	b.n	800312a <NVIC_EncodePriority+0x32>
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	f04f 32ff 	mov.w	r2, #4294967295
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	401a      	ands	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003140:	f04f 31ff 	mov.w	r1, #4294967295
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	43d9      	mvns	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	4313      	orrs	r3, r2
         );
}
 8003152:	4618      	mov	r0, r3
 8003154:	3724      	adds	r7, #36	@ 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff ff4c 	bl	8003004 <__NVIC_SetPriorityGrouping>
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003186:	f7ff ff61 	bl	800304c <__NVIC_GetPriorityGrouping>
 800318a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	6978      	ldr	r0, [r7, #20]
 8003192:	f7ff ffb1 	bl	80030f8 <NVIC_EncodePriority>
 8003196:	4602      	mov	r2, r0
 8003198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff80 	bl	80030a4 <__NVIC_SetPriority>
}
 80031a4:	bf00      	nop
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff54 	bl	8003068 <__NVIC_EnableIRQ>
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031d4:	f7ff ff0a 	bl	8002fec <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e099      	b.n	8003318 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0201 	bic.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003204:	e00f      	b.n	8003226 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003206:	f7ff fef1 	bl	8002fec <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b05      	cmp	r3, #5
 8003212:	d908      	bls.n	8003226 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2203      	movs	r2, #3
 800321e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e078      	b.n	8003318 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e8      	bne.n	8003206 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4b38      	ldr	r3, [pc, #224]	@ (8003320 <HAL_DMA_Init+0x158>)
 8003240:	4013      	ands	r3, r2
 8003242:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003252:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800325e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800326a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	2b04      	cmp	r3, #4
 800327e:	d107      	bne.n	8003290 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003288:	4313      	orrs	r3, r2
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f023 0307 	bic.w	r3, r3, #7
 80032a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d117      	bne.n	80032ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00e      	beq.n	80032ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fb01 	bl	80038d4 <DMA_CheckFifoParam>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2240      	movs	r2, #64	@ 0x40
 80032dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80032e6:	2301      	movs	r3, #1
 80032e8:	e016      	b.n	8003318 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fab8 	bl	8003868 <DMA_CalcBaseAndBitshift>
 80032f8:	4603      	mov	r3, r0
 80032fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003300:	223f      	movs	r2, #63	@ 0x3f
 8003302:	409a      	lsls	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	f010803f 	.word	0xf010803f

08003324 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_DMA_Start_IT+0x26>
 8003346:	2302      	movs	r3, #2
 8003348:	e040      	b.n	80033cc <HAL_DMA_Start_IT+0xa8>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d12f      	bne.n	80033be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2202      	movs	r2, #2
 8003362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 fa4a 	bl	800380c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337c:	223f      	movs	r2, #63	@ 0x3f
 800337e:	409a      	lsls	r2, r3
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0216 	orr.w	r2, r2, #22
 8003392:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0208 	orr.w	r2, r2, #8
 80033aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e005      	b.n	80033ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033c6:	2302      	movs	r3, #2
 80033c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033e2:	f7ff fe03 	bl	8002fec <HAL_GetTick>
 80033e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d008      	beq.n	8003406 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2280      	movs	r2, #128	@ 0x80
 80033f8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e052      	b.n	80034ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0216 	bic.w	r2, r2, #22
 8003414:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003424:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d103      	bne.n	8003436 <HAL_DMA_Abort+0x62>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003432:	2b00      	cmp	r3, #0
 8003434:	d007      	beq.n	8003446 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0208 	bic.w	r2, r2, #8
 8003444:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0201 	bic.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003456:	e013      	b.n	8003480 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003458:	f7ff fdc8 	bl	8002fec <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b05      	cmp	r3, #5
 8003464:	d90c      	bls.n	8003480 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2203      	movs	r2, #3
 8003470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e015      	b.n	80034ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e4      	bne.n	8003458 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003492:	223f      	movs	r2, #63	@ 0x3f
 8003494:	409a      	lsls	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d004      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2280      	movs	r2, #128	@ 0x80
 80034cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e00c      	b.n	80034ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2205      	movs	r2, #5
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0201 	bic.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003504:	4b8e      	ldr	r3, [pc, #568]	@ (8003740 <HAL_DMA_IRQHandler+0x248>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a8e      	ldr	r2, [pc, #568]	@ (8003744 <HAL_DMA_IRQHandler+0x24c>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	0a9b      	lsrs	r3, r3, #10
 8003510:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003516:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003522:	2208      	movs	r2, #8
 8003524:	409a      	lsls	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d01a      	beq.n	8003564 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d013      	beq.n	8003564 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0204 	bic.w	r2, r2, #4
 800354a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003550:	2208      	movs	r2, #8
 8003552:	409a      	lsls	r2, r3
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355c:	f043 0201 	orr.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003568:	2201      	movs	r2, #1
 800356a:	409a      	lsls	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d012      	beq.n	800359a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00b      	beq.n	800359a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003586:	2201      	movs	r2, #1
 8003588:	409a      	lsls	r2, r3
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003592:	f043 0202 	orr.w	r2, r3, #2
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359e:	2204      	movs	r2, #4
 80035a0:	409a      	lsls	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d012      	beq.n	80035d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00b      	beq.n	80035d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035bc:	2204      	movs	r2, #4
 80035be:	409a      	lsls	r2, r3
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c8:	f043 0204 	orr.w	r2, r3, #4
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d4:	2210      	movs	r2, #16
 80035d6:	409a      	lsls	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d043      	beq.n	8003668 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d03c      	beq.n	8003668 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f2:	2210      	movs	r2, #16
 80035f4:	409a      	lsls	r2, r3
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d018      	beq.n	800363a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d108      	bne.n	8003628 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d024      	beq.n	8003668 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	4798      	blx	r3
 8003626:	e01f      	b.n	8003668 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01b      	beq.n	8003668 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4798      	blx	r3
 8003638:	e016      	b.n	8003668 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d107      	bne.n	8003658 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0208 	bic.w	r2, r2, #8
 8003656:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366c:	2220      	movs	r2, #32
 800366e:	409a      	lsls	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 808f 	beq.w	8003798 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8087 	beq.w	8003798 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368e:	2220      	movs	r2, #32
 8003690:	409a      	lsls	r2, r3
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b05      	cmp	r3, #5
 80036a0:	d136      	bne.n	8003710 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0216 	bic.w	r2, r2, #22
 80036b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d103      	bne.n	80036d2 <HAL_DMA_IRQHandler+0x1da>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d007      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0208 	bic.w	r2, r2, #8
 80036e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e6:	223f      	movs	r2, #63	@ 0x3f
 80036e8:	409a      	lsls	r2, r3
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003702:	2b00      	cmp	r3, #0
 8003704:	d07e      	beq.n	8003804 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
        }
        return;
 800370e:	e079      	b.n	8003804 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01d      	beq.n	800375a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10d      	bne.n	8003748 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003730:	2b00      	cmp	r3, #0
 8003732:	d031      	beq.n	8003798 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	4798      	blx	r3
 800373c:	e02c      	b.n	8003798 <HAL_DMA_IRQHandler+0x2a0>
 800373e:	bf00      	nop
 8003740:	20000004 	.word	0x20000004
 8003744:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d023      	beq.n	8003798 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
 8003758:	e01e      	b.n	8003798 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10f      	bne.n	8003788 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0210 	bic.w	r2, r2, #16
 8003776:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379c:	2b00      	cmp	r3, #0
 800379e:	d032      	beq.n	8003806 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d022      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2205      	movs	r2, #5
 80037b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	3301      	adds	r3, #1
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d307      	bcc.n	80037e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f2      	bne.n	80037c4 <HAL_DMA_IRQHandler+0x2cc>
 80037de:	e000      	b.n	80037e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	4798      	blx	r3
 8003802:	e000      	b.n	8003806 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003804:	bf00      	nop
    }
  }
}
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003828:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b40      	cmp	r3, #64	@ 0x40
 8003838:	d108      	bne.n	800384c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800384a:	e007      	b.n	800385c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	60da      	str	r2, [r3, #12]
}
 800385c:	bf00      	nop
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	3b10      	subs	r3, #16
 8003878:	4a14      	ldr	r2, [pc, #80]	@ (80038cc <DMA_CalcBaseAndBitshift+0x64>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003882:	4a13      	ldr	r2, [pc, #76]	@ (80038d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4413      	add	r3, r2
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b03      	cmp	r3, #3
 8003894:	d909      	bls.n	80038aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800389e:	f023 0303 	bic.w	r3, r3, #3
 80038a2:	1d1a      	adds	r2, r3, #4
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80038a8:	e007      	b.n	80038ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	aaaaaaab 	.word	0xaaaaaaab
 80038d0:	0800afd8 	.word	0x0800afd8

080038d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d11f      	bne.n	800392e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d856      	bhi.n	80039a2 <DMA_CheckFifoParam+0xce>
 80038f4:	a201      	add	r2, pc, #4	@ (adr r2, 80038fc <DMA_CheckFifoParam+0x28>)
 80038f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fa:	bf00      	nop
 80038fc:	0800390d 	.word	0x0800390d
 8003900:	0800391f 	.word	0x0800391f
 8003904:	0800390d 	.word	0x0800390d
 8003908:	080039a3 	.word	0x080039a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003910:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d046      	beq.n	80039a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800391c:	e043      	b.n	80039a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003922:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003926:	d140      	bne.n	80039aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800392c:	e03d      	b.n	80039aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003936:	d121      	bne.n	800397c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b03      	cmp	r3, #3
 800393c:	d837      	bhi.n	80039ae <DMA_CheckFifoParam+0xda>
 800393e:	a201      	add	r2, pc, #4	@ (adr r2, 8003944 <DMA_CheckFifoParam+0x70>)
 8003940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003944:	08003955 	.word	0x08003955
 8003948:	0800395b 	.word	0x0800395b
 800394c:	08003955 	.word	0x08003955
 8003950:	0800396d 	.word	0x0800396d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
      break;
 8003958:	e030      	b.n	80039bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d025      	beq.n	80039b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800396a:	e022      	b.n	80039b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003970:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003974:	d11f      	bne.n	80039b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800397a:	e01c      	b.n	80039b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d903      	bls.n	800398a <DMA_CheckFifoParam+0xb6>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d003      	beq.n	8003990 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003988:	e018      	b.n	80039bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
      break;
 800398e:	e015      	b.n	80039bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003994:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00e      	beq.n	80039ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
      break;
 80039a0:	e00b      	b.n	80039ba <DMA_CheckFifoParam+0xe6>
      break;
 80039a2:	bf00      	nop
 80039a4:	e00a      	b.n	80039bc <DMA_CheckFifoParam+0xe8>
      break;
 80039a6:	bf00      	nop
 80039a8:	e008      	b.n	80039bc <DMA_CheckFifoParam+0xe8>
      break;
 80039aa:	bf00      	nop
 80039ac:	e006      	b.n	80039bc <DMA_CheckFifoParam+0xe8>
      break;
 80039ae:	bf00      	nop
 80039b0:	e004      	b.n	80039bc <DMA_CheckFifoParam+0xe8>
      break;
 80039b2:	bf00      	nop
 80039b4:	e002      	b.n	80039bc <DMA_CheckFifoParam+0xe8>
      break;   
 80039b6:	bf00      	nop
 80039b8:	e000      	b.n	80039bc <DMA_CheckFifoParam+0xe8>
      break;
 80039ba:	bf00      	nop
    }
  } 
  
  return status; 
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop

080039cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b089      	sub	sp, #36	@ 0x24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039de:	2300      	movs	r3, #0
 80039e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	e159      	b.n	8003c9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039e8:	2201      	movs	r2, #1
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	f040 8148 	bne.w	8003c96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d005      	beq.n	8003a1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d130      	bne.n	8003a80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	2203      	movs	r2, #3
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a54:	2201      	movs	r2, #1
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	f003 0201 	and.w	r2, r3, #1
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d017      	beq.n	8003abc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	2203      	movs	r2, #3
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d123      	bne.n	8003b10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	08da      	lsrs	r2, r3, #3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3208      	adds	r2, #8
 8003ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	220f      	movs	r2, #15
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	08da      	lsrs	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3208      	adds	r2, #8
 8003b0a:	69b9      	ldr	r1, [r7, #24]
 8003b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 0203 	and.w	r2, r3, #3
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80a2 	beq.w	8003c96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	4b57      	ldr	r3, [pc, #348]	@ (8003cb4 <HAL_GPIO_Init+0x2e8>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5a:	4a56      	ldr	r2, [pc, #344]	@ (8003cb4 <HAL_GPIO_Init+0x2e8>)
 8003b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b62:	4b54      	ldr	r3, [pc, #336]	@ (8003cb4 <HAL_GPIO_Init+0x2e8>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b6e:	4a52      	ldr	r2, [pc, #328]	@ (8003cb8 <HAL_GPIO_Init+0x2ec>)
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	089b      	lsrs	r3, r3, #2
 8003b74:	3302      	adds	r3, #2
 8003b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	220f      	movs	r2, #15
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a49      	ldr	r2, [pc, #292]	@ (8003cbc <HAL_GPIO_Init+0x2f0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d019      	beq.n	8003bce <HAL_GPIO_Init+0x202>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a48      	ldr	r2, [pc, #288]	@ (8003cc0 <HAL_GPIO_Init+0x2f4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_GPIO_Init+0x1fe>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a47      	ldr	r2, [pc, #284]	@ (8003cc4 <HAL_GPIO_Init+0x2f8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00d      	beq.n	8003bc6 <HAL_GPIO_Init+0x1fa>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a46      	ldr	r2, [pc, #280]	@ (8003cc8 <HAL_GPIO_Init+0x2fc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d007      	beq.n	8003bc2 <HAL_GPIO_Init+0x1f6>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a45      	ldr	r2, [pc, #276]	@ (8003ccc <HAL_GPIO_Init+0x300>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d101      	bne.n	8003bbe <HAL_GPIO_Init+0x1f2>
 8003bba:	2304      	movs	r3, #4
 8003bbc:	e008      	b.n	8003bd0 <HAL_GPIO_Init+0x204>
 8003bbe:	2307      	movs	r3, #7
 8003bc0:	e006      	b.n	8003bd0 <HAL_GPIO_Init+0x204>
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e004      	b.n	8003bd0 <HAL_GPIO_Init+0x204>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e002      	b.n	8003bd0 <HAL_GPIO_Init+0x204>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <HAL_GPIO_Init+0x204>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	f002 0203 	and.w	r2, r2, #3
 8003bd6:	0092      	lsls	r2, r2, #2
 8003bd8:	4093      	lsls	r3, r2
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003be0:	4935      	ldr	r1, [pc, #212]	@ (8003cb8 <HAL_GPIO_Init+0x2ec>)
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	3302      	adds	r3, #2
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bee:	4b38      	ldr	r3, [pc, #224]	@ (8003cd0 <HAL_GPIO_Init+0x304>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c12:	4a2f      	ldr	r2, [pc, #188]	@ (8003cd0 <HAL_GPIO_Init+0x304>)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c18:	4b2d      	ldr	r3, [pc, #180]	@ (8003cd0 <HAL_GPIO_Init+0x304>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4013      	ands	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c3c:	4a24      	ldr	r2, [pc, #144]	@ (8003cd0 <HAL_GPIO_Init+0x304>)
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c42:	4b23      	ldr	r3, [pc, #140]	@ (8003cd0 <HAL_GPIO_Init+0x304>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c66:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd0 <HAL_GPIO_Init+0x304>)
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c6c:	4b18      	ldr	r3, [pc, #96]	@ (8003cd0 <HAL_GPIO_Init+0x304>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c90:	4a0f      	ldr	r2, [pc, #60]	@ (8003cd0 <HAL_GPIO_Init+0x304>)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b0f      	cmp	r3, #15
 8003ca0:	f67f aea2 	bls.w	80039e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	3724      	adds	r7, #36	@ 0x24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	40013800 	.word	0x40013800
 8003cbc:	40020000 	.word	0x40020000
 8003cc0:	40020400 	.word	0x40020400
 8003cc4:	40020800 	.word	0x40020800
 8003cc8:	40020c00 	.word	0x40020c00
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40013c00 	.word	0x40013c00

08003cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	807b      	strh	r3, [r7, #2]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ce4:	787b      	ldrb	r3, [r7, #1]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cea:	887a      	ldrh	r2, [r7, #2]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cf0:	e003      	b.n	8003cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cf2:	887b      	ldrh	r3, [r7, #2]
 8003cf4:	041a      	lsls	r2, r3, #16
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	619a      	str	r2, [r3, #24]
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e267      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d075      	beq.n	8003e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d26:	4b88      	ldr	r3, [pc, #544]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d00c      	beq.n	8003d4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d32:	4b85      	ldr	r3, [pc, #532]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d112      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3e:	4b82      	ldr	r3, [pc, #520]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d4a:	d10b      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d05b      	beq.n	8003e10 <HAL_RCC_OscConfig+0x108>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d157      	bne.n	8003e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e242      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d6c:	d106      	bne.n	8003d7c <HAL_RCC_OscConfig+0x74>
 8003d6e:	4b76      	ldr	r3, [pc, #472]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a75      	ldr	r2, [pc, #468]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e01d      	b.n	8003db8 <HAL_RCC_OscConfig+0xb0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x98>
 8003d86:	4b70      	ldr	r3, [pc, #448]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a6f      	ldr	r2, [pc, #444]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b6d      	ldr	r3, [pc, #436]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a6c      	ldr	r2, [pc, #432]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCC_OscConfig+0xb0>
 8003da0:	4b69      	ldr	r3, [pc, #420]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a68      	ldr	r2, [pc, #416]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b66      	ldr	r3, [pc, #408]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a65      	ldr	r2, [pc, #404]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d013      	beq.n	8003de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7ff f914 	bl	8002fec <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7ff f910 	bl	8002fec <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	@ 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e207      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	4b5b      	ldr	r3, [pc, #364]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xc0>
 8003de6:	e014      	b.n	8003e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7ff f900 	bl	8002fec <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df0:	f7ff f8fc 	bl	8002fec <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	@ 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e1f3      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e02:	4b51      	ldr	r3, [pc, #324]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0xe8>
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d063      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2a:	4b47      	ldr	r3, [pc, #284]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d11c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e36:	4b44      	ldr	r3, [pc, #272]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d116      	bne.n	8003e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e42:	4b41      	ldr	r3, [pc, #260]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_RCC_OscConfig+0x152>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d001      	beq.n	8003e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e1c7      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4937      	ldr	r1, [pc, #220]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6e:	e03a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d020      	beq.n	8003eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e78:	4b34      	ldr	r3, [pc, #208]	@ (8003f4c <HAL_RCC_OscConfig+0x244>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7ff f8b5 	bl	8002fec <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e86:	f7ff f8b1 	bl	8002fec <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e1a8      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e98:	4b2b      	ldr	r3, [pc, #172]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea4:	4b28      	ldr	r3, [pc, #160]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4925      	ldr	r1, [pc, #148]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]
 8003eb8:	e015      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eba:	4b24      	ldr	r3, [pc, #144]	@ (8003f4c <HAL_RCC_OscConfig+0x244>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7ff f894 	bl	8002fec <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec8:	f7ff f890 	bl	8002fec <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e187      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eda:	4b1b      	ldr	r3, [pc, #108]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d036      	beq.n	8003f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d016      	beq.n	8003f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efa:	4b15      	ldr	r3, [pc, #84]	@ (8003f50 <HAL_RCC_OscConfig+0x248>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7ff f874 	bl	8002fec <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f08:	f7ff f870 	bl	8002fec <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e167      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x200>
 8003f26:	e01b      	b.n	8003f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f28:	4b09      	ldr	r3, [pc, #36]	@ (8003f50 <HAL_RCC_OscConfig+0x248>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2e:	f7ff f85d 	bl	8002fec <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f34:	e00e      	b.n	8003f54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f36:	f7ff f859 	bl	8002fec <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d907      	bls.n	8003f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e150      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	42470000 	.word	0x42470000
 8003f50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f54:	4b88      	ldr	r3, [pc, #544]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1ea      	bne.n	8003f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8097 	beq.w	800409c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f72:	4b81      	ldr	r3, [pc, #516]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10f      	bne.n	8003f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	4b7d      	ldr	r3, [pc, #500]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	4a7c      	ldr	r2, [pc, #496]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f8e:	4b7a      	ldr	r3, [pc, #488]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9e:	4b77      	ldr	r3, [pc, #476]	@ (800417c <HAL_RCC_OscConfig+0x474>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d118      	bne.n	8003fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003faa:	4b74      	ldr	r3, [pc, #464]	@ (800417c <HAL_RCC_OscConfig+0x474>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a73      	ldr	r2, [pc, #460]	@ (800417c <HAL_RCC_OscConfig+0x474>)
 8003fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb6:	f7ff f819 	bl	8002fec <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbe:	f7ff f815 	bl	8002fec <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e10c      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800417c <HAL_RCC_OscConfig+0x474>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d106      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x2ea>
 8003fe4:	4b64      	ldr	r3, [pc, #400]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe8:	4a63      	ldr	r2, [pc, #396]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff0:	e01c      	b.n	800402c <HAL_RCC_OscConfig+0x324>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b05      	cmp	r3, #5
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCC_OscConfig+0x30c>
 8003ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffe:	4a5e      	ldr	r2, [pc, #376]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004000:	f043 0304 	orr.w	r3, r3, #4
 8004004:	6713      	str	r3, [r2, #112]	@ 0x70
 8004006:	4b5c      	ldr	r3, [pc, #368]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400a:	4a5b      	ldr	r2, [pc, #364]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	6713      	str	r3, [r2, #112]	@ 0x70
 8004012:	e00b      	b.n	800402c <HAL_RCC_OscConfig+0x324>
 8004014:	4b58      	ldr	r3, [pc, #352]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004018:	4a57      	ldr	r2, [pc, #348]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004020:	4b55      	ldr	r3, [pc, #340]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004024:	4a54      	ldr	r2, [pc, #336]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004026:	f023 0304 	bic.w	r3, r3, #4
 800402a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d015      	beq.n	8004060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004034:	f7fe ffda 	bl	8002fec <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403a:	e00a      	b.n	8004052 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fe ffd6 	bl	8002fec <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e0cb      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004052:	4b49      	ldr	r3, [pc, #292]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0ee      	beq.n	800403c <HAL_RCC_OscConfig+0x334>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004060:	f7fe ffc4 	bl	8002fec <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004066:	e00a      	b.n	800407e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004068:	f7fe ffc0 	bl	8002fec <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e0b5      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800407e:	4b3e      	ldr	r3, [pc, #248]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1ee      	bne.n	8004068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800408a:	7dfb      	ldrb	r3, [r7, #23]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d105      	bne.n	800409c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004090:	4b39      	ldr	r3, [pc, #228]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004094:	4a38      	ldr	r2, [pc, #224]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800409a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 80a1 	beq.w	80041e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040a6:	4b34      	ldr	r3, [pc, #208]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d05c      	beq.n	800416c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d141      	bne.n	800413e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b31      	ldr	r3, [pc, #196]	@ (8004180 <HAL_RCC_OscConfig+0x478>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fe ff94 	bl	8002fec <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fe ff90 	bl	8002fec <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e087      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	4b27      	ldr	r3, [pc, #156]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	019b      	lsls	r3, r3, #6
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	3b01      	subs	r3, #1
 8004100:	041b      	lsls	r3, r3, #16
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	491b      	ldr	r1, [pc, #108]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004110:	4b1b      	ldr	r3, [pc, #108]	@ (8004180 <HAL_RCC_OscConfig+0x478>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004116:	f7fe ff69 	bl	8002fec <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411e:	f7fe ff65 	bl	8002fec <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e05c      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004130:	4b11      	ldr	r3, [pc, #68]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x416>
 800413c:	e054      	b.n	80041e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	4b10      	ldr	r3, [pc, #64]	@ (8004180 <HAL_RCC_OscConfig+0x478>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7fe ff52 	bl	8002fec <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414c:	f7fe ff4e 	bl	8002fec <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e045      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415e:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x444>
 800416a:	e03d      	b.n	80041e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e038      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
 8004178:	40023800 	.word	0x40023800
 800417c:	40007000 	.word	0x40007000
 8004180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004184:	4b1b      	ldr	r3, [pc, #108]	@ (80041f4 <HAL_RCC_OscConfig+0x4ec>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d028      	beq.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d121      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d11a      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041b4:	4013      	ands	r3, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041bc:	4293      	cmp	r3, r2
 80041be:	d111      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	3b01      	subs	r3, #1
 80041ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d107      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800

080041f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0cc      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800420c:	4b68      	ldr	r3, [pc, #416]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d90c      	bls.n	8004234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b65      	ldr	r3, [pc, #404]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b63      	ldr	r3, [pc, #396]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0b8      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800424c:	4b59      	ldr	r3, [pc, #356]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4a58      	ldr	r2, [pc, #352]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004256:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004264:	4b53      	ldr	r3, [pc, #332]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4a52      	ldr	r2, [pc, #328]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800426e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004270:	4b50      	ldr	r3, [pc, #320]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	494d      	ldr	r1, [pc, #308]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d044      	beq.n	8004318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b47      	ldr	r3, [pc, #284]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d119      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e07f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d003      	beq.n	80042b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b6:	4b3f      	ldr	r3, [pc, #252]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e06f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c6:	4b3b      	ldr	r3, [pc, #236]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e067      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d6:	4b37      	ldr	r3, [pc, #220]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4934      	ldr	r1, [pc, #208]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e8:	f7fe fe80 	bl	8002fec <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f0:	f7fe fe7c 	bl	8002fec <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e04f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	4b2b      	ldr	r3, [pc, #172]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 020c 	and.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	429a      	cmp	r2, r3
 8004316:	d1eb      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004318:	4b25      	ldr	r3, [pc, #148]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d20c      	bcs.n	8004340 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b22      	ldr	r3, [pc, #136]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432e:	4b20      	ldr	r3, [pc, #128]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e032      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800434c:	4b19      	ldr	r3, [pc, #100]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4916      	ldr	r1, [pc, #88]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800436a:	4b12      	ldr	r3, [pc, #72]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	490e      	ldr	r1, [pc, #56]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800437e:	f000 f821 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 8004382:	4602      	mov	r2, r0
 8004384:	4b0b      	ldr	r3, [pc, #44]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	490a      	ldr	r1, [pc, #40]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	5ccb      	ldrb	r3, [r1, r3]
 8004392:	fa22 f303 	lsr.w	r3, r2, r3
 8004396:	4a09      	ldr	r2, [pc, #36]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800439a:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fd fd58 	bl	8001e54 <HAL_InitTick>

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40023c00 	.word	0x40023c00
 80043b4:	40023800 	.word	0x40023800
 80043b8:	0800afc0 	.word	0x0800afc0
 80043bc:	20000004 	.word	0x20000004
 80043c0:	20000008 	.word	0x20000008

080043c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c8:	b094      	sub	sp, #80	@ 0x50
 80043ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043dc:	4b79      	ldr	r3, [pc, #484]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 030c 	and.w	r3, r3, #12
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d00d      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0x40>
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	f200 80e1 	bhi.w	80045b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x34>
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_GetSysClockFreq+0x3a>
 80043f6:	e0db      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043f8:	4b73      	ldr	r3, [pc, #460]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80043fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043fc:	e0db      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043fe:	4b73      	ldr	r3, [pc, #460]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004400:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004402:	e0d8      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004404:	4b6f      	ldr	r3, [pc, #444]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800440c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800440e:	4b6d      	ldr	r3, [pc, #436]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d063      	beq.n	80044e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800441a:	4b6a      	ldr	r3, [pc, #424]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	099b      	lsrs	r3, r3, #6
 8004420:	2200      	movs	r2, #0
 8004422:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004424:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442c:	633b      	str	r3, [r7, #48]	@ 0x30
 800442e:	2300      	movs	r3, #0
 8004430:	637b      	str	r3, [r7, #52]	@ 0x34
 8004432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004436:	4622      	mov	r2, r4
 8004438:	462b      	mov	r3, r5
 800443a:	f04f 0000 	mov.w	r0, #0
 800443e:	f04f 0100 	mov.w	r1, #0
 8004442:	0159      	lsls	r1, r3, #5
 8004444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004448:	0150      	lsls	r0, r2, #5
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4621      	mov	r1, r4
 8004450:	1a51      	subs	r1, r2, r1
 8004452:	6139      	str	r1, [r7, #16]
 8004454:	4629      	mov	r1, r5
 8004456:	eb63 0301 	sbc.w	r3, r3, r1
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004468:	4659      	mov	r1, fp
 800446a:	018b      	lsls	r3, r1, #6
 800446c:	4651      	mov	r1, sl
 800446e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004472:	4651      	mov	r1, sl
 8004474:	018a      	lsls	r2, r1, #6
 8004476:	4651      	mov	r1, sl
 8004478:	ebb2 0801 	subs.w	r8, r2, r1
 800447c:	4659      	mov	r1, fp
 800447e:	eb63 0901 	sbc.w	r9, r3, r1
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800448e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004496:	4690      	mov	r8, r2
 8004498:	4699      	mov	r9, r3
 800449a:	4623      	mov	r3, r4
 800449c:	eb18 0303 	adds.w	r3, r8, r3
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	462b      	mov	r3, r5
 80044a4:	eb49 0303 	adc.w	r3, r9, r3
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044b6:	4629      	mov	r1, r5
 80044b8:	024b      	lsls	r3, r1, #9
 80044ba:	4621      	mov	r1, r4
 80044bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044c0:	4621      	mov	r1, r4
 80044c2:	024a      	lsls	r2, r1, #9
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ca:	2200      	movs	r2, #0
 80044cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044d4:	f7fc fb4a 	bl	8000b6c <__aeabi_uldivmod>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4613      	mov	r3, r2
 80044de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044e0:	e058      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e2:	4b38      	ldr	r3, [pc, #224]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	2200      	movs	r2, #0
 80044ea:	4618      	mov	r0, r3
 80044ec:	4611      	mov	r1, r2
 80044ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044f2:	623b      	str	r3, [r7, #32]
 80044f4:	2300      	movs	r3, #0
 80044f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044fc:	4642      	mov	r2, r8
 80044fe:	464b      	mov	r3, r9
 8004500:	f04f 0000 	mov.w	r0, #0
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	0159      	lsls	r1, r3, #5
 800450a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800450e:	0150      	lsls	r0, r2, #5
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4641      	mov	r1, r8
 8004516:	ebb2 0a01 	subs.w	sl, r2, r1
 800451a:	4649      	mov	r1, r9
 800451c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800452c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004534:	ebb2 040a 	subs.w	r4, r2, sl
 8004538:	eb63 050b 	sbc.w	r5, r3, fp
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	00eb      	lsls	r3, r5, #3
 8004546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800454a:	00e2      	lsls	r2, r4, #3
 800454c:	4614      	mov	r4, r2
 800454e:	461d      	mov	r5, r3
 8004550:	4643      	mov	r3, r8
 8004552:	18e3      	adds	r3, r4, r3
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	464b      	mov	r3, r9
 8004558:	eb45 0303 	adc.w	r3, r5, r3
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800456a:	4629      	mov	r1, r5
 800456c:	028b      	lsls	r3, r1, #10
 800456e:	4621      	mov	r1, r4
 8004570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004574:	4621      	mov	r1, r4
 8004576:	028a      	lsls	r2, r1, #10
 8004578:	4610      	mov	r0, r2
 800457a:	4619      	mov	r1, r3
 800457c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800457e:	2200      	movs	r2, #0
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	61fa      	str	r2, [r7, #28]
 8004584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004588:	f7fc faf0 	bl	8000b6c <__aeabi_uldivmod>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4613      	mov	r3, r2
 8004592:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004594:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	0c1b      	lsrs	r3, r3, #16
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	3301      	adds	r3, #1
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80045a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045ae:	e002      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045b0:	4b05      	ldr	r3, [pc, #20]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3750      	adds	r7, #80	@ 0x50
 80045bc:	46bd      	mov	sp, r7
 80045be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800
 80045c8:	00f42400 	.word	0x00f42400
 80045cc:	007a1200 	.word	0x007a1200

080045d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d4:	4b03      	ldr	r3, [pc, #12]	@ (80045e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000004 	.word	0x20000004

080045e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045ec:	f7ff fff0 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b05      	ldr	r3, [pc, #20]	@ (8004608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	0a9b      	lsrs	r3, r3, #10
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4903      	ldr	r1, [pc, #12]	@ (800460c <HAL_RCC_GetPCLK1Freq+0x24>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004604:	4618      	mov	r0, r3
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40023800 	.word	0x40023800
 800460c:	0800afd0 	.word	0x0800afd0

08004610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004614:	f7ff ffdc 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	0b5b      	lsrs	r3, r3, #13
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	4903      	ldr	r1, [pc, #12]	@ (8004634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40023800 	.word	0x40023800
 8004634:	0800afd0 	.word	0x0800afd0

08004638 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	220f      	movs	r2, #15
 8004646:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004648:	4b12      	ldr	r3, [pc, #72]	@ (8004694 <HAL_RCC_GetClockConfig+0x5c>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 0203 	and.w	r2, r3, #3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004654:	4b0f      	ldr	r3, [pc, #60]	@ (8004694 <HAL_RCC_GetClockConfig+0x5c>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004660:	4b0c      	ldr	r3, [pc, #48]	@ (8004694 <HAL_RCC_GetClockConfig+0x5c>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800466c:	4b09      	ldr	r3, [pc, #36]	@ (8004694 <HAL_RCC_GetClockConfig+0x5c>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	08db      	lsrs	r3, r3, #3
 8004672:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800467a:	4b07      	ldr	r3, [pc, #28]	@ (8004698 <HAL_RCC_GetClockConfig+0x60>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0207 	and.w	r2, r3, #7
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	601a      	str	r2, [r3, #0]
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800
 8004698:	40023c00 	.word	0x40023c00

0800469c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e041      	b.n	8004732 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fd ffcc 	bl	8002660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f000 ffc2 	bl	8005664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	d001      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e044      	b.n	80047de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1e      	ldr	r2, [pc, #120]	@ (80047ec <HAL_TIM_Base_Start_IT+0xb0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d018      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800477e:	d013      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1a      	ldr	r2, [pc, #104]	@ (80047f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00e      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x6c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a19      	ldr	r2, [pc, #100]	@ (80047f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d009      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a17      	ldr	r2, [pc, #92]	@ (80047f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d004      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x6c>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a16      	ldr	r2, [pc, #88]	@ (80047fc <HAL_TIM_Base_Start_IT+0xc0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d111      	bne.n	80047cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b06      	cmp	r3, #6
 80047b8:	d010      	beq.n	80047dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0201 	orr.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ca:	e007      	b.n	80047dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40010000 	.word	0x40010000
 80047f0:	40000400 	.word	0x40000400
 80047f4:	40000800 	.word	0x40000800
 80047f8:	40000c00 	.word	0x40000c00
 80047fc:	40014000 	.word	0x40014000

08004800 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e041      	b.n	8004896 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f839 	bl	800489e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3304      	adds	r3, #4
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f000 ff10 	bl	8005664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d109      	bne.n	80048d8 <HAL_TIM_PWM_Start+0x24>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	bf14      	ite	ne
 80048d0:	2301      	movne	r3, #1
 80048d2:	2300      	moveq	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	e022      	b.n	800491e <HAL_TIM_PWM_Start+0x6a>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d109      	bne.n	80048f2 <HAL_TIM_PWM_Start+0x3e>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	bf14      	ite	ne
 80048ea:	2301      	movne	r3, #1
 80048ec:	2300      	moveq	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	e015      	b.n	800491e <HAL_TIM_PWM_Start+0x6a>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d109      	bne.n	800490c <HAL_TIM_PWM_Start+0x58>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	bf14      	ite	ne
 8004904:	2301      	movne	r3, #1
 8004906:	2300      	moveq	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	e008      	b.n	800491e <HAL_TIM_PWM_Start+0x6a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	bf14      	ite	ne
 8004918:	2301      	movne	r3, #1
 800491a:	2300      	moveq	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e068      	b.n	80049f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d104      	bne.n	8004936 <HAL_TIM_PWM_Start+0x82>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004934:	e013      	b.n	800495e <HAL_TIM_PWM_Start+0xaa>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b04      	cmp	r3, #4
 800493a:	d104      	bne.n	8004946 <HAL_TIM_PWM_Start+0x92>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004944:	e00b      	b.n	800495e <HAL_TIM_PWM_Start+0xaa>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b08      	cmp	r3, #8
 800494a:	d104      	bne.n	8004956 <HAL_TIM_PWM_Start+0xa2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004954:	e003      	b.n	800495e <HAL_TIM_PWM_Start+0xaa>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2201      	movs	r2, #1
 8004964:	6839      	ldr	r1, [r7, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f001 fa4c 	bl	8005e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a23      	ldr	r2, [pc, #140]	@ (8004a00 <HAL_TIM_PWM_Start+0x14c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d107      	bne.n	8004986 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004984:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1d      	ldr	r2, [pc, #116]	@ (8004a00 <HAL_TIM_PWM_Start+0x14c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d018      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x10e>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004998:	d013      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x10e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a19      	ldr	r2, [pc, #100]	@ (8004a04 <HAL_TIM_PWM_Start+0x150>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00e      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x10e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a17      	ldr	r2, [pc, #92]	@ (8004a08 <HAL_TIM_PWM_Start+0x154>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d009      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x10e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a16      	ldr	r2, [pc, #88]	@ (8004a0c <HAL_TIM_PWM_Start+0x158>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d004      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x10e>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a14      	ldr	r2, [pc, #80]	@ (8004a10 <HAL_TIM_PWM_Start+0x15c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d111      	bne.n	80049e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b06      	cmp	r3, #6
 80049d2:	d010      	beq.n	80049f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e4:	e007      	b.n	80049f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40000400 	.word	0x40000400
 8004a08:	40000800 	.word	0x40000800
 8004a0c:	40000c00 	.word	0x40000c00
 8004a10:	40014000 	.word	0x40014000

08004a14 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e041      	b.n	8004aaa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f839 	bl	8004ab2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f000 fe06 	bl	8005664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d104      	bne.n	8004aea <HAL_TIM_IC_Start_DMA+0x22>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	e013      	b.n	8004b12 <HAL_TIM_IC_Start_DMA+0x4a>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d104      	bne.n	8004afa <HAL_TIM_IC_Start_DMA+0x32>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	e00b      	b.n	8004b12 <HAL_TIM_IC_Start_DMA+0x4a>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d104      	bne.n	8004b0a <HAL_TIM_IC_Start_DMA+0x42>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	e003      	b.n	8004b12 <HAL_TIM_IC_Start_DMA+0x4a>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d104      	bne.n	8004b24 <HAL_TIM_IC_Start_DMA+0x5c>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	e013      	b.n	8004b4c <HAL_TIM_IC_Start_DMA+0x84>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d104      	bne.n	8004b34 <HAL_TIM_IC_Start_DMA+0x6c>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	e00b      	b.n	8004b4c <HAL_TIM_IC_Start_DMA+0x84>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d104      	bne.n	8004b44 <HAL_TIM_IC_Start_DMA+0x7c>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	e003      	b.n	8004b4c <HAL_TIM_IC_Start_DMA+0x84>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8004b4e:	7dbb      	ldrb	r3, [r7, #22]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d002      	beq.n	8004b5a <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8004b54:	7d7b      	ldrb	r3, [r7, #21]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d101      	bne.n	8004b5e <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e13c      	b.n	8004dd8 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8004b5e:	7dbb      	ldrb	r3, [r7, #22]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d143      	bne.n	8004bec <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8004b64:	7d7b      	ldrb	r3, [r7, #21]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d140      	bne.n	8004bec <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <HAL_TIM_IC_Start_DMA+0xae>
 8004b70:	887b      	ldrh	r3, [r7, #2]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e12e      	b.n	8004dd8 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_IC_Start_DMA+0xc2>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b88:	e013      	b.n	8004bb2 <HAL_TIM_IC_Start_DMA+0xea>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_IC_Start_DMA+0xd2>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b98:	e00b      	b.n	8004bb2 <HAL_TIM_IC_Start_DMA+0xea>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_IC_Start_DMA+0xe2>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ba8:	e003      	b.n	8004bb2 <HAL_TIM_IC_Start_DMA+0xea>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_IC_Start_DMA+0xfa>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    if ((pData == NULL) || (Length == 0U))
 8004bc0:	e016      	b.n	8004bf0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_IC_Start_DMA+0x10a>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    if ((pData == NULL) || (Length == 0U))
 8004bd0:	e00e      	b.n	8004bf0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d104      	bne.n	8004be2 <HAL_TIM_IC_Start_DMA+0x11a>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 8004be0:	e006      	b.n	8004bf0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2202      	movs	r2, #2
 8004be6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 8004bea:	e001      	b.n	8004bf0 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0f3      	b.n	8004dd8 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f001 f903 	bl	8005e04 <TIM_CCxChannelCmd>

  switch (Channel)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b0c      	cmp	r3, #12
 8004c02:	f200 80ad 	bhi.w	8004d60 <HAL_TIM_IC_Start_DMA+0x298>
 8004c06:	a201      	add	r2, pc, #4	@ (adr r2, 8004c0c <HAL_TIM_IC_Start_DMA+0x144>)
 8004c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0c:	08004c41 	.word	0x08004c41
 8004c10:	08004d61 	.word	0x08004d61
 8004c14:	08004d61 	.word	0x08004d61
 8004c18:	08004d61 	.word	0x08004d61
 8004c1c:	08004c89 	.word	0x08004c89
 8004c20:	08004d61 	.word	0x08004d61
 8004c24:	08004d61 	.word	0x08004d61
 8004c28:	08004d61 	.word	0x08004d61
 8004c2c:	08004cd1 	.word	0x08004cd1
 8004c30:	08004d61 	.word	0x08004d61
 8004c34:	08004d61 	.word	0x08004d61
 8004c38:	08004d61 	.word	0x08004d61
 8004c3c:	08004d19 	.word	0x08004d19
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c44:	4a66      	ldr	r2, [pc, #408]	@ (8004de0 <HAL_TIM_IC_Start_DMA+0x318>)
 8004c46:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	4a65      	ldr	r2, [pc, #404]	@ (8004de4 <HAL_TIM_IC_Start_DMA+0x31c>)
 8004c4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c54:	4a64      	ldr	r2, [pc, #400]	@ (8004de8 <HAL_TIM_IC_Start_DMA+0x320>)
 8004c56:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3334      	adds	r3, #52	@ 0x34
 8004c62:	4619      	mov	r1, r3
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	887b      	ldrh	r3, [r7, #2]
 8004c68:	f7fe fb5c 	bl	8003324 <HAL_DMA_Start_IT>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e0b0      	b.n	8004dd8 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c84:	60da      	str	r2, [r3, #12]
      break;
 8004c86:	e06e      	b.n	8004d66 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8c:	4a54      	ldr	r2, [pc, #336]	@ (8004de0 <HAL_TIM_IC_Start_DMA+0x318>)
 8004c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c94:	4a53      	ldr	r2, [pc, #332]	@ (8004de4 <HAL_TIM_IC_Start_DMA+0x31c>)
 8004c96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	4a52      	ldr	r2, [pc, #328]	@ (8004de8 <HAL_TIM_IC_Start_DMA+0x320>)
 8004c9e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3338      	adds	r3, #56	@ 0x38
 8004caa:	4619      	mov	r1, r3
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	887b      	ldrh	r3, [r7, #2]
 8004cb0:	f7fe fb38 	bl	8003324 <HAL_DMA_Start_IT>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e08c      	b.n	8004dd8 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ccc:	60da      	str	r2, [r3, #12]
      break;
 8004cce:	e04a      	b.n	8004d66 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd4:	4a42      	ldr	r2, [pc, #264]	@ (8004de0 <HAL_TIM_IC_Start_DMA+0x318>)
 8004cd6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cdc:	4a41      	ldr	r2, [pc, #260]	@ (8004de4 <HAL_TIM_IC_Start_DMA+0x31c>)
 8004cde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce4:	4a40      	ldr	r2, [pc, #256]	@ (8004de8 <HAL_TIM_IC_Start_DMA+0x320>)
 8004ce6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	333c      	adds	r3, #60	@ 0x3c
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	887b      	ldrh	r3, [r7, #2]
 8004cf8:	f7fe fb14 	bl	8003324 <HAL_DMA_Start_IT>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e068      	b.n	8004dd8 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d14:	60da      	str	r2, [r3, #12]
      break;
 8004d16:	e026      	b.n	8004d66 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1c:	4a30      	ldr	r2, [pc, #192]	@ (8004de0 <HAL_TIM_IC_Start_DMA+0x318>)
 8004d1e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d24:	4a2f      	ldr	r2, [pc, #188]	@ (8004de4 <HAL_TIM_IC_Start_DMA+0x31c>)
 8004d26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8004de8 <HAL_TIM_IC_Start_DMA+0x320>)
 8004d2e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3340      	adds	r3, #64	@ 0x40
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	887b      	ldrh	r3, [r7, #2]
 8004d40:	f7fe faf0 	bl	8003324 <HAL_DMA_Start_IT>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e044      	b.n	8004dd8 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d5c:	60da      	str	r2, [r3, #12]
      break;
 8004d5e:	e002      	b.n	8004d66 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	75fb      	strb	r3, [r7, #23]
      break;
 8004d64:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a20      	ldr	r2, [pc, #128]	@ (8004dec <HAL_TIM_IC_Start_DMA+0x324>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d018      	beq.n	8004da2 <HAL_TIM_IC_Start_DMA+0x2da>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d78:	d013      	beq.n	8004da2 <HAL_TIM_IC_Start_DMA+0x2da>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8004df0 <HAL_TIM_IC_Start_DMA+0x328>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00e      	beq.n	8004da2 <HAL_TIM_IC_Start_DMA+0x2da>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1a      	ldr	r2, [pc, #104]	@ (8004df4 <HAL_TIM_IC_Start_DMA+0x32c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d009      	beq.n	8004da2 <HAL_TIM_IC_Start_DMA+0x2da>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a19      	ldr	r2, [pc, #100]	@ (8004df8 <HAL_TIM_IC_Start_DMA+0x330>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d004      	beq.n	8004da2 <HAL_TIM_IC_Start_DMA+0x2da>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a17      	ldr	r2, [pc, #92]	@ (8004dfc <HAL_TIM_IC_Start_DMA+0x334>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d111      	bne.n	8004dc6 <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	2b06      	cmp	r3, #6
 8004db2:	d010      	beq.n	8004dd6 <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc4:	e007      	b.n	8004dd6 <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	08005535 	.word	0x08005535
 8004de4:	080055fd 	.word	0x080055fd
 8004de8:	080054a3 	.word	0x080054a3
 8004dec:	40010000 	.word	0x40010000
 8004df0:	40000400 	.word	0x40000400
 8004df4:	40000800 	.word	0x40000800
 8004df8:	40000c00 	.word	0x40000c00
 8004dfc:	40014000 	.word	0x40014000

08004e00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d020      	beq.n	8004e64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01b      	beq.n	8004e64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0202 	mvn.w	r2, #2
 8004e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 faf7 	bl	800543e <HAL_TIM_IC_CaptureCallback>
 8004e50:	e005      	b.n	8004e5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fae9 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fb04 	bl	8005466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d020      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01b      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0204 	mvn.w	r2, #4
 8004e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fad1 	bl	800543e <HAL_TIM_IC_CaptureCallback>
 8004e9c:	e005      	b.n	8004eaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fac3 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fade 	bl	8005466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 0308 	and.w	r3, r3, #8
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d020      	beq.n	8004efc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01b      	beq.n	8004efc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0208 	mvn.w	r2, #8
 8004ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 faab 	bl	800543e <HAL_TIM_IC_CaptureCallback>
 8004ee8:	e005      	b.n	8004ef6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fa9d 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fab8 	bl	8005466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d020      	beq.n	8004f48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01b      	beq.n	8004f48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f06f 0210 	mvn.w	r2, #16
 8004f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fa85 	bl	800543e <HAL_TIM_IC_CaptureCallback>
 8004f34:	e005      	b.n	8004f42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fa77 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fa92 	bl	8005466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00c      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d007      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0201 	mvn.w	r2, #1
 8004f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fc fd6a 	bl	8001a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00c      	beq.n	8004f90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f001 f82a 	bl	8005fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00c      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d007      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fa63 	bl	800547a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00c      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f003 0320 	and.w	r3, r3, #32
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d007      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0220 	mvn.w	r2, #32
 8004fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fffc 	bl	8005fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_TIM_IC_ConfigChannel+0x1e>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e088      	b.n	8005110 <HAL_TIM_IC_ConfigChannel+0x130>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d11b      	bne.n	8005044 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800501c:	f000 fd3a 	bl	8005a94 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 020c 	bic.w	r2, r2, #12
 800502e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6999      	ldr	r1, [r3, #24]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	619a      	str	r2, [r3, #24]
 8005042:	e060      	b.n	8005106 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b04      	cmp	r3, #4
 8005048:	d11c      	bne.n	8005084 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800505a:	f000 fdb2 	bl	8005bc2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699a      	ldr	r2, [r3, #24]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800506c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6999      	ldr	r1, [r3, #24]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	021a      	lsls	r2, r3, #8
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	619a      	str	r2, [r3, #24]
 8005082:	e040      	b.n	8005106 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b08      	cmp	r3, #8
 8005088:	d11b      	bne.n	80050c2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800509a:	f000 fdff 	bl	8005c9c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69da      	ldr	r2, [r3, #28]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 020c 	bic.w	r2, r2, #12
 80050ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69d9      	ldr	r1, [r3, #28]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	61da      	str	r2, [r3, #28]
 80050c0:	e021      	b.n	8005106 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b0c      	cmp	r3, #12
 80050c6:	d11c      	bne.n	8005102 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80050d8:	f000 fe1c 	bl	8005d14 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69da      	ldr	r2, [r3, #28]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80050ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69d9      	ldr	r1, [r3, #28]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	021a      	lsls	r2, r3, #8
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	61da      	str	r2, [r3, #28]
 8005100:	e001      	b.n	8005106 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800510e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005132:	2302      	movs	r3, #2
 8005134:	e0ae      	b.n	8005294 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b0c      	cmp	r3, #12
 8005142:	f200 809f 	bhi.w	8005284 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005146:	a201      	add	r2, pc, #4	@ (adr r2, 800514c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514c:	08005181 	.word	0x08005181
 8005150:	08005285 	.word	0x08005285
 8005154:	08005285 	.word	0x08005285
 8005158:	08005285 	.word	0x08005285
 800515c:	080051c1 	.word	0x080051c1
 8005160:	08005285 	.word	0x08005285
 8005164:	08005285 	.word	0x08005285
 8005168:	08005285 	.word	0x08005285
 800516c:	08005203 	.word	0x08005203
 8005170:	08005285 	.word	0x08005285
 8005174:	08005285 	.word	0x08005285
 8005178:	08005285 	.word	0x08005285
 800517c:	08005243 	.word	0x08005243
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	4618      	mov	r0, r3
 8005188:	f000 faf8 	bl	800577c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699a      	ldr	r2, [r3, #24]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0208 	orr.w	r2, r2, #8
 800519a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0204 	bic.w	r2, r2, #4
 80051aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6999      	ldr	r1, [r3, #24]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	619a      	str	r2, [r3, #24]
      break;
 80051be:	e064      	b.n	800528a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68b9      	ldr	r1, [r7, #8]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fb3e 	bl	8005848 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6999      	ldr	r1, [r3, #24]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	021a      	lsls	r2, r3, #8
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	619a      	str	r2, [r3, #24]
      break;
 8005200:	e043      	b.n	800528a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fb89 	bl	8005920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0208 	orr.w	r2, r2, #8
 800521c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69da      	ldr	r2, [r3, #28]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0204 	bic.w	r2, r2, #4
 800522c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69d9      	ldr	r1, [r3, #28]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	61da      	str	r2, [r3, #28]
      break;
 8005240:	e023      	b.n	800528a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68b9      	ldr	r1, [r7, #8]
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fbd3 	bl	80059f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800525c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800526c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69d9      	ldr	r1, [r3, #28]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	021a      	lsls	r2, r3, #8
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	61da      	str	r2, [r3, #28]
      break;
 8005282:	e002      	b.n	800528a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	75fb      	strb	r3, [r7, #23]
      break;
 8005288:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005292:	7dfb      	ldrb	r3, [r7, #23]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_TIM_ConfigClockSource+0x1c>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e0b4      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x186>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052f0:	d03e      	beq.n	8005370 <HAL_TIM_ConfigClockSource+0xd4>
 80052f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052f6:	f200 8087 	bhi.w	8005408 <HAL_TIM_ConfigClockSource+0x16c>
 80052fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052fe:	f000 8086 	beq.w	800540e <HAL_TIM_ConfigClockSource+0x172>
 8005302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005306:	d87f      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x16c>
 8005308:	2b70      	cmp	r3, #112	@ 0x70
 800530a:	d01a      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0xa6>
 800530c:	2b70      	cmp	r3, #112	@ 0x70
 800530e:	d87b      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x16c>
 8005310:	2b60      	cmp	r3, #96	@ 0x60
 8005312:	d050      	beq.n	80053b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005314:	2b60      	cmp	r3, #96	@ 0x60
 8005316:	d877      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x16c>
 8005318:	2b50      	cmp	r3, #80	@ 0x50
 800531a:	d03c      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0xfa>
 800531c:	2b50      	cmp	r3, #80	@ 0x50
 800531e:	d873      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x16c>
 8005320:	2b40      	cmp	r3, #64	@ 0x40
 8005322:	d058      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005324:	2b40      	cmp	r3, #64	@ 0x40
 8005326:	d86f      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x16c>
 8005328:	2b30      	cmp	r3, #48	@ 0x30
 800532a:	d064      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x15a>
 800532c:	2b30      	cmp	r3, #48	@ 0x30
 800532e:	d86b      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x16c>
 8005330:	2b20      	cmp	r3, #32
 8005332:	d060      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005334:	2b20      	cmp	r3, #32
 8005336:	d867      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x16c>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d05c      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x15a>
 800533c:	2b10      	cmp	r3, #16
 800533e:	d05a      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005340:	e062      	b.n	8005408 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005352:	f000 fd37 	bl	8005dc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005364:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	609a      	str	r2, [r3, #8]
      break;
 800536e:	e04f      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005380:	f000 fd20 	bl	8005dc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005392:	609a      	str	r2, [r3, #8]
      break;
 8005394:	e03c      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a2:	461a      	mov	r2, r3
 80053a4:	f000 fbde 	bl	8005b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2150      	movs	r1, #80	@ 0x50
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fced 	bl	8005d8e <TIM_ITRx_SetConfig>
      break;
 80053b4:	e02c      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053c2:	461a      	mov	r2, r3
 80053c4:	f000 fc3a 	bl	8005c3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2160      	movs	r1, #96	@ 0x60
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fcdd 	bl	8005d8e <TIM_ITRx_SetConfig>
      break;
 80053d4:	e01c      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e2:	461a      	mov	r2, r3
 80053e4:	f000 fbbe 	bl	8005b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2140      	movs	r1, #64	@ 0x40
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fccd 	bl	8005d8e <TIM_ITRx_SetConfig>
      break;
 80053f4:	e00c      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4619      	mov	r1, r3
 8005400:	4610      	mov	r0, r2
 8005402:	f000 fcc4 	bl	8005d8e <TIM_ITRx_SetConfig>
      break;
 8005406:	e003      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	73fb      	strb	r3, [r7, #15]
      break;
 800540c:	e000      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800540e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005420:	7bfb      	ldrb	r3, [r7, #15]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d107      	bne.n	80054ca <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054c8:	e02a      	b.n	8005520 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d107      	bne.n	80054e4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2202      	movs	r2, #2
 80054d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054e2:	e01d      	b.n	8005520 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d107      	bne.n	80054fe <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2204      	movs	r2, #4
 80054f2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054fc:	e010      	b.n	8005520 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	429a      	cmp	r2, r3
 8005506:	d107      	bne.n	8005518 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2208      	movs	r2, #8
 800550c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005516:	e003      	b.n	8005520 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f7ff ffb4 	bl	800548e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	771a      	strb	r2, [r3, #28]
}
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005540:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	429a      	cmp	r2, r3
 800554a:	d10f      	bne.n	800556c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d146      	bne.n	80055e8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800556a:	e03d      	b.n	80055e8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d10f      	bne.n	8005596 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2202      	movs	r2, #2
 800557a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d131      	bne.n	80055e8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005594:	e028      	b.n	80055e8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	429a      	cmp	r2, r3
 800559e:	d10f      	bne.n	80055c0 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2204      	movs	r2, #4
 80055a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d11c      	bne.n	80055e8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055be:	e013      	b.n	80055e8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d10e      	bne.n	80055e8 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2208      	movs	r2, #8
 80055ce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d107      	bne.n	80055e8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff ff28 	bl	800543e <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	771a      	strb	r2, [r3, #28]
}
 80055f4:	bf00      	nop
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005608:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	429a      	cmp	r2, r3
 8005612:	d103      	bne.n	800561c <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	771a      	strb	r2, [r3, #28]
 800561a:	e019      	b.n	8005650 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	429a      	cmp	r2, r3
 8005624:	d103      	bne.n	800562e <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2202      	movs	r2, #2
 800562a:	771a      	strb	r2, [r3, #28]
 800562c:	e010      	b.n	8005650 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	429a      	cmp	r2, r3
 8005636:	d103      	bne.n	8005640 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2204      	movs	r2, #4
 800563c:	771a      	strb	r2, [r3, #28]
 800563e:	e007      	b.n	8005650 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	429a      	cmp	r2, r3
 8005648:	d102      	bne.n	8005650 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2208      	movs	r2, #8
 800564e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f7ff fefe 	bl	8005452 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	771a      	strb	r2, [r3, #28]
}
 800565c:	bf00      	nop
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a3a      	ldr	r2, [pc, #232]	@ (8005760 <TIM_Base_SetConfig+0xfc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00f      	beq.n	800569c <TIM_Base_SetConfig+0x38>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005682:	d00b      	beq.n	800569c <TIM_Base_SetConfig+0x38>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a37      	ldr	r2, [pc, #220]	@ (8005764 <TIM_Base_SetConfig+0x100>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d007      	beq.n	800569c <TIM_Base_SetConfig+0x38>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a36      	ldr	r2, [pc, #216]	@ (8005768 <TIM_Base_SetConfig+0x104>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_Base_SetConfig+0x38>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a35      	ldr	r2, [pc, #212]	@ (800576c <TIM_Base_SetConfig+0x108>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d108      	bne.n	80056ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005760 <TIM_Base_SetConfig+0xfc>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d01b      	beq.n	80056ee <TIM_Base_SetConfig+0x8a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056bc:	d017      	beq.n	80056ee <TIM_Base_SetConfig+0x8a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a28      	ldr	r2, [pc, #160]	@ (8005764 <TIM_Base_SetConfig+0x100>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <TIM_Base_SetConfig+0x8a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a27      	ldr	r2, [pc, #156]	@ (8005768 <TIM_Base_SetConfig+0x104>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00f      	beq.n	80056ee <TIM_Base_SetConfig+0x8a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a26      	ldr	r2, [pc, #152]	@ (800576c <TIM_Base_SetConfig+0x108>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00b      	beq.n	80056ee <TIM_Base_SetConfig+0x8a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a25      	ldr	r2, [pc, #148]	@ (8005770 <TIM_Base_SetConfig+0x10c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d007      	beq.n	80056ee <TIM_Base_SetConfig+0x8a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a24      	ldr	r2, [pc, #144]	@ (8005774 <TIM_Base_SetConfig+0x110>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <TIM_Base_SetConfig+0x8a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a23      	ldr	r2, [pc, #140]	@ (8005778 <TIM_Base_SetConfig+0x114>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d108      	bne.n	8005700 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a0e      	ldr	r2, [pc, #56]	@ (8005760 <TIM_Base_SetConfig+0xfc>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d103      	bne.n	8005734 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b01      	cmp	r3, #1
 8005744:	d105      	bne.n	8005752 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f023 0201 	bic.w	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	611a      	str	r2, [r3, #16]
  }
}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40010000 	.word	0x40010000
 8005764:	40000400 	.word	0x40000400
 8005768:	40000800 	.word	0x40000800
 800576c:	40000c00 	.word	0x40000c00
 8005770:	40014000 	.word	0x40014000
 8005774:	40014400 	.word	0x40014400
 8005778:	40014800 	.word	0x40014800

0800577c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	f023 0201 	bic.w	r2, r3, #1
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0303 	bic.w	r3, r3, #3
 80057b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f023 0302 	bic.w	r3, r3, #2
 80057c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005844 <TIM_OC1_SetConfig+0xc8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d10c      	bne.n	80057f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f023 0308 	bic.w	r3, r3, #8
 80057de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f023 0304 	bic.w	r3, r3, #4
 80057f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a13      	ldr	r2, [pc, #76]	@ (8005844 <TIM_OC1_SetConfig+0xc8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d111      	bne.n	800581e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	621a      	str	r2, [r3, #32]
}
 8005838:	bf00      	nop
 800583a:	371c      	adds	r7, #28
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	40010000 	.word	0x40010000

08005848 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	f023 0210 	bic.w	r2, r3, #16
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800587e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f023 0320 	bic.w	r3, r3, #32
 8005892:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a1e      	ldr	r2, [pc, #120]	@ (800591c <TIM_OC2_SetConfig+0xd4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d10d      	bne.n	80058c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a15      	ldr	r2, [pc, #84]	@ (800591c <TIM_OC2_SetConfig+0xd4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d113      	bne.n	80058f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40010000 	.word	0x40010000

08005920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800594e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0303 	bic.w	r3, r3, #3
 8005956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a1d      	ldr	r2, [pc, #116]	@ (80059f0 <TIM_OC3_SetConfig+0xd0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d10d      	bne.n	800599a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a14      	ldr	r2, [pc, #80]	@ (80059f0 <TIM_OC3_SetConfig+0xd0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d113      	bne.n	80059ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	621a      	str	r2, [r3, #32]
}
 80059e4:	bf00      	nop
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	40010000 	.word	0x40010000

080059f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	031b      	lsls	r3, r3, #12
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a10      	ldr	r2, [pc, #64]	@ (8005a90 <TIM_OC4_SetConfig+0x9c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d109      	bne.n	8005a68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	019b      	lsls	r3, r3, #6
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	621a      	str	r2, [r3, #32]
}
 8005a82:	bf00      	nop
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40010000 	.word	0x40010000

08005a94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	f023 0201 	bic.w	r2, r3, #1
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a24      	ldr	r2, [pc, #144]	@ (8005b50 <TIM_TI1_SetConfig+0xbc>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d013      	beq.n	8005aea <TIM_TI1_SetConfig+0x56>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac8:	d00f      	beq.n	8005aea <TIM_TI1_SetConfig+0x56>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4a21      	ldr	r2, [pc, #132]	@ (8005b54 <TIM_TI1_SetConfig+0xc0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00b      	beq.n	8005aea <TIM_TI1_SetConfig+0x56>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4a20      	ldr	r2, [pc, #128]	@ (8005b58 <TIM_TI1_SetConfig+0xc4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d007      	beq.n	8005aea <TIM_TI1_SetConfig+0x56>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4a1f      	ldr	r2, [pc, #124]	@ (8005b5c <TIM_TI1_SetConfig+0xc8>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d003      	beq.n	8005aea <TIM_TI1_SetConfig+0x56>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8005b60 <TIM_TI1_SetConfig+0xcc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d101      	bne.n	8005aee <TIM_TI1_SetConfig+0x5a>
 8005aea:	2301      	movs	r3, #1
 8005aec:	e000      	b.n	8005af0 <TIM_TI1_SetConfig+0x5c>
 8005aee:	2300      	movs	r3, #0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f023 0303 	bic.w	r3, r3, #3
 8005afa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	e003      	b.n	8005b0e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f043 0301 	orr.w	r3, r3, #1
 8005b0c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f023 030a 	bic.w	r3, r3, #10
 8005b28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f003 030a 	and.w	r3, r3, #10
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40010000 	.word	0x40010000
 8005b54:	40000400 	.word	0x40000400
 8005b58:	40000800 	.word	0x40000800
 8005b5c:	40000c00 	.word	0x40000c00
 8005b60:	40014000 	.word	0x40014000

08005b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f023 0201 	bic.w	r2, r3, #1
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f023 030a 	bic.w	r3, r3, #10
 8005ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	621a      	str	r2, [r3, #32]
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b087      	sub	sp, #28
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
 8005bce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f023 0210 	bic.w	r2, r3, #16
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	031b      	lsls	r3, r3, #12
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c14:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	621a      	str	r2, [r3, #32]
}
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f023 0210 	bic.w	r2, r3, #16
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	031b      	lsls	r3, r3, #12
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	621a      	str	r2, [r3, #32]
}
 8005c90:	bf00      	nop
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f023 0303 	bic.w	r3, r3, #3
 8005cc8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cd8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005cec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	621a      	str	r2, [r3, #32]
}
 8005d08:	bf00      	nop
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d40:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d52:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	031b      	lsls	r3, r3, #12
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005d66:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	031b      	lsls	r3, r3, #12
 8005d6c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f043 0307 	orr.w	r3, r3, #7
 8005db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	609a      	str	r2, [r3, #8]
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	021a      	lsls	r2, r3, #8
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	609a      	str	r2, [r3, #8]
}
 8005df8:	bf00      	nop
 8005dfa:	371c      	adds	r7, #28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	2201      	movs	r2, #1
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a1a      	ldr	r2, [r3, #32]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	43db      	mvns	r3, r3
 8005e26:	401a      	ands	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a1a      	ldr	r2, [r3, #32]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f003 031f 	and.w	r3, r3, #31
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	621a      	str	r2, [r3, #32]
}
 8005e42:	bf00      	nop
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
	...

08005e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e050      	b.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d018      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb4:	d013      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a18      	ldr	r2, [pc, #96]	@ (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00e      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a16      	ldr	r2, [pc, #88]	@ (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d009      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a15      	ldr	r2, [pc, #84]	@ (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d004      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a13      	ldr	r2, [pc, #76]	@ (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d10c      	bne.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40000800 	.word	0x40000800
 8005f24:	40000c00 	.word	0x40000c00
 8005f28:	40014000 	.word	0x40014000

08005f2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e03d      	b.n	8005fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e042      	b.n	8006090 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fc fea4 	bl	8002d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2224      	movs	r2, #36	@ 0x24
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800603a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 ff4f 	bl	8006ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	691a      	ldr	r2, [r3, #16]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	695a      	ldr	r2, [r3, #20]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08a      	sub	sp, #40	@ 0x28
 800609c:	af02      	add	r7, sp, #8
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	603b      	str	r3, [r7, #0]
 80060a4:	4613      	mov	r3, r2
 80060a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d175      	bne.n	80061a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <HAL_UART_Transmit+0x2c>
 80060be:	88fb      	ldrh	r3, [r7, #6]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e06e      	b.n	80061a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2221      	movs	r2, #33	@ 0x21
 80060d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060d6:	f7fc ff89 	bl	8002fec <HAL_GetTick>
 80060da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	88fa      	ldrh	r2, [r7, #6]
 80060e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	88fa      	ldrh	r2, [r7, #6]
 80060e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060f0:	d108      	bne.n	8006104 <HAL_UART_Transmit+0x6c>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d104      	bne.n	8006104 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	61bb      	str	r3, [r7, #24]
 8006102:	e003      	b.n	800610c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006108:	2300      	movs	r3, #0
 800610a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800610c:	e02e      	b.n	800616c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2200      	movs	r2, #0
 8006116:	2180      	movs	r1, #128	@ 0x80
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fc27 	bl	800696c <UART_WaitOnFlagUntilTimeout>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e03a      	b.n	80061a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10b      	bne.n	800614e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006144:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	3302      	adds	r3, #2
 800614a:	61bb      	str	r3, [r7, #24]
 800614c:	e007      	b.n	800615e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	781a      	ldrb	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	3301      	adds	r3, #1
 800615c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006162:	b29b      	uxth	r3, r3
 8006164:	3b01      	subs	r3, #1
 8006166:	b29a      	uxth	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1cb      	bne.n	800610e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2200      	movs	r2, #0
 800617e:	2140      	movs	r1, #64	@ 0x40
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 fbf3 	bl	800696c <UART_WaitOnFlagUntilTimeout>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e006      	b.n	80061a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	e000      	b.n	80061a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80061a4:	2302      	movs	r3, #2
  }
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	4613      	mov	r3, r2
 80061ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d112      	bne.n	80061ee <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_UART_Receive_DMA+0x26>
 80061ce:	88fb      	ldrh	r3, [r7, #6]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e00b      	b.n	80061f0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80061de:	88fb      	ldrh	r3, [r7, #6]
 80061e0:	461a      	mov	r2, r3
 80061e2:	68b9      	ldr	r1, [r7, #8]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fc1b 	bl	8006a20 <UART_Start_Receive_DMA>
 80061ea:	4603      	mov	r3, r0
 80061ec:	e000      	b.n	80061f0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80061ee:	2302      	movs	r3, #2
  }
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b0ba      	sub	sp, #232	@ 0xe8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800621e:	2300      	movs	r3, #0
 8006220:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006224:	2300      	movs	r3, #0
 8006226:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800622a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10f      	bne.n	800625e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800623e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006242:	f003 0320 	and.w	r3, r3, #32
 8006246:	2b00      	cmp	r3, #0
 8006248:	d009      	beq.n	800625e <HAL_UART_IRQHandler+0x66>
 800624a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fd83 	bl	8006d62 <UART_Receive_IT>
      return;
 800625c:	e25b      	b.n	8006716 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800625e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 80de 	beq.w	8006424 <HAL_UART_IRQHandler+0x22c>
 8006268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d106      	bne.n	8006282 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006278:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 80d1 	beq.w	8006424 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00b      	beq.n	80062a6 <HAL_UART_IRQHandler+0xae>
 800628e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006296:	2b00      	cmp	r3, #0
 8006298:	d005      	beq.n	80062a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800629e:	f043 0201 	orr.w	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <HAL_UART_IRQHandler+0xd2>
 80062b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d005      	beq.n	80062ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062c2:	f043 0202 	orr.w	r2, r3, #2
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00b      	beq.n	80062ee <HAL_UART_IRQHandler+0xf6>
 80062d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d005      	beq.n	80062ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e6:	f043 0204 	orr.w	r2, r3, #4
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d011      	beq.n	800631e <HAL_UART_IRQHandler+0x126>
 80062fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b00      	cmp	r3, #0
 8006304:	d105      	bne.n	8006312 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006316:	f043 0208 	orr.w	r2, r3, #8
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 81f2 	beq.w	800670c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800632c:	f003 0320 	and.w	r3, r3, #32
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_UART_IRQHandler+0x14e>
 8006334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fd0e 	bl	8006d62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006350:	2b40      	cmp	r3, #64	@ 0x40
 8006352:	bf0c      	ite	eq
 8006354:	2301      	moveq	r3, #1
 8006356:	2300      	movne	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d103      	bne.n	8006372 <HAL_UART_IRQHandler+0x17a>
 800636a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800636e:	2b00      	cmp	r3, #0
 8006370:	d04f      	beq.n	8006412 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fc16 	bl	8006ba4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006382:	2b40      	cmp	r3, #64	@ 0x40
 8006384:	d141      	bne.n	800640a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3314      	adds	r3, #20
 800638c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800639c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3314      	adds	r3, #20
 80063ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1d9      	bne.n	8006386 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d013      	beq.n	8006402 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063de:	4a7e      	ldr	r2, [pc, #504]	@ (80065d8 <HAL_UART_IRQHandler+0x3e0>)
 80063e0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fd f864 	bl	80034b4 <HAL_DMA_Abort_IT>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d016      	beq.n	8006420 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80063fc:	4610      	mov	r0, r2
 80063fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006400:	e00e      	b.n	8006420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f99e 	bl	8006744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006408:	e00a      	b.n	8006420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f99a 	bl	8006744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006410:	e006      	b.n	8006420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f996 	bl	8006744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800641e:	e175      	b.n	800670c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006420:	bf00      	nop
    return;
 8006422:	e173      	b.n	800670c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006428:	2b01      	cmp	r3, #1
 800642a:	f040 814f 	bne.w	80066cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006432:	f003 0310 	and.w	r3, r3, #16
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 8148 	beq.w	80066cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800643c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006440:	f003 0310 	and.w	r3, r3, #16
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 8141 	beq.w	80066cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800644a:	2300      	movs	r3, #0
 800644c:	60bb      	str	r3, [r7, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	60bb      	str	r3, [r7, #8]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	60bb      	str	r3, [r7, #8]
 800645e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646a:	2b40      	cmp	r3, #64	@ 0x40
 800646c:	f040 80b6 	bne.w	80065dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800647c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 8145 	beq.w	8006710 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800648a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800648e:	429a      	cmp	r2, r3
 8006490:	f080 813e 	bcs.w	8006710 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800649a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064a6:	f000 8088 	beq.w	80065ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	330c      	adds	r3, #12
 80064b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80064c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	330c      	adds	r3, #12
 80064d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80064d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80064e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80064ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1d9      	bne.n	80064aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3314      	adds	r3, #20
 80064fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006506:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3314      	adds	r3, #20
 8006516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800651a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800651e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006522:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800652c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e1      	bne.n	80064f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3314      	adds	r3, #20
 8006538:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006544:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006548:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3314      	adds	r3, #20
 8006552:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006556:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006558:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800655c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006564:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e3      	bne.n	8006532 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	330c      	adds	r3, #12
 800657e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800658a:	f023 0310 	bic.w	r3, r3, #16
 800658e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	330c      	adds	r3, #12
 8006598:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800659c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800659e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e3      	bne.n	8006578 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fc ff0d 	bl	80033d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2202      	movs	r2, #2
 80065be:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f8c1 	bl	8006758 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065d6:	e09b      	b.n	8006710 <HAL_UART_IRQHandler+0x518>
 80065d8:	08006c6b 	.word	0x08006c6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 808e 	beq.w	8006714 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80065f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 8089 	beq.w	8006714 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	330c      	adds	r3, #12
 8006608:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006614:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006618:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	330c      	adds	r3, #12
 8006622:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006626:	647a      	str	r2, [r7, #68]	@ 0x44
 8006628:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800662c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e3      	bne.n	8006602 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3314      	adds	r3, #20
 8006640:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	623b      	str	r3, [r7, #32]
   return(result);
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	f023 0301 	bic.w	r3, r3, #1
 8006650:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3314      	adds	r3, #20
 800665a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800665e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006660:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800666c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e3      	bne.n	800663a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2220      	movs	r2, #32
 8006676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	330c      	adds	r3, #12
 8006686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	e853 3f00 	ldrex	r3, [r3]
 800668e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0310 	bic.w	r3, r3, #16
 8006696:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	330c      	adds	r3, #12
 80066a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80066a4:	61fa      	str	r2, [r7, #28]
 80066a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a8:	69b9      	ldr	r1, [r7, #24]
 80066aa:	69fa      	ldr	r2, [r7, #28]
 80066ac:	e841 2300 	strex	r3, r2, [r1]
 80066b0:	617b      	str	r3, [r7, #20]
   return(result);
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e3      	bne.n	8006680 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f847 	bl	8006758 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066ca:	e023      	b.n	8006714 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d009      	beq.n	80066ec <HAL_UART_IRQHandler+0x4f4>
 80066d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fad4 	bl	8006c92 <UART_Transmit_IT>
    return;
 80066ea:	e014      	b.n	8006716 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00e      	beq.n	8006716 <HAL_UART_IRQHandler+0x51e>
 80066f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006700:	2b00      	cmp	r3, #0
 8006702:	d008      	beq.n	8006716 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fb14 	bl	8006d32 <UART_EndTransmit_IT>
    return;
 800670a:	e004      	b.n	8006716 <HAL_UART_IRQHandler+0x51e>
    return;
 800670c:	bf00      	nop
 800670e:	e002      	b.n	8006716 <HAL_UART_IRQHandler+0x51e>
      return;
 8006710:	bf00      	nop
 8006712:	e000      	b.n	8006716 <HAL_UART_IRQHandler+0x51e>
      return;
 8006714:	bf00      	nop
  }
}
 8006716:	37e8      	adds	r7, #232	@ 0xe8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b09c      	sub	sp, #112	@ 0x70
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800677c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006788:	2b00      	cmp	r3, #0
 800678a:	d172      	bne.n	8006872 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800678c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800678e:	2200      	movs	r2, #0
 8006790:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006792:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	330c      	adds	r3, #12
 8006798:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	330c      	adds	r3, #12
 80067b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80067b2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80067b4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e5      	bne.n	8006792 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3314      	adds	r3, #20
 80067cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d0:	e853 3f00 	ldrex	r3, [r3]
 80067d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d8:	f023 0301 	bic.w	r3, r3, #1
 80067dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80067de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3314      	adds	r3, #20
 80067e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80067e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80067e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e5      	bne.n	80067c6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3314      	adds	r3, #20
 8006800:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	623b      	str	r3, [r7, #32]
   return(result);
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006810:	663b      	str	r3, [r7, #96]	@ 0x60
 8006812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3314      	adds	r3, #20
 8006818:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800681a:	633a      	str	r2, [r7, #48]	@ 0x30
 800681c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e5      	bne.n	80067fa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800682e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006830:	2220      	movs	r2, #32
 8006832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006836:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683a:	2b01      	cmp	r3, #1
 800683c:	d119      	bne.n	8006872 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	330c      	adds	r3, #12
 8006844:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	60fb      	str	r3, [r7, #12]
   return(result);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f023 0310 	bic.w	r3, r3, #16
 8006854:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	330c      	adds	r3, #12
 800685c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800685e:	61fa      	str	r2, [r7, #28]
 8006860:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	69b9      	ldr	r1, [r7, #24]
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	617b      	str	r3, [r7, #20]
   return(result);
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e5      	bne.n	800683e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006872:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006874:	2200      	movs	r2, #0
 8006876:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800687a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800687c:	2b01      	cmp	r3, #1
 800687e:	d106      	bne.n	800688e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006882:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006884:	4619      	mov	r1, r3
 8006886:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006888:	f7ff ff66 	bl	8006758 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800688c:	e002      	b.n	8006894 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800688e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006890:	f7fc f964 	bl	8002b5c <HAL_UART_RxCpltCallback>
}
 8006894:	bf00      	nop
 8006896:	3770      	adds	r7, #112	@ 0x70
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d108      	bne.n	80068ca <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068bc:	085b      	lsrs	r3, r3, #1
 80068be:	b29b      	uxth	r3, r3
 80068c0:	4619      	mov	r1, r3
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f7ff ff48 	bl	8006758 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068c8:	e002      	b.n	80068d0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7ff ff30 	bl	8006730 <HAL_UART_RxHalfCpltCallback>
}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f4:	2b80      	cmp	r3, #128	@ 0x80
 80068f6:	bf0c      	ite	eq
 80068f8:	2301      	moveq	r3, #1
 80068fa:	2300      	movne	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b21      	cmp	r3, #33	@ 0x21
 800690a:	d108      	bne.n	800691e <UART_DMAError+0x46>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d005      	beq.n	800691e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2200      	movs	r2, #0
 8006916:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006918:	68b8      	ldr	r0, [r7, #8]
 800691a:	f000 f91b 	bl	8006b54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006928:	2b40      	cmp	r3, #64	@ 0x40
 800692a:	bf0c      	ite	eq
 800692c:	2301      	moveq	r3, #1
 800692e:	2300      	movne	r3, #0
 8006930:	b2db      	uxtb	r3, r3
 8006932:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b22      	cmp	r3, #34	@ 0x22
 800693e:	d108      	bne.n	8006952 <UART_DMAError+0x7a>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2200      	movs	r2, #0
 800694a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800694c:	68b8      	ldr	r0, [r7, #8]
 800694e:	f000 f929 	bl	8006ba4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006956:	f043 0210 	orr.w	r2, r3, #16
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800695e:	68b8      	ldr	r0, [r7, #8]
 8006960:	f7ff fef0 	bl	8006744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006964:	bf00      	nop
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	603b      	str	r3, [r7, #0]
 8006978:	4613      	mov	r3, r2
 800697a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800697c:	e03b      	b.n	80069f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d037      	beq.n	80069f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006986:	f7fc fb31 	bl	8002fec <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	6a3a      	ldr	r2, [r7, #32]
 8006992:	429a      	cmp	r2, r3
 8006994:	d302      	bcc.n	800699c <UART_WaitOnFlagUntilTimeout+0x30>
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e03a      	b.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f003 0304 	and.w	r3, r3, #4
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d023      	beq.n	80069f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b80      	cmp	r3, #128	@ 0x80
 80069b2:	d020      	beq.n	80069f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b40      	cmp	r3, #64	@ 0x40
 80069b8:	d01d      	beq.n	80069f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0308 	and.w	r3, r3, #8
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d116      	bne.n	80069f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80069c8:	2300      	movs	r3, #0
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 f8e0 	bl	8006ba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2208      	movs	r2, #8
 80069e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e00f      	b.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4013      	ands	r3, r2
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	bf0c      	ite	eq
 8006a06:	2301      	moveq	r3, #1
 8006a08:	2300      	movne	r3, #0
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d0b4      	beq.n	800697e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
	...

08006a20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b098      	sub	sp, #96	@ 0x60
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	88fa      	ldrh	r2, [r7, #6]
 8006a38:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2222      	movs	r2, #34	@ 0x22
 8006a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4c:	4a3e      	ldr	r2, [pc, #248]	@ (8006b48 <UART_Start_Receive_DMA+0x128>)
 8006a4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a54:	4a3d      	ldr	r2, [pc, #244]	@ (8006b4c <UART_Start_Receive_DMA+0x12c>)
 8006a56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5c:	4a3c      	ldr	r2, [pc, #240]	@ (8006b50 <UART_Start_Receive_DMA+0x130>)
 8006a5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a64:	2200      	movs	r2, #0
 8006a66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006a68:	f107 0308 	add.w	r3, r7, #8
 8006a6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	88fb      	ldrh	r3, [r7, #6]
 8006a80:	f7fc fc50 	bl	8003324 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006a84:	2300      	movs	r3, #0
 8006a86:	613b      	str	r3, [r7, #16]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	613b      	str	r3, [r7, #16]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	613b      	str	r3, [r7, #16]
 8006a98:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d019      	beq.n	8006ad6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	330c      	adds	r3, #12
 8006aa8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	330c      	adds	r3, #12
 8006ac0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ac2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006ac8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e5      	bne.n	8006aa2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3314      	adds	r3, #20
 8006adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae8:	f043 0301 	orr.w	r3, r3, #1
 8006aec:	657b      	str	r3, [r7, #84]	@ 0x54
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3314      	adds	r3, #20
 8006af4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006af6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006afc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e5      	bne.n	8006ad6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3314      	adds	r3, #20
 8006b10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	617b      	str	r3, [r7, #20]
   return(result);
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b20:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3314      	adds	r3, #20
 8006b28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2e:	6a39      	ldr	r1, [r7, #32]
 8006b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1e5      	bne.n	8006b0a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3760      	adds	r7, #96	@ 0x60
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	08006771 	.word	0x08006771
 8006b4c:	0800689d 	.word	0x0800689d
 8006b50:	080068d9 	.word	0x080068d9

08006b54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b089      	sub	sp, #36	@ 0x24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	330c      	adds	r3, #12
 8006b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	e853 3f00 	ldrex	r3, [r3]
 8006b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	69fa      	ldr	r2, [r7, #28]
 8006b7c:	61ba      	str	r2, [r7, #24]
 8006b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b80:	6979      	ldr	r1, [r7, #20]
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	e841 2300 	strex	r3, r2, [r1]
 8006b88:	613b      	str	r3, [r7, #16]
   return(result);
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e5      	bne.n	8006b5c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2220      	movs	r2, #32
 8006b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006b98:	bf00      	nop
 8006b9a:	3724      	adds	r7, #36	@ 0x24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b095      	sub	sp, #84	@ 0x54
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	330c      	adds	r3, #12
 8006bb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb6:	e853 3f00 	ldrex	r3, [r3]
 8006bba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	330c      	adds	r3, #12
 8006bca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bcc:	643a      	str	r2, [r7, #64]	@ 0x40
 8006bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e5      	bne.n	8006bac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3314      	adds	r3, #20
 8006be6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	f023 0301 	bic.w	r3, r3, #1
 8006bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3314      	adds	r3, #20
 8006bfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e5      	bne.n	8006be0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d119      	bne.n	8006c50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	330c      	adds	r3, #12
 8006c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	e853 3f00 	ldrex	r3, [r3]
 8006c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f023 0310 	bic.w	r3, r3, #16
 8006c32:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	330c      	adds	r3, #12
 8006c3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c3c:	61ba      	str	r2, [r7, #24]
 8006c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	6979      	ldr	r1, [r7, #20]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	e841 2300 	strex	r3, r2, [r1]
 8006c48:	613b      	str	r3, [r7, #16]
   return(result);
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e5      	bne.n	8006c1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006c5e:	bf00      	nop
 8006c60:	3754      	adds	r7, #84	@ 0x54
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f7ff fd5d 	bl	8006744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c8a:	bf00      	nop
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b085      	sub	sp, #20
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b21      	cmp	r3, #33	@ 0x21
 8006ca4:	d13e      	bne.n	8006d24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cae:	d114      	bne.n	8006cda <UART_Transmit_IT+0x48>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d110      	bne.n	8006cda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ccc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	1c9a      	adds	r2, r3, #2
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	621a      	str	r2, [r3, #32]
 8006cd8:	e008      	b.n	8006cec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	1c59      	adds	r1, r3, #1
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	6211      	str	r1, [r2, #32]
 8006ce4:	781a      	ldrb	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10f      	bne.n	8006d20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68da      	ldr	r2, [r3, #12]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	e000      	b.n	8006d26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d24:	2302      	movs	r3, #2
  }
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b082      	sub	sp, #8
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7ff fce2 	bl	800671c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b08c      	sub	sp, #48	@ 0x30
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b22      	cmp	r3, #34	@ 0x22
 8006d74:	f040 80ae 	bne.w	8006ed4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d80:	d117      	bne.n	8006db2 <UART_Receive_IT+0x50>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d113      	bne.n	8006db2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d92:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006daa:	1c9a      	adds	r2, r3, #2
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	629a      	str	r2, [r3, #40]	@ 0x28
 8006db0:	e026      	b.n	8006e00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc4:	d007      	beq.n	8006dd6 <UART_Receive_IT+0x74>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10a      	bne.n	8006de4 <UART_Receive_IT+0x82>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d106      	bne.n	8006de4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	e008      	b.n	8006df6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d15d      	bne.n	8006ed0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0220 	bic.w	r2, r2, #32
 8006e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	695a      	ldr	r2, [r3, #20]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0201 	bic.w	r2, r2, #1
 8006e42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2220      	movs	r2, #32
 8006e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d135      	bne.n	8006ec6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	330c      	adds	r3, #12
 8006e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f023 0310 	bic.w	r3, r3, #16
 8006e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e80:	623a      	str	r2, [r7, #32]
 8006e82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	69f9      	ldr	r1, [r7, #28]
 8006e86:	6a3a      	ldr	r2, [r7, #32]
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e5      	bne.n	8006e60 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0310 	and.w	r3, r3, #16
 8006e9e:	2b10      	cmp	r3, #16
 8006ea0:	d10a      	bne.n	8006eb8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	60fb      	str	r3, [r7, #12]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7ff fc4a 	bl	8006758 <HAL_UARTEx_RxEventCallback>
 8006ec4:	e002      	b.n	8006ecc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7fb fe48 	bl	8002b5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e002      	b.n	8006ed6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	e000      	b.n	8006ed6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006ed4:	2302      	movs	r3, #2
  }
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3730      	adds	r7, #48	@ 0x30
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ee4:	b0c0      	sub	sp, #256	@ 0x100
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efc:	68d9      	ldr	r1, [r3, #12]
 8006efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	ea40 0301 	orr.w	r3, r0, r1
 8006f08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f38:	f021 010c 	bic.w	r1, r1, #12
 8006f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f46:	430b      	orrs	r3, r1
 8006f48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f5a:	6999      	ldr	r1, [r3, #24]
 8006f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	ea40 0301 	orr.w	r3, r0, r1
 8006f66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	4b8f      	ldr	r3, [pc, #572]	@ (80071ac <UART_SetConfig+0x2cc>)
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d005      	beq.n	8006f80 <UART_SetConfig+0xa0>
 8006f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	4b8d      	ldr	r3, [pc, #564]	@ (80071b0 <UART_SetConfig+0x2d0>)
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d104      	bne.n	8006f8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f80:	f7fd fb46 	bl	8004610 <HAL_RCC_GetPCLK2Freq>
 8006f84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f88:	e003      	b.n	8006f92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f8a:	f7fd fb2d 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8006f8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f9c:	f040 810c 	bne.w	80071b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006faa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006fae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006fb2:	4622      	mov	r2, r4
 8006fb4:	462b      	mov	r3, r5
 8006fb6:	1891      	adds	r1, r2, r2
 8006fb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006fba:	415b      	adcs	r3, r3
 8006fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	eb12 0801 	adds.w	r8, r2, r1
 8006fc8:	4629      	mov	r1, r5
 8006fca:	eb43 0901 	adc.w	r9, r3, r1
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	f04f 0300 	mov.w	r3, #0
 8006fd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fe2:	4690      	mov	r8, r2
 8006fe4:	4699      	mov	r9, r3
 8006fe6:	4623      	mov	r3, r4
 8006fe8:	eb18 0303 	adds.w	r3, r8, r3
 8006fec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ff0:	462b      	mov	r3, r5
 8006ff2:	eb49 0303 	adc.w	r3, r9, r3
 8006ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007006:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800700a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800700e:	460b      	mov	r3, r1
 8007010:	18db      	adds	r3, r3, r3
 8007012:	653b      	str	r3, [r7, #80]	@ 0x50
 8007014:	4613      	mov	r3, r2
 8007016:	eb42 0303 	adc.w	r3, r2, r3
 800701a:	657b      	str	r3, [r7, #84]	@ 0x54
 800701c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007020:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007024:	f7f9 fda2 	bl	8000b6c <__aeabi_uldivmod>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4b61      	ldr	r3, [pc, #388]	@ (80071b4 <UART_SetConfig+0x2d4>)
 800702e:	fba3 2302 	umull	r2, r3, r3, r2
 8007032:	095b      	lsrs	r3, r3, #5
 8007034:	011c      	lsls	r4, r3, #4
 8007036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800703a:	2200      	movs	r2, #0
 800703c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007040:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007044:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007048:	4642      	mov	r2, r8
 800704a:	464b      	mov	r3, r9
 800704c:	1891      	adds	r1, r2, r2
 800704e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007050:	415b      	adcs	r3, r3
 8007052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007054:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007058:	4641      	mov	r1, r8
 800705a:	eb12 0a01 	adds.w	sl, r2, r1
 800705e:	4649      	mov	r1, r9
 8007060:	eb43 0b01 	adc.w	fp, r3, r1
 8007064:	f04f 0200 	mov.w	r2, #0
 8007068:	f04f 0300 	mov.w	r3, #0
 800706c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007070:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007074:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007078:	4692      	mov	sl, r2
 800707a:	469b      	mov	fp, r3
 800707c:	4643      	mov	r3, r8
 800707e:	eb1a 0303 	adds.w	r3, sl, r3
 8007082:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007086:	464b      	mov	r3, r9
 8007088:	eb4b 0303 	adc.w	r3, fp, r3
 800708c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800709c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80070a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80070a4:	460b      	mov	r3, r1
 80070a6:	18db      	adds	r3, r3, r3
 80070a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80070aa:	4613      	mov	r3, r2
 80070ac:	eb42 0303 	adc.w	r3, r2, r3
 80070b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80070b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80070b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80070ba:	f7f9 fd57 	bl	8000b6c <__aeabi_uldivmod>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4611      	mov	r1, r2
 80070c4:	4b3b      	ldr	r3, [pc, #236]	@ (80071b4 <UART_SetConfig+0x2d4>)
 80070c6:	fba3 2301 	umull	r2, r3, r3, r1
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	2264      	movs	r2, #100	@ 0x64
 80070ce:	fb02 f303 	mul.w	r3, r2, r3
 80070d2:	1acb      	subs	r3, r1, r3
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80070da:	4b36      	ldr	r3, [pc, #216]	@ (80071b4 <UART_SetConfig+0x2d4>)
 80070dc:	fba3 2302 	umull	r2, r3, r3, r2
 80070e0:	095b      	lsrs	r3, r3, #5
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80070e8:	441c      	add	r4, r3
 80070ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80070f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070fc:	4642      	mov	r2, r8
 80070fe:	464b      	mov	r3, r9
 8007100:	1891      	adds	r1, r2, r2
 8007102:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007104:	415b      	adcs	r3, r3
 8007106:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007108:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800710c:	4641      	mov	r1, r8
 800710e:	1851      	adds	r1, r2, r1
 8007110:	6339      	str	r1, [r7, #48]	@ 0x30
 8007112:	4649      	mov	r1, r9
 8007114:	414b      	adcs	r3, r1
 8007116:	637b      	str	r3, [r7, #52]	@ 0x34
 8007118:	f04f 0200 	mov.w	r2, #0
 800711c:	f04f 0300 	mov.w	r3, #0
 8007120:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007124:	4659      	mov	r1, fp
 8007126:	00cb      	lsls	r3, r1, #3
 8007128:	4651      	mov	r1, sl
 800712a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800712e:	4651      	mov	r1, sl
 8007130:	00ca      	lsls	r2, r1, #3
 8007132:	4610      	mov	r0, r2
 8007134:	4619      	mov	r1, r3
 8007136:	4603      	mov	r3, r0
 8007138:	4642      	mov	r2, r8
 800713a:	189b      	adds	r3, r3, r2
 800713c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007140:	464b      	mov	r3, r9
 8007142:	460a      	mov	r2, r1
 8007144:	eb42 0303 	adc.w	r3, r2, r3
 8007148:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800714c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007158:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800715c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007160:	460b      	mov	r3, r1
 8007162:	18db      	adds	r3, r3, r3
 8007164:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007166:	4613      	mov	r3, r2
 8007168:	eb42 0303 	adc.w	r3, r2, r3
 800716c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800716e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007172:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007176:	f7f9 fcf9 	bl	8000b6c <__aeabi_uldivmod>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4b0d      	ldr	r3, [pc, #52]	@ (80071b4 <UART_SetConfig+0x2d4>)
 8007180:	fba3 1302 	umull	r1, r3, r3, r2
 8007184:	095b      	lsrs	r3, r3, #5
 8007186:	2164      	movs	r1, #100	@ 0x64
 8007188:	fb01 f303 	mul.w	r3, r1, r3
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	3332      	adds	r3, #50	@ 0x32
 8007192:	4a08      	ldr	r2, [pc, #32]	@ (80071b4 <UART_SetConfig+0x2d4>)
 8007194:	fba2 2303 	umull	r2, r3, r2, r3
 8007198:	095b      	lsrs	r3, r3, #5
 800719a:	f003 0207 	and.w	r2, r3, #7
 800719e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4422      	add	r2, r4
 80071a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071a8:	e106      	b.n	80073b8 <UART_SetConfig+0x4d8>
 80071aa:	bf00      	nop
 80071ac:	40011000 	.word	0x40011000
 80071b0:	40011400 	.word	0x40011400
 80071b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071bc:	2200      	movs	r2, #0
 80071be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80071c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80071ca:	4642      	mov	r2, r8
 80071cc:	464b      	mov	r3, r9
 80071ce:	1891      	adds	r1, r2, r2
 80071d0:	6239      	str	r1, [r7, #32]
 80071d2:	415b      	adcs	r3, r3
 80071d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80071d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071da:	4641      	mov	r1, r8
 80071dc:	1854      	adds	r4, r2, r1
 80071de:	4649      	mov	r1, r9
 80071e0:	eb43 0501 	adc.w	r5, r3, r1
 80071e4:	f04f 0200 	mov.w	r2, #0
 80071e8:	f04f 0300 	mov.w	r3, #0
 80071ec:	00eb      	lsls	r3, r5, #3
 80071ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071f2:	00e2      	lsls	r2, r4, #3
 80071f4:	4614      	mov	r4, r2
 80071f6:	461d      	mov	r5, r3
 80071f8:	4643      	mov	r3, r8
 80071fa:	18e3      	adds	r3, r4, r3
 80071fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007200:	464b      	mov	r3, r9
 8007202:	eb45 0303 	adc.w	r3, r5, r3
 8007206:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800720a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007216:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800721a:	f04f 0200 	mov.w	r2, #0
 800721e:	f04f 0300 	mov.w	r3, #0
 8007222:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007226:	4629      	mov	r1, r5
 8007228:	008b      	lsls	r3, r1, #2
 800722a:	4621      	mov	r1, r4
 800722c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007230:	4621      	mov	r1, r4
 8007232:	008a      	lsls	r2, r1, #2
 8007234:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007238:	f7f9 fc98 	bl	8000b6c <__aeabi_uldivmod>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4b60      	ldr	r3, [pc, #384]	@ (80073c4 <UART_SetConfig+0x4e4>)
 8007242:	fba3 2302 	umull	r2, r3, r3, r2
 8007246:	095b      	lsrs	r3, r3, #5
 8007248:	011c      	lsls	r4, r3, #4
 800724a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800724e:	2200      	movs	r2, #0
 8007250:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007254:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007258:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800725c:	4642      	mov	r2, r8
 800725e:	464b      	mov	r3, r9
 8007260:	1891      	adds	r1, r2, r2
 8007262:	61b9      	str	r1, [r7, #24]
 8007264:	415b      	adcs	r3, r3
 8007266:	61fb      	str	r3, [r7, #28]
 8007268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800726c:	4641      	mov	r1, r8
 800726e:	1851      	adds	r1, r2, r1
 8007270:	6139      	str	r1, [r7, #16]
 8007272:	4649      	mov	r1, r9
 8007274:	414b      	adcs	r3, r1
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	f04f 0300 	mov.w	r3, #0
 8007280:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007284:	4659      	mov	r1, fp
 8007286:	00cb      	lsls	r3, r1, #3
 8007288:	4651      	mov	r1, sl
 800728a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800728e:	4651      	mov	r1, sl
 8007290:	00ca      	lsls	r2, r1, #3
 8007292:	4610      	mov	r0, r2
 8007294:	4619      	mov	r1, r3
 8007296:	4603      	mov	r3, r0
 8007298:	4642      	mov	r2, r8
 800729a:	189b      	adds	r3, r3, r2
 800729c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072a0:	464b      	mov	r3, r9
 80072a2:	460a      	mov	r2, r1
 80072a4:	eb42 0303 	adc.w	r3, r2, r3
 80072a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80072b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80072b8:	f04f 0200 	mov.w	r2, #0
 80072bc:	f04f 0300 	mov.w	r3, #0
 80072c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80072c4:	4649      	mov	r1, r9
 80072c6:	008b      	lsls	r3, r1, #2
 80072c8:	4641      	mov	r1, r8
 80072ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072ce:	4641      	mov	r1, r8
 80072d0:	008a      	lsls	r2, r1, #2
 80072d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80072d6:	f7f9 fc49 	bl	8000b6c <__aeabi_uldivmod>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	4611      	mov	r1, r2
 80072e0:	4b38      	ldr	r3, [pc, #224]	@ (80073c4 <UART_SetConfig+0x4e4>)
 80072e2:	fba3 2301 	umull	r2, r3, r3, r1
 80072e6:	095b      	lsrs	r3, r3, #5
 80072e8:	2264      	movs	r2, #100	@ 0x64
 80072ea:	fb02 f303 	mul.w	r3, r2, r3
 80072ee:	1acb      	subs	r3, r1, r3
 80072f0:	011b      	lsls	r3, r3, #4
 80072f2:	3332      	adds	r3, #50	@ 0x32
 80072f4:	4a33      	ldr	r2, [pc, #204]	@ (80073c4 <UART_SetConfig+0x4e4>)
 80072f6:	fba2 2303 	umull	r2, r3, r2, r3
 80072fa:	095b      	lsrs	r3, r3, #5
 80072fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007300:	441c      	add	r4, r3
 8007302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007306:	2200      	movs	r2, #0
 8007308:	673b      	str	r3, [r7, #112]	@ 0x70
 800730a:	677a      	str	r2, [r7, #116]	@ 0x74
 800730c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007310:	4642      	mov	r2, r8
 8007312:	464b      	mov	r3, r9
 8007314:	1891      	adds	r1, r2, r2
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	415b      	adcs	r3, r3
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007320:	4641      	mov	r1, r8
 8007322:	1851      	adds	r1, r2, r1
 8007324:	6039      	str	r1, [r7, #0]
 8007326:	4649      	mov	r1, r9
 8007328:	414b      	adcs	r3, r1
 800732a:	607b      	str	r3, [r7, #4]
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007338:	4659      	mov	r1, fp
 800733a:	00cb      	lsls	r3, r1, #3
 800733c:	4651      	mov	r1, sl
 800733e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007342:	4651      	mov	r1, sl
 8007344:	00ca      	lsls	r2, r1, #3
 8007346:	4610      	mov	r0, r2
 8007348:	4619      	mov	r1, r3
 800734a:	4603      	mov	r3, r0
 800734c:	4642      	mov	r2, r8
 800734e:	189b      	adds	r3, r3, r2
 8007350:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007352:	464b      	mov	r3, r9
 8007354:	460a      	mov	r2, r1
 8007356:	eb42 0303 	adc.w	r3, r2, r3
 800735a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800735c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	663b      	str	r3, [r7, #96]	@ 0x60
 8007366:	667a      	str	r2, [r7, #100]	@ 0x64
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	f04f 0300 	mov.w	r3, #0
 8007370:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007374:	4649      	mov	r1, r9
 8007376:	008b      	lsls	r3, r1, #2
 8007378:	4641      	mov	r1, r8
 800737a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800737e:	4641      	mov	r1, r8
 8007380:	008a      	lsls	r2, r1, #2
 8007382:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007386:	f7f9 fbf1 	bl	8000b6c <__aeabi_uldivmod>
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	4b0d      	ldr	r3, [pc, #52]	@ (80073c4 <UART_SetConfig+0x4e4>)
 8007390:	fba3 1302 	umull	r1, r3, r3, r2
 8007394:	095b      	lsrs	r3, r3, #5
 8007396:	2164      	movs	r1, #100	@ 0x64
 8007398:	fb01 f303 	mul.w	r3, r1, r3
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	3332      	adds	r3, #50	@ 0x32
 80073a2:	4a08      	ldr	r2, [pc, #32]	@ (80073c4 <UART_SetConfig+0x4e4>)
 80073a4:	fba2 2303 	umull	r2, r3, r2, r3
 80073a8:	095b      	lsrs	r3, r3, #5
 80073aa:	f003 020f 	and.w	r2, r3, #15
 80073ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4422      	add	r2, r4
 80073b6:	609a      	str	r2, [r3, #8]
}
 80073b8:	bf00      	nop
 80073ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80073be:	46bd      	mov	sp, r7
 80073c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073c4:	51eb851f 	.word	0x51eb851f

080073c8 <__NVIC_SetPriority>:
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	4603      	mov	r3, r0
 80073d0:	6039      	str	r1, [r7, #0]
 80073d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	db0a      	blt.n	80073f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	490c      	ldr	r1, [pc, #48]	@ (8007414 <__NVIC_SetPriority+0x4c>)
 80073e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073e6:	0112      	lsls	r2, r2, #4
 80073e8:	b2d2      	uxtb	r2, r2
 80073ea:	440b      	add	r3, r1
 80073ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80073f0:	e00a      	b.n	8007408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	4908      	ldr	r1, [pc, #32]	@ (8007418 <__NVIC_SetPriority+0x50>)
 80073f8:	79fb      	ldrb	r3, [r7, #7]
 80073fa:	f003 030f 	and.w	r3, r3, #15
 80073fe:	3b04      	subs	r3, #4
 8007400:	0112      	lsls	r2, r2, #4
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	440b      	add	r3, r1
 8007406:	761a      	strb	r2, [r3, #24]
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	e000e100 	.word	0xe000e100
 8007418:	e000ed00 	.word	0xe000ed00

0800741c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007420:	4b05      	ldr	r3, [pc, #20]	@ (8007438 <SysTick_Handler+0x1c>)
 8007422:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007424:	f001 fd46 	bl	8008eb4 <xTaskGetSchedulerState>
 8007428:	4603      	mov	r3, r0
 800742a:	2b01      	cmp	r3, #1
 800742c:	d001      	beq.n	8007432 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800742e:	f002 fb3b 	bl	8009aa8 <xPortSysTickHandler>
  }
}
 8007432:	bf00      	nop
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	e000e010 	.word	0xe000e010

0800743c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800743c:	b580      	push	{r7, lr}
 800743e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007440:	2100      	movs	r1, #0
 8007442:	f06f 0004 	mvn.w	r0, #4
 8007446:	f7ff ffbf 	bl	80073c8 <__NVIC_SetPriority>
#endif
}
 800744a:	bf00      	nop
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007456:	f3ef 8305 	mrs	r3, IPSR
 800745a:	603b      	str	r3, [r7, #0]
  return(result);
 800745c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007462:	f06f 0305 	mvn.w	r3, #5
 8007466:	607b      	str	r3, [r7, #4]
 8007468:	e00c      	b.n	8007484 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800746a:	4b0a      	ldr	r3, [pc, #40]	@ (8007494 <osKernelInitialize+0x44>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d105      	bne.n	800747e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007472:	4b08      	ldr	r3, [pc, #32]	@ (8007494 <osKernelInitialize+0x44>)
 8007474:	2201      	movs	r2, #1
 8007476:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007478:	2300      	movs	r3, #0
 800747a:	607b      	str	r3, [r7, #4]
 800747c:	e002      	b.n	8007484 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800747e:	f04f 33ff 	mov.w	r3, #4294967295
 8007482:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007484:	687b      	ldr	r3, [r7, #4]
}
 8007486:	4618      	mov	r0, r3
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	200005b8 	.word	0x200005b8

08007498 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800749e:	f3ef 8305 	mrs	r3, IPSR
 80074a2:	603b      	str	r3, [r7, #0]
  return(result);
 80074a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80074aa:	f06f 0305 	mvn.w	r3, #5
 80074ae:	607b      	str	r3, [r7, #4]
 80074b0:	e010      	b.n	80074d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80074b2:	4b0b      	ldr	r3, [pc, #44]	@ (80074e0 <osKernelStart+0x48>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d109      	bne.n	80074ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80074ba:	f7ff ffbf 	bl	800743c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80074be:	4b08      	ldr	r3, [pc, #32]	@ (80074e0 <osKernelStart+0x48>)
 80074c0:	2202      	movs	r2, #2
 80074c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80074c4:	f001 f892 	bl	80085ec <vTaskStartScheduler>
      stat = osOK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	607b      	str	r3, [r7, #4]
 80074cc:	e002      	b.n	80074d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80074ce:	f04f 33ff 	mov.w	r3, #4294967295
 80074d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074d4:	687b      	ldr	r3, [r7, #4]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	200005b8 	.word	0x200005b8

080074e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08e      	sub	sp, #56	@ 0x38
 80074e8:	af04      	add	r7, sp, #16
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80074f0:	2300      	movs	r3, #0
 80074f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074f4:	f3ef 8305 	mrs	r3, IPSR
 80074f8:	617b      	str	r3, [r7, #20]
  return(result);
 80074fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d17e      	bne.n	80075fe <osThreadNew+0x11a>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d07b      	beq.n	80075fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007506:	2380      	movs	r3, #128	@ 0x80
 8007508:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800750a:	2318      	movs	r3, #24
 800750c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800750e:	2300      	movs	r3, #0
 8007510:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007512:	f04f 33ff 	mov.w	r3, #4294967295
 8007516:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d045      	beq.n	80075aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <osThreadNew+0x48>
        name = attr->name;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d008      	beq.n	8007552 <osThreadNew+0x6e>
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	2b38      	cmp	r3, #56	@ 0x38
 8007544:	d805      	bhi.n	8007552 <osThreadNew+0x6e>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <osThreadNew+0x72>
        return (NULL);
 8007552:	2300      	movs	r3, #0
 8007554:	e054      	b.n	8007600 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	089b      	lsrs	r3, r3, #2
 8007564:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00e      	beq.n	800758c <osThreadNew+0xa8>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	2ba7      	cmp	r3, #167	@ 0xa7
 8007574:	d90a      	bls.n	800758c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800757a:	2b00      	cmp	r3, #0
 800757c:	d006      	beq.n	800758c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <osThreadNew+0xa8>
        mem = 1;
 8007586:	2301      	movs	r3, #1
 8007588:	61bb      	str	r3, [r7, #24]
 800758a:	e010      	b.n	80075ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10c      	bne.n	80075ae <osThreadNew+0xca>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d108      	bne.n	80075ae <osThreadNew+0xca>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d104      	bne.n	80075ae <osThreadNew+0xca>
          mem = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	61bb      	str	r3, [r7, #24]
 80075a8:	e001      	b.n	80075ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d110      	bne.n	80075d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075bc:	9202      	str	r2, [sp, #8]
 80075be:	9301      	str	r3, [sp, #4]
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	6a3a      	ldr	r2, [r7, #32]
 80075c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 fe1a 	bl	8008204 <xTaskCreateStatic>
 80075d0:	4603      	mov	r3, r0
 80075d2:	613b      	str	r3, [r7, #16]
 80075d4:	e013      	b.n	80075fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d110      	bne.n	80075fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	b29a      	uxth	r2, r3
 80075e0:	f107 0310 	add.w	r3, r7, #16
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 fe68 	bl	80082c4 <xTaskCreate>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d001      	beq.n	80075fe <osThreadNew+0x11a>
            hTask = NULL;
 80075fa:	2300      	movs	r3, #0
 80075fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80075fe:	693b      	ldr	r3, [r7, #16]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3728      	adds	r7, #40	@ 0x28
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007610:	f3ef 8305 	mrs	r3, IPSR
 8007614:	60bb      	str	r3, [r7, #8]
  return(result);
 8007616:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <osDelay+0x1c>
    stat = osErrorISR;
 800761c:	f06f 0305 	mvn.w	r3, #5
 8007620:	60fb      	str	r3, [r7, #12]
 8007622:	e007      	b.n	8007634 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007624:	2300      	movs	r3, #0
 8007626:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <osDelay+0x2c>
      vTaskDelay(ticks);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 ffa6 	bl	8008580 <vTaskDelay>
    }
  }

  return (stat);
 8007634:	68fb      	ldr	r3, [r7, #12]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	4a07      	ldr	r2, [pc, #28]	@ (800766c <vApplicationGetIdleTaskMemory+0x2c>)
 8007650:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	4a06      	ldr	r2, [pc, #24]	@ (8007670 <vApplicationGetIdleTaskMemory+0x30>)
 8007656:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2280      	movs	r2, #128	@ 0x80
 800765c:	601a      	str	r2, [r3, #0]
}
 800765e:	bf00      	nop
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	200005bc 	.word	0x200005bc
 8007670:	20000664 	.word	0x20000664

08007674 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4a07      	ldr	r2, [pc, #28]	@ (80076a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007684:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	4a06      	ldr	r2, [pc, #24]	@ (80076a4 <vApplicationGetTimerTaskMemory+0x30>)
 800768a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007692:	601a      	str	r2, [r3, #0]
}
 8007694:	bf00      	nop
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	20000864 	.word	0x20000864
 80076a4:	2000090c 	.word	0x2000090c

080076a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f103 0208 	add.w	r2, r3, #8
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f04f 32ff 	mov.w	r2, #4294967295
 80076c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f103 0208 	add.w	r2, r3, #8
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f103 0208 	add.w	r2, r3, #8
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007702:	b480      	push	{r7}
 8007704:	b085      	sub	sp, #20
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	601a      	str	r2, [r3, #0]
}
 800773e:	bf00      	nop
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800774a:	b480      	push	{r7}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007760:	d103      	bne.n	800776a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	e00c      	b.n	8007784 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3308      	adds	r3, #8
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	e002      	b.n	8007778 <vListInsert+0x2e>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	429a      	cmp	r2, r3
 8007782:	d2f6      	bcs.n	8007772 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	601a      	str	r2, [r3, #0]
}
 80077b0:	bf00      	nop
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6892      	ldr	r2, [r2, #8]
 80077d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	6852      	ldr	r2, [r2, #4]
 80077dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d103      	bne.n	80077f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	1e5a      	subs	r2, r3, #1
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10b      	bne.n	800783c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007836:	bf00      	nop
 8007838:	bf00      	nop
 800783a:	e7fd      	b.n	8007838 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800783c:	f002 f8a4 	bl	8009988 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007848:	68f9      	ldr	r1, [r7, #12]
 800784a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800784c:	fb01 f303 	mul.w	r3, r1, r3
 8007850:	441a      	add	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800786c:	3b01      	subs	r3, #1
 800786e:	68f9      	ldr	r1, [r7, #12]
 8007870:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007872:	fb01 f303 	mul.w	r3, r1, r3
 8007876:	441a      	add	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	22ff      	movs	r2, #255	@ 0xff
 8007880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	22ff      	movs	r2, #255	@ 0xff
 8007888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d114      	bne.n	80078bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d01a      	beq.n	80078d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3310      	adds	r3, #16
 800789e:	4618      	mov	r0, r3
 80078a0:	f001 f942 	bl	8008b28 <xTaskRemoveFromEventList>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d012      	beq.n	80078d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078aa:	4b0d      	ldr	r3, [pc, #52]	@ (80078e0 <xQueueGenericReset+0xd0>)
 80078ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	e009      	b.n	80078d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3310      	adds	r3, #16
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7ff fef1 	bl	80076a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3324      	adds	r3, #36	@ 0x24
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff feec 	bl	80076a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078d0:	f002 f88c 	bl	80099ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078d4:	2301      	movs	r3, #1
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	e000ed04 	.word	0xe000ed04

080078e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08e      	sub	sp, #56	@ 0x38
 80078e8:	af02      	add	r7, sp, #8
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
 80078f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10b      	bne.n	8007910 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800790a:	bf00      	nop
 800790c:	bf00      	nop
 800790e:	e7fd      	b.n	800790c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10b      	bne.n	800792e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007928:	bf00      	nop
 800792a:	bf00      	nop
 800792c:	e7fd      	b.n	800792a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <xQueueGenericCreateStatic+0x56>
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <xQueueGenericCreateStatic+0x5a>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <xQueueGenericCreateStatic+0x5c>
 800793e:	2300      	movs	r3, #0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10b      	bne.n	800795c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	623b      	str	r3, [r7, #32]
}
 8007956:	bf00      	nop
 8007958:	bf00      	nop
 800795a:	e7fd      	b.n	8007958 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d102      	bne.n	8007968 <xQueueGenericCreateStatic+0x84>
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <xQueueGenericCreateStatic+0x88>
 8007968:	2301      	movs	r3, #1
 800796a:	e000      	b.n	800796e <xQueueGenericCreateStatic+0x8a>
 800796c:	2300      	movs	r3, #0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10b      	bne.n	800798a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	61fb      	str	r3, [r7, #28]
}
 8007984:	bf00      	nop
 8007986:	bf00      	nop
 8007988:	e7fd      	b.n	8007986 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800798a:	2350      	movs	r3, #80	@ 0x50
 800798c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2b50      	cmp	r3, #80	@ 0x50
 8007992:	d00b      	beq.n	80079ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	61bb      	str	r3, [r7, #24]
}
 80079a6:	bf00      	nop
 80079a8:	bf00      	nop
 80079aa:	e7fd      	b.n	80079a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80079b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00d      	beq.n	80079d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80079c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	4613      	mov	r3, r2
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	68b9      	ldr	r1, [r7, #8]
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 f805 	bl	80079de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3730      	adds	r7, #48	@ 0x30
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	607a      	str	r2, [r7, #4]
 80079ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d103      	bne.n	80079fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	e002      	b.n	8007a00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	69b8      	ldr	r0, [r7, #24]
 8007a10:	f7ff fefe 	bl	8007810 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	78fa      	ldrb	r2, [r7, #3]
 8007a18:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a1c:	bf00      	nop
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08e      	sub	sp, #56	@ 0x38
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
 8007a30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a32:	2300      	movs	r3, #0
 8007a34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10b      	bne.n	8007a58 <xQueueGenericSend+0x34>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a52:	bf00      	nop
 8007a54:	bf00      	nop
 8007a56:	e7fd      	b.n	8007a54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d103      	bne.n	8007a66 <xQueueGenericSend+0x42>
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <xQueueGenericSend+0x46>
 8007a66:	2301      	movs	r3, #1
 8007a68:	e000      	b.n	8007a6c <xQueueGenericSend+0x48>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10b      	bne.n	8007a88 <xQueueGenericSend+0x64>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a82:	bf00      	nop
 8007a84:	bf00      	nop
 8007a86:	e7fd      	b.n	8007a84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d103      	bne.n	8007a96 <xQueueGenericSend+0x72>
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d101      	bne.n	8007a9a <xQueueGenericSend+0x76>
 8007a96:	2301      	movs	r3, #1
 8007a98:	e000      	b.n	8007a9c <xQueueGenericSend+0x78>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10b      	bne.n	8007ab8 <xQueueGenericSend+0x94>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	623b      	str	r3, [r7, #32]
}
 8007ab2:	bf00      	nop
 8007ab4:	bf00      	nop
 8007ab6:	e7fd      	b.n	8007ab4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ab8:	f001 f9fc 	bl	8008eb4 <xTaskGetSchedulerState>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d102      	bne.n	8007ac8 <xQueueGenericSend+0xa4>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <xQueueGenericSend+0xa8>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e000      	b.n	8007ace <xQueueGenericSend+0xaa>
 8007acc:	2300      	movs	r3, #0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10b      	bne.n	8007aea <xQueueGenericSend+0xc6>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	61fb      	str	r3, [r7, #28]
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop
 8007ae8:	e7fd      	b.n	8007ae6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007aea:	f001 ff4d 	bl	8009988 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d302      	bcc.n	8007b00 <xQueueGenericSend+0xdc>
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d129      	bne.n	8007b54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	68b9      	ldr	r1, [r7, #8]
 8007b04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b06:	f000 fa0f 	bl	8007f28 <prvCopyDataToQueue>
 8007b0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d010      	beq.n	8007b36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b16:	3324      	adds	r3, #36	@ 0x24
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f001 f805 	bl	8008b28 <xTaskRemoveFromEventList>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d013      	beq.n	8007b4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b24:	4b3f      	ldr	r3, [pc, #252]	@ (8007c24 <xQueueGenericSend+0x200>)
 8007b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	e00a      	b.n	8007b4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d007      	beq.n	8007b4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b3c:	4b39      	ldr	r3, [pc, #228]	@ (8007c24 <xQueueGenericSend+0x200>)
 8007b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b4c:	f001 ff4e 	bl	80099ec <vPortExitCritical>
				return pdPASS;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e063      	b.n	8007c1c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d103      	bne.n	8007b62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b5a:	f001 ff47 	bl	80099ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e05c      	b.n	8007c1c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d106      	bne.n	8007b76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b68:	f107 0314 	add.w	r3, r7, #20
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 f83f 	bl	8008bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b72:	2301      	movs	r3, #1
 8007b74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b76:	f001 ff39 	bl	80099ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b7a:	f000 fda7 	bl	80086cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b7e:	f001 ff03 	bl	8009988 <vPortEnterCritical>
 8007b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b88:	b25b      	sxtb	r3, r3
 8007b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8e:	d103      	bne.n	8007b98 <xQueueGenericSend+0x174>
 8007b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b9e:	b25b      	sxtb	r3, r3
 8007ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba4:	d103      	bne.n	8007bae <xQueueGenericSend+0x18a>
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bae:	f001 ff1d 	bl	80099ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bb2:	1d3a      	adds	r2, r7, #4
 8007bb4:	f107 0314 	add.w	r3, r7, #20
 8007bb8:	4611      	mov	r1, r2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f001 f82e 	bl	8008c1c <xTaskCheckForTimeOut>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d124      	bne.n	8007c10 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007bc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bc8:	f000 faa6 	bl	8008118 <prvIsQueueFull>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d018      	beq.n	8007c04 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd4:	3310      	adds	r3, #16
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	4611      	mov	r1, r2
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 ff52 	bl	8008a84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007be0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007be2:	f000 fa31 	bl	8008048 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007be6:	f000 fd7f 	bl	80086e8 <xTaskResumeAll>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f47f af7c 	bne.w	8007aea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8007c24 <xQueueGenericSend+0x200>)
 8007bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	e772      	b.n	8007aea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c06:	f000 fa1f 	bl	8008048 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c0a:	f000 fd6d 	bl	80086e8 <xTaskResumeAll>
 8007c0e:	e76c      	b.n	8007aea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c12:	f000 fa19 	bl	8008048 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c16:	f000 fd67 	bl	80086e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3738      	adds	r7, #56	@ 0x38
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	e000ed04 	.word	0xe000ed04

08007c28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b090      	sub	sp, #64	@ 0x40
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10b      	bne.n	8007c58 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c52:	bf00      	nop
 8007c54:	bf00      	nop
 8007c56:	e7fd      	b.n	8007c54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d103      	bne.n	8007c66 <xQueueGenericSendFromISR+0x3e>
 8007c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <xQueueGenericSendFromISR+0x42>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <xQueueGenericSendFromISR+0x44>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10b      	bne.n	8007c88 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c82:	bf00      	nop
 8007c84:	bf00      	nop
 8007c86:	e7fd      	b.n	8007c84 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d103      	bne.n	8007c96 <xQueueGenericSendFromISR+0x6e>
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d101      	bne.n	8007c9a <xQueueGenericSendFromISR+0x72>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e000      	b.n	8007c9c <xQueueGenericSendFromISR+0x74>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10b      	bne.n	8007cb8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	623b      	str	r3, [r7, #32]
}
 8007cb2:	bf00      	nop
 8007cb4:	bf00      	nop
 8007cb6:	e7fd      	b.n	8007cb4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cb8:	f001 ff46 	bl	8009b48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007cbc:	f3ef 8211 	mrs	r2, BASEPRI
 8007cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	61fa      	str	r2, [r7, #28]
 8007cd2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007cd4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cd6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d302      	bcc.n	8007cea <xQueueGenericSendFromISR+0xc2>
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d12f      	bne.n	8007d4a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	68b9      	ldr	r1, [r7, #8]
 8007cfe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007d00:	f000 f912 	bl	8007f28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d04:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0c:	d112      	bne.n	8007d34 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d016      	beq.n	8007d44 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d18:	3324      	adds	r3, #36	@ 0x24
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 ff04 	bl	8008b28 <xTaskRemoveFromEventList>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00e      	beq.n	8007d44 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00b      	beq.n	8007d44 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	e007      	b.n	8007d44 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007d38:	3301      	adds	r3, #1
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	b25a      	sxtb	r2, r3
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007d44:	2301      	movs	r3, #1
 8007d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007d48:	e001      	b.n	8007d4e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d50:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3740      	adds	r7, #64	@ 0x40
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b08c      	sub	sp, #48	@ 0x30
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d70:	2300      	movs	r3, #0
 8007d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10b      	bne.n	8007d96 <xQueueReceive+0x32>
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	623b      	str	r3, [r7, #32]
}
 8007d90:	bf00      	nop
 8007d92:	bf00      	nop
 8007d94:	e7fd      	b.n	8007d92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d103      	bne.n	8007da4 <xQueueReceive+0x40>
 8007d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <xQueueReceive+0x44>
 8007da4:	2301      	movs	r3, #1
 8007da6:	e000      	b.n	8007daa <xQueueReceive+0x46>
 8007da8:	2300      	movs	r3, #0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10b      	bne.n	8007dc6 <xQueueReceive+0x62>
	__asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	61fb      	str	r3, [r7, #28]
}
 8007dc0:	bf00      	nop
 8007dc2:	bf00      	nop
 8007dc4:	e7fd      	b.n	8007dc2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dc6:	f001 f875 	bl	8008eb4 <xTaskGetSchedulerState>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d102      	bne.n	8007dd6 <xQueueReceive+0x72>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <xQueueReceive+0x76>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e000      	b.n	8007ddc <xQueueReceive+0x78>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10b      	bne.n	8007df8 <xQueueReceive+0x94>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	61bb      	str	r3, [r7, #24]
}
 8007df2:	bf00      	nop
 8007df4:	bf00      	nop
 8007df6:	e7fd      	b.n	8007df4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007df8:	f001 fdc6 	bl	8009988 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e00:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d01f      	beq.n	8007e48 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e08:	68b9      	ldr	r1, [r7, #8]
 8007e0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e0c:	f000 f8f6 	bl	8007ffc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e12:	1e5a      	subs	r2, r3, #1
 8007e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e16:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00f      	beq.n	8007e40 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e22:	3310      	adds	r3, #16
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 fe7f 	bl	8008b28 <xTaskRemoveFromEventList>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d007      	beq.n	8007e40 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e30:	4b3c      	ldr	r3, [pc, #240]	@ (8007f24 <xQueueReceive+0x1c0>)
 8007e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e36:	601a      	str	r2, [r3, #0]
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e40:	f001 fdd4 	bl	80099ec <vPortExitCritical>
				return pdPASS;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e069      	b.n	8007f1c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d103      	bne.n	8007e56 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e4e:	f001 fdcd 	bl	80099ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e52:	2300      	movs	r3, #0
 8007e54:	e062      	b.n	8007f1c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d106      	bne.n	8007e6a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e5c:	f107 0310 	add.w	r3, r7, #16
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 fec5 	bl	8008bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e66:	2301      	movs	r3, #1
 8007e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e6a:	f001 fdbf 	bl	80099ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e6e:	f000 fc2d 	bl	80086cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e72:	f001 fd89 	bl	8009988 <vPortEnterCritical>
 8007e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e7c:	b25b      	sxtb	r3, r3
 8007e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e82:	d103      	bne.n	8007e8c <xQueueReceive+0x128>
 8007e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e92:	b25b      	sxtb	r3, r3
 8007e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e98:	d103      	bne.n	8007ea2 <xQueueReceive+0x13e>
 8007e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ea2:	f001 fda3 	bl	80099ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ea6:	1d3a      	adds	r2, r7, #4
 8007ea8:	f107 0310 	add.w	r3, r7, #16
 8007eac:	4611      	mov	r1, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 feb4 	bl	8008c1c <xTaskCheckForTimeOut>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d123      	bne.n	8007f02 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007eba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ebc:	f000 f916 	bl	80080ec <prvIsQueueEmpty>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d017      	beq.n	8007ef6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec8:	3324      	adds	r3, #36	@ 0x24
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	4611      	mov	r1, r2
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 fdd8 	bl	8008a84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ed4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ed6:	f000 f8b7 	bl	8008048 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007eda:	f000 fc05 	bl	80086e8 <xTaskResumeAll>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d189      	bne.n	8007df8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8007f24 <xQueueReceive+0x1c0>)
 8007ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	e780      	b.n	8007df8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ef8:	f000 f8a6 	bl	8008048 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007efc:	f000 fbf4 	bl	80086e8 <xTaskResumeAll>
 8007f00:	e77a      	b.n	8007df8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f04:	f000 f8a0 	bl	8008048 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f08:	f000 fbee 	bl	80086e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f0e:	f000 f8ed 	bl	80080ec <prvIsQueueEmpty>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f43f af6f 	beq.w	8007df8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3730      	adds	r7, #48	@ 0x30
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	e000ed04 	.word	0xe000ed04

08007f28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f34:	2300      	movs	r3, #0
 8007f36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10d      	bne.n	8007f62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d14d      	bne.n	8007fea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 ffcc 	bl	8008ef0 <xTaskPriorityDisinherit>
 8007f58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	609a      	str	r2, [r3, #8]
 8007f60:	e043      	b.n	8007fea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d119      	bne.n	8007f9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6858      	ldr	r0, [r3, #4]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f70:	461a      	mov	r2, r3
 8007f72:	68b9      	ldr	r1, [r7, #8]
 8007f74:	f002 fa01 	bl	800a37a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f80:	441a      	add	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d32b      	bcc.n	8007fea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	605a      	str	r2, [r3, #4]
 8007f9a:	e026      	b.n	8007fea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	68d8      	ldr	r0, [r3, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68b9      	ldr	r1, [r7, #8]
 8007fa8:	f002 f9e7 	bl	800a37a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb4:	425b      	negs	r3, r3
 8007fb6:	441a      	add	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	68da      	ldr	r2, [r3, #12]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d207      	bcs.n	8007fd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd0:	425b      	negs	r3, r3
 8007fd2:	441a      	add	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d105      	bne.n	8007fea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	1c5a      	adds	r2, r3, #1
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007ff2:	697b      	ldr	r3, [r7, #20]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3718      	adds	r7, #24
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800800a:	2b00      	cmp	r3, #0
 800800c:	d018      	beq.n	8008040 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008016:	441a      	add	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	429a      	cmp	r2, r3
 8008026:	d303      	bcc.n	8008030 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68d9      	ldr	r1, [r3, #12]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008038:	461a      	mov	r2, r3
 800803a:	6838      	ldr	r0, [r7, #0]
 800803c:	f002 f99d 	bl	800a37a <memcpy>
	}
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008050:	f001 fc9a 	bl	8009988 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800805a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800805c:	e011      	b.n	8008082 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008062:	2b00      	cmp	r3, #0
 8008064:	d012      	beq.n	800808c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	3324      	adds	r3, #36	@ 0x24
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fd5c 	bl	8008b28 <xTaskRemoveFromEventList>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008076:	f000 fe35 	bl	8008ce4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	3b01      	subs	r3, #1
 800807e:	b2db      	uxtb	r3, r3
 8008080:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008086:	2b00      	cmp	r3, #0
 8008088:	dce9      	bgt.n	800805e <prvUnlockQueue+0x16>
 800808a:	e000      	b.n	800808e <prvUnlockQueue+0x46>
					break;
 800808c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	22ff      	movs	r2, #255	@ 0xff
 8008092:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008096:	f001 fca9 	bl	80099ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800809a:	f001 fc75 	bl	8009988 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080a6:	e011      	b.n	80080cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d012      	beq.n	80080d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3310      	adds	r3, #16
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 fd37 	bl	8008b28 <xTaskRemoveFromEventList>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080c0:	f000 fe10 	bl	8008ce4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	dce9      	bgt.n	80080a8 <prvUnlockQueue+0x60>
 80080d4:	e000      	b.n	80080d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	22ff      	movs	r2, #255	@ 0xff
 80080dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80080e0:	f001 fc84 	bl	80099ec <vPortExitCritical>
}
 80080e4:	bf00      	nop
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080f4:	f001 fc48 	bl	8009988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d102      	bne.n	8008106 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008100:	2301      	movs	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	e001      	b.n	800810a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008106:	2300      	movs	r3, #0
 8008108:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800810a:	f001 fc6f 	bl	80099ec <vPortExitCritical>

	return xReturn;
 800810e:	68fb      	ldr	r3, [r7, #12]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008120:	f001 fc32 	bl	8009988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800812c:	429a      	cmp	r2, r3
 800812e:	d102      	bne.n	8008136 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008130:	2301      	movs	r3, #1
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	e001      	b.n	800813a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008136:	2300      	movs	r3, #0
 8008138:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800813a:	f001 fc57 	bl	80099ec <vPortExitCritical>

	return xReturn;
 800813e:	68fb      	ldr	r3, [r7, #12]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008152:	2300      	movs	r3, #0
 8008154:	60fb      	str	r3, [r7, #12]
 8008156:	e014      	b.n	8008182 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008158:	4a0f      	ldr	r2, [pc, #60]	@ (8008198 <vQueueAddToRegistry+0x50>)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10b      	bne.n	800817c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008164:	490c      	ldr	r1, [pc, #48]	@ (8008198 <vQueueAddToRegistry+0x50>)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800816e:	4a0a      	ldr	r2, [pc, #40]	@ (8008198 <vQueueAddToRegistry+0x50>)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	4413      	add	r3, r2
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800817a:	e006      	b.n	800818a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3301      	adds	r3, #1
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b07      	cmp	r3, #7
 8008186:	d9e7      	bls.n	8008158 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008188:	bf00      	nop
 800818a:	bf00      	nop
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	20000d0c 	.word	0x20000d0c

0800819c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80081ac:	f001 fbec 	bl	8009988 <vPortEnterCritical>
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081b6:	b25b      	sxtb	r3, r3
 80081b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081bc:	d103      	bne.n	80081c6 <vQueueWaitForMessageRestricted+0x2a>
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081cc:	b25b      	sxtb	r3, r3
 80081ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d2:	d103      	bne.n	80081dc <vQueueWaitForMessageRestricted+0x40>
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081dc:	f001 fc06 	bl	80099ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d106      	bne.n	80081f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	3324      	adds	r3, #36	@ 0x24
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 fc6d 	bl	8008ad0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80081f6:	6978      	ldr	r0, [r7, #20]
 80081f8:	f7ff ff26 	bl	8008048 <prvUnlockQueue>
	}
 80081fc:	bf00      	nop
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08e      	sub	sp, #56	@ 0x38
 8008208:	af04      	add	r7, sp, #16
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10b      	bne.n	8008230 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	623b      	str	r3, [r7, #32]
}
 800822a:	bf00      	nop
 800822c:	bf00      	nop
 800822e:	e7fd      	b.n	800822c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10b      	bne.n	800824e <xTaskCreateStatic+0x4a>
	__asm volatile
 8008236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	61fb      	str	r3, [r7, #28]
}
 8008248:	bf00      	nop
 800824a:	bf00      	nop
 800824c:	e7fd      	b.n	800824a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800824e:	23a8      	movs	r3, #168	@ 0xa8
 8008250:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2ba8      	cmp	r3, #168	@ 0xa8
 8008256:	d00b      	beq.n	8008270 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	61bb      	str	r3, [r7, #24]
}
 800826a:	bf00      	nop
 800826c:	bf00      	nop
 800826e:	e7fd      	b.n	800826c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008270:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008274:	2b00      	cmp	r3, #0
 8008276:	d01e      	beq.n	80082b6 <xTaskCreateStatic+0xb2>
 8008278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800827a:	2b00      	cmp	r3, #0
 800827c:	d01b      	beq.n	80082b6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800827e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008280:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008284:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008286:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828a:	2202      	movs	r2, #2
 800828c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008290:	2300      	movs	r3, #0
 8008292:	9303      	str	r3, [sp, #12]
 8008294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008296:	9302      	str	r3, [sp, #8]
 8008298:	f107 0314 	add.w	r3, r7, #20
 800829c:	9301      	str	r3, [sp, #4]
 800829e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	68b9      	ldr	r1, [r7, #8]
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 f851 	bl	8008350 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80082b0:	f000 f8f6 	bl	80084a0 <prvAddNewTaskToReadyList>
 80082b4:	e001      	b.n	80082ba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80082ba:	697b      	ldr	r3, [r7, #20]
	}
 80082bc:	4618      	mov	r0, r3
 80082be:	3728      	adds	r7, #40	@ 0x28
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b08c      	sub	sp, #48	@ 0x30
 80082c8:	af04      	add	r7, sp, #16
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	603b      	str	r3, [r7, #0]
 80082d0:	4613      	mov	r3, r2
 80082d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082d4:	88fb      	ldrh	r3, [r7, #6]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4618      	mov	r0, r3
 80082da:	f001 fc77 	bl	8009bcc <pvPortMalloc>
 80082de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00e      	beq.n	8008304 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082e6:	20a8      	movs	r0, #168	@ 0xa8
 80082e8:	f001 fc70 	bl	8009bcc <pvPortMalloc>
 80082ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d003      	beq.n	80082fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80082fa:	e005      	b.n	8008308 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082fc:	6978      	ldr	r0, [r7, #20]
 80082fe:	f001 fd33 	bl	8009d68 <vPortFree>
 8008302:	e001      	b.n	8008308 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008304:	2300      	movs	r3, #0
 8008306:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d017      	beq.n	800833e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008316:	88fa      	ldrh	r2, [r7, #6]
 8008318:	2300      	movs	r3, #0
 800831a:	9303      	str	r3, [sp, #12]
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	9302      	str	r3, [sp, #8]
 8008320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008322:	9301      	str	r3, [sp, #4]
 8008324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	68b9      	ldr	r1, [r7, #8]
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 f80f 	bl	8008350 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008332:	69f8      	ldr	r0, [r7, #28]
 8008334:	f000 f8b4 	bl	80084a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008338:	2301      	movs	r3, #1
 800833a:	61bb      	str	r3, [r7, #24]
 800833c:	e002      	b.n	8008344 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800833e:	f04f 33ff 	mov.w	r3, #4294967295
 8008342:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008344:	69bb      	ldr	r3, [r7, #24]
	}
 8008346:	4618      	mov	r0, r3
 8008348:	3720      	adds	r7, #32
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
	...

08008350 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b088      	sub	sp, #32
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800835e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008360:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	461a      	mov	r2, r3
 8008368:	21a5      	movs	r1, #165	@ 0xa5
 800836a:	f001 ff34 	bl	800a1d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800836e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008378:	3b01      	subs	r3, #1
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	f023 0307 	bic.w	r3, r3, #7
 8008386:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	f003 0307 	and.w	r3, r3, #7
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00b      	beq.n	80083aa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	617b      	str	r3, [r7, #20]
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop
 80083a8:	e7fd      	b.n	80083a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01f      	beq.n	80083f0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083b0:	2300      	movs	r3, #0
 80083b2:	61fb      	str	r3, [r7, #28]
 80083b4:	e012      	b.n	80083dc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	4413      	add	r3, r2
 80083bc:	7819      	ldrb	r1, [r3, #0]
 80083be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	4413      	add	r3, r2
 80083c4:	3334      	adds	r3, #52	@ 0x34
 80083c6:	460a      	mov	r2, r1
 80083c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	4413      	add	r3, r2
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d006      	beq.n	80083e4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	3301      	adds	r3, #1
 80083da:	61fb      	str	r3, [r7, #28]
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	2b0f      	cmp	r3, #15
 80083e0:	d9e9      	bls.n	80083b6 <prvInitialiseNewTask+0x66>
 80083e2:	e000      	b.n	80083e6 <prvInitialiseNewTask+0x96>
			{
				break;
 80083e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083ee:	e003      	b.n	80083f8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083fa:	2b37      	cmp	r3, #55	@ 0x37
 80083fc:	d901      	bls.n	8008402 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083fe:	2337      	movs	r3, #55	@ 0x37
 8008400:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008406:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800840c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800840e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008410:	2200      	movs	r2, #0
 8008412:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008416:	3304      	adds	r3, #4
 8008418:	4618      	mov	r0, r3
 800841a:	f7ff f965 	bl	80076e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800841e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008420:	3318      	adds	r3, #24
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff f960 	bl	80076e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800842c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800842e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008430:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008436:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800843c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800843e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008440:	2200      	movs	r2, #0
 8008442:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008448:	2200      	movs	r2, #0
 800844a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008450:	3354      	adds	r3, #84	@ 0x54
 8008452:	224c      	movs	r2, #76	@ 0x4c
 8008454:	2100      	movs	r1, #0
 8008456:	4618      	mov	r0, r3
 8008458:	f001 febd 	bl	800a1d6 <memset>
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	4a0d      	ldr	r2, [pc, #52]	@ (8008494 <prvInitialiseNewTask+0x144>)
 8008460:	659a      	str	r2, [r3, #88]	@ 0x58
 8008462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008464:	4a0c      	ldr	r2, [pc, #48]	@ (8008498 <prvInitialiseNewTask+0x148>)
 8008466:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846a:	4a0c      	ldr	r2, [pc, #48]	@ (800849c <prvInitialiseNewTask+0x14c>)
 800846c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	68f9      	ldr	r1, [r7, #12]
 8008472:	69b8      	ldr	r0, [r7, #24]
 8008474:	f001 f95a 	bl	800972c <pxPortInitialiseStack>
 8008478:	4602      	mov	r2, r0
 800847a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800847e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d002      	beq.n	800848a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008488:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800848a:	bf00      	nop
 800848c:	3720      	adds	r7, #32
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20004fa0 	.word	0x20004fa0
 8008498:	20005008 	.word	0x20005008
 800849c:	20005070 	.word	0x20005070

080084a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084a8:	f001 fa6e 	bl	8009988 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084ac:	4b2d      	ldr	r3, [pc, #180]	@ (8008564 <prvAddNewTaskToReadyList+0xc4>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3301      	adds	r3, #1
 80084b2:	4a2c      	ldr	r2, [pc, #176]	@ (8008564 <prvAddNewTaskToReadyList+0xc4>)
 80084b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084b6:	4b2c      	ldr	r3, [pc, #176]	@ (8008568 <prvAddNewTaskToReadyList+0xc8>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d109      	bne.n	80084d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80084be:	4a2a      	ldr	r2, [pc, #168]	@ (8008568 <prvAddNewTaskToReadyList+0xc8>)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80084c4:	4b27      	ldr	r3, [pc, #156]	@ (8008564 <prvAddNewTaskToReadyList+0xc4>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d110      	bne.n	80084ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80084cc:	f000 fc2e 	bl	8008d2c <prvInitialiseTaskLists>
 80084d0:	e00d      	b.n	80084ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80084d2:	4b26      	ldr	r3, [pc, #152]	@ (800856c <prvAddNewTaskToReadyList+0xcc>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d109      	bne.n	80084ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084da:	4b23      	ldr	r3, [pc, #140]	@ (8008568 <prvAddNewTaskToReadyList+0xc8>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d802      	bhi.n	80084ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084e8:	4a1f      	ldr	r2, [pc, #124]	@ (8008568 <prvAddNewTaskToReadyList+0xc8>)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084ee:	4b20      	ldr	r3, [pc, #128]	@ (8008570 <prvAddNewTaskToReadyList+0xd0>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3301      	adds	r3, #1
 80084f4:	4a1e      	ldr	r2, [pc, #120]	@ (8008570 <prvAddNewTaskToReadyList+0xd0>)
 80084f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008570 <prvAddNewTaskToReadyList+0xd0>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008504:	4b1b      	ldr	r3, [pc, #108]	@ (8008574 <prvAddNewTaskToReadyList+0xd4>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	429a      	cmp	r2, r3
 800850a:	d903      	bls.n	8008514 <prvAddNewTaskToReadyList+0x74>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008510:	4a18      	ldr	r2, [pc, #96]	@ (8008574 <prvAddNewTaskToReadyList+0xd4>)
 8008512:	6013      	str	r3, [r2, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008518:	4613      	mov	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4a15      	ldr	r2, [pc, #84]	@ (8008578 <prvAddNewTaskToReadyList+0xd8>)
 8008522:	441a      	add	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3304      	adds	r3, #4
 8008528:	4619      	mov	r1, r3
 800852a:	4610      	mov	r0, r2
 800852c:	f7ff f8e9 	bl	8007702 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008530:	f001 fa5c 	bl	80099ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008534:	4b0d      	ldr	r3, [pc, #52]	@ (800856c <prvAddNewTaskToReadyList+0xcc>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00e      	beq.n	800855a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800853c:	4b0a      	ldr	r3, [pc, #40]	@ (8008568 <prvAddNewTaskToReadyList+0xc8>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008546:	429a      	cmp	r2, r3
 8008548:	d207      	bcs.n	800855a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800854a:	4b0c      	ldr	r3, [pc, #48]	@ (800857c <prvAddNewTaskToReadyList+0xdc>)
 800854c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800855a:	bf00      	nop
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	20001220 	.word	0x20001220
 8008568:	20000d4c 	.word	0x20000d4c
 800856c:	2000122c 	.word	0x2000122c
 8008570:	2000123c 	.word	0x2000123c
 8008574:	20001228 	.word	0x20001228
 8008578:	20000d50 	.word	0x20000d50
 800857c:	e000ed04 	.word	0xe000ed04

08008580 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008588:	2300      	movs	r3, #0
 800858a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d018      	beq.n	80085c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008592:	4b14      	ldr	r3, [pc, #80]	@ (80085e4 <vTaskDelay+0x64>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00b      	beq.n	80085b2 <vTaskDelay+0x32>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	60bb      	str	r3, [r7, #8]
}
 80085ac:	bf00      	nop
 80085ae:	bf00      	nop
 80085b0:	e7fd      	b.n	80085ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80085b2:	f000 f88b 	bl	80086cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085b6:	2100      	movs	r1, #0
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fd09 	bl	8008fd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80085be:	f000 f893 	bl	80086e8 <xTaskResumeAll>
 80085c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d107      	bne.n	80085da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80085ca:	4b07      	ldr	r3, [pc, #28]	@ (80085e8 <vTaskDelay+0x68>)
 80085cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085da:	bf00      	nop
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20001248 	.word	0x20001248
 80085e8:	e000ed04 	.word	0xe000ed04

080085ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b08a      	sub	sp, #40	@ 0x28
 80085f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085f2:	2300      	movs	r3, #0
 80085f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085f6:	2300      	movs	r3, #0
 80085f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085fa:	463a      	mov	r2, r7
 80085fc:	1d39      	adds	r1, r7, #4
 80085fe:	f107 0308 	add.w	r3, r7, #8
 8008602:	4618      	mov	r0, r3
 8008604:	f7ff f81c 	bl	8007640 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	9202      	str	r2, [sp, #8]
 8008610:	9301      	str	r3, [sp, #4]
 8008612:	2300      	movs	r3, #0
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	2300      	movs	r3, #0
 8008618:	460a      	mov	r2, r1
 800861a:	4924      	ldr	r1, [pc, #144]	@ (80086ac <vTaskStartScheduler+0xc0>)
 800861c:	4824      	ldr	r0, [pc, #144]	@ (80086b0 <vTaskStartScheduler+0xc4>)
 800861e:	f7ff fdf1 	bl	8008204 <xTaskCreateStatic>
 8008622:	4603      	mov	r3, r0
 8008624:	4a23      	ldr	r2, [pc, #140]	@ (80086b4 <vTaskStartScheduler+0xc8>)
 8008626:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008628:	4b22      	ldr	r3, [pc, #136]	@ (80086b4 <vTaskStartScheduler+0xc8>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008630:	2301      	movs	r3, #1
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	e001      	b.n	800863a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008636:	2300      	movs	r3, #0
 8008638:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d102      	bne.n	8008646 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008640:	f000 fd1a 	bl	8009078 <xTimerCreateTimerTask>
 8008644:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d11b      	bne.n	8008684 <vTaskStartScheduler+0x98>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	613b      	str	r3, [r7, #16]
}
 800865e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008660:	4b15      	ldr	r3, [pc, #84]	@ (80086b8 <vTaskStartScheduler+0xcc>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3354      	adds	r3, #84	@ 0x54
 8008666:	4a15      	ldr	r2, [pc, #84]	@ (80086bc <vTaskStartScheduler+0xd0>)
 8008668:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800866a:	4b15      	ldr	r3, [pc, #84]	@ (80086c0 <vTaskStartScheduler+0xd4>)
 800866c:	f04f 32ff 	mov.w	r2, #4294967295
 8008670:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008672:	4b14      	ldr	r3, [pc, #80]	@ (80086c4 <vTaskStartScheduler+0xd8>)
 8008674:	2201      	movs	r2, #1
 8008676:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008678:	4b13      	ldr	r3, [pc, #76]	@ (80086c8 <vTaskStartScheduler+0xdc>)
 800867a:	2200      	movs	r2, #0
 800867c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800867e:	f001 f8df 	bl	8009840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008682:	e00f      	b.n	80086a4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868a:	d10b      	bne.n	80086a4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	60fb      	str	r3, [r7, #12]
}
 800869e:	bf00      	nop
 80086a0:	bf00      	nop
 80086a2:	e7fd      	b.n	80086a0 <vTaskStartScheduler+0xb4>
}
 80086a4:	bf00      	nop
 80086a6:	3718      	adds	r7, #24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	0800af3c 	.word	0x0800af3c
 80086b0:	08008cfd 	.word	0x08008cfd
 80086b4:	20001244 	.word	0x20001244
 80086b8:	20000d4c 	.word	0x20000d4c
 80086bc:	20000020 	.word	0x20000020
 80086c0:	20001240 	.word	0x20001240
 80086c4:	2000122c 	.word	0x2000122c
 80086c8:	20001224 	.word	0x20001224

080086cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80086cc:	b480      	push	{r7}
 80086ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80086d0:	4b04      	ldr	r3, [pc, #16]	@ (80086e4 <vTaskSuspendAll+0x18>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3301      	adds	r3, #1
 80086d6:	4a03      	ldr	r2, [pc, #12]	@ (80086e4 <vTaskSuspendAll+0x18>)
 80086d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80086da:	bf00      	nop
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	20001248 	.word	0x20001248

080086e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80086ee:	2300      	movs	r3, #0
 80086f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80086f2:	2300      	movs	r3, #0
 80086f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80086f6:	4b42      	ldr	r3, [pc, #264]	@ (8008800 <xTaskResumeAll+0x118>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10b      	bne.n	8008716 <xTaskResumeAll+0x2e>
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	603b      	str	r3, [r7, #0]
}
 8008710:	bf00      	nop
 8008712:	bf00      	nop
 8008714:	e7fd      	b.n	8008712 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008716:	f001 f937 	bl	8009988 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800871a:	4b39      	ldr	r3, [pc, #228]	@ (8008800 <xTaskResumeAll+0x118>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3b01      	subs	r3, #1
 8008720:	4a37      	ldr	r2, [pc, #220]	@ (8008800 <xTaskResumeAll+0x118>)
 8008722:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008724:	4b36      	ldr	r3, [pc, #216]	@ (8008800 <xTaskResumeAll+0x118>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d162      	bne.n	80087f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800872c:	4b35      	ldr	r3, [pc, #212]	@ (8008804 <xTaskResumeAll+0x11c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d05e      	beq.n	80087f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008734:	e02f      	b.n	8008796 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008736:	4b34      	ldr	r3, [pc, #208]	@ (8008808 <xTaskResumeAll+0x120>)
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3318      	adds	r3, #24
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff f83a 	bl	80077bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	3304      	adds	r3, #4
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff f835 	bl	80077bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008756:	4b2d      	ldr	r3, [pc, #180]	@ (800880c <xTaskResumeAll+0x124>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	429a      	cmp	r2, r3
 800875c:	d903      	bls.n	8008766 <xTaskResumeAll+0x7e>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008762:	4a2a      	ldr	r2, [pc, #168]	@ (800880c <xTaskResumeAll+0x124>)
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4a27      	ldr	r2, [pc, #156]	@ (8008810 <xTaskResumeAll+0x128>)
 8008774:	441a      	add	r2, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3304      	adds	r3, #4
 800877a:	4619      	mov	r1, r3
 800877c:	4610      	mov	r0, r2
 800877e:	f7fe ffc0 	bl	8007702 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008786:	4b23      	ldr	r3, [pc, #140]	@ (8008814 <xTaskResumeAll+0x12c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878c:	429a      	cmp	r2, r3
 800878e:	d302      	bcc.n	8008796 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008790:	4b21      	ldr	r3, [pc, #132]	@ (8008818 <xTaskResumeAll+0x130>)
 8008792:	2201      	movs	r2, #1
 8008794:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008796:	4b1c      	ldr	r3, [pc, #112]	@ (8008808 <xTaskResumeAll+0x120>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1cb      	bne.n	8008736 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087a4:	f000 fb66 	bl	8008e74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80087a8:	4b1c      	ldr	r3, [pc, #112]	@ (800881c <xTaskResumeAll+0x134>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d010      	beq.n	80087d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80087b4:	f000 f846 	bl	8008844 <xTaskIncrementTick>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80087be:	4b16      	ldr	r3, [pc, #88]	@ (8008818 <xTaskResumeAll+0x130>)
 80087c0:	2201      	movs	r2, #1
 80087c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3b01      	subs	r3, #1
 80087c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1f1      	bne.n	80087b4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80087d0:	4b12      	ldr	r3, [pc, #72]	@ (800881c <xTaskResumeAll+0x134>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80087d6:	4b10      	ldr	r3, [pc, #64]	@ (8008818 <xTaskResumeAll+0x130>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d009      	beq.n	80087f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80087de:	2301      	movs	r3, #1
 80087e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80087e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008820 <xTaskResumeAll+0x138>)
 80087e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087f2:	f001 f8fb 	bl	80099ec <vPortExitCritical>

	return xAlreadyYielded;
 80087f6:	68bb      	ldr	r3, [r7, #8]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	20001248 	.word	0x20001248
 8008804:	20001220 	.word	0x20001220
 8008808:	200011e0 	.word	0x200011e0
 800880c:	20001228 	.word	0x20001228
 8008810:	20000d50 	.word	0x20000d50
 8008814:	20000d4c 	.word	0x20000d4c
 8008818:	20001234 	.word	0x20001234
 800881c:	20001230 	.word	0x20001230
 8008820:	e000ed04 	.word	0xe000ed04

08008824 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800882a:	4b05      	ldr	r3, [pc, #20]	@ (8008840 <xTaskGetTickCount+0x1c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008830:	687b      	ldr	r3, [r7, #4]
}
 8008832:	4618      	mov	r0, r3
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	20001224 	.word	0x20001224

08008844 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800884a:	2300      	movs	r3, #0
 800884c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800884e:	4b4f      	ldr	r3, [pc, #316]	@ (800898c <xTaskIncrementTick+0x148>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	f040 8090 	bne.w	8008978 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008858:	4b4d      	ldr	r3, [pc, #308]	@ (8008990 <xTaskIncrementTick+0x14c>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3301      	adds	r3, #1
 800885e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008860:	4a4b      	ldr	r2, [pc, #300]	@ (8008990 <xTaskIncrementTick+0x14c>)
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d121      	bne.n	80088b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800886c:	4b49      	ldr	r3, [pc, #292]	@ (8008994 <xTaskIncrementTick+0x150>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00b      	beq.n	800888e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	603b      	str	r3, [r7, #0]
}
 8008888:	bf00      	nop
 800888a:	bf00      	nop
 800888c:	e7fd      	b.n	800888a <xTaskIncrementTick+0x46>
 800888e:	4b41      	ldr	r3, [pc, #260]	@ (8008994 <xTaskIncrementTick+0x150>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	4b40      	ldr	r3, [pc, #256]	@ (8008998 <xTaskIncrementTick+0x154>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a3e      	ldr	r2, [pc, #248]	@ (8008994 <xTaskIncrementTick+0x150>)
 800889a:	6013      	str	r3, [r2, #0]
 800889c:	4a3e      	ldr	r2, [pc, #248]	@ (8008998 <xTaskIncrementTick+0x154>)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6013      	str	r3, [r2, #0]
 80088a2:	4b3e      	ldr	r3, [pc, #248]	@ (800899c <xTaskIncrementTick+0x158>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3301      	adds	r3, #1
 80088a8:	4a3c      	ldr	r2, [pc, #240]	@ (800899c <xTaskIncrementTick+0x158>)
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	f000 fae2 	bl	8008e74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088b0:	4b3b      	ldr	r3, [pc, #236]	@ (80089a0 <xTaskIncrementTick+0x15c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d349      	bcc.n	800894e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088ba:	4b36      	ldr	r3, [pc, #216]	@ (8008994 <xTaskIncrementTick+0x150>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d104      	bne.n	80088ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088c4:	4b36      	ldr	r3, [pc, #216]	@ (80089a0 <xTaskIncrementTick+0x15c>)
 80088c6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ca:	601a      	str	r2, [r3, #0]
					break;
 80088cc:	e03f      	b.n	800894e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ce:	4b31      	ldr	r3, [pc, #196]	@ (8008994 <xTaskIncrementTick+0x150>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d203      	bcs.n	80088ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80088e6:	4a2e      	ldr	r2, [pc, #184]	@ (80089a0 <xTaskIncrementTick+0x15c>)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80088ec:	e02f      	b.n	800894e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	3304      	adds	r3, #4
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fe ff62 	bl	80077bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d004      	beq.n	800890a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	3318      	adds	r3, #24
 8008904:	4618      	mov	r0, r3
 8008906:	f7fe ff59 	bl	80077bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800890e:	4b25      	ldr	r3, [pc, #148]	@ (80089a4 <xTaskIncrementTick+0x160>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	429a      	cmp	r2, r3
 8008914:	d903      	bls.n	800891e <xTaskIncrementTick+0xda>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891a:	4a22      	ldr	r2, [pc, #136]	@ (80089a4 <xTaskIncrementTick+0x160>)
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008922:	4613      	mov	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4a1f      	ldr	r2, [pc, #124]	@ (80089a8 <xTaskIncrementTick+0x164>)
 800892c:	441a      	add	r2, r3
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	3304      	adds	r3, #4
 8008932:	4619      	mov	r1, r3
 8008934:	4610      	mov	r0, r2
 8008936:	f7fe fee4 	bl	8007702 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800893e:	4b1b      	ldr	r3, [pc, #108]	@ (80089ac <xTaskIncrementTick+0x168>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008944:	429a      	cmp	r2, r3
 8008946:	d3b8      	bcc.n	80088ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008948:	2301      	movs	r3, #1
 800894a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800894c:	e7b5      	b.n	80088ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800894e:	4b17      	ldr	r3, [pc, #92]	@ (80089ac <xTaskIncrementTick+0x168>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008954:	4914      	ldr	r1, [pc, #80]	@ (80089a8 <xTaskIncrementTick+0x164>)
 8008956:	4613      	mov	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	440b      	add	r3, r1
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d901      	bls.n	800896a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008966:	2301      	movs	r3, #1
 8008968:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800896a:	4b11      	ldr	r3, [pc, #68]	@ (80089b0 <xTaskIncrementTick+0x16c>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d007      	beq.n	8008982 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008972:	2301      	movs	r3, #1
 8008974:	617b      	str	r3, [r7, #20]
 8008976:	e004      	b.n	8008982 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008978:	4b0e      	ldr	r3, [pc, #56]	@ (80089b4 <xTaskIncrementTick+0x170>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3301      	adds	r3, #1
 800897e:	4a0d      	ldr	r2, [pc, #52]	@ (80089b4 <xTaskIncrementTick+0x170>)
 8008980:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008982:	697b      	ldr	r3, [r7, #20]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20001248 	.word	0x20001248
 8008990:	20001224 	.word	0x20001224
 8008994:	200011d8 	.word	0x200011d8
 8008998:	200011dc 	.word	0x200011dc
 800899c:	20001238 	.word	0x20001238
 80089a0:	20001240 	.word	0x20001240
 80089a4:	20001228 	.word	0x20001228
 80089a8:	20000d50 	.word	0x20000d50
 80089ac:	20000d4c 	.word	0x20000d4c
 80089b0:	20001234 	.word	0x20001234
 80089b4:	20001230 	.word	0x20001230

080089b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089be:	4b2b      	ldr	r3, [pc, #172]	@ (8008a6c <vTaskSwitchContext+0xb4>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d003      	beq.n	80089ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80089c6:	4b2a      	ldr	r3, [pc, #168]	@ (8008a70 <vTaskSwitchContext+0xb8>)
 80089c8:	2201      	movs	r2, #1
 80089ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80089cc:	e047      	b.n	8008a5e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80089ce:	4b28      	ldr	r3, [pc, #160]	@ (8008a70 <vTaskSwitchContext+0xb8>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d4:	4b27      	ldr	r3, [pc, #156]	@ (8008a74 <vTaskSwitchContext+0xbc>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	60fb      	str	r3, [r7, #12]
 80089da:	e011      	b.n	8008a00 <vTaskSwitchContext+0x48>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10b      	bne.n	80089fa <vTaskSwitchContext+0x42>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	607b      	str	r3, [r7, #4]
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop
 80089f8:	e7fd      	b.n	80089f6 <vTaskSwitchContext+0x3e>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	3b01      	subs	r3, #1
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	491d      	ldr	r1, [pc, #116]	@ (8008a78 <vTaskSwitchContext+0xc0>)
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	4613      	mov	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	440b      	add	r3, r1
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d0e3      	beq.n	80089dc <vTaskSwitchContext+0x24>
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	4613      	mov	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4a16      	ldr	r2, [pc, #88]	@ (8008a78 <vTaskSwitchContext+0xc0>)
 8008a20:	4413      	add	r3, r2
 8008a22:	60bb      	str	r3, [r7, #8]
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	605a      	str	r2, [r3, #4]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	3308      	adds	r3, #8
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d104      	bne.n	8008a44 <vTaskSwitchContext+0x8c>
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	605a      	str	r2, [r3, #4]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8008a7c <vTaskSwitchContext+0xc4>)
 8008a4c:	6013      	str	r3, [r2, #0]
 8008a4e:	4a09      	ldr	r2, [pc, #36]	@ (8008a74 <vTaskSwitchContext+0xbc>)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a54:	4b09      	ldr	r3, [pc, #36]	@ (8008a7c <vTaskSwitchContext+0xc4>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3354      	adds	r3, #84	@ 0x54
 8008a5a:	4a09      	ldr	r2, [pc, #36]	@ (8008a80 <vTaskSwitchContext+0xc8>)
 8008a5c:	6013      	str	r3, [r2, #0]
}
 8008a5e:	bf00      	nop
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	20001248 	.word	0x20001248
 8008a70:	20001234 	.word	0x20001234
 8008a74:	20001228 	.word	0x20001228
 8008a78:	20000d50 	.word	0x20000d50
 8008a7c:	20000d4c 	.word	0x20000d4c
 8008a80:	20000020 	.word	0x20000020

08008a84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10b      	bne.n	8008aac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	60fb      	str	r3, [r7, #12]
}
 8008aa6:	bf00      	nop
 8008aa8:	bf00      	nop
 8008aaa:	e7fd      	b.n	8008aa8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008aac:	4b07      	ldr	r3, [pc, #28]	@ (8008acc <vTaskPlaceOnEventList+0x48>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	3318      	adds	r3, #24
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7fe fe48 	bl	800774a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008aba:	2101      	movs	r1, #1
 8008abc:	6838      	ldr	r0, [r7, #0]
 8008abe:	f000 fa87 	bl	8008fd0 <prvAddCurrentTaskToDelayedList>
}
 8008ac2:	bf00      	nop
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	20000d4c 	.word	0x20000d4c

08008ad0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10b      	bne.n	8008afa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	617b      	str	r3, [r7, #20]
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	e7fd      	b.n	8008af6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008afa:	4b0a      	ldr	r3, [pc, #40]	@ (8008b24 <vTaskPlaceOnEventListRestricted+0x54>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3318      	adds	r3, #24
 8008b00:	4619      	mov	r1, r3
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f7fe fdfd 	bl	8007702 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d002      	beq.n	8008b14 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b14:	6879      	ldr	r1, [r7, #4]
 8008b16:	68b8      	ldr	r0, [r7, #8]
 8008b18:	f000 fa5a 	bl	8008fd0 <prvAddCurrentTaskToDelayedList>
	}
 8008b1c:	bf00      	nop
 8008b1e:	3718      	adds	r7, #24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	20000d4c 	.word	0x20000d4c

08008b28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d10b      	bne.n	8008b56 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	60fb      	str	r3, [r7, #12]
}
 8008b50:	bf00      	nop
 8008b52:	bf00      	nop
 8008b54:	e7fd      	b.n	8008b52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	3318      	adds	r3, #24
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe fe2e 	bl	80077bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b60:	4b1d      	ldr	r3, [pc, #116]	@ (8008bd8 <xTaskRemoveFromEventList+0xb0>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d11d      	bne.n	8008ba4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fe fe25 	bl	80077bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b76:	4b19      	ldr	r3, [pc, #100]	@ (8008bdc <xTaskRemoveFromEventList+0xb4>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d903      	bls.n	8008b86 <xTaskRemoveFromEventList+0x5e>
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b82:	4a16      	ldr	r2, [pc, #88]	@ (8008bdc <xTaskRemoveFromEventList+0xb4>)
 8008b84:	6013      	str	r3, [r2, #0]
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4a13      	ldr	r2, [pc, #76]	@ (8008be0 <xTaskRemoveFromEventList+0xb8>)
 8008b94:	441a      	add	r2, r3
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	f7fe fdb0 	bl	8007702 <vListInsertEnd>
 8008ba2:	e005      	b.n	8008bb0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	3318      	adds	r3, #24
 8008ba8:	4619      	mov	r1, r3
 8008baa:	480e      	ldr	r0, [pc, #56]	@ (8008be4 <xTaskRemoveFromEventList+0xbc>)
 8008bac:	f7fe fda9 	bl	8007702 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8008be8 <xTaskRemoveFromEventList+0xc0>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d905      	bls.n	8008bca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8008bec <xTaskRemoveFromEventList+0xc4>)
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	e001      	b.n	8008bce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008bce:	697b      	ldr	r3, [r7, #20]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3718      	adds	r7, #24
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	20001248 	.word	0x20001248
 8008bdc:	20001228 	.word	0x20001228
 8008be0:	20000d50 	.word	0x20000d50
 8008be4:	200011e0 	.word	0x200011e0
 8008be8:	20000d4c 	.word	0x20000d4c
 8008bec:	20001234 	.word	0x20001234

08008bf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bf8:	4b06      	ldr	r3, [pc, #24]	@ (8008c14 <vTaskInternalSetTimeOutState+0x24>)
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c00:	4b05      	ldr	r3, [pc, #20]	@ (8008c18 <vTaskInternalSetTimeOutState+0x28>)
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	605a      	str	r2, [r3, #4]
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	20001238 	.word	0x20001238
 8008c18:	20001224 	.word	0x20001224

08008c1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10b      	bne.n	8008c44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	613b      	str	r3, [r7, #16]
}
 8008c3e:	bf00      	nop
 8008c40:	bf00      	nop
 8008c42:	e7fd      	b.n	8008c40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10b      	bne.n	8008c62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4e:	f383 8811 	msr	BASEPRI, r3
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	60fb      	str	r3, [r7, #12]
}
 8008c5c:	bf00      	nop
 8008c5e:	bf00      	nop
 8008c60:	e7fd      	b.n	8008c5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008c62:	f000 fe91 	bl	8009988 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c66:	4b1d      	ldr	r3, [pc, #116]	@ (8008cdc <xTaskCheckForTimeOut+0xc0>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7e:	d102      	bne.n	8008c86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c80:	2300      	movs	r3, #0
 8008c82:	61fb      	str	r3, [r7, #28]
 8008c84:	e023      	b.n	8008cce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	4b15      	ldr	r3, [pc, #84]	@ (8008ce0 <xTaskCheckForTimeOut+0xc4>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d007      	beq.n	8008ca2 <xTaskCheckForTimeOut+0x86>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d302      	bcc.n	8008ca2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	61fb      	str	r3, [r7, #28]
 8008ca0:	e015      	b.n	8008cce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d20b      	bcs.n	8008cc4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	1ad2      	subs	r2, r2, r3
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7ff ff99 	bl	8008bf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	61fb      	str	r3, [r7, #28]
 8008cc2:	e004      	b.n	8008cce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008cce:	f000 fe8d 	bl	80099ec <vPortExitCritical>

	return xReturn;
 8008cd2:	69fb      	ldr	r3, [r7, #28]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3720      	adds	r7, #32
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	20001224 	.word	0x20001224
 8008ce0:	20001238 	.word	0x20001238

08008ce4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ce8:	4b03      	ldr	r3, [pc, #12]	@ (8008cf8 <vTaskMissedYield+0x14>)
 8008cea:	2201      	movs	r2, #1
 8008cec:	601a      	str	r2, [r3, #0]
}
 8008cee:	bf00      	nop
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	20001234 	.word	0x20001234

08008cfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d04:	f000 f852 	bl	8008dac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d08:	4b06      	ldr	r3, [pc, #24]	@ (8008d24 <prvIdleTask+0x28>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d9f9      	bls.n	8008d04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d10:	4b05      	ldr	r3, [pc, #20]	@ (8008d28 <prvIdleTask+0x2c>)
 8008d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d20:	e7f0      	b.n	8008d04 <prvIdleTask+0x8>
 8008d22:	bf00      	nop
 8008d24:	20000d50 	.word	0x20000d50
 8008d28:	e000ed04 	.word	0xe000ed04

08008d2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d32:	2300      	movs	r3, #0
 8008d34:	607b      	str	r3, [r7, #4]
 8008d36:	e00c      	b.n	8008d52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4a12      	ldr	r2, [pc, #72]	@ (8008d8c <prvInitialiseTaskLists+0x60>)
 8008d44:	4413      	add	r3, r2
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fe fcae 	bl	80076a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	607b      	str	r3, [r7, #4]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b37      	cmp	r3, #55	@ 0x37
 8008d56:	d9ef      	bls.n	8008d38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d58:	480d      	ldr	r0, [pc, #52]	@ (8008d90 <prvInitialiseTaskLists+0x64>)
 8008d5a:	f7fe fca5 	bl	80076a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d5e:	480d      	ldr	r0, [pc, #52]	@ (8008d94 <prvInitialiseTaskLists+0x68>)
 8008d60:	f7fe fca2 	bl	80076a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d64:	480c      	ldr	r0, [pc, #48]	@ (8008d98 <prvInitialiseTaskLists+0x6c>)
 8008d66:	f7fe fc9f 	bl	80076a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d6a:	480c      	ldr	r0, [pc, #48]	@ (8008d9c <prvInitialiseTaskLists+0x70>)
 8008d6c:	f7fe fc9c 	bl	80076a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d70:	480b      	ldr	r0, [pc, #44]	@ (8008da0 <prvInitialiseTaskLists+0x74>)
 8008d72:	f7fe fc99 	bl	80076a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d76:	4b0b      	ldr	r3, [pc, #44]	@ (8008da4 <prvInitialiseTaskLists+0x78>)
 8008d78:	4a05      	ldr	r2, [pc, #20]	@ (8008d90 <prvInitialiseTaskLists+0x64>)
 8008d7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008da8 <prvInitialiseTaskLists+0x7c>)
 8008d7e:	4a05      	ldr	r2, [pc, #20]	@ (8008d94 <prvInitialiseTaskLists+0x68>)
 8008d80:	601a      	str	r2, [r3, #0]
}
 8008d82:	bf00      	nop
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000d50 	.word	0x20000d50
 8008d90:	200011b0 	.word	0x200011b0
 8008d94:	200011c4 	.word	0x200011c4
 8008d98:	200011e0 	.word	0x200011e0
 8008d9c:	200011f4 	.word	0x200011f4
 8008da0:	2000120c 	.word	0x2000120c
 8008da4:	200011d8 	.word	0x200011d8
 8008da8:	200011dc 	.word	0x200011dc

08008dac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008db2:	e019      	b.n	8008de8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008db4:	f000 fde8 	bl	8009988 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008db8:	4b10      	ldr	r3, [pc, #64]	@ (8008dfc <prvCheckTasksWaitingTermination+0x50>)
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fe fcf9 	bl	80077bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008dca:	4b0d      	ldr	r3, [pc, #52]	@ (8008e00 <prvCheckTasksWaitingTermination+0x54>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	4a0b      	ldr	r2, [pc, #44]	@ (8008e00 <prvCheckTasksWaitingTermination+0x54>)
 8008dd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8008e04 <prvCheckTasksWaitingTermination+0x58>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	4a0a      	ldr	r2, [pc, #40]	@ (8008e04 <prvCheckTasksWaitingTermination+0x58>)
 8008ddc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008dde:	f000 fe05 	bl	80099ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f810 	bl	8008e08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008de8:	4b06      	ldr	r3, [pc, #24]	@ (8008e04 <prvCheckTasksWaitingTermination+0x58>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e1      	bne.n	8008db4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008df0:	bf00      	nop
 8008df2:	bf00      	nop
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	200011f4 	.word	0x200011f4
 8008e00:	20001220 	.word	0x20001220
 8008e04:	20001208 	.word	0x20001208

08008e08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3354      	adds	r3, #84	@ 0x54
 8008e14:	4618      	mov	r0, r3
 8008e16:	f001 f9f7 	bl	800a208 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d108      	bne.n	8008e36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 ff9d 	bl	8009d68 <vPortFree>
				vPortFree( pxTCB );
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 ff9a 	bl	8009d68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e34:	e019      	b.n	8008e6a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d103      	bne.n	8008e48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 ff91 	bl	8009d68 <vPortFree>
	}
 8008e46:	e010      	b.n	8008e6a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d00b      	beq.n	8008e6a <prvDeleteTCB+0x62>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	60fb      	str	r3, [r7, #12]
}
 8008e64:	bf00      	nop
 8008e66:	bf00      	nop
 8008e68:	e7fd      	b.n	8008e66 <prvDeleteTCB+0x5e>
	}
 8008e6a:	bf00      	nop
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
	...

08008e74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8008eac <prvResetNextTaskUnblockTime+0x38>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d104      	bne.n	8008e8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e84:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8008e86:	f04f 32ff 	mov.w	r2, #4294967295
 8008e8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e8c:	e008      	b.n	8008ea0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e8e:	4b07      	ldr	r3, [pc, #28]	@ (8008eac <prvResetNextTaskUnblockTime+0x38>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	4a04      	ldr	r2, [pc, #16]	@ (8008eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8008e9e:	6013      	str	r3, [r2, #0]
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	200011d8 	.word	0x200011d8
 8008eb0:	20001240 	.word	0x20001240

08008eb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008eba:	4b0b      	ldr	r3, [pc, #44]	@ (8008ee8 <xTaskGetSchedulerState+0x34>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d102      	bne.n	8008ec8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	607b      	str	r3, [r7, #4]
 8008ec6:	e008      	b.n	8008eda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ec8:	4b08      	ldr	r3, [pc, #32]	@ (8008eec <xTaskGetSchedulerState+0x38>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d102      	bne.n	8008ed6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	607b      	str	r3, [r7, #4]
 8008ed4:	e001      	b.n	8008eda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008eda:	687b      	ldr	r3, [r7, #4]
	}
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	2000122c 	.word	0x2000122c
 8008eec:	20001248 	.word	0x20001248

08008ef0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008efc:	2300      	movs	r3, #0
 8008efe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d058      	beq.n	8008fb8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f06:	4b2f      	ldr	r3, [pc, #188]	@ (8008fc4 <xTaskPriorityDisinherit+0xd4>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	693a      	ldr	r2, [r7, #16]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d00b      	beq.n	8008f28 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	60fb      	str	r3, [r7, #12]
}
 8008f22:	bf00      	nop
 8008f24:	bf00      	nop
 8008f26:	e7fd      	b.n	8008f24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10b      	bne.n	8008f48 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	60bb      	str	r3, [r7, #8]
}
 8008f42:	bf00      	nop
 8008f44:	bf00      	nop
 8008f46:	e7fd      	b.n	8008f44 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f4c:	1e5a      	subs	r2, r3, #1
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d02c      	beq.n	8008fb8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d128      	bne.n	8008fb8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	3304      	adds	r3, #4
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fc26 	bl	80077bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f88:	4b0f      	ldr	r3, [pc, #60]	@ (8008fc8 <xTaskPriorityDisinherit+0xd8>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d903      	bls.n	8008f98 <xTaskPriorityDisinherit+0xa8>
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f94:	4a0c      	ldr	r2, [pc, #48]	@ (8008fc8 <xTaskPriorityDisinherit+0xd8>)
 8008f96:	6013      	str	r3, [r2, #0]
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4a09      	ldr	r2, [pc, #36]	@ (8008fcc <xTaskPriorityDisinherit+0xdc>)
 8008fa6:	441a      	add	r2, r3
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	3304      	adds	r3, #4
 8008fac:	4619      	mov	r1, r3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	f7fe fba7 	bl	8007702 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fb8:	697b      	ldr	r3, [r7, #20]
	}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3718      	adds	r7, #24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20000d4c 	.word	0x20000d4c
 8008fc8:	20001228 	.word	0x20001228
 8008fcc:	20000d50 	.word	0x20000d50

08008fd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008fda:	4b21      	ldr	r3, [pc, #132]	@ (8009060 <prvAddCurrentTaskToDelayedList+0x90>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fe0:	4b20      	ldr	r3, [pc, #128]	@ (8009064 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe fbe8 	bl	80077bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff2:	d10a      	bne.n	800900a <prvAddCurrentTaskToDelayedList+0x3a>
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d007      	beq.n	800900a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8009064 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3304      	adds	r3, #4
 8009000:	4619      	mov	r1, r3
 8009002:	4819      	ldr	r0, [pc, #100]	@ (8009068 <prvAddCurrentTaskToDelayedList+0x98>)
 8009004:	f7fe fb7d 	bl	8007702 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009008:	e026      	b.n	8009058 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4413      	add	r3, r2
 8009010:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009012:	4b14      	ldr	r3, [pc, #80]	@ (8009064 <prvAddCurrentTaskToDelayedList+0x94>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	429a      	cmp	r2, r3
 8009020:	d209      	bcs.n	8009036 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009022:	4b12      	ldr	r3, [pc, #72]	@ (800906c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	4b0f      	ldr	r3, [pc, #60]	@ (8009064 <prvAddCurrentTaskToDelayedList+0x94>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3304      	adds	r3, #4
 800902c:	4619      	mov	r1, r3
 800902e:	4610      	mov	r0, r2
 8009030:	f7fe fb8b 	bl	800774a <vListInsert>
}
 8009034:	e010      	b.n	8009058 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009036:	4b0e      	ldr	r3, [pc, #56]	@ (8009070 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	4b0a      	ldr	r3, [pc, #40]	@ (8009064 <prvAddCurrentTaskToDelayedList+0x94>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3304      	adds	r3, #4
 8009040:	4619      	mov	r1, r3
 8009042:	4610      	mov	r0, r2
 8009044:	f7fe fb81 	bl	800774a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009048:	4b0a      	ldr	r3, [pc, #40]	@ (8009074 <prvAddCurrentTaskToDelayedList+0xa4>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	429a      	cmp	r2, r3
 8009050:	d202      	bcs.n	8009058 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009052:	4a08      	ldr	r2, [pc, #32]	@ (8009074 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	6013      	str	r3, [r2, #0]
}
 8009058:	bf00      	nop
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	20001224 	.word	0x20001224
 8009064:	20000d4c 	.word	0x20000d4c
 8009068:	2000120c 	.word	0x2000120c
 800906c:	200011dc 	.word	0x200011dc
 8009070:	200011d8 	.word	0x200011d8
 8009074:	20001240 	.word	0x20001240

08009078 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08a      	sub	sp, #40	@ 0x28
 800907c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800907e:	2300      	movs	r3, #0
 8009080:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009082:	f000 fb13 	bl	80096ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009086:	4b1d      	ldr	r3, [pc, #116]	@ (80090fc <xTimerCreateTimerTask+0x84>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d021      	beq.n	80090d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800908e:	2300      	movs	r3, #0
 8009090:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009092:	2300      	movs	r3, #0
 8009094:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009096:	1d3a      	adds	r2, r7, #4
 8009098:	f107 0108 	add.w	r1, r7, #8
 800909c:	f107 030c 	add.w	r3, r7, #12
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fe fae7 	bl	8007674 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80090a6:	6879      	ldr	r1, [r7, #4]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	9202      	str	r2, [sp, #8]
 80090ae:	9301      	str	r3, [sp, #4]
 80090b0:	2302      	movs	r3, #2
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	2300      	movs	r3, #0
 80090b6:	460a      	mov	r2, r1
 80090b8:	4911      	ldr	r1, [pc, #68]	@ (8009100 <xTimerCreateTimerTask+0x88>)
 80090ba:	4812      	ldr	r0, [pc, #72]	@ (8009104 <xTimerCreateTimerTask+0x8c>)
 80090bc:	f7ff f8a2 	bl	8008204 <xTaskCreateStatic>
 80090c0:	4603      	mov	r3, r0
 80090c2:	4a11      	ldr	r2, [pc, #68]	@ (8009108 <xTimerCreateTimerTask+0x90>)
 80090c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80090c6:	4b10      	ldr	r3, [pc, #64]	@ (8009108 <xTimerCreateTimerTask+0x90>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80090ce:	2301      	movs	r3, #1
 80090d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10b      	bne.n	80090f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	613b      	str	r3, [r7, #16]
}
 80090ea:	bf00      	nop
 80090ec:	bf00      	nop
 80090ee:	e7fd      	b.n	80090ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80090f0:	697b      	ldr	r3, [r7, #20]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3718      	adds	r7, #24
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	2000127c 	.word	0x2000127c
 8009100:	0800af44 	.word	0x0800af44
 8009104:	08009245 	.word	0x08009245
 8009108:	20001280 	.word	0x20001280

0800910c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08a      	sub	sp, #40	@ 0x28
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800911a:	2300      	movs	r3, #0
 800911c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10b      	bne.n	800913c <xTimerGenericCommand+0x30>
	__asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	623b      	str	r3, [r7, #32]
}
 8009136:	bf00      	nop
 8009138:	bf00      	nop
 800913a:	e7fd      	b.n	8009138 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800913c:	4b19      	ldr	r3, [pc, #100]	@ (80091a4 <xTimerGenericCommand+0x98>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d02a      	beq.n	800919a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2b05      	cmp	r3, #5
 8009154:	dc18      	bgt.n	8009188 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009156:	f7ff fead 	bl	8008eb4 <xTaskGetSchedulerState>
 800915a:	4603      	mov	r3, r0
 800915c:	2b02      	cmp	r3, #2
 800915e:	d109      	bne.n	8009174 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009160:	4b10      	ldr	r3, [pc, #64]	@ (80091a4 <xTimerGenericCommand+0x98>)
 8009162:	6818      	ldr	r0, [r3, #0]
 8009164:	f107 0110 	add.w	r1, r7, #16
 8009168:	2300      	movs	r3, #0
 800916a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800916c:	f7fe fc5a 	bl	8007a24 <xQueueGenericSend>
 8009170:	6278      	str	r0, [r7, #36]	@ 0x24
 8009172:	e012      	b.n	800919a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009174:	4b0b      	ldr	r3, [pc, #44]	@ (80091a4 <xTimerGenericCommand+0x98>)
 8009176:	6818      	ldr	r0, [r3, #0]
 8009178:	f107 0110 	add.w	r1, r7, #16
 800917c:	2300      	movs	r3, #0
 800917e:	2200      	movs	r2, #0
 8009180:	f7fe fc50 	bl	8007a24 <xQueueGenericSend>
 8009184:	6278      	str	r0, [r7, #36]	@ 0x24
 8009186:	e008      	b.n	800919a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009188:	4b06      	ldr	r3, [pc, #24]	@ (80091a4 <xTimerGenericCommand+0x98>)
 800918a:	6818      	ldr	r0, [r3, #0]
 800918c:	f107 0110 	add.w	r1, r7, #16
 8009190:	2300      	movs	r3, #0
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	f7fe fd48 	bl	8007c28 <xQueueGenericSendFromISR>
 8009198:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800919a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800919c:	4618      	mov	r0, r3
 800919e:	3728      	adds	r7, #40	@ 0x28
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	2000127c 	.word	0x2000127c

080091a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af02      	add	r7, sp, #8
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b2:	4b23      	ldr	r3, [pc, #140]	@ (8009240 <prvProcessExpiredTimer+0x98>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	3304      	adds	r3, #4
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fe fafb 	bl	80077bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d023      	beq.n	800921c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	699a      	ldr	r2, [r3, #24]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	18d1      	adds	r1, r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	6978      	ldr	r0, [r7, #20]
 80091e2:	f000 f8d5 	bl	8009390 <prvInsertTimerInActiveList>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d020      	beq.n	800922e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091ec:	2300      	movs	r3, #0
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	2300      	movs	r3, #0
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	2100      	movs	r1, #0
 80091f6:	6978      	ldr	r0, [r7, #20]
 80091f8:	f7ff ff88 	bl	800910c <xTimerGenericCommand>
 80091fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d114      	bne.n	800922e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	60fb      	str	r3, [r7, #12]
}
 8009216:	bf00      	nop
 8009218:	bf00      	nop
 800921a:	e7fd      	b.n	8009218 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009222:	f023 0301 	bic.w	r3, r3, #1
 8009226:	b2da      	uxtb	r2, r3
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	6978      	ldr	r0, [r7, #20]
 8009234:	4798      	blx	r3
}
 8009236:	bf00      	nop
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	20001274 	.word	0x20001274

08009244 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800924c:	f107 0308 	add.w	r3, r7, #8
 8009250:	4618      	mov	r0, r3
 8009252:	f000 f859 	bl	8009308 <prvGetNextExpireTime>
 8009256:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	4619      	mov	r1, r3
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 f805 	bl	800926c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009262:	f000 f8d7 	bl	8009414 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009266:	bf00      	nop
 8009268:	e7f0      	b.n	800924c <prvTimerTask+0x8>
	...

0800926c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009276:	f7ff fa29 	bl	80086cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800927a:	f107 0308 	add.w	r3, r7, #8
 800927e:	4618      	mov	r0, r3
 8009280:	f000 f866 	bl	8009350 <prvSampleTimeNow>
 8009284:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d130      	bne.n	80092ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10a      	bne.n	80092a8 <prvProcessTimerOrBlockTask+0x3c>
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	429a      	cmp	r2, r3
 8009298:	d806      	bhi.n	80092a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800929a:	f7ff fa25 	bl	80086e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800929e:	68f9      	ldr	r1, [r7, #12]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7ff ff81 	bl	80091a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80092a6:	e024      	b.n	80092f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d008      	beq.n	80092c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80092ae:	4b13      	ldr	r3, [pc, #76]	@ (80092fc <prvProcessTimerOrBlockTask+0x90>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <prvProcessTimerOrBlockTask+0x50>
 80092b8:	2301      	movs	r3, #1
 80092ba:	e000      	b.n	80092be <prvProcessTimerOrBlockTask+0x52>
 80092bc:	2300      	movs	r3, #0
 80092be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009300 <prvProcessTimerOrBlockTask+0x94>)
 80092c2:	6818      	ldr	r0, [r3, #0]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	4619      	mov	r1, r3
 80092ce:	f7fe ff65 	bl	800819c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092d2:	f7ff fa09 	bl	80086e8 <xTaskResumeAll>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10a      	bne.n	80092f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80092dc:	4b09      	ldr	r3, [pc, #36]	@ (8009304 <prvProcessTimerOrBlockTask+0x98>)
 80092de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	f3bf 8f6f 	isb	sy
}
 80092ec:	e001      	b.n	80092f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80092ee:	f7ff f9fb 	bl	80086e8 <xTaskResumeAll>
}
 80092f2:	bf00      	nop
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20001278 	.word	0x20001278
 8009300:	2000127c 	.word	0x2000127c
 8009304:	e000ed04 	.word	0xe000ed04

08009308 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009310:	4b0e      	ldr	r3, [pc, #56]	@ (800934c <prvGetNextExpireTime+0x44>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <prvGetNextExpireTime+0x16>
 800931a:	2201      	movs	r2, #1
 800931c:	e000      	b.n	8009320 <prvGetNextExpireTime+0x18>
 800931e:	2200      	movs	r2, #0
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d105      	bne.n	8009338 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800932c:	4b07      	ldr	r3, [pc, #28]	@ (800934c <prvGetNextExpireTime+0x44>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	e001      	b.n	800933c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009338:	2300      	movs	r3, #0
 800933a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800933c:	68fb      	ldr	r3, [r7, #12]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	20001274 	.word	0x20001274

08009350 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009358:	f7ff fa64 	bl	8008824 <xTaskGetTickCount>
 800935c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800935e:	4b0b      	ldr	r3, [pc, #44]	@ (800938c <prvSampleTimeNow+0x3c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	429a      	cmp	r2, r3
 8009366:	d205      	bcs.n	8009374 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009368:	f000 f93a 	bl	80095e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	601a      	str	r2, [r3, #0]
 8009372:	e002      	b.n	800937a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800937a:	4a04      	ldr	r2, [pc, #16]	@ (800938c <prvSampleTimeNow+0x3c>)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009380:	68fb      	ldr	r3, [r7, #12]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20001284 	.word	0x20001284

08009390 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
 800939c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800939e:	2300      	movs	r3, #0
 80093a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d812      	bhi.n	80093dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	1ad2      	subs	r2, r2, r3
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d302      	bcc.n	80093ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80093c4:	2301      	movs	r3, #1
 80093c6:	617b      	str	r3, [r7, #20]
 80093c8:	e01b      	b.n	8009402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093ca:	4b10      	ldr	r3, [pc, #64]	@ (800940c <prvInsertTimerInActiveList+0x7c>)
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	3304      	adds	r3, #4
 80093d2:	4619      	mov	r1, r3
 80093d4:	4610      	mov	r0, r2
 80093d6:	f7fe f9b8 	bl	800774a <vListInsert>
 80093da:	e012      	b.n	8009402 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d206      	bcs.n	80093f2 <prvInsertTimerInActiveList+0x62>
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d302      	bcc.n	80093f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80093ec:	2301      	movs	r3, #1
 80093ee:	617b      	str	r3, [r7, #20]
 80093f0:	e007      	b.n	8009402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093f2:	4b07      	ldr	r3, [pc, #28]	@ (8009410 <prvInsertTimerInActiveList+0x80>)
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3304      	adds	r3, #4
 80093fa:	4619      	mov	r1, r3
 80093fc:	4610      	mov	r0, r2
 80093fe:	f7fe f9a4 	bl	800774a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009402:	697b      	ldr	r3, [r7, #20]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	20001278 	.word	0x20001278
 8009410:	20001274 	.word	0x20001274

08009414 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08e      	sub	sp, #56	@ 0x38
 8009418:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800941a:	e0ce      	b.n	80095ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	da19      	bge.n	8009456 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009422:	1d3b      	adds	r3, r7, #4
 8009424:	3304      	adds	r3, #4
 8009426:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10b      	bne.n	8009446 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	61fb      	str	r3, [r7, #28]
}
 8009440:	bf00      	nop
 8009442:	bf00      	nop
 8009444:	e7fd      	b.n	8009442 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800944c:	6850      	ldr	r0, [r2, #4]
 800944e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009450:	6892      	ldr	r2, [r2, #8]
 8009452:	4611      	mov	r1, r2
 8009454:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	f2c0 80ae 	blt.w	80095ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d004      	beq.n	8009474 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800946a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946c:	3304      	adds	r3, #4
 800946e:	4618      	mov	r0, r3
 8009470:	f7fe f9a4 	bl	80077bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009474:	463b      	mov	r3, r7
 8009476:	4618      	mov	r0, r3
 8009478:	f7ff ff6a 	bl	8009350 <prvSampleTimeNow>
 800947c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b09      	cmp	r3, #9
 8009482:	f200 8097 	bhi.w	80095b4 <prvProcessReceivedCommands+0x1a0>
 8009486:	a201      	add	r2, pc, #4	@ (adr r2, 800948c <prvProcessReceivedCommands+0x78>)
 8009488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948c:	080094b5 	.word	0x080094b5
 8009490:	080094b5 	.word	0x080094b5
 8009494:	080094b5 	.word	0x080094b5
 8009498:	0800952b 	.word	0x0800952b
 800949c:	0800953f 	.word	0x0800953f
 80094a0:	0800958b 	.word	0x0800958b
 80094a4:	080094b5 	.word	0x080094b5
 80094a8:	080094b5 	.word	0x080094b5
 80094ac:	0800952b 	.word	0x0800952b
 80094b0:	0800953f 	.word	0x0800953f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094ba:	f043 0301 	orr.w	r3, r3, #1
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	18d1      	adds	r1, r2, r3
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094d4:	f7ff ff5c 	bl	8009390 <prvInsertTimerInActiveList>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d06c      	beq.n	80095b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094ec:	f003 0304 	and.w	r3, r3, #4
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d061      	beq.n	80095b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	441a      	add	r2, r3
 80094fc:	2300      	movs	r3, #0
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	2300      	movs	r3, #0
 8009502:	2100      	movs	r1, #0
 8009504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009506:	f7ff fe01 	bl	800910c <xTimerGenericCommand>
 800950a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800950c:	6a3b      	ldr	r3, [r7, #32]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d152      	bne.n	80095b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009516:	f383 8811 	msr	BASEPRI, r3
 800951a:	f3bf 8f6f 	isb	sy
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	61bb      	str	r3, [r7, #24]
}
 8009524:	bf00      	nop
 8009526:	bf00      	nop
 8009528:	e7fd      	b.n	8009526 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800952a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009530:	f023 0301 	bic.w	r3, r3, #1
 8009534:	b2da      	uxtb	r2, r3
 8009536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009538:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800953c:	e03d      	b.n	80095ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800953e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009540:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009544:	f043 0301 	orr.w	r3, r3, #1
 8009548:	b2da      	uxtb	r2, r3
 800954a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009554:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10b      	bne.n	8009576 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	617b      	str	r3, [r7, #20]
}
 8009570:	bf00      	nop
 8009572:	bf00      	nop
 8009574:	e7fd      	b.n	8009572 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009578:	699a      	ldr	r2, [r3, #24]
 800957a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957c:	18d1      	adds	r1, r2, r3
 800957e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009582:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009584:	f7ff ff04 	bl	8009390 <prvInsertTimerInActiveList>
					break;
 8009588:	e017      	b.n	80095ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800958a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009590:	f003 0302 	and.w	r3, r3, #2
 8009594:	2b00      	cmp	r3, #0
 8009596:	d103      	bne.n	80095a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009598:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800959a:	f000 fbe5 	bl	8009d68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800959e:	e00c      	b.n	80095ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095a6:	f023 0301 	bic.w	r3, r3, #1
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80095b2:	e002      	b.n	80095ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80095b4:	bf00      	nop
 80095b6:	e000      	b.n	80095ba <prvProcessReceivedCommands+0x1a6>
					break;
 80095b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095ba:	4b08      	ldr	r3, [pc, #32]	@ (80095dc <prvProcessReceivedCommands+0x1c8>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	1d39      	adds	r1, r7, #4
 80095c0:	2200      	movs	r2, #0
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe fbce 	bl	8007d64 <xQueueReceive>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f47f af26 	bne.w	800941c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80095d0:	bf00      	nop
 80095d2:	bf00      	nop
 80095d4:	3730      	adds	r7, #48	@ 0x30
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	2000127c 	.word	0x2000127c

080095e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b088      	sub	sp, #32
 80095e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095e6:	e049      	b.n	800967c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095e8:	4b2e      	ldr	r3, [pc, #184]	@ (80096a4 <prvSwitchTimerLists+0xc4>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095f2:	4b2c      	ldr	r3, [pc, #176]	@ (80096a4 <prvSwitchTimerLists+0xc4>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	3304      	adds	r3, #4
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe f8db 	bl	80077bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b00      	cmp	r3, #0
 800961a:	d02f      	beq.n	800967c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	4413      	add	r3, r2
 8009624:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	429a      	cmp	r2, r3
 800962c:	d90e      	bls.n	800964c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800963a:	4b1a      	ldr	r3, [pc, #104]	@ (80096a4 <prvSwitchTimerLists+0xc4>)
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3304      	adds	r3, #4
 8009642:	4619      	mov	r1, r3
 8009644:	4610      	mov	r0, r2
 8009646:	f7fe f880 	bl	800774a <vListInsert>
 800964a:	e017      	b.n	800967c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800964c:	2300      	movs	r3, #0
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	2300      	movs	r3, #0
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	2100      	movs	r1, #0
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f7ff fd58 	bl	800910c <xTimerGenericCommand>
 800965c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10b      	bne.n	800967c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009668:	f383 8811 	msr	BASEPRI, r3
 800966c:	f3bf 8f6f 	isb	sy
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	603b      	str	r3, [r7, #0]
}
 8009676:	bf00      	nop
 8009678:	bf00      	nop
 800967a:	e7fd      	b.n	8009678 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800967c:	4b09      	ldr	r3, [pc, #36]	@ (80096a4 <prvSwitchTimerLists+0xc4>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1b0      	bne.n	80095e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009686:	4b07      	ldr	r3, [pc, #28]	@ (80096a4 <prvSwitchTimerLists+0xc4>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800968c:	4b06      	ldr	r3, [pc, #24]	@ (80096a8 <prvSwitchTimerLists+0xc8>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a04      	ldr	r2, [pc, #16]	@ (80096a4 <prvSwitchTimerLists+0xc4>)
 8009692:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009694:	4a04      	ldr	r2, [pc, #16]	@ (80096a8 <prvSwitchTimerLists+0xc8>)
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	6013      	str	r3, [r2, #0]
}
 800969a:	bf00      	nop
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20001274 	.word	0x20001274
 80096a8:	20001278 	.word	0x20001278

080096ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80096b2:	f000 f969 	bl	8009988 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80096b6:	4b15      	ldr	r3, [pc, #84]	@ (800970c <prvCheckForValidListAndQueue+0x60>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d120      	bne.n	8009700 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80096be:	4814      	ldr	r0, [pc, #80]	@ (8009710 <prvCheckForValidListAndQueue+0x64>)
 80096c0:	f7fd fff2 	bl	80076a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80096c4:	4813      	ldr	r0, [pc, #76]	@ (8009714 <prvCheckForValidListAndQueue+0x68>)
 80096c6:	f7fd ffef 	bl	80076a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80096ca:	4b13      	ldr	r3, [pc, #76]	@ (8009718 <prvCheckForValidListAndQueue+0x6c>)
 80096cc:	4a10      	ldr	r2, [pc, #64]	@ (8009710 <prvCheckForValidListAndQueue+0x64>)
 80096ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80096d0:	4b12      	ldr	r3, [pc, #72]	@ (800971c <prvCheckForValidListAndQueue+0x70>)
 80096d2:	4a10      	ldr	r2, [pc, #64]	@ (8009714 <prvCheckForValidListAndQueue+0x68>)
 80096d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096d6:	2300      	movs	r3, #0
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	4b11      	ldr	r3, [pc, #68]	@ (8009720 <prvCheckForValidListAndQueue+0x74>)
 80096dc:	4a11      	ldr	r2, [pc, #68]	@ (8009724 <prvCheckForValidListAndQueue+0x78>)
 80096de:	2110      	movs	r1, #16
 80096e0:	200a      	movs	r0, #10
 80096e2:	f7fe f8ff 	bl	80078e4 <xQueueGenericCreateStatic>
 80096e6:	4603      	mov	r3, r0
 80096e8:	4a08      	ldr	r2, [pc, #32]	@ (800970c <prvCheckForValidListAndQueue+0x60>)
 80096ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80096ec:	4b07      	ldr	r3, [pc, #28]	@ (800970c <prvCheckForValidListAndQueue+0x60>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d005      	beq.n	8009700 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096f4:	4b05      	ldr	r3, [pc, #20]	@ (800970c <prvCheckForValidListAndQueue+0x60>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	490b      	ldr	r1, [pc, #44]	@ (8009728 <prvCheckForValidListAndQueue+0x7c>)
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe fd24 	bl	8008148 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009700:	f000 f974 	bl	80099ec <vPortExitCritical>
}
 8009704:	bf00      	nop
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	2000127c 	.word	0x2000127c
 8009710:	2000124c 	.word	0x2000124c
 8009714:	20001260 	.word	0x20001260
 8009718:	20001274 	.word	0x20001274
 800971c:	20001278 	.word	0x20001278
 8009720:	20001328 	.word	0x20001328
 8009724:	20001288 	.word	0x20001288
 8009728:	0800af4c 	.word	0x0800af4c

0800972c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	3b04      	subs	r3, #4
 800973c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3b04      	subs	r3, #4
 800974a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	f023 0201 	bic.w	r2, r3, #1
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	3b04      	subs	r3, #4
 800975a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800975c:	4a0c      	ldr	r2, [pc, #48]	@ (8009790 <pxPortInitialiseStack+0x64>)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	3b14      	subs	r3, #20
 8009766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	3b04      	subs	r3, #4
 8009772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f06f 0202 	mvn.w	r2, #2
 800977a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	3b20      	subs	r3, #32
 8009780:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009782:	68fb      	ldr	r3, [r7, #12]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	08009795 	.word	0x08009795

08009794 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800979a:	2300      	movs	r3, #0
 800979c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800979e:	4b13      	ldr	r3, [pc, #76]	@ (80097ec <prvTaskExitError+0x58>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a6:	d00b      	beq.n	80097c0 <prvTaskExitError+0x2c>
	__asm volatile
 80097a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	60fb      	str	r3, [r7, #12]
}
 80097ba:	bf00      	nop
 80097bc:	bf00      	nop
 80097be:	e7fd      	b.n	80097bc <prvTaskExitError+0x28>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	60bb      	str	r3, [r7, #8]
}
 80097d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097d4:	bf00      	nop
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d0fc      	beq.n	80097d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097dc:	bf00      	nop
 80097de:	bf00      	nop
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	20000010 	.word	0x20000010

080097f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097f0:	4b07      	ldr	r3, [pc, #28]	@ (8009810 <pxCurrentTCBConst2>)
 80097f2:	6819      	ldr	r1, [r3, #0]
 80097f4:	6808      	ldr	r0, [r1, #0]
 80097f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fa:	f380 8809 	msr	PSP, r0
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f04f 0000 	mov.w	r0, #0
 8009806:	f380 8811 	msr	BASEPRI, r0
 800980a:	4770      	bx	lr
 800980c:	f3af 8000 	nop.w

08009810 <pxCurrentTCBConst2>:
 8009810:	20000d4c 	.word	0x20000d4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop

08009818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009818:	4808      	ldr	r0, [pc, #32]	@ (800983c <prvPortStartFirstTask+0x24>)
 800981a:	6800      	ldr	r0, [r0, #0]
 800981c:	6800      	ldr	r0, [r0, #0]
 800981e:	f380 8808 	msr	MSP, r0
 8009822:	f04f 0000 	mov.w	r0, #0
 8009826:	f380 8814 	msr	CONTROL, r0
 800982a:	b662      	cpsie	i
 800982c:	b661      	cpsie	f
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	df00      	svc	0
 8009838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800983a:	bf00      	nop
 800983c:	e000ed08 	.word	0xe000ed08

08009840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009846:	4b47      	ldr	r3, [pc, #284]	@ (8009964 <xPortStartScheduler+0x124>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a47      	ldr	r2, [pc, #284]	@ (8009968 <xPortStartScheduler+0x128>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d10b      	bne.n	8009868 <xPortStartScheduler+0x28>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009854:	f383 8811 	msr	BASEPRI, r3
 8009858:	f3bf 8f6f 	isb	sy
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	613b      	str	r3, [r7, #16]
}
 8009862:	bf00      	nop
 8009864:	bf00      	nop
 8009866:	e7fd      	b.n	8009864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009868:	4b3e      	ldr	r3, [pc, #248]	@ (8009964 <xPortStartScheduler+0x124>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a3f      	ldr	r2, [pc, #252]	@ (800996c <xPortStartScheduler+0x12c>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d10b      	bne.n	800988a <xPortStartScheduler+0x4a>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	60fb      	str	r3, [r7, #12]
}
 8009884:	bf00      	nop
 8009886:	bf00      	nop
 8009888:	e7fd      	b.n	8009886 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800988a:	4b39      	ldr	r3, [pc, #228]	@ (8009970 <xPortStartScheduler+0x130>)
 800988c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	b2db      	uxtb	r3, r3
 8009894:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	22ff      	movs	r2, #255	@ 0xff
 800989a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098a4:	78fb      	ldrb	r3, [r7, #3]
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	4b31      	ldr	r3, [pc, #196]	@ (8009974 <xPortStartScheduler+0x134>)
 80098b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098b2:	4b31      	ldr	r3, [pc, #196]	@ (8009978 <xPortStartScheduler+0x138>)
 80098b4:	2207      	movs	r2, #7
 80098b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098b8:	e009      	b.n	80098ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80098ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009978 <xPortStartScheduler+0x138>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3b01      	subs	r3, #1
 80098c0:	4a2d      	ldr	r2, [pc, #180]	@ (8009978 <xPortStartScheduler+0x138>)
 80098c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098c4:	78fb      	ldrb	r3, [r7, #3]
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098ce:	78fb      	ldrb	r3, [r7, #3]
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098d6:	2b80      	cmp	r3, #128	@ 0x80
 80098d8:	d0ef      	beq.n	80098ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098da:	4b27      	ldr	r3, [pc, #156]	@ (8009978 <xPortStartScheduler+0x138>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f1c3 0307 	rsb	r3, r3, #7
 80098e2:	2b04      	cmp	r3, #4
 80098e4:	d00b      	beq.n	80098fe <xPortStartScheduler+0xbe>
	__asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	60bb      	str	r3, [r7, #8]
}
 80098f8:	bf00      	nop
 80098fa:	bf00      	nop
 80098fc:	e7fd      	b.n	80098fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009978 <xPortStartScheduler+0x138>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	021b      	lsls	r3, r3, #8
 8009904:	4a1c      	ldr	r2, [pc, #112]	@ (8009978 <xPortStartScheduler+0x138>)
 8009906:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009908:	4b1b      	ldr	r3, [pc, #108]	@ (8009978 <xPortStartScheduler+0x138>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009910:	4a19      	ldr	r2, [pc, #100]	@ (8009978 <xPortStartScheduler+0x138>)
 8009912:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	b2da      	uxtb	r2, r3
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800991c:	4b17      	ldr	r3, [pc, #92]	@ (800997c <xPortStartScheduler+0x13c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a16      	ldr	r2, [pc, #88]	@ (800997c <xPortStartScheduler+0x13c>)
 8009922:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009926:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009928:	4b14      	ldr	r3, [pc, #80]	@ (800997c <xPortStartScheduler+0x13c>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a13      	ldr	r2, [pc, #76]	@ (800997c <xPortStartScheduler+0x13c>)
 800992e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009932:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009934:	f000 f8da 	bl	8009aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009938:	4b11      	ldr	r3, [pc, #68]	@ (8009980 <xPortStartScheduler+0x140>)
 800993a:	2200      	movs	r2, #0
 800993c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800993e:	f000 f8f9 	bl	8009b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009942:	4b10      	ldr	r3, [pc, #64]	@ (8009984 <xPortStartScheduler+0x144>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a0f      	ldr	r2, [pc, #60]	@ (8009984 <xPortStartScheduler+0x144>)
 8009948:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800994c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800994e:	f7ff ff63 	bl	8009818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009952:	f7ff f831 	bl	80089b8 <vTaskSwitchContext>
	prvTaskExitError();
 8009956:	f7ff ff1d 	bl	8009794 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	e000ed00 	.word	0xe000ed00
 8009968:	410fc271 	.word	0x410fc271
 800996c:	410fc270 	.word	0x410fc270
 8009970:	e000e400 	.word	0xe000e400
 8009974:	20001378 	.word	0x20001378
 8009978:	2000137c 	.word	0x2000137c
 800997c:	e000ed20 	.word	0xe000ed20
 8009980:	20000010 	.word	0x20000010
 8009984:	e000ef34 	.word	0xe000ef34

08009988 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	607b      	str	r3, [r7, #4]
}
 80099a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099a2:	4b10      	ldr	r3, [pc, #64]	@ (80099e4 <vPortEnterCritical+0x5c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	3301      	adds	r3, #1
 80099a8:	4a0e      	ldr	r2, [pc, #56]	@ (80099e4 <vPortEnterCritical+0x5c>)
 80099aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099ac:	4b0d      	ldr	r3, [pc, #52]	@ (80099e4 <vPortEnterCritical+0x5c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d110      	bne.n	80099d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80099b4:	4b0c      	ldr	r3, [pc, #48]	@ (80099e8 <vPortEnterCritical+0x60>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00b      	beq.n	80099d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80099be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	603b      	str	r3, [r7, #0]
}
 80099d0:	bf00      	nop
 80099d2:	bf00      	nop
 80099d4:	e7fd      	b.n	80099d2 <vPortEnterCritical+0x4a>
	}
}
 80099d6:	bf00      	nop
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	20000010 	.word	0x20000010
 80099e8:	e000ed04 	.word	0xe000ed04

080099ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099f2:	4b12      	ldr	r3, [pc, #72]	@ (8009a3c <vPortExitCritical+0x50>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10b      	bne.n	8009a12 <vPortExitCritical+0x26>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	607b      	str	r3, [r7, #4]
}
 8009a0c:	bf00      	nop
 8009a0e:	bf00      	nop
 8009a10:	e7fd      	b.n	8009a0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a12:	4b0a      	ldr	r3, [pc, #40]	@ (8009a3c <vPortExitCritical+0x50>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3b01      	subs	r3, #1
 8009a18:	4a08      	ldr	r2, [pc, #32]	@ (8009a3c <vPortExitCritical+0x50>)
 8009a1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a1c:	4b07      	ldr	r3, [pc, #28]	@ (8009a3c <vPortExitCritical+0x50>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d105      	bne.n	8009a30 <vPortExitCritical+0x44>
 8009a24:	2300      	movs	r3, #0
 8009a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	f383 8811 	msr	BASEPRI, r3
}
 8009a2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	20000010 	.word	0x20000010

08009a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a40:	f3ef 8009 	mrs	r0, PSP
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	4b15      	ldr	r3, [pc, #84]	@ (8009aa0 <pxCurrentTCBConst>)
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	f01e 0f10 	tst.w	lr, #16
 8009a50:	bf08      	it	eq
 8009a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5a:	6010      	str	r0, [r2, #0]
 8009a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009a64:	f380 8811 	msr	BASEPRI, r0
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f7fe ffa2 	bl	80089b8 <vTaskSwitchContext>
 8009a74:	f04f 0000 	mov.w	r0, #0
 8009a78:	f380 8811 	msr	BASEPRI, r0
 8009a7c:	bc09      	pop	{r0, r3}
 8009a7e:	6819      	ldr	r1, [r3, #0]
 8009a80:	6808      	ldr	r0, [r1, #0]
 8009a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a86:	f01e 0f10 	tst.w	lr, #16
 8009a8a:	bf08      	it	eq
 8009a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a90:	f380 8809 	msr	PSP, r0
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	f3af 8000 	nop.w

08009aa0 <pxCurrentTCBConst>:
 8009aa0:	20000d4c 	.word	0x20000d4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009aa4:	bf00      	nop
 8009aa6:	bf00      	nop

08009aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	607b      	str	r3, [r7, #4]
}
 8009ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ac2:	f7fe febf 	bl	8008844 <xTaskIncrementTick>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009acc:	4b06      	ldr	r3, [pc, #24]	@ (8009ae8 <xPortSysTickHandler+0x40>)
 8009ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	f383 8811 	msr	BASEPRI, r3
}
 8009ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	e000ed04 	.word	0xe000ed04

08009aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009aec:	b480      	push	{r7}
 8009aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009af0:	4b0b      	ldr	r3, [pc, #44]	@ (8009b20 <vPortSetupTimerInterrupt+0x34>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009af6:	4b0b      	ldr	r3, [pc, #44]	@ (8009b24 <vPortSetupTimerInterrupt+0x38>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009afc:	4b0a      	ldr	r3, [pc, #40]	@ (8009b28 <vPortSetupTimerInterrupt+0x3c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a0a      	ldr	r2, [pc, #40]	@ (8009b2c <vPortSetupTimerInterrupt+0x40>)
 8009b02:	fba2 2303 	umull	r2, r3, r2, r3
 8009b06:	099b      	lsrs	r3, r3, #6
 8009b08:	4a09      	ldr	r2, [pc, #36]	@ (8009b30 <vPortSetupTimerInterrupt+0x44>)
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b0e:	4b04      	ldr	r3, [pc, #16]	@ (8009b20 <vPortSetupTimerInterrupt+0x34>)
 8009b10:	2207      	movs	r2, #7
 8009b12:	601a      	str	r2, [r3, #0]
}
 8009b14:	bf00      	nop
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	e000e010 	.word	0xe000e010
 8009b24:	e000e018 	.word	0xe000e018
 8009b28:	20000004 	.word	0x20000004
 8009b2c:	10624dd3 	.word	0x10624dd3
 8009b30:	e000e014 	.word	0xe000e014

08009b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009b44 <vPortEnableVFP+0x10>
 8009b38:	6801      	ldr	r1, [r0, #0]
 8009b3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009b3e:	6001      	str	r1, [r0, #0]
 8009b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b42:	bf00      	nop
 8009b44:	e000ed88 	.word	0xe000ed88

08009b48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b4e:	f3ef 8305 	mrs	r3, IPSR
 8009b52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2b0f      	cmp	r3, #15
 8009b58:	d915      	bls.n	8009b86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b5a:	4a18      	ldr	r2, [pc, #96]	@ (8009bbc <vPortValidateInterruptPriority+0x74>)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	4413      	add	r3, r2
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b64:	4b16      	ldr	r3, [pc, #88]	@ (8009bc0 <vPortValidateInterruptPriority+0x78>)
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	7afa      	ldrb	r2, [r7, #11]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d20b      	bcs.n	8009b86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	607b      	str	r3, [r7, #4]
}
 8009b80:	bf00      	nop
 8009b82:	bf00      	nop
 8009b84:	e7fd      	b.n	8009b82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b86:	4b0f      	ldr	r3, [pc, #60]	@ (8009bc4 <vPortValidateInterruptPriority+0x7c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8009bc8 <vPortValidateInterruptPriority+0x80>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d90b      	bls.n	8009bae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	603b      	str	r3, [r7, #0]
}
 8009ba8:	bf00      	nop
 8009baa:	bf00      	nop
 8009bac:	e7fd      	b.n	8009baa <vPortValidateInterruptPriority+0x62>
	}
 8009bae:	bf00      	nop
 8009bb0:	3714      	adds	r7, #20
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	e000e3f0 	.word	0xe000e3f0
 8009bc0:	20001378 	.word	0x20001378
 8009bc4:	e000ed0c 	.word	0xe000ed0c
 8009bc8:	2000137c 	.word	0x2000137c

08009bcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b08a      	sub	sp, #40	@ 0x28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009bd8:	f7fe fd78 	bl	80086cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bdc:	4b5c      	ldr	r3, [pc, #368]	@ (8009d50 <pvPortMalloc+0x184>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009be4:	f000 f924 	bl	8009e30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009be8:	4b5a      	ldr	r3, [pc, #360]	@ (8009d54 <pvPortMalloc+0x188>)
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4013      	ands	r3, r2
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f040 8095 	bne.w	8009d20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d01e      	beq.n	8009c3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009bfc:	2208      	movs	r2, #8
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4413      	add	r3, r2
 8009c02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f003 0307 	and.w	r3, r3, #7
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d015      	beq.n	8009c3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f023 0307 	bic.w	r3, r3, #7
 8009c14:	3308      	adds	r3, #8
 8009c16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f003 0307 	and.w	r3, r3, #7
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00b      	beq.n	8009c3a <pvPortMalloc+0x6e>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	617b      	str	r3, [r7, #20]
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop
 8009c38:	e7fd      	b.n	8009c36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d06f      	beq.n	8009d20 <pvPortMalloc+0x154>
 8009c40:	4b45      	ldr	r3, [pc, #276]	@ (8009d58 <pvPortMalloc+0x18c>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d86a      	bhi.n	8009d20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c4a:	4b44      	ldr	r3, [pc, #272]	@ (8009d5c <pvPortMalloc+0x190>)
 8009c4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c4e:	4b43      	ldr	r3, [pc, #268]	@ (8009d5c <pvPortMalloc+0x190>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c54:	e004      	b.n	8009c60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d903      	bls.n	8009c72 <pvPortMalloc+0xa6>
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1f1      	bne.n	8009c56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c72:	4b37      	ldr	r3, [pc, #220]	@ (8009d50 <pvPortMalloc+0x184>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d051      	beq.n	8009d20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2208      	movs	r2, #8
 8009c82:	4413      	add	r3, r2
 8009c84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	6a3b      	ldr	r3, [r7, #32]
 8009c8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	1ad2      	subs	r2, r2, r3
 8009c96:	2308      	movs	r3, #8
 8009c98:	005b      	lsls	r3, r3, #1
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d920      	bls.n	8009ce0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	f003 0307 	and.w	r3, r3, #7
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00b      	beq.n	8009cc8 <pvPortMalloc+0xfc>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	613b      	str	r3, [r7, #16]
}
 8009cc2:	bf00      	nop
 8009cc4:	bf00      	nop
 8009cc6:	e7fd      	b.n	8009cc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cca:	685a      	ldr	r2, [r3, #4]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	1ad2      	subs	r2, r2, r3
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009cda:	69b8      	ldr	r0, [r7, #24]
 8009cdc:	f000 f90a 	bl	8009ef4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8009d58 <pvPortMalloc+0x18c>)
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	4a1b      	ldr	r2, [pc, #108]	@ (8009d58 <pvPortMalloc+0x18c>)
 8009cec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009cee:	4b1a      	ldr	r3, [pc, #104]	@ (8009d58 <pvPortMalloc+0x18c>)
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8009d60 <pvPortMalloc+0x194>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d203      	bcs.n	8009d02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009cfa:	4b17      	ldr	r3, [pc, #92]	@ (8009d58 <pvPortMalloc+0x18c>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a18      	ldr	r2, [pc, #96]	@ (8009d60 <pvPortMalloc+0x194>)
 8009d00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d04:	685a      	ldr	r2, [r3, #4]
 8009d06:	4b13      	ldr	r3, [pc, #76]	@ (8009d54 <pvPortMalloc+0x188>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d12:	2200      	movs	r2, #0
 8009d14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d16:	4b13      	ldr	r3, [pc, #76]	@ (8009d64 <pvPortMalloc+0x198>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	4a11      	ldr	r2, [pc, #68]	@ (8009d64 <pvPortMalloc+0x198>)
 8009d1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d20:	f7fe fce2 	bl	80086e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	f003 0307 	and.w	r3, r3, #7
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00b      	beq.n	8009d46 <pvPortMalloc+0x17a>
	__asm volatile
 8009d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	60fb      	str	r3, [r7, #12]
}
 8009d40:	bf00      	nop
 8009d42:	bf00      	nop
 8009d44:	e7fd      	b.n	8009d42 <pvPortMalloc+0x176>
	return pvReturn;
 8009d46:	69fb      	ldr	r3, [r7, #28]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3728      	adds	r7, #40	@ 0x28
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	20004f88 	.word	0x20004f88
 8009d54:	20004f9c 	.word	0x20004f9c
 8009d58:	20004f8c 	.word	0x20004f8c
 8009d5c:	20004f80 	.word	0x20004f80
 8009d60:	20004f90 	.word	0x20004f90
 8009d64:	20004f94 	.word	0x20004f94

08009d68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d04f      	beq.n	8009e1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d7a:	2308      	movs	r3, #8
 8009d7c:	425b      	negs	r3, r3
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	4413      	add	r3, r2
 8009d82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	4b25      	ldr	r3, [pc, #148]	@ (8009e24 <vPortFree+0xbc>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4013      	ands	r3, r2
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10b      	bne.n	8009dae <vPortFree+0x46>
	__asm volatile
 8009d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	60fb      	str	r3, [r7, #12]
}
 8009da8:	bf00      	nop
 8009daa:	bf00      	nop
 8009dac:	e7fd      	b.n	8009daa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00b      	beq.n	8009dce <vPortFree+0x66>
	__asm volatile
 8009db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	60bb      	str	r3, [r7, #8]
}
 8009dc8:	bf00      	nop
 8009dca:	bf00      	nop
 8009dcc:	e7fd      	b.n	8009dca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	685a      	ldr	r2, [r3, #4]
 8009dd2:	4b14      	ldr	r3, [pc, #80]	@ (8009e24 <vPortFree+0xbc>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4013      	ands	r3, r2
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d01e      	beq.n	8009e1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d11a      	bne.n	8009e1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	685a      	ldr	r2, [r3, #4]
 8009de8:	4b0e      	ldr	r3, [pc, #56]	@ (8009e24 <vPortFree+0xbc>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	43db      	mvns	r3, r3
 8009dee:	401a      	ands	r2, r3
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009df4:	f7fe fc6a 	bl	80086cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8009e28 <vPortFree+0xc0>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4413      	add	r3, r2
 8009e02:	4a09      	ldr	r2, [pc, #36]	@ (8009e28 <vPortFree+0xc0>)
 8009e04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e06:	6938      	ldr	r0, [r7, #16]
 8009e08:	f000 f874 	bl	8009ef4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e0c:	4b07      	ldr	r3, [pc, #28]	@ (8009e2c <vPortFree+0xc4>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	3301      	adds	r3, #1
 8009e12:	4a06      	ldr	r2, [pc, #24]	@ (8009e2c <vPortFree+0xc4>)
 8009e14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e16:	f7fe fc67 	bl	80086e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e1a:	bf00      	nop
 8009e1c:	3718      	adds	r7, #24
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	20004f9c 	.word	0x20004f9c
 8009e28:	20004f8c 	.word	0x20004f8c
 8009e2c:	20004f98 	.word	0x20004f98

08009e30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009e3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e3c:	4b27      	ldr	r3, [pc, #156]	@ (8009edc <prvHeapInit+0xac>)
 8009e3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f003 0307 	and.w	r3, r3, #7
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00c      	beq.n	8009e64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	3307      	adds	r3, #7
 8009e4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f023 0307 	bic.w	r3, r3, #7
 8009e56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8009edc <prvHeapInit+0xac>)
 8009e60:	4413      	add	r3, r2
 8009e62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e68:	4a1d      	ldr	r2, [pc, #116]	@ (8009ee0 <prvHeapInit+0xb0>)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8009ee0 <prvHeapInit+0xb0>)
 8009e70:	2200      	movs	r2, #0
 8009e72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	4413      	add	r3, r2
 8009e7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e7c:	2208      	movs	r2, #8
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	1a9b      	subs	r3, r3, r2
 8009e82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f023 0307 	bic.w	r3, r3, #7
 8009e8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	4a15      	ldr	r2, [pc, #84]	@ (8009ee4 <prvHeapInit+0xb4>)
 8009e90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e92:	4b14      	ldr	r3, [pc, #80]	@ (8009ee4 <prvHeapInit+0xb4>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2200      	movs	r2, #0
 8009e98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e9a:	4b12      	ldr	r3, [pc, #72]	@ (8009ee4 <prvHeapInit+0xb4>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	1ad2      	subs	r2, r2, r3
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8009ee4 <prvHeapInit+0xb4>)
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8009ee8 <prvHeapInit+0xb8>)
 8009ebe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	4a09      	ldr	r2, [pc, #36]	@ (8009eec <prvHeapInit+0xbc>)
 8009ec6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ec8:	4b09      	ldr	r3, [pc, #36]	@ (8009ef0 <prvHeapInit+0xc0>)
 8009eca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009ece:	601a      	str	r2, [r3, #0]
}
 8009ed0:	bf00      	nop
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	20001380 	.word	0x20001380
 8009ee0:	20004f80 	.word	0x20004f80
 8009ee4:	20004f88 	.word	0x20004f88
 8009ee8:	20004f90 	.word	0x20004f90
 8009eec:	20004f8c 	.word	0x20004f8c
 8009ef0:	20004f9c 	.word	0x20004f9c

08009ef4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009efc:	4b28      	ldr	r3, [pc, #160]	@ (8009fa0 <prvInsertBlockIntoFreeList+0xac>)
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	e002      	b.n	8009f08 <prvInsertBlockIntoFreeList+0x14>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	60fb      	str	r3, [r7, #12]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d8f7      	bhi.n	8009f02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d108      	bne.n	8009f36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	685a      	ldr	r2, [r3, #4]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	441a      	add	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	441a      	add	r2, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d118      	bne.n	8009f7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	4b15      	ldr	r3, [pc, #84]	@ (8009fa4 <prvInsertBlockIntoFreeList+0xb0>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d00d      	beq.n	8009f72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	441a      	add	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	e008      	b.n	8009f84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f72:	4b0c      	ldr	r3, [pc, #48]	@ (8009fa4 <prvInsertBlockIntoFreeList+0xb0>)
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	e003      	b.n	8009f84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d002      	beq.n	8009f92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f92:	bf00      	nop
 8009f94:	3714      	adds	r7, #20
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	20004f80 	.word	0x20004f80
 8009fa4:	20004f88 	.word	0x20004f88

08009fa8 <std>:
 8009fa8:	2300      	movs	r3, #0
 8009faa:	b510      	push	{r4, lr}
 8009fac:	4604      	mov	r4, r0
 8009fae:	e9c0 3300 	strd	r3, r3, [r0]
 8009fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fb6:	6083      	str	r3, [r0, #8]
 8009fb8:	8181      	strh	r1, [r0, #12]
 8009fba:	6643      	str	r3, [r0, #100]	@ 0x64
 8009fbc:	81c2      	strh	r2, [r0, #14]
 8009fbe:	6183      	str	r3, [r0, #24]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	2208      	movs	r2, #8
 8009fc4:	305c      	adds	r0, #92	@ 0x5c
 8009fc6:	f000 f906 	bl	800a1d6 <memset>
 8009fca:	4b0d      	ldr	r3, [pc, #52]	@ (800a000 <std+0x58>)
 8009fcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8009fce:	4b0d      	ldr	r3, [pc, #52]	@ (800a004 <std+0x5c>)
 8009fd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009fd2:	4b0d      	ldr	r3, [pc, #52]	@ (800a008 <std+0x60>)
 8009fd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800a00c <std+0x64>)
 8009fd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8009fda:	4b0d      	ldr	r3, [pc, #52]	@ (800a010 <std+0x68>)
 8009fdc:	6224      	str	r4, [r4, #32]
 8009fde:	429c      	cmp	r4, r3
 8009fe0:	d006      	beq.n	8009ff0 <std+0x48>
 8009fe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009fe6:	4294      	cmp	r4, r2
 8009fe8:	d002      	beq.n	8009ff0 <std+0x48>
 8009fea:	33d0      	adds	r3, #208	@ 0xd0
 8009fec:	429c      	cmp	r4, r3
 8009fee:	d105      	bne.n	8009ffc <std+0x54>
 8009ff0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ff8:	f000 b9bc 	b.w	800a374 <__retarget_lock_init_recursive>
 8009ffc:	bd10      	pop	{r4, pc}
 8009ffe:	bf00      	nop
 800a000:	0800a151 	.word	0x0800a151
 800a004:	0800a173 	.word	0x0800a173
 800a008:	0800a1ab 	.word	0x0800a1ab
 800a00c:	0800a1cf 	.word	0x0800a1cf
 800a010:	20004fa0 	.word	0x20004fa0

0800a014 <stdio_exit_handler>:
 800a014:	4a02      	ldr	r2, [pc, #8]	@ (800a020 <stdio_exit_handler+0xc>)
 800a016:	4903      	ldr	r1, [pc, #12]	@ (800a024 <stdio_exit_handler+0x10>)
 800a018:	4803      	ldr	r0, [pc, #12]	@ (800a028 <stdio_exit_handler+0x14>)
 800a01a:	f000 b869 	b.w	800a0f0 <_fwalk_sglue>
 800a01e:	bf00      	nop
 800a020:	20000014 	.word	0x20000014
 800a024:	0800ac31 	.word	0x0800ac31
 800a028:	20000024 	.word	0x20000024

0800a02c <cleanup_stdio>:
 800a02c:	6841      	ldr	r1, [r0, #4]
 800a02e:	4b0c      	ldr	r3, [pc, #48]	@ (800a060 <cleanup_stdio+0x34>)
 800a030:	4299      	cmp	r1, r3
 800a032:	b510      	push	{r4, lr}
 800a034:	4604      	mov	r4, r0
 800a036:	d001      	beq.n	800a03c <cleanup_stdio+0x10>
 800a038:	f000 fdfa 	bl	800ac30 <_fflush_r>
 800a03c:	68a1      	ldr	r1, [r4, #8]
 800a03e:	4b09      	ldr	r3, [pc, #36]	@ (800a064 <cleanup_stdio+0x38>)
 800a040:	4299      	cmp	r1, r3
 800a042:	d002      	beq.n	800a04a <cleanup_stdio+0x1e>
 800a044:	4620      	mov	r0, r4
 800a046:	f000 fdf3 	bl	800ac30 <_fflush_r>
 800a04a:	68e1      	ldr	r1, [r4, #12]
 800a04c:	4b06      	ldr	r3, [pc, #24]	@ (800a068 <cleanup_stdio+0x3c>)
 800a04e:	4299      	cmp	r1, r3
 800a050:	d004      	beq.n	800a05c <cleanup_stdio+0x30>
 800a052:	4620      	mov	r0, r4
 800a054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a058:	f000 bdea 	b.w	800ac30 <_fflush_r>
 800a05c:	bd10      	pop	{r4, pc}
 800a05e:	bf00      	nop
 800a060:	20004fa0 	.word	0x20004fa0
 800a064:	20005008 	.word	0x20005008
 800a068:	20005070 	.word	0x20005070

0800a06c <global_stdio_init.part.0>:
 800a06c:	b510      	push	{r4, lr}
 800a06e:	4b0b      	ldr	r3, [pc, #44]	@ (800a09c <global_stdio_init.part.0+0x30>)
 800a070:	4c0b      	ldr	r4, [pc, #44]	@ (800a0a0 <global_stdio_init.part.0+0x34>)
 800a072:	4a0c      	ldr	r2, [pc, #48]	@ (800a0a4 <global_stdio_init.part.0+0x38>)
 800a074:	601a      	str	r2, [r3, #0]
 800a076:	4620      	mov	r0, r4
 800a078:	2200      	movs	r2, #0
 800a07a:	2104      	movs	r1, #4
 800a07c:	f7ff ff94 	bl	8009fa8 <std>
 800a080:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a084:	2201      	movs	r2, #1
 800a086:	2109      	movs	r1, #9
 800a088:	f7ff ff8e 	bl	8009fa8 <std>
 800a08c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a090:	2202      	movs	r2, #2
 800a092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a096:	2112      	movs	r1, #18
 800a098:	f7ff bf86 	b.w	8009fa8 <std>
 800a09c:	200050d8 	.word	0x200050d8
 800a0a0:	20004fa0 	.word	0x20004fa0
 800a0a4:	0800a015 	.word	0x0800a015

0800a0a8 <__sfp_lock_acquire>:
 800a0a8:	4801      	ldr	r0, [pc, #4]	@ (800a0b0 <__sfp_lock_acquire+0x8>)
 800a0aa:	f000 b964 	b.w	800a376 <__retarget_lock_acquire_recursive>
 800a0ae:	bf00      	nop
 800a0b0:	200050e1 	.word	0x200050e1

0800a0b4 <__sfp_lock_release>:
 800a0b4:	4801      	ldr	r0, [pc, #4]	@ (800a0bc <__sfp_lock_release+0x8>)
 800a0b6:	f000 b95f 	b.w	800a378 <__retarget_lock_release_recursive>
 800a0ba:	bf00      	nop
 800a0bc:	200050e1 	.word	0x200050e1

0800a0c0 <__sinit>:
 800a0c0:	b510      	push	{r4, lr}
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	f7ff fff0 	bl	800a0a8 <__sfp_lock_acquire>
 800a0c8:	6a23      	ldr	r3, [r4, #32]
 800a0ca:	b11b      	cbz	r3, 800a0d4 <__sinit+0x14>
 800a0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0d0:	f7ff bff0 	b.w	800a0b4 <__sfp_lock_release>
 800a0d4:	4b04      	ldr	r3, [pc, #16]	@ (800a0e8 <__sinit+0x28>)
 800a0d6:	6223      	str	r3, [r4, #32]
 800a0d8:	4b04      	ldr	r3, [pc, #16]	@ (800a0ec <__sinit+0x2c>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1f5      	bne.n	800a0cc <__sinit+0xc>
 800a0e0:	f7ff ffc4 	bl	800a06c <global_stdio_init.part.0>
 800a0e4:	e7f2      	b.n	800a0cc <__sinit+0xc>
 800a0e6:	bf00      	nop
 800a0e8:	0800a02d 	.word	0x0800a02d
 800a0ec:	200050d8 	.word	0x200050d8

0800a0f0 <_fwalk_sglue>:
 800a0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0f4:	4607      	mov	r7, r0
 800a0f6:	4688      	mov	r8, r1
 800a0f8:	4614      	mov	r4, r2
 800a0fa:	2600      	movs	r6, #0
 800a0fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a100:	f1b9 0901 	subs.w	r9, r9, #1
 800a104:	d505      	bpl.n	800a112 <_fwalk_sglue+0x22>
 800a106:	6824      	ldr	r4, [r4, #0]
 800a108:	2c00      	cmp	r4, #0
 800a10a:	d1f7      	bne.n	800a0fc <_fwalk_sglue+0xc>
 800a10c:	4630      	mov	r0, r6
 800a10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a112:	89ab      	ldrh	r3, [r5, #12]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d907      	bls.n	800a128 <_fwalk_sglue+0x38>
 800a118:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a11c:	3301      	adds	r3, #1
 800a11e:	d003      	beq.n	800a128 <_fwalk_sglue+0x38>
 800a120:	4629      	mov	r1, r5
 800a122:	4638      	mov	r0, r7
 800a124:	47c0      	blx	r8
 800a126:	4306      	orrs	r6, r0
 800a128:	3568      	adds	r5, #104	@ 0x68
 800a12a:	e7e9      	b.n	800a100 <_fwalk_sglue+0x10>

0800a12c <iprintf>:
 800a12c:	b40f      	push	{r0, r1, r2, r3}
 800a12e:	b507      	push	{r0, r1, r2, lr}
 800a130:	4906      	ldr	r1, [pc, #24]	@ (800a14c <iprintf+0x20>)
 800a132:	ab04      	add	r3, sp, #16
 800a134:	6808      	ldr	r0, [r1, #0]
 800a136:	f853 2b04 	ldr.w	r2, [r3], #4
 800a13a:	6881      	ldr	r1, [r0, #8]
 800a13c:	9301      	str	r3, [sp, #4]
 800a13e:	f000 fa4d 	bl	800a5dc <_vfiprintf_r>
 800a142:	b003      	add	sp, #12
 800a144:	f85d eb04 	ldr.w	lr, [sp], #4
 800a148:	b004      	add	sp, #16
 800a14a:	4770      	bx	lr
 800a14c:	20000020 	.word	0x20000020

0800a150 <__sread>:
 800a150:	b510      	push	{r4, lr}
 800a152:	460c      	mov	r4, r1
 800a154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a158:	f000 f8be 	bl	800a2d8 <_read_r>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	bfab      	itete	ge
 800a160:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a162:	89a3      	ldrhlt	r3, [r4, #12]
 800a164:	181b      	addge	r3, r3, r0
 800a166:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a16a:	bfac      	ite	ge
 800a16c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a16e:	81a3      	strhlt	r3, [r4, #12]
 800a170:	bd10      	pop	{r4, pc}

0800a172 <__swrite>:
 800a172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a176:	461f      	mov	r7, r3
 800a178:	898b      	ldrh	r3, [r1, #12]
 800a17a:	05db      	lsls	r3, r3, #23
 800a17c:	4605      	mov	r5, r0
 800a17e:	460c      	mov	r4, r1
 800a180:	4616      	mov	r6, r2
 800a182:	d505      	bpl.n	800a190 <__swrite+0x1e>
 800a184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a188:	2302      	movs	r3, #2
 800a18a:	2200      	movs	r2, #0
 800a18c:	f000 f892 	bl	800a2b4 <_lseek_r>
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a196:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a19a:	81a3      	strh	r3, [r4, #12]
 800a19c:	4632      	mov	r2, r6
 800a19e:	463b      	mov	r3, r7
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a6:	f000 b8a9 	b.w	800a2fc <_write_r>

0800a1aa <__sseek>:
 800a1aa:	b510      	push	{r4, lr}
 800a1ac:	460c      	mov	r4, r1
 800a1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b2:	f000 f87f 	bl	800a2b4 <_lseek_r>
 800a1b6:	1c43      	adds	r3, r0, #1
 800a1b8:	89a3      	ldrh	r3, [r4, #12]
 800a1ba:	bf15      	itete	ne
 800a1bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a1be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a1c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a1c6:	81a3      	strheq	r3, [r4, #12]
 800a1c8:	bf18      	it	ne
 800a1ca:	81a3      	strhne	r3, [r4, #12]
 800a1cc:	bd10      	pop	{r4, pc}

0800a1ce <__sclose>:
 800a1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d2:	f000 b809 	b.w	800a1e8 <_close_r>

0800a1d6 <memset>:
 800a1d6:	4402      	add	r2, r0
 800a1d8:	4603      	mov	r3, r0
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d100      	bne.n	800a1e0 <memset+0xa>
 800a1de:	4770      	bx	lr
 800a1e0:	f803 1b01 	strb.w	r1, [r3], #1
 800a1e4:	e7f9      	b.n	800a1da <memset+0x4>
	...

0800a1e8 <_close_r>:
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	4d06      	ldr	r5, [pc, #24]	@ (800a204 <_close_r+0x1c>)
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	4608      	mov	r0, r1
 800a1f2:	602b      	str	r3, [r5, #0]
 800a1f4:	f7f7 ff5d 	bl	80020b2 <_close>
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	d102      	bne.n	800a202 <_close_r+0x1a>
 800a1fc:	682b      	ldr	r3, [r5, #0]
 800a1fe:	b103      	cbz	r3, 800a202 <_close_r+0x1a>
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	bd38      	pop	{r3, r4, r5, pc}
 800a204:	200050dc 	.word	0x200050dc

0800a208 <_reclaim_reent>:
 800a208:	4b29      	ldr	r3, [pc, #164]	@ (800a2b0 <_reclaim_reent+0xa8>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4283      	cmp	r3, r0
 800a20e:	b570      	push	{r4, r5, r6, lr}
 800a210:	4604      	mov	r4, r0
 800a212:	d04b      	beq.n	800a2ac <_reclaim_reent+0xa4>
 800a214:	69c3      	ldr	r3, [r0, #28]
 800a216:	b1ab      	cbz	r3, 800a244 <_reclaim_reent+0x3c>
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	b16b      	cbz	r3, 800a238 <_reclaim_reent+0x30>
 800a21c:	2500      	movs	r5, #0
 800a21e:	69e3      	ldr	r3, [r4, #28]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	5959      	ldr	r1, [r3, r5]
 800a224:	2900      	cmp	r1, #0
 800a226:	d13b      	bne.n	800a2a0 <_reclaim_reent+0x98>
 800a228:	3504      	adds	r5, #4
 800a22a:	2d80      	cmp	r5, #128	@ 0x80
 800a22c:	d1f7      	bne.n	800a21e <_reclaim_reent+0x16>
 800a22e:	69e3      	ldr	r3, [r4, #28]
 800a230:	4620      	mov	r0, r4
 800a232:	68d9      	ldr	r1, [r3, #12]
 800a234:	f000 f8b0 	bl	800a398 <_free_r>
 800a238:	69e3      	ldr	r3, [r4, #28]
 800a23a:	6819      	ldr	r1, [r3, #0]
 800a23c:	b111      	cbz	r1, 800a244 <_reclaim_reent+0x3c>
 800a23e:	4620      	mov	r0, r4
 800a240:	f000 f8aa 	bl	800a398 <_free_r>
 800a244:	6961      	ldr	r1, [r4, #20]
 800a246:	b111      	cbz	r1, 800a24e <_reclaim_reent+0x46>
 800a248:	4620      	mov	r0, r4
 800a24a:	f000 f8a5 	bl	800a398 <_free_r>
 800a24e:	69e1      	ldr	r1, [r4, #28]
 800a250:	b111      	cbz	r1, 800a258 <_reclaim_reent+0x50>
 800a252:	4620      	mov	r0, r4
 800a254:	f000 f8a0 	bl	800a398 <_free_r>
 800a258:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a25a:	b111      	cbz	r1, 800a262 <_reclaim_reent+0x5a>
 800a25c:	4620      	mov	r0, r4
 800a25e:	f000 f89b 	bl	800a398 <_free_r>
 800a262:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a264:	b111      	cbz	r1, 800a26c <_reclaim_reent+0x64>
 800a266:	4620      	mov	r0, r4
 800a268:	f000 f896 	bl	800a398 <_free_r>
 800a26c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a26e:	b111      	cbz	r1, 800a276 <_reclaim_reent+0x6e>
 800a270:	4620      	mov	r0, r4
 800a272:	f000 f891 	bl	800a398 <_free_r>
 800a276:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a278:	b111      	cbz	r1, 800a280 <_reclaim_reent+0x78>
 800a27a:	4620      	mov	r0, r4
 800a27c:	f000 f88c 	bl	800a398 <_free_r>
 800a280:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a282:	b111      	cbz	r1, 800a28a <_reclaim_reent+0x82>
 800a284:	4620      	mov	r0, r4
 800a286:	f000 f887 	bl	800a398 <_free_r>
 800a28a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a28c:	b111      	cbz	r1, 800a294 <_reclaim_reent+0x8c>
 800a28e:	4620      	mov	r0, r4
 800a290:	f000 f882 	bl	800a398 <_free_r>
 800a294:	6a23      	ldr	r3, [r4, #32]
 800a296:	b14b      	cbz	r3, 800a2ac <_reclaim_reent+0xa4>
 800a298:	4620      	mov	r0, r4
 800a29a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a29e:	4718      	bx	r3
 800a2a0:	680e      	ldr	r6, [r1, #0]
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f000 f878 	bl	800a398 <_free_r>
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	e7bb      	b.n	800a224 <_reclaim_reent+0x1c>
 800a2ac:	bd70      	pop	{r4, r5, r6, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000020 	.word	0x20000020

0800a2b4 <_lseek_r>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	4d07      	ldr	r5, [pc, #28]	@ (800a2d4 <_lseek_r+0x20>)
 800a2b8:	4604      	mov	r4, r0
 800a2ba:	4608      	mov	r0, r1
 800a2bc:	4611      	mov	r1, r2
 800a2be:	2200      	movs	r2, #0
 800a2c0:	602a      	str	r2, [r5, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	f7f7 ff1c 	bl	8002100 <_lseek>
 800a2c8:	1c43      	adds	r3, r0, #1
 800a2ca:	d102      	bne.n	800a2d2 <_lseek_r+0x1e>
 800a2cc:	682b      	ldr	r3, [r5, #0]
 800a2ce:	b103      	cbz	r3, 800a2d2 <_lseek_r+0x1e>
 800a2d0:	6023      	str	r3, [r4, #0]
 800a2d2:	bd38      	pop	{r3, r4, r5, pc}
 800a2d4:	200050dc 	.word	0x200050dc

0800a2d8 <_read_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	4d07      	ldr	r5, [pc, #28]	@ (800a2f8 <_read_r+0x20>)
 800a2dc:	4604      	mov	r4, r0
 800a2de:	4608      	mov	r0, r1
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	602a      	str	r2, [r5, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	f7f7 feaa 	bl	8002040 <_read>
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	d102      	bne.n	800a2f6 <_read_r+0x1e>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	b103      	cbz	r3, 800a2f6 <_read_r+0x1e>
 800a2f4:	6023      	str	r3, [r4, #0]
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	200050dc 	.word	0x200050dc

0800a2fc <_write_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4d07      	ldr	r5, [pc, #28]	@ (800a31c <_write_r+0x20>)
 800a300:	4604      	mov	r4, r0
 800a302:	4608      	mov	r0, r1
 800a304:	4611      	mov	r1, r2
 800a306:	2200      	movs	r2, #0
 800a308:	602a      	str	r2, [r5, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	f7f7 feb5 	bl	800207a <_write>
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	d102      	bne.n	800a31a <_write_r+0x1e>
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	b103      	cbz	r3, 800a31a <_write_r+0x1e>
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	bd38      	pop	{r3, r4, r5, pc}
 800a31c:	200050dc 	.word	0x200050dc

0800a320 <__errno>:
 800a320:	4b01      	ldr	r3, [pc, #4]	@ (800a328 <__errno+0x8>)
 800a322:	6818      	ldr	r0, [r3, #0]
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	20000020 	.word	0x20000020

0800a32c <__libc_init_array>:
 800a32c:	b570      	push	{r4, r5, r6, lr}
 800a32e:	4d0d      	ldr	r5, [pc, #52]	@ (800a364 <__libc_init_array+0x38>)
 800a330:	4c0d      	ldr	r4, [pc, #52]	@ (800a368 <__libc_init_array+0x3c>)
 800a332:	1b64      	subs	r4, r4, r5
 800a334:	10a4      	asrs	r4, r4, #2
 800a336:	2600      	movs	r6, #0
 800a338:	42a6      	cmp	r6, r4
 800a33a:	d109      	bne.n	800a350 <__libc_init_array+0x24>
 800a33c:	4d0b      	ldr	r5, [pc, #44]	@ (800a36c <__libc_init_array+0x40>)
 800a33e:	4c0c      	ldr	r4, [pc, #48]	@ (800a370 <__libc_init_array+0x44>)
 800a340:	f000 fdc6 	bl	800aed0 <_init>
 800a344:	1b64      	subs	r4, r4, r5
 800a346:	10a4      	asrs	r4, r4, #2
 800a348:	2600      	movs	r6, #0
 800a34a:	42a6      	cmp	r6, r4
 800a34c:	d105      	bne.n	800a35a <__libc_init_array+0x2e>
 800a34e:	bd70      	pop	{r4, r5, r6, pc}
 800a350:	f855 3b04 	ldr.w	r3, [r5], #4
 800a354:	4798      	blx	r3
 800a356:	3601      	adds	r6, #1
 800a358:	e7ee      	b.n	800a338 <__libc_init_array+0xc>
 800a35a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a35e:	4798      	blx	r3
 800a360:	3601      	adds	r6, #1
 800a362:	e7f2      	b.n	800a34a <__libc_init_array+0x1e>
 800a364:	0800b01c 	.word	0x0800b01c
 800a368:	0800b01c 	.word	0x0800b01c
 800a36c:	0800b01c 	.word	0x0800b01c
 800a370:	0800b020 	.word	0x0800b020

0800a374 <__retarget_lock_init_recursive>:
 800a374:	4770      	bx	lr

0800a376 <__retarget_lock_acquire_recursive>:
 800a376:	4770      	bx	lr

0800a378 <__retarget_lock_release_recursive>:
 800a378:	4770      	bx	lr

0800a37a <memcpy>:
 800a37a:	440a      	add	r2, r1
 800a37c:	4291      	cmp	r1, r2
 800a37e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a382:	d100      	bne.n	800a386 <memcpy+0xc>
 800a384:	4770      	bx	lr
 800a386:	b510      	push	{r4, lr}
 800a388:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a38c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a390:	4291      	cmp	r1, r2
 800a392:	d1f9      	bne.n	800a388 <memcpy+0xe>
 800a394:	bd10      	pop	{r4, pc}
	...

0800a398 <_free_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4605      	mov	r5, r0
 800a39c:	2900      	cmp	r1, #0
 800a39e:	d041      	beq.n	800a424 <_free_r+0x8c>
 800a3a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3a4:	1f0c      	subs	r4, r1, #4
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	bfb8      	it	lt
 800a3aa:	18e4      	addlt	r4, r4, r3
 800a3ac:	f000 f8e0 	bl	800a570 <__malloc_lock>
 800a3b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a428 <_free_r+0x90>)
 800a3b2:	6813      	ldr	r3, [r2, #0]
 800a3b4:	b933      	cbnz	r3, 800a3c4 <_free_r+0x2c>
 800a3b6:	6063      	str	r3, [r4, #4]
 800a3b8:	6014      	str	r4, [r2, #0]
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3c0:	f000 b8dc 	b.w	800a57c <__malloc_unlock>
 800a3c4:	42a3      	cmp	r3, r4
 800a3c6:	d908      	bls.n	800a3da <_free_r+0x42>
 800a3c8:	6820      	ldr	r0, [r4, #0]
 800a3ca:	1821      	adds	r1, r4, r0
 800a3cc:	428b      	cmp	r3, r1
 800a3ce:	bf01      	itttt	eq
 800a3d0:	6819      	ldreq	r1, [r3, #0]
 800a3d2:	685b      	ldreq	r3, [r3, #4]
 800a3d4:	1809      	addeq	r1, r1, r0
 800a3d6:	6021      	streq	r1, [r4, #0]
 800a3d8:	e7ed      	b.n	800a3b6 <_free_r+0x1e>
 800a3da:	461a      	mov	r2, r3
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	b10b      	cbz	r3, 800a3e4 <_free_r+0x4c>
 800a3e0:	42a3      	cmp	r3, r4
 800a3e2:	d9fa      	bls.n	800a3da <_free_r+0x42>
 800a3e4:	6811      	ldr	r1, [r2, #0]
 800a3e6:	1850      	adds	r0, r2, r1
 800a3e8:	42a0      	cmp	r0, r4
 800a3ea:	d10b      	bne.n	800a404 <_free_r+0x6c>
 800a3ec:	6820      	ldr	r0, [r4, #0]
 800a3ee:	4401      	add	r1, r0
 800a3f0:	1850      	adds	r0, r2, r1
 800a3f2:	4283      	cmp	r3, r0
 800a3f4:	6011      	str	r1, [r2, #0]
 800a3f6:	d1e0      	bne.n	800a3ba <_free_r+0x22>
 800a3f8:	6818      	ldr	r0, [r3, #0]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	6053      	str	r3, [r2, #4]
 800a3fe:	4408      	add	r0, r1
 800a400:	6010      	str	r0, [r2, #0]
 800a402:	e7da      	b.n	800a3ba <_free_r+0x22>
 800a404:	d902      	bls.n	800a40c <_free_r+0x74>
 800a406:	230c      	movs	r3, #12
 800a408:	602b      	str	r3, [r5, #0]
 800a40a:	e7d6      	b.n	800a3ba <_free_r+0x22>
 800a40c:	6820      	ldr	r0, [r4, #0]
 800a40e:	1821      	adds	r1, r4, r0
 800a410:	428b      	cmp	r3, r1
 800a412:	bf04      	itt	eq
 800a414:	6819      	ldreq	r1, [r3, #0]
 800a416:	685b      	ldreq	r3, [r3, #4]
 800a418:	6063      	str	r3, [r4, #4]
 800a41a:	bf04      	itt	eq
 800a41c:	1809      	addeq	r1, r1, r0
 800a41e:	6021      	streq	r1, [r4, #0]
 800a420:	6054      	str	r4, [r2, #4]
 800a422:	e7ca      	b.n	800a3ba <_free_r+0x22>
 800a424:	bd38      	pop	{r3, r4, r5, pc}
 800a426:	bf00      	nop
 800a428:	200050e8 	.word	0x200050e8

0800a42c <sbrk_aligned>:
 800a42c:	b570      	push	{r4, r5, r6, lr}
 800a42e:	4e0f      	ldr	r6, [pc, #60]	@ (800a46c <sbrk_aligned+0x40>)
 800a430:	460c      	mov	r4, r1
 800a432:	6831      	ldr	r1, [r6, #0]
 800a434:	4605      	mov	r5, r0
 800a436:	b911      	cbnz	r1, 800a43e <sbrk_aligned+0x12>
 800a438:	f000 fcb6 	bl	800ada8 <_sbrk_r>
 800a43c:	6030      	str	r0, [r6, #0]
 800a43e:	4621      	mov	r1, r4
 800a440:	4628      	mov	r0, r5
 800a442:	f000 fcb1 	bl	800ada8 <_sbrk_r>
 800a446:	1c43      	adds	r3, r0, #1
 800a448:	d103      	bne.n	800a452 <sbrk_aligned+0x26>
 800a44a:	f04f 34ff 	mov.w	r4, #4294967295
 800a44e:	4620      	mov	r0, r4
 800a450:	bd70      	pop	{r4, r5, r6, pc}
 800a452:	1cc4      	adds	r4, r0, #3
 800a454:	f024 0403 	bic.w	r4, r4, #3
 800a458:	42a0      	cmp	r0, r4
 800a45a:	d0f8      	beq.n	800a44e <sbrk_aligned+0x22>
 800a45c:	1a21      	subs	r1, r4, r0
 800a45e:	4628      	mov	r0, r5
 800a460:	f000 fca2 	bl	800ada8 <_sbrk_r>
 800a464:	3001      	adds	r0, #1
 800a466:	d1f2      	bne.n	800a44e <sbrk_aligned+0x22>
 800a468:	e7ef      	b.n	800a44a <sbrk_aligned+0x1e>
 800a46a:	bf00      	nop
 800a46c:	200050e4 	.word	0x200050e4

0800a470 <_malloc_r>:
 800a470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a474:	1ccd      	adds	r5, r1, #3
 800a476:	f025 0503 	bic.w	r5, r5, #3
 800a47a:	3508      	adds	r5, #8
 800a47c:	2d0c      	cmp	r5, #12
 800a47e:	bf38      	it	cc
 800a480:	250c      	movcc	r5, #12
 800a482:	2d00      	cmp	r5, #0
 800a484:	4606      	mov	r6, r0
 800a486:	db01      	blt.n	800a48c <_malloc_r+0x1c>
 800a488:	42a9      	cmp	r1, r5
 800a48a:	d904      	bls.n	800a496 <_malloc_r+0x26>
 800a48c:	230c      	movs	r3, #12
 800a48e:	6033      	str	r3, [r6, #0]
 800a490:	2000      	movs	r0, #0
 800a492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a496:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a56c <_malloc_r+0xfc>
 800a49a:	f000 f869 	bl	800a570 <__malloc_lock>
 800a49e:	f8d8 3000 	ldr.w	r3, [r8]
 800a4a2:	461c      	mov	r4, r3
 800a4a4:	bb44      	cbnz	r4, 800a4f8 <_malloc_r+0x88>
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	f7ff ffbf 	bl	800a42c <sbrk_aligned>
 800a4ae:	1c43      	adds	r3, r0, #1
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	d158      	bne.n	800a566 <_malloc_r+0xf6>
 800a4b4:	f8d8 4000 	ldr.w	r4, [r8]
 800a4b8:	4627      	mov	r7, r4
 800a4ba:	2f00      	cmp	r7, #0
 800a4bc:	d143      	bne.n	800a546 <_malloc_r+0xd6>
 800a4be:	2c00      	cmp	r4, #0
 800a4c0:	d04b      	beq.n	800a55a <_malloc_r+0xea>
 800a4c2:	6823      	ldr	r3, [r4, #0]
 800a4c4:	4639      	mov	r1, r7
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	eb04 0903 	add.w	r9, r4, r3
 800a4cc:	f000 fc6c 	bl	800ada8 <_sbrk_r>
 800a4d0:	4581      	cmp	r9, r0
 800a4d2:	d142      	bne.n	800a55a <_malloc_r+0xea>
 800a4d4:	6821      	ldr	r1, [r4, #0]
 800a4d6:	1a6d      	subs	r5, r5, r1
 800a4d8:	4629      	mov	r1, r5
 800a4da:	4630      	mov	r0, r6
 800a4dc:	f7ff ffa6 	bl	800a42c <sbrk_aligned>
 800a4e0:	3001      	adds	r0, #1
 800a4e2:	d03a      	beq.n	800a55a <_malloc_r+0xea>
 800a4e4:	6823      	ldr	r3, [r4, #0]
 800a4e6:	442b      	add	r3, r5
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a4ee:	685a      	ldr	r2, [r3, #4]
 800a4f0:	bb62      	cbnz	r2, 800a54c <_malloc_r+0xdc>
 800a4f2:	f8c8 7000 	str.w	r7, [r8]
 800a4f6:	e00f      	b.n	800a518 <_malloc_r+0xa8>
 800a4f8:	6822      	ldr	r2, [r4, #0]
 800a4fa:	1b52      	subs	r2, r2, r5
 800a4fc:	d420      	bmi.n	800a540 <_malloc_r+0xd0>
 800a4fe:	2a0b      	cmp	r2, #11
 800a500:	d917      	bls.n	800a532 <_malloc_r+0xc2>
 800a502:	1961      	adds	r1, r4, r5
 800a504:	42a3      	cmp	r3, r4
 800a506:	6025      	str	r5, [r4, #0]
 800a508:	bf18      	it	ne
 800a50a:	6059      	strne	r1, [r3, #4]
 800a50c:	6863      	ldr	r3, [r4, #4]
 800a50e:	bf08      	it	eq
 800a510:	f8c8 1000 	streq.w	r1, [r8]
 800a514:	5162      	str	r2, [r4, r5]
 800a516:	604b      	str	r3, [r1, #4]
 800a518:	4630      	mov	r0, r6
 800a51a:	f000 f82f 	bl	800a57c <__malloc_unlock>
 800a51e:	f104 000b 	add.w	r0, r4, #11
 800a522:	1d23      	adds	r3, r4, #4
 800a524:	f020 0007 	bic.w	r0, r0, #7
 800a528:	1ac2      	subs	r2, r0, r3
 800a52a:	bf1c      	itt	ne
 800a52c:	1a1b      	subne	r3, r3, r0
 800a52e:	50a3      	strne	r3, [r4, r2]
 800a530:	e7af      	b.n	800a492 <_malloc_r+0x22>
 800a532:	6862      	ldr	r2, [r4, #4]
 800a534:	42a3      	cmp	r3, r4
 800a536:	bf0c      	ite	eq
 800a538:	f8c8 2000 	streq.w	r2, [r8]
 800a53c:	605a      	strne	r2, [r3, #4]
 800a53e:	e7eb      	b.n	800a518 <_malloc_r+0xa8>
 800a540:	4623      	mov	r3, r4
 800a542:	6864      	ldr	r4, [r4, #4]
 800a544:	e7ae      	b.n	800a4a4 <_malloc_r+0x34>
 800a546:	463c      	mov	r4, r7
 800a548:	687f      	ldr	r7, [r7, #4]
 800a54a:	e7b6      	b.n	800a4ba <_malloc_r+0x4a>
 800a54c:	461a      	mov	r2, r3
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	42a3      	cmp	r3, r4
 800a552:	d1fb      	bne.n	800a54c <_malloc_r+0xdc>
 800a554:	2300      	movs	r3, #0
 800a556:	6053      	str	r3, [r2, #4]
 800a558:	e7de      	b.n	800a518 <_malloc_r+0xa8>
 800a55a:	230c      	movs	r3, #12
 800a55c:	6033      	str	r3, [r6, #0]
 800a55e:	4630      	mov	r0, r6
 800a560:	f000 f80c 	bl	800a57c <__malloc_unlock>
 800a564:	e794      	b.n	800a490 <_malloc_r+0x20>
 800a566:	6005      	str	r5, [r0, #0]
 800a568:	e7d6      	b.n	800a518 <_malloc_r+0xa8>
 800a56a:	bf00      	nop
 800a56c:	200050e8 	.word	0x200050e8

0800a570 <__malloc_lock>:
 800a570:	4801      	ldr	r0, [pc, #4]	@ (800a578 <__malloc_lock+0x8>)
 800a572:	f7ff bf00 	b.w	800a376 <__retarget_lock_acquire_recursive>
 800a576:	bf00      	nop
 800a578:	200050e0 	.word	0x200050e0

0800a57c <__malloc_unlock>:
 800a57c:	4801      	ldr	r0, [pc, #4]	@ (800a584 <__malloc_unlock+0x8>)
 800a57e:	f7ff befb 	b.w	800a378 <__retarget_lock_release_recursive>
 800a582:	bf00      	nop
 800a584:	200050e0 	.word	0x200050e0

0800a588 <__sfputc_r>:
 800a588:	6893      	ldr	r3, [r2, #8]
 800a58a:	3b01      	subs	r3, #1
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	b410      	push	{r4}
 800a590:	6093      	str	r3, [r2, #8]
 800a592:	da08      	bge.n	800a5a6 <__sfputc_r+0x1e>
 800a594:	6994      	ldr	r4, [r2, #24]
 800a596:	42a3      	cmp	r3, r4
 800a598:	db01      	blt.n	800a59e <__sfputc_r+0x16>
 800a59a:	290a      	cmp	r1, #10
 800a59c:	d103      	bne.n	800a5a6 <__sfputc_r+0x1e>
 800a59e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5a2:	f000 bb6d 	b.w	800ac80 <__swbuf_r>
 800a5a6:	6813      	ldr	r3, [r2, #0]
 800a5a8:	1c58      	adds	r0, r3, #1
 800a5aa:	6010      	str	r0, [r2, #0]
 800a5ac:	7019      	strb	r1, [r3, #0]
 800a5ae:	4608      	mov	r0, r1
 800a5b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <__sfputs_r>:
 800a5b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	460f      	mov	r7, r1
 800a5bc:	4614      	mov	r4, r2
 800a5be:	18d5      	adds	r5, r2, r3
 800a5c0:	42ac      	cmp	r4, r5
 800a5c2:	d101      	bne.n	800a5c8 <__sfputs_r+0x12>
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	e007      	b.n	800a5d8 <__sfputs_r+0x22>
 800a5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5cc:	463a      	mov	r2, r7
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	f7ff ffda 	bl	800a588 <__sfputc_r>
 800a5d4:	1c43      	adds	r3, r0, #1
 800a5d6:	d1f3      	bne.n	800a5c0 <__sfputs_r+0xa>
 800a5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5dc <_vfiprintf_r>:
 800a5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e0:	460d      	mov	r5, r1
 800a5e2:	b09d      	sub	sp, #116	@ 0x74
 800a5e4:	4614      	mov	r4, r2
 800a5e6:	4698      	mov	r8, r3
 800a5e8:	4606      	mov	r6, r0
 800a5ea:	b118      	cbz	r0, 800a5f4 <_vfiprintf_r+0x18>
 800a5ec:	6a03      	ldr	r3, [r0, #32]
 800a5ee:	b90b      	cbnz	r3, 800a5f4 <_vfiprintf_r+0x18>
 800a5f0:	f7ff fd66 	bl	800a0c0 <__sinit>
 800a5f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5f6:	07d9      	lsls	r1, r3, #31
 800a5f8:	d405      	bmi.n	800a606 <_vfiprintf_r+0x2a>
 800a5fa:	89ab      	ldrh	r3, [r5, #12]
 800a5fc:	059a      	lsls	r2, r3, #22
 800a5fe:	d402      	bmi.n	800a606 <_vfiprintf_r+0x2a>
 800a600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a602:	f7ff feb8 	bl	800a376 <__retarget_lock_acquire_recursive>
 800a606:	89ab      	ldrh	r3, [r5, #12]
 800a608:	071b      	lsls	r3, r3, #28
 800a60a:	d501      	bpl.n	800a610 <_vfiprintf_r+0x34>
 800a60c:	692b      	ldr	r3, [r5, #16]
 800a60e:	b99b      	cbnz	r3, 800a638 <_vfiprintf_r+0x5c>
 800a610:	4629      	mov	r1, r5
 800a612:	4630      	mov	r0, r6
 800a614:	f000 fb72 	bl	800acfc <__swsetup_r>
 800a618:	b170      	cbz	r0, 800a638 <_vfiprintf_r+0x5c>
 800a61a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a61c:	07dc      	lsls	r4, r3, #31
 800a61e:	d504      	bpl.n	800a62a <_vfiprintf_r+0x4e>
 800a620:	f04f 30ff 	mov.w	r0, #4294967295
 800a624:	b01d      	add	sp, #116	@ 0x74
 800a626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62a:	89ab      	ldrh	r3, [r5, #12]
 800a62c:	0598      	lsls	r0, r3, #22
 800a62e:	d4f7      	bmi.n	800a620 <_vfiprintf_r+0x44>
 800a630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a632:	f7ff fea1 	bl	800a378 <__retarget_lock_release_recursive>
 800a636:	e7f3      	b.n	800a620 <_vfiprintf_r+0x44>
 800a638:	2300      	movs	r3, #0
 800a63a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a63c:	2320      	movs	r3, #32
 800a63e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a642:	f8cd 800c 	str.w	r8, [sp, #12]
 800a646:	2330      	movs	r3, #48	@ 0x30
 800a648:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a7f8 <_vfiprintf_r+0x21c>
 800a64c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a650:	f04f 0901 	mov.w	r9, #1
 800a654:	4623      	mov	r3, r4
 800a656:	469a      	mov	sl, r3
 800a658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a65c:	b10a      	cbz	r2, 800a662 <_vfiprintf_r+0x86>
 800a65e:	2a25      	cmp	r2, #37	@ 0x25
 800a660:	d1f9      	bne.n	800a656 <_vfiprintf_r+0x7a>
 800a662:	ebba 0b04 	subs.w	fp, sl, r4
 800a666:	d00b      	beq.n	800a680 <_vfiprintf_r+0xa4>
 800a668:	465b      	mov	r3, fp
 800a66a:	4622      	mov	r2, r4
 800a66c:	4629      	mov	r1, r5
 800a66e:	4630      	mov	r0, r6
 800a670:	f7ff ffa1 	bl	800a5b6 <__sfputs_r>
 800a674:	3001      	adds	r0, #1
 800a676:	f000 80a7 	beq.w	800a7c8 <_vfiprintf_r+0x1ec>
 800a67a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a67c:	445a      	add	r2, fp
 800a67e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a680:	f89a 3000 	ldrb.w	r3, [sl]
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 809f 	beq.w	800a7c8 <_vfiprintf_r+0x1ec>
 800a68a:	2300      	movs	r3, #0
 800a68c:	f04f 32ff 	mov.w	r2, #4294967295
 800a690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a694:	f10a 0a01 	add.w	sl, sl, #1
 800a698:	9304      	str	r3, [sp, #16]
 800a69a:	9307      	str	r3, [sp, #28]
 800a69c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6a2:	4654      	mov	r4, sl
 800a6a4:	2205      	movs	r2, #5
 800a6a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6aa:	4853      	ldr	r0, [pc, #332]	@ (800a7f8 <_vfiprintf_r+0x21c>)
 800a6ac:	f7f5 fd98 	bl	80001e0 <memchr>
 800a6b0:	9a04      	ldr	r2, [sp, #16]
 800a6b2:	b9d8      	cbnz	r0, 800a6ec <_vfiprintf_r+0x110>
 800a6b4:	06d1      	lsls	r1, r2, #27
 800a6b6:	bf44      	itt	mi
 800a6b8:	2320      	movmi	r3, #32
 800a6ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6be:	0713      	lsls	r3, r2, #28
 800a6c0:	bf44      	itt	mi
 800a6c2:	232b      	movmi	r3, #43	@ 0x2b
 800a6c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6ce:	d015      	beq.n	800a6fc <_vfiprintf_r+0x120>
 800a6d0:	9a07      	ldr	r2, [sp, #28]
 800a6d2:	4654      	mov	r4, sl
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	f04f 0c0a 	mov.w	ip, #10
 800a6da:	4621      	mov	r1, r4
 800a6dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6e0:	3b30      	subs	r3, #48	@ 0x30
 800a6e2:	2b09      	cmp	r3, #9
 800a6e4:	d94b      	bls.n	800a77e <_vfiprintf_r+0x1a2>
 800a6e6:	b1b0      	cbz	r0, 800a716 <_vfiprintf_r+0x13a>
 800a6e8:	9207      	str	r2, [sp, #28]
 800a6ea:	e014      	b.n	800a716 <_vfiprintf_r+0x13a>
 800a6ec:	eba0 0308 	sub.w	r3, r0, r8
 800a6f0:	fa09 f303 	lsl.w	r3, r9, r3
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	9304      	str	r3, [sp, #16]
 800a6f8:	46a2      	mov	sl, r4
 800a6fa:	e7d2      	b.n	800a6a2 <_vfiprintf_r+0xc6>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	1d19      	adds	r1, r3, #4
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	9103      	str	r1, [sp, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	bfbb      	ittet	lt
 800a708:	425b      	neglt	r3, r3
 800a70a:	f042 0202 	orrlt.w	r2, r2, #2
 800a70e:	9307      	strge	r3, [sp, #28]
 800a710:	9307      	strlt	r3, [sp, #28]
 800a712:	bfb8      	it	lt
 800a714:	9204      	strlt	r2, [sp, #16]
 800a716:	7823      	ldrb	r3, [r4, #0]
 800a718:	2b2e      	cmp	r3, #46	@ 0x2e
 800a71a:	d10a      	bne.n	800a732 <_vfiprintf_r+0x156>
 800a71c:	7863      	ldrb	r3, [r4, #1]
 800a71e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a720:	d132      	bne.n	800a788 <_vfiprintf_r+0x1ac>
 800a722:	9b03      	ldr	r3, [sp, #12]
 800a724:	1d1a      	adds	r2, r3, #4
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	9203      	str	r2, [sp, #12]
 800a72a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a72e:	3402      	adds	r4, #2
 800a730:	9305      	str	r3, [sp, #20]
 800a732:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a808 <_vfiprintf_r+0x22c>
 800a736:	7821      	ldrb	r1, [r4, #0]
 800a738:	2203      	movs	r2, #3
 800a73a:	4650      	mov	r0, sl
 800a73c:	f7f5 fd50 	bl	80001e0 <memchr>
 800a740:	b138      	cbz	r0, 800a752 <_vfiprintf_r+0x176>
 800a742:	9b04      	ldr	r3, [sp, #16]
 800a744:	eba0 000a 	sub.w	r0, r0, sl
 800a748:	2240      	movs	r2, #64	@ 0x40
 800a74a:	4082      	lsls	r2, r0
 800a74c:	4313      	orrs	r3, r2
 800a74e:	3401      	adds	r4, #1
 800a750:	9304      	str	r3, [sp, #16]
 800a752:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a756:	4829      	ldr	r0, [pc, #164]	@ (800a7fc <_vfiprintf_r+0x220>)
 800a758:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a75c:	2206      	movs	r2, #6
 800a75e:	f7f5 fd3f 	bl	80001e0 <memchr>
 800a762:	2800      	cmp	r0, #0
 800a764:	d03f      	beq.n	800a7e6 <_vfiprintf_r+0x20a>
 800a766:	4b26      	ldr	r3, [pc, #152]	@ (800a800 <_vfiprintf_r+0x224>)
 800a768:	bb1b      	cbnz	r3, 800a7b2 <_vfiprintf_r+0x1d6>
 800a76a:	9b03      	ldr	r3, [sp, #12]
 800a76c:	3307      	adds	r3, #7
 800a76e:	f023 0307 	bic.w	r3, r3, #7
 800a772:	3308      	adds	r3, #8
 800a774:	9303      	str	r3, [sp, #12]
 800a776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a778:	443b      	add	r3, r7
 800a77a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a77c:	e76a      	b.n	800a654 <_vfiprintf_r+0x78>
 800a77e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a782:	460c      	mov	r4, r1
 800a784:	2001      	movs	r0, #1
 800a786:	e7a8      	b.n	800a6da <_vfiprintf_r+0xfe>
 800a788:	2300      	movs	r3, #0
 800a78a:	3401      	adds	r4, #1
 800a78c:	9305      	str	r3, [sp, #20]
 800a78e:	4619      	mov	r1, r3
 800a790:	f04f 0c0a 	mov.w	ip, #10
 800a794:	4620      	mov	r0, r4
 800a796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a79a:	3a30      	subs	r2, #48	@ 0x30
 800a79c:	2a09      	cmp	r2, #9
 800a79e:	d903      	bls.n	800a7a8 <_vfiprintf_r+0x1cc>
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d0c6      	beq.n	800a732 <_vfiprintf_r+0x156>
 800a7a4:	9105      	str	r1, [sp, #20]
 800a7a6:	e7c4      	b.n	800a732 <_vfiprintf_r+0x156>
 800a7a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e7f0      	b.n	800a794 <_vfiprintf_r+0x1b8>
 800a7b2:	ab03      	add	r3, sp, #12
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	462a      	mov	r2, r5
 800a7b8:	4b12      	ldr	r3, [pc, #72]	@ (800a804 <_vfiprintf_r+0x228>)
 800a7ba:	a904      	add	r1, sp, #16
 800a7bc:	4630      	mov	r0, r6
 800a7be:	f3af 8000 	nop.w
 800a7c2:	4607      	mov	r7, r0
 800a7c4:	1c78      	adds	r0, r7, #1
 800a7c6:	d1d6      	bne.n	800a776 <_vfiprintf_r+0x19a>
 800a7c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7ca:	07d9      	lsls	r1, r3, #31
 800a7cc:	d405      	bmi.n	800a7da <_vfiprintf_r+0x1fe>
 800a7ce:	89ab      	ldrh	r3, [r5, #12]
 800a7d0:	059a      	lsls	r2, r3, #22
 800a7d2:	d402      	bmi.n	800a7da <_vfiprintf_r+0x1fe>
 800a7d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7d6:	f7ff fdcf 	bl	800a378 <__retarget_lock_release_recursive>
 800a7da:	89ab      	ldrh	r3, [r5, #12]
 800a7dc:	065b      	lsls	r3, r3, #25
 800a7de:	f53f af1f 	bmi.w	800a620 <_vfiprintf_r+0x44>
 800a7e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7e4:	e71e      	b.n	800a624 <_vfiprintf_r+0x48>
 800a7e6:	ab03      	add	r3, sp, #12
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	462a      	mov	r2, r5
 800a7ec:	4b05      	ldr	r3, [pc, #20]	@ (800a804 <_vfiprintf_r+0x228>)
 800a7ee:	a904      	add	r1, sp, #16
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f000 f879 	bl	800a8e8 <_printf_i>
 800a7f6:	e7e4      	b.n	800a7c2 <_vfiprintf_r+0x1e6>
 800a7f8:	0800afe0 	.word	0x0800afe0
 800a7fc:	0800afea 	.word	0x0800afea
 800a800:	00000000 	.word	0x00000000
 800a804:	0800a5b7 	.word	0x0800a5b7
 800a808:	0800afe6 	.word	0x0800afe6

0800a80c <_printf_common>:
 800a80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a810:	4616      	mov	r6, r2
 800a812:	4698      	mov	r8, r3
 800a814:	688a      	ldr	r2, [r1, #8]
 800a816:	690b      	ldr	r3, [r1, #16]
 800a818:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a81c:	4293      	cmp	r3, r2
 800a81e:	bfb8      	it	lt
 800a820:	4613      	movlt	r3, r2
 800a822:	6033      	str	r3, [r6, #0]
 800a824:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a828:	4607      	mov	r7, r0
 800a82a:	460c      	mov	r4, r1
 800a82c:	b10a      	cbz	r2, 800a832 <_printf_common+0x26>
 800a82e:	3301      	adds	r3, #1
 800a830:	6033      	str	r3, [r6, #0]
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	0699      	lsls	r1, r3, #26
 800a836:	bf42      	ittt	mi
 800a838:	6833      	ldrmi	r3, [r6, #0]
 800a83a:	3302      	addmi	r3, #2
 800a83c:	6033      	strmi	r3, [r6, #0]
 800a83e:	6825      	ldr	r5, [r4, #0]
 800a840:	f015 0506 	ands.w	r5, r5, #6
 800a844:	d106      	bne.n	800a854 <_printf_common+0x48>
 800a846:	f104 0a19 	add.w	sl, r4, #25
 800a84a:	68e3      	ldr	r3, [r4, #12]
 800a84c:	6832      	ldr	r2, [r6, #0]
 800a84e:	1a9b      	subs	r3, r3, r2
 800a850:	42ab      	cmp	r3, r5
 800a852:	dc26      	bgt.n	800a8a2 <_printf_common+0x96>
 800a854:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a858:	6822      	ldr	r2, [r4, #0]
 800a85a:	3b00      	subs	r3, #0
 800a85c:	bf18      	it	ne
 800a85e:	2301      	movne	r3, #1
 800a860:	0692      	lsls	r2, r2, #26
 800a862:	d42b      	bmi.n	800a8bc <_printf_common+0xb0>
 800a864:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a868:	4641      	mov	r1, r8
 800a86a:	4638      	mov	r0, r7
 800a86c:	47c8      	blx	r9
 800a86e:	3001      	adds	r0, #1
 800a870:	d01e      	beq.n	800a8b0 <_printf_common+0xa4>
 800a872:	6823      	ldr	r3, [r4, #0]
 800a874:	6922      	ldr	r2, [r4, #16]
 800a876:	f003 0306 	and.w	r3, r3, #6
 800a87a:	2b04      	cmp	r3, #4
 800a87c:	bf02      	ittt	eq
 800a87e:	68e5      	ldreq	r5, [r4, #12]
 800a880:	6833      	ldreq	r3, [r6, #0]
 800a882:	1aed      	subeq	r5, r5, r3
 800a884:	68a3      	ldr	r3, [r4, #8]
 800a886:	bf0c      	ite	eq
 800a888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a88c:	2500      	movne	r5, #0
 800a88e:	4293      	cmp	r3, r2
 800a890:	bfc4      	itt	gt
 800a892:	1a9b      	subgt	r3, r3, r2
 800a894:	18ed      	addgt	r5, r5, r3
 800a896:	2600      	movs	r6, #0
 800a898:	341a      	adds	r4, #26
 800a89a:	42b5      	cmp	r5, r6
 800a89c:	d11a      	bne.n	800a8d4 <_printf_common+0xc8>
 800a89e:	2000      	movs	r0, #0
 800a8a0:	e008      	b.n	800a8b4 <_printf_common+0xa8>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	4652      	mov	r2, sl
 800a8a6:	4641      	mov	r1, r8
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	47c8      	blx	r9
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	d103      	bne.n	800a8b8 <_printf_common+0xac>
 800a8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b8:	3501      	adds	r5, #1
 800a8ba:	e7c6      	b.n	800a84a <_printf_common+0x3e>
 800a8bc:	18e1      	adds	r1, r4, r3
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	2030      	movs	r0, #48	@ 0x30
 800a8c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a8c6:	4422      	add	r2, r4
 800a8c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a8cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a8d0:	3302      	adds	r3, #2
 800a8d2:	e7c7      	b.n	800a864 <_printf_common+0x58>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	4622      	mov	r2, r4
 800a8d8:	4641      	mov	r1, r8
 800a8da:	4638      	mov	r0, r7
 800a8dc:	47c8      	blx	r9
 800a8de:	3001      	adds	r0, #1
 800a8e0:	d0e6      	beq.n	800a8b0 <_printf_common+0xa4>
 800a8e2:	3601      	adds	r6, #1
 800a8e4:	e7d9      	b.n	800a89a <_printf_common+0x8e>
	...

0800a8e8 <_printf_i>:
 800a8e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ec:	7e0f      	ldrb	r7, [r1, #24]
 800a8ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8f0:	2f78      	cmp	r7, #120	@ 0x78
 800a8f2:	4691      	mov	r9, r2
 800a8f4:	4680      	mov	r8, r0
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	469a      	mov	sl, r3
 800a8fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8fe:	d807      	bhi.n	800a910 <_printf_i+0x28>
 800a900:	2f62      	cmp	r7, #98	@ 0x62
 800a902:	d80a      	bhi.n	800a91a <_printf_i+0x32>
 800a904:	2f00      	cmp	r7, #0
 800a906:	f000 80d2 	beq.w	800aaae <_printf_i+0x1c6>
 800a90a:	2f58      	cmp	r7, #88	@ 0x58
 800a90c:	f000 80b9 	beq.w	800aa82 <_printf_i+0x19a>
 800a910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a914:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a918:	e03a      	b.n	800a990 <_printf_i+0xa8>
 800a91a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a91e:	2b15      	cmp	r3, #21
 800a920:	d8f6      	bhi.n	800a910 <_printf_i+0x28>
 800a922:	a101      	add	r1, pc, #4	@ (adr r1, 800a928 <_printf_i+0x40>)
 800a924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a928:	0800a981 	.word	0x0800a981
 800a92c:	0800a995 	.word	0x0800a995
 800a930:	0800a911 	.word	0x0800a911
 800a934:	0800a911 	.word	0x0800a911
 800a938:	0800a911 	.word	0x0800a911
 800a93c:	0800a911 	.word	0x0800a911
 800a940:	0800a995 	.word	0x0800a995
 800a944:	0800a911 	.word	0x0800a911
 800a948:	0800a911 	.word	0x0800a911
 800a94c:	0800a911 	.word	0x0800a911
 800a950:	0800a911 	.word	0x0800a911
 800a954:	0800aa95 	.word	0x0800aa95
 800a958:	0800a9bf 	.word	0x0800a9bf
 800a95c:	0800aa4f 	.word	0x0800aa4f
 800a960:	0800a911 	.word	0x0800a911
 800a964:	0800a911 	.word	0x0800a911
 800a968:	0800aab7 	.word	0x0800aab7
 800a96c:	0800a911 	.word	0x0800a911
 800a970:	0800a9bf 	.word	0x0800a9bf
 800a974:	0800a911 	.word	0x0800a911
 800a978:	0800a911 	.word	0x0800a911
 800a97c:	0800aa57 	.word	0x0800aa57
 800a980:	6833      	ldr	r3, [r6, #0]
 800a982:	1d1a      	adds	r2, r3, #4
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	6032      	str	r2, [r6, #0]
 800a988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a98c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a990:	2301      	movs	r3, #1
 800a992:	e09d      	b.n	800aad0 <_printf_i+0x1e8>
 800a994:	6833      	ldr	r3, [r6, #0]
 800a996:	6820      	ldr	r0, [r4, #0]
 800a998:	1d19      	adds	r1, r3, #4
 800a99a:	6031      	str	r1, [r6, #0]
 800a99c:	0606      	lsls	r6, r0, #24
 800a99e:	d501      	bpl.n	800a9a4 <_printf_i+0xbc>
 800a9a0:	681d      	ldr	r5, [r3, #0]
 800a9a2:	e003      	b.n	800a9ac <_printf_i+0xc4>
 800a9a4:	0645      	lsls	r5, r0, #25
 800a9a6:	d5fb      	bpl.n	800a9a0 <_printf_i+0xb8>
 800a9a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a9ac:	2d00      	cmp	r5, #0
 800a9ae:	da03      	bge.n	800a9b8 <_printf_i+0xd0>
 800a9b0:	232d      	movs	r3, #45	@ 0x2d
 800a9b2:	426d      	negs	r5, r5
 800a9b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9b8:	4859      	ldr	r0, [pc, #356]	@ (800ab20 <_printf_i+0x238>)
 800a9ba:	230a      	movs	r3, #10
 800a9bc:	e011      	b.n	800a9e2 <_printf_i+0xfa>
 800a9be:	6821      	ldr	r1, [r4, #0]
 800a9c0:	6833      	ldr	r3, [r6, #0]
 800a9c2:	0608      	lsls	r0, r1, #24
 800a9c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a9c8:	d402      	bmi.n	800a9d0 <_printf_i+0xe8>
 800a9ca:	0649      	lsls	r1, r1, #25
 800a9cc:	bf48      	it	mi
 800a9ce:	b2ad      	uxthmi	r5, r5
 800a9d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a9d2:	4853      	ldr	r0, [pc, #332]	@ (800ab20 <_printf_i+0x238>)
 800a9d4:	6033      	str	r3, [r6, #0]
 800a9d6:	bf14      	ite	ne
 800a9d8:	230a      	movne	r3, #10
 800a9da:	2308      	moveq	r3, #8
 800a9dc:	2100      	movs	r1, #0
 800a9de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a9e2:	6866      	ldr	r6, [r4, #4]
 800a9e4:	60a6      	str	r6, [r4, #8]
 800a9e6:	2e00      	cmp	r6, #0
 800a9e8:	bfa2      	ittt	ge
 800a9ea:	6821      	ldrge	r1, [r4, #0]
 800a9ec:	f021 0104 	bicge.w	r1, r1, #4
 800a9f0:	6021      	strge	r1, [r4, #0]
 800a9f2:	b90d      	cbnz	r5, 800a9f8 <_printf_i+0x110>
 800a9f4:	2e00      	cmp	r6, #0
 800a9f6:	d04b      	beq.n	800aa90 <_printf_i+0x1a8>
 800a9f8:	4616      	mov	r6, r2
 800a9fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9fe:	fb03 5711 	mls	r7, r3, r1, r5
 800aa02:	5dc7      	ldrb	r7, [r0, r7]
 800aa04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa08:	462f      	mov	r7, r5
 800aa0a:	42bb      	cmp	r3, r7
 800aa0c:	460d      	mov	r5, r1
 800aa0e:	d9f4      	bls.n	800a9fa <_printf_i+0x112>
 800aa10:	2b08      	cmp	r3, #8
 800aa12:	d10b      	bne.n	800aa2c <_printf_i+0x144>
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	07df      	lsls	r7, r3, #31
 800aa18:	d508      	bpl.n	800aa2c <_printf_i+0x144>
 800aa1a:	6923      	ldr	r3, [r4, #16]
 800aa1c:	6861      	ldr	r1, [r4, #4]
 800aa1e:	4299      	cmp	r1, r3
 800aa20:	bfde      	ittt	le
 800aa22:	2330      	movle	r3, #48	@ 0x30
 800aa24:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa28:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa2c:	1b92      	subs	r2, r2, r6
 800aa2e:	6122      	str	r2, [r4, #16]
 800aa30:	f8cd a000 	str.w	sl, [sp]
 800aa34:	464b      	mov	r3, r9
 800aa36:	aa03      	add	r2, sp, #12
 800aa38:	4621      	mov	r1, r4
 800aa3a:	4640      	mov	r0, r8
 800aa3c:	f7ff fee6 	bl	800a80c <_printf_common>
 800aa40:	3001      	adds	r0, #1
 800aa42:	d14a      	bne.n	800aada <_printf_i+0x1f2>
 800aa44:	f04f 30ff 	mov.w	r0, #4294967295
 800aa48:	b004      	add	sp, #16
 800aa4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	f043 0320 	orr.w	r3, r3, #32
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	4833      	ldr	r0, [pc, #204]	@ (800ab24 <_printf_i+0x23c>)
 800aa58:	2778      	movs	r7, #120	@ 0x78
 800aa5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	6831      	ldr	r1, [r6, #0]
 800aa62:	061f      	lsls	r7, r3, #24
 800aa64:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa68:	d402      	bmi.n	800aa70 <_printf_i+0x188>
 800aa6a:	065f      	lsls	r7, r3, #25
 800aa6c:	bf48      	it	mi
 800aa6e:	b2ad      	uxthmi	r5, r5
 800aa70:	6031      	str	r1, [r6, #0]
 800aa72:	07d9      	lsls	r1, r3, #31
 800aa74:	bf44      	itt	mi
 800aa76:	f043 0320 	orrmi.w	r3, r3, #32
 800aa7a:	6023      	strmi	r3, [r4, #0]
 800aa7c:	b11d      	cbz	r5, 800aa86 <_printf_i+0x19e>
 800aa7e:	2310      	movs	r3, #16
 800aa80:	e7ac      	b.n	800a9dc <_printf_i+0xf4>
 800aa82:	4827      	ldr	r0, [pc, #156]	@ (800ab20 <_printf_i+0x238>)
 800aa84:	e7e9      	b.n	800aa5a <_printf_i+0x172>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	f023 0320 	bic.w	r3, r3, #32
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	e7f6      	b.n	800aa7e <_printf_i+0x196>
 800aa90:	4616      	mov	r6, r2
 800aa92:	e7bd      	b.n	800aa10 <_printf_i+0x128>
 800aa94:	6833      	ldr	r3, [r6, #0]
 800aa96:	6825      	ldr	r5, [r4, #0]
 800aa98:	6961      	ldr	r1, [r4, #20]
 800aa9a:	1d18      	adds	r0, r3, #4
 800aa9c:	6030      	str	r0, [r6, #0]
 800aa9e:	062e      	lsls	r6, r5, #24
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	d501      	bpl.n	800aaa8 <_printf_i+0x1c0>
 800aaa4:	6019      	str	r1, [r3, #0]
 800aaa6:	e002      	b.n	800aaae <_printf_i+0x1c6>
 800aaa8:	0668      	lsls	r0, r5, #25
 800aaaa:	d5fb      	bpl.n	800aaa4 <_printf_i+0x1bc>
 800aaac:	8019      	strh	r1, [r3, #0]
 800aaae:	2300      	movs	r3, #0
 800aab0:	6123      	str	r3, [r4, #16]
 800aab2:	4616      	mov	r6, r2
 800aab4:	e7bc      	b.n	800aa30 <_printf_i+0x148>
 800aab6:	6833      	ldr	r3, [r6, #0]
 800aab8:	1d1a      	adds	r2, r3, #4
 800aaba:	6032      	str	r2, [r6, #0]
 800aabc:	681e      	ldr	r6, [r3, #0]
 800aabe:	6862      	ldr	r2, [r4, #4]
 800aac0:	2100      	movs	r1, #0
 800aac2:	4630      	mov	r0, r6
 800aac4:	f7f5 fb8c 	bl	80001e0 <memchr>
 800aac8:	b108      	cbz	r0, 800aace <_printf_i+0x1e6>
 800aaca:	1b80      	subs	r0, r0, r6
 800aacc:	6060      	str	r0, [r4, #4]
 800aace:	6863      	ldr	r3, [r4, #4]
 800aad0:	6123      	str	r3, [r4, #16]
 800aad2:	2300      	movs	r3, #0
 800aad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aad8:	e7aa      	b.n	800aa30 <_printf_i+0x148>
 800aada:	6923      	ldr	r3, [r4, #16]
 800aadc:	4632      	mov	r2, r6
 800aade:	4649      	mov	r1, r9
 800aae0:	4640      	mov	r0, r8
 800aae2:	47d0      	blx	sl
 800aae4:	3001      	adds	r0, #1
 800aae6:	d0ad      	beq.n	800aa44 <_printf_i+0x15c>
 800aae8:	6823      	ldr	r3, [r4, #0]
 800aaea:	079b      	lsls	r3, r3, #30
 800aaec:	d413      	bmi.n	800ab16 <_printf_i+0x22e>
 800aaee:	68e0      	ldr	r0, [r4, #12]
 800aaf0:	9b03      	ldr	r3, [sp, #12]
 800aaf2:	4298      	cmp	r0, r3
 800aaf4:	bfb8      	it	lt
 800aaf6:	4618      	movlt	r0, r3
 800aaf8:	e7a6      	b.n	800aa48 <_printf_i+0x160>
 800aafa:	2301      	movs	r3, #1
 800aafc:	4632      	mov	r2, r6
 800aafe:	4649      	mov	r1, r9
 800ab00:	4640      	mov	r0, r8
 800ab02:	47d0      	blx	sl
 800ab04:	3001      	adds	r0, #1
 800ab06:	d09d      	beq.n	800aa44 <_printf_i+0x15c>
 800ab08:	3501      	adds	r5, #1
 800ab0a:	68e3      	ldr	r3, [r4, #12]
 800ab0c:	9903      	ldr	r1, [sp, #12]
 800ab0e:	1a5b      	subs	r3, r3, r1
 800ab10:	42ab      	cmp	r3, r5
 800ab12:	dcf2      	bgt.n	800aafa <_printf_i+0x212>
 800ab14:	e7eb      	b.n	800aaee <_printf_i+0x206>
 800ab16:	2500      	movs	r5, #0
 800ab18:	f104 0619 	add.w	r6, r4, #25
 800ab1c:	e7f5      	b.n	800ab0a <_printf_i+0x222>
 800ab1e:	bf00      	nop
 800ab20:	0800aff1 	.word	0x0800aff1
 800ab24:	0800b002 	.word	0x0800b002

0800ab28 <__sflush_r>:
 800ab28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab30:	0716      	lsls	r6, r2, #28
 800ab32:	4605      	mov	r5, r0
 800ab34:	460c      	mov	r4, r1
 800ab36:	d454      	bmi.n	800abe2 <__sflush_r+0xba>
 800ab38:	684b      	ldr	r3, [r1, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	dc02      	bgt.n	800ab44 <__sflush_r+0x1c>
 800ab3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	dd48      	ble.n	800abd6 <__sflush_r+0xae>
 800ab44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab46:	2e00      	cmp	r6, #0
 800ab48:	d045      	beq.n	800abd6 <__sflush_r+0xae>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab50:	682f      	ldr	r7, [r5, #0]
 800ab52:	6a21      	ldr	r1, [r4, #32]
 800ab54:	602b      	str	r3, [r5, #0]
 800ab56:	d030      	beq.n	800abba <__sflush_r+0x92>
 800ab58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab5a:	89a3      	ldrh	r3, [r4, #12]
 800ab5c:	0759      	lsls	r1, r3, #29
 800ab5e:	d505      	bpl.n	800ab6c <__sflush_r+0x44>
 800ab60:	6863      	ldr	r3, [r4, #4]
 800ab62:	1ad2      	subs	r2, r2, r3
 800ab64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab66:	b10b      	cbz	r3, 800ab6c <__sflush_r+0x44>
 800ab68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab6a:	1ad2      	subs	r2, r2, r3
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab70:	6a21      	ldr	r1, [r4, #32]
 800ab72:	4628      	mov	r0, r5
 800ab74:	47b0      	blx	r6
 800ab76:	1c43      	adds	r3, r0, #1
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	d106      	bne.n	800ab8a <__sflush_r+0x62>
 800ab7c:	6829      	ldr	r1, [r5, #0]
 800ab7e:	291d      	cmp	r1, #29
 800ab80:	d82b      	bhi.n	800abda <__sflush_r+0xb2>
 800ab82:	4a2a      	ldr	r2, [pc, #168]	@ (800ac2c <__sflush_r+0x104>)
 800ab84:	410a      	asrs	r2, r1
 800ab86:	07d6      	lsls	r6, r2, #31
 800ab88:	d427      	bmi.n	800abda <__sflush_r+0xb2>
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	6062      	str	r2, [r4, #4]
 800ab8e:	04d9      	lsls	r1, r3, #19
 800ab90:	6922      	ldr	r2, [r4, #16]
 800ab92:	6022      	str	r2, [r4, #0]
 800ab94:	d504      	bpl.n	800aba0 <__sflush_r+0x78>
 800ab96:	1c42      	adds	r2, r0, #1
 800ab98:	d101      	bne.n	800ab9e <__sflush_r+0x76>
 800ab9a:	682b      	ldr	r3, [r5, #0]
 800ab9c:	b903      	cbnz	r3, 800aba0 <__sflush_r+0x78>
 800ab9e:	6560      	str	r0, [r4, #84]	@ 0x54
 800aba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aba2:	602f      	str	r7, [r5, #0]
 800aba4:	b1b9      	cbz	r1, 800abd6 <__sflush_r+0xae>
 800aba6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abaa:	4299      	cmp	r1, r3
 800abac:	d002      	beq.n	800abb4 <__sflush_r+0x8c>
 800abae:	4628      	mov	r0, r5
 800abb0:	f7ff fbf2 	bl	800a398 <_free_r>
 800abb4:	2300      	movs	r3, #0
 800abb6:	6363      	str	r3, [r4, #52]	@ 0x34
 800abb8:	e00d      	b.n	800abd6 <__sflush_r+0xae>
 800abba:	2301      	movs	r3, #1
 800abbc:	4628      	mov	r0, r5
 800abbe:	47b0      	blx	r6
 800abc0:	4602      	mov	r2, r0
 800abc2:	1c50      	adds	r0, r2, #1
 800abc4:	d1c9      	bne.n	800ab5a <__sflush_r+0x32>
 800abc6:	682b      	ldr	r3, [r5, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d0c6      	beq.n	800ab5a <__sflush_r+0x32>
 800abcc:	2b1d      	cmp	r3, #29
 800abce:	d001      	beq.n	800abd4 <__sflush_r+0xac>
 800abd0:	2b16      	cmp	r3, #22
 800abd2:	d11e      	bne.n	800ac12 <__sflush_r+0xea>
 800abd4:	602f      	str	r7, [r5, #0]
 800abd6:	2000      	movs	r0, #0
 800abd8:	e022      	b.n	800ac20 <__sflush_r+0xf8>
 800abda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abde:	b21b      	sxth	r3, r3
 800abe0:	e01b      	b.n	800ac1a <__sflush_r+0xf2>
 800abe2:	690f      	ldr	r7, [r1, #16]
 800abe4:	2f00      	cmp	r7, #0
 800abe6:	d0f6      	beq.n	800abd6 <__sflush_r+0xae>
 800abe8:	0793      	lsls	r3, r2, #30
 800abea:	680e      	ldr	r6, [r1, #0]
 800abec:	bf08      	it	eq
 800abee:	694b      	ldreq	r3, [r1, #20]
 800abf0:	600f      	str	r7, [r1, #0]
 800abf2:	bf18      	it	ne
 800abf4:	2300      	movne	r3, #0
 800abf6:	eba6 0807 	sub.w	r8, r6, r7
 800abfa:	608b      	str	r3, [r1, #8]
 800abfc:	f1b8 0f00 	cmp.w	r8, #0
 800ac00:	dde9      	ble.n	800abd6 <__sflush_r+0xae>
 800ac02:	6a21      	ldr	r1, [r4, #32]
 800ac04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac06:	4643      	mov	r3, r8
 800ac08:	463a      	mov	r2, r7
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	47b0      	blx	r6
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	dc08      	bgt.n	800ac24 <__sflush_r+0xfc>
 800ac12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac1a:	81a3      	strh	r3, [r4, #12]
 800ac1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac24:	4407      	add	r7, r0
 800ac26:	eba8 0800 	sub.w	r8, r8, r0
 800ac2a:	e7e7      	b.n	800abfc <__sflush_r+0xd4>
 800ac2c:	dfbffffe 	.word	0xdfbffffe

0800ac30 <_fflush_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	690b      	ldr	r3, [r1, #16]
 800ac34:	4605      	mov	r5, r0
 800ac36:	460c      	mov	r4, r1
 800ac38:	b913      	cbnz	r3, 800ac40 <_fflush_r+0x10>
 800ac3a:	2500      	movs	r5, #0
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	bd38      	pop	{r3, r4, r5, pc}
 800ac40:	b118      	cbz	r0, 800ac4a <_fflush_r+0x1a>
 800ac42:	6a03      	ldr	r3, [r0, #32]
 800ac44:	b90b      	cbnz	r3, 800ac4a <_fflush_r+0x1a>
 800ac46:	f7ff fa3b 	bl	800a0c0 <__sinit>
 800ac4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d0f3      	beq.n	800ac3a <_fflush_r+0xa>
 800ac52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac54:	07d0      	lsls	r0, r2, #31
 800ac56:	d404      	bmi.n	800ac62 <_fflush_r+0x32>
 800ac58:	0599      	lsls	r1, r3, #22
 800ac5a:	d402      	bmi.n	800ac62 <_fflush_r+0x32>
 800ac5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac5e:	f7ff fb8a 	bl	800a376 <__retarget_lock_acquire_recursive>
 800ac62:	4628      	mov	r0, r5
 800ac64:	4621      	mov	r1, r4
 800ac66:	f7ff ff5f 	bl	800ab28 <__sflush_r>
 800ac6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac6c:	07da      	lsls	r2, r3, #31
 800ac6e:	4605      	mov	r5, r0
 800ac70:	d4e4      	bmi.n	800ac3c <_fflush_r+0xc>
 800ac72:	89a3      	ldrh	r3, [r4, #12]
 800ac74:	059b      	lsls	r3, r3, #22
 800ac76:	d4e1      	bmi.n	800ac3c <_fflush_r+0xc>
 800ac78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac7a:	f7ff fb7d 	bl	800a378 <__retarget_lock_release_recursive>
 800ac7e:	e7dd      	b.n	800ac3c <_fflush_r+0xc>

0800ac80 <__swbuf_r>:
 800ac80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac82:	460e      	mov	r6, r1
 800ac84:	4614      	mov	r4, r2
 800ac86:	4605      	mov	r5, r0
 800ac88:	b118      	cbz	r0, 800ac92 <__swbuf_r+0x12>
 800ac8a:	6a03      	ldr	r3, [r0, #32]
 800ac8c:	b90b      	cbnz	r3, 800ac92 <__swbuf_r+0x12>
 800ac8e:	f7ff fa17 	bl	800a0c0 <__sinit>
 800ac92:	69a3      	ldr	r3, [r4, #24]
 800ac94:	60a3      	str	r3, [r4, #8]
 800ac96:	89a3      	ldrh	r3, [r4, #12]
 800ac98:	071a      	lsls	r2, r3, #28
 800ac9a:	d501      	bpl.n	800aca0 <__swbuf_r+0x20>
 800ac9c:	6923      	ldr	r3, [r4, #16]
 800ac9e:	b943      	cbnz	r3, 800acb2 <__swbuf_r+0x32>
 800aca0:	4621      	mov	r1, r4
 800aca2:	4628      	mov	r0, r5
 800aca4:	f000 f82a 	bl	800acfc <__swsetup_r>
 800aca8:	b118      	cbz	r0, 800acb2 <__swbuf_r+0x32>
 800acaa:	f04f 37ff 	mov.w	r7, #4294967295
 800acae:	4638      	mov	r0, r7
 800acb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	6922      	ldr	r2, [r4, #16]
 800acb6:	1a98      	subs	r0, r3, r2
 800acb8:	6963      	ldr	r3, [r4, #20]
 800acba:	b2f6      	uxtb	r6, r6
 800acbc:	4283      	cmp	r3, r0
 800acbe:	4637      	mov	r7, r6
 800acc0:	dc05      	bgt.n	800acce <__swbuf_r+0x4e>
 800acc2:	4621      	mov	r1, r4
 800acc4:	4628      	mov	r0, r5
 800acc6:	f7ff ffb3 	bl	800ac30 <_fflush_r>
 800acca:	2800      	cmp	r0, #0
 800accc:	d1ed      	bne.n	800acaa <__swbuf_r+0x2a>
 800acce:	68a3      	ldr	r3, [r4, #8]
 800acd0:	3b01      	subs	r3, #1
 800acd2:	60a3      	str	r3, [r4, #8]
 800acd4:	6823      	ldr	r3, [r4, #0]
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	6022      	str	r2, [r4, #0]
 800acda:	701e      	strb	r6, [r3, #0]
 800acdc:	6962      	ldr	r2, [r4, #20]
 800acde:	1c43      	adds	r3, r0, #1
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d004      	beq.n	800acee <__swbuf_r+0x6e>
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	07db      	lsls	r3, r3, #31
 800ace8:	d5e1      	bpl.n	800acae <__swbuf_r+0x2e>
 800acea:	2e0a      	cmp	r6, #10
 800acec:	d1df      	bne.n	800acae <__swbuf_r+0x2e>
 800acee:	4621      	mov	r1, r4
 800acf0:	4628      	mov	r0, r5
 800acf2:	f7ff ff9d 	bl	800ac30 <_fflush_r>
 800acf6:	2800      	cmp	r0, #0
 800acf8:	d0d9      	beq.n	800acae <__swbuf_r+0x2e>
 800acfa:	e7d6      	b.n	800acaa <__swbuf_r+0x2a>

0800acfc <__swsetup_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4b29      	ldr	r3, [pc, #164]	@ (800ada4 <__swsetup_r+0xa8>)
 800ad00:	4605      	mov	r5, r0
 800ad02:	6818      	ldr	r0, [r3, #0]
 800ad04:	460c      	mov	r4, r1
 800ad06:	b118      	cbz	r0, 800ad10 <__swsetup_r+0x14>
 800ad08:	6a03      	ldr	r3, [r0, #32]
 800ad0a:	b90b      	cbnz	r3, 800ad10 <__swsetup_r+0x14>
 800ad0c:	f7ff f9d8 	bl	800a0c0 <__sinit>
 800ad10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad14:	0719      	lsls	r1, r3, #28
 800ad16:	d422      	bmi.n	800ad5e <__swsetup_r+0x62>
 800ad18:	06da      	lsls	r2, r3, #27
 800ad1a:	d407      	bmi.n	800ad2c <__swsetup_r+0x30>
 800ad1c:	2209      	movs	r2, #9
 800ad1e:	602a      	str	r2, [r5, #0]
 800ad20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad24:	81a3      	strh	r3, [r4, #12]
 800ad26:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2a:	e033      	b.n	800ad94 <__swsetup_r+0x98>
 800ad2c:	0758      	lsls	r0, r3, #29
 800ad2e:	d512      	bpl.n	800ad56 <__swsetup_r+0x5a>
 800ad30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad32:	b141      	cbz	r1, 800ad46 <__swsetup_r+0x4a>
 800ad34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad38:	4299      	cmp	r1, r3
 800ad3a:	d002      	beq.n	800ad42 <__swsetup_r+0x46>
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	f7ff fb2b 	bl	800a398 <_free_r>
 800ad42:	2300      	movs	r3, #0
 800ad44:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad46:	89a3      	ldrh	r3, [r4, #12]
 800ad48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad4c:	81a3      	strh	r3, [r4, #12]
 800ad4e:	2300      	movs	r3, #0
 800ad50:	6063      	str	r3, [r4, #4]
 800ad52:	6923      	ldr	r3, [r4, #16]
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	89a3      	ldrh	r3, [r4, #12]
 800ad58:	f043 0308 	orr.w	r3, r3, #8
 800ad5c:	81a3      	strh	r3, [r4, #12]
 800ad5e:	6923      	ldr	r3, [r4, #16]
 800ad60:	b94b      	cbnz	r3, 800ad76 <__swsetup_r+0x7a>
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad6c:	d003      	beq.n	800ad76 <__swsetup_r+0x7a>
 800ad6e:	4621      	mov	r1, r4
 800ad70:	4628      	mov	r0, r5
 800ad72:	f000 f84f 	bl	800ae14 <__smakebuf_r>
 800ad76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad7a:	f013 0201 	ands.w	r2, r3, #1
 800ad7e:	d00a      	beq.n	800ad96 <__swsetup_r+0x9a>
 800ad80:	2200      	movs	r2, #0
 800ad82:	60a2      	str	r2, [r4, #8]
 800ad84:	6962      	ldr	r2, [r4, #20]
 800ad86:	4252      	negs	r2, r2
 800ad88:	61a2      	str	r2, [r4, #24]
 800ad8a:	6922      	ldr	r2, [r4, #16]
 800ad8c:	b942      	cbnz	r2, 800ada0 <__swsetup_r+0xa4>
 800ad8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad92:	d1c5      	bne.n	800ad20 <__swsetup_r+0x24>
 800ad94:	bd38      	pop	{r3, r4, r5, pc}
 800ad96:	0799      	lsls	r1, r3, #30
 800ad98:	bf58      	it	pl
 800ad9a:	6962      	ldrpl	r2, [r4, #20]
 800ad9c:	60a2      	str	r2, [r4, #8]
 800ad9e:	e7f4      	b.n	800ad8a <__swsetup_r+0x8e>
 800ada0:	2000      	movs	r0, #0
 800ada2:	e7f7      	b.n	800ad94 <__swsetup_r+0x98>
 800ada4:	20000020 	.word	0x20000020

0800ada8 <_sbrk_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4d06      	ldr	r5, [pc, #24]	@ (800adc4 <_sbrk_r+0x1c>)
 800adac:	2300      	movs	r3, #0
 800adae:	4604      	mov	r4, r0
 800adb0:	4608      	mov	r0, r1
 800adb2:	602b      	str	r3, [r5, #0]
 800adb4:	f7f7 f9b2 	bl	800211c <_sbrk>
 800adb8:	1c43      	adds	r3, r0, #1
 800adba:	d102      	bne.n	800adc2 <_sbrk_r+0x1a>
 800adbc:	682b      	ldr	r3, [r5, #0]
 800adbe:	b103      	cbz	r3, 800adc2 <_sbrk_r+0x1a>
 800adc0:	6023      	str	r3, [r4, #0]
 800adc2:	bd38      	pop	{r3, r4, r5, pc}
 800adc4:	200050dc 	.word	0x200050dc

0800adc8 <__swhatbuf_r>:
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	460c      	mov	r4, r1
 800adcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add0:	2900      	cmp	r1, #0
 800add2:	b096      	sub	sp, #88	@ 0x58
 800add4:	4615      	mov	r5, r2
 800add6:	461e      	mov	r6, r3
 800add8:	da0d      	bge.n	800adf6 <__swhatbuf_r+0x2e>
 800adda:	89a3      	ldrh	r3, [r4, #12]
 800addc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ade0:	f04f 0100 	mov.w	r1, #0
 800ade4:	bf14      	ite	ne
 800ade6:	2340      	movne	r3, #64	@ 0x40
 800ade8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800adec:	2000      	movs	r0, #0
 800adee:	6031      	str	r1, [r6, #0]
 800adf0:	602b      	str	r3, [r5, #0]
 800adf2:	b016      	add	sp, #88	@ 0x58
 800adf4:	bd70      	pop	{r4, r5, r6, pc}
 800adf6:	466a      	mov	r2, sp
 800adf8:	f000 f848 	bl	800ae8c <_fstat_r>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	dbec      	blt.n	800adda <__swhatbuf_r+0x12>
 800ae00:	9901      	ldr	r1, [sp, #4]
 800ae02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae0a:	4259      	negs	r1, r3
 800ae0c:	4159      	adcs	r1, r3
 800ae0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae12:	e7eb      	b.n	800adec <__swhatbuf_r+0x24>

0800ae14 <__smakebuf_r>:
 800ae14:	898b      	ldrh	r3, [r1, #12]
 800ae16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae18:	079d      	lsls	r5, r3, #30
 800ae1a:	4606      	mov	r6, r0
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	d507      	bpl.n	800ae30 <__smakebuf_r+0x1c>
 800ae20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	6123      	str	r3, [r4, #16]
 800ae28:	2301      	movs	r3, #1
 800ae2a:	6163      	str	r3, [r4, #20]
 800ae2c:	b003      	add	sp, #12
 800ae2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae30:	ab01      	add	r3, sp, #4
 800ae32:	466a      	mov	r2, sp
 800ae34:	f7ff ffc8 	bl	800adc8 <__swhatbuf_r>
 800ae38:	9f00      	ldr	r7, [sp, #0]
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	4639      	mov	r1, r7
 800ae3e:	4630      	mov	r0, r6
 800ae40:	f7ff fb16 	bl	800a470 <_malloc_r>
 800ae44:	b948      	cbnz	r0, 800ae5a <__smakebuf_r+0x46>
 800ae46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae4a:	059a      	lsls	r2, r3, #22
 800ae4c:	d4ee      	bmi.n	800ae2c <__smakebuf_r+0x18>
 800ae4e:	f023 0303 	bic.w	r3, r3, #3
 800ae52:	f043 0302 	orr.w	r3, r3, #2
 800ae56:	81a3      	strh	r3, [r4, #12]
 800ae58:	e7e2      	b.n	800ae20 <__smakebuf_r+0xc>
 800ae5a:	89a3      	ldrh	r3, [r4, #12]
 800ae5c:	6020      	str	r0, [r4, #0]
 800ae5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae62:	81a3      	strh	r3, [r4, #12]
 800ae64:	9b01      	ldr	r3, [sp, #4]
 800ae66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae6a:	b15b      	cbz	r3, 800ae84 <__smakebuf_r+0x70>
 800ae6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae70:	4630      	mov	r0, r6
 800ae72:	f000 f81d 	bl	800aeb0 <_isatty_r>
 800ae76:	b128      	cbz	r0, 800ae84 <__smakebuf_r+0x70>
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	f023 0303 	bic.w	r3, r3, #3
 800ae7e:	f043 0301 	orr.w	r3, r3, #1
 800ae82:	81a3      	strh	r3, [r4, #12]
 800ae84:	89a3      	ldrh	r3, [r4, #12]
 800ae86:	431d      	orrs	r5, r3
 800ae88:	81a5      	strh	r5, [r4, #12]
 800ae8a:	e7cf      	b.n	800ae2c <__smakebuf_r+0x18>

0800ae8c <_fstat_r>:
 800ae8c:	b538      	push	{r3, r4, r5, lr}
 800ae8e:	4d07      	ldr	r5, [pc, #28]	@ (800aeac <_fstat_r+0x20>)
 800ae90:	2300      	movs	r3, #0
 800ae92:	4604      	mov	r4, r0
 800ae94:	4608      	mov	r0, r1
 800ae96:	4611      	mov	r1, r2
 800ae98:	602b      	str	r3, [r5, #0]
 800ae9a:	f7f7 f916 	bl	80020ca <_fstat>
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	d102      	bne.n	800aea8 <_fstat_r+0x1c>
 800aea2:	682b      	ldr	r3, [r5, #0]
 800aea4:	b103      	cbz	r3, 800aea8 <_fstat_r+0x1c>
 800aea6:	6023      	str	r3, [r4, #0]
 800aea8:	bd38      	pop	{r3, r4, r5, pc}
 800aeaa:	bf00      	nop
 800aeac:	200050dc 	.word	0x200050dc

0800aeb0 <_isatty_r>:
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	4d06      	ldr	r5, [pc, #24]	@ (800aecc <_isatty_r+0x1c>)
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	4608      	mov	r0, r1
 800aeba:	602b      	str	r3, [r5, #0]
 800aebc:	f7f7 f915 	bl	80020ea <_isatty>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d102      	bne.n	800aeca <_isatty_r+0x1a>
 800aec4:	682b      	ldr	r3, [r5, #0]
 800aec6:	b103      	cbz	r3, 800aeca <_isatty_r+0x1a>
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	200050dc 	.word	0x200050dc

0800aed0 <_init>:
 800aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed2:	bf00      	nop
 800aed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aed6:	bc08      	pop	{r3}
 800aed8:	469e      	mov	lr, r3
 800aeda:	4770      	bx	lr

0800aedc <_fini>:
 800aedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aede:	bf00      	nop
 800aee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aee2:	bc08      	pop	{r3}
 800aee4:	469e      	mov	lr, r3
 800aee6:	4770      	bx	lr
